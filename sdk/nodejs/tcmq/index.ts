// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetQueueArgs, GetQueueResult, GetQueueOutputArgs } from "./getQueue";
export const getQueue: typeof import("./getQueue").getQueue = null as any;
export const getQueueOutput: typeof import("./getQueue").getQueueOutput = null as any;
utilities.lazyLoad(exports, ["getQueue","getQueueOutput"], () => require("./getQueue"));

export { GetSubscribeArgs, GetSubscribeResult, GetSubscribeOutputArgs } from "./getSubscribe";
export const getSubscribe: typeof import("./getSubscribe").getSubscribe = null as any;
export const getSubscribeOutput: typeof import("./getSubscribe").getSubscribeOutput = null as any;
utilities.lazyLoad(exports, ["getSubscribe","getSubscribeOutput"], () => require("./getSubscribe"));

export { GetTopicArgs, GetTopicResult, GetTopicOutputArgs } from "./getTopic";
export const getTopic: typeof import("./getTopic").getTopic = null as any;
export const getTopicOutput: typeof import("./getTopic").getTopicOutput = null as any;
utilities.lazyLoad(exports, ["getTopic","getTopicOutput"], () => require("./getTopic"));

export { QueueArgs, QueueState } from "./queue";
export type Queue = import("./queue").Queue;
export const Queue: typeof import("./queue").Queue = null as any;
utilities.lazyLoad(exports, ["Queue"], () => require("./queue"));

export { SubscribeArgs, SubscribeState } from "./subscribe";
export type Subscribe = import("./subscribe").Subscribe;
export const Subscribe: typeof import("./subscribe").Subscribe = null as any;
utilities.lazyLoad(exports, ["Subscribe"], () => require("./subscribe"));

export { TopicArgs, TopicState } from "./topic";
export type Topic = import("./topic").Topic;
export const Topic: typeof import("./topic").Topic = null as any;
utilities.lazyLoad(exports, ["Topic"], () => require("./topic"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Tcmq/queue:Queue":
                return new Queue(name, <any>undefined, { urn })
            case "tencentcloud:Tcmq/subscribe:Subscribe":
                return new Subscribe(name, <any>undefined, { urn })
            case "tencentcloud:Tcmq/topic:Topic":
                return new Topic(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Tcmq/queue", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tcmq/subscribe", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tcmq/topic", _module)
