// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Subscribe extends pulumi.CustomResource {
    /**
     * Get an existing Subscribe resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubscribeState, opts?: pulumi.CustomResourceOptions): Subscribe {
        return new Subscribe(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tcmq/subscribe:Subscribe';

    /**
     * Returns true if the given object is an instance of Subscribe.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subscribe {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subscribe.__pulumiType;
    }

    /**
     * The number of `BindingKey` cannot exceed 5, and the length of each `BindingKey` cannot exceed 64 bytes. This field
     * indicates the filtering policy for subscribing to and receiving messages. Each `BindingKey` includes up to 15 dots
     * (namely up to 16 segments).
     */
    public readonly bindingKeys!: pulumi.Output<string[] | undefined>;
    /**
     * `Endpoint` for notification receipt, which is distinguished by `Protocol`. For `http`, `Endpoint` must begin with
     * `http://` and `host` can be a domain name or IP. For `Queue`, enter `QueueName`. Note that currently the push service
     * cannot push messages to a VPC; therefore, if a VPC domain name or address is entered for `Endpoint`, pushed messages
     * will not be received. Currently, messages can be pushed only to the public network and classic network.
     */
    public readonly endpoint!: pulumi.Output<string>;
    /**
     * Message body tag (used for message filtering). The number of tags cannot exceed 5, and each tag can contain up to 16
     * characters. It is used in conjunction with the `MsgTag` parameter of `(Batch)PublishMessage`. Rules: 1. If `FilterTag`
     * is not configured, no matter whether `MsgTag` is configured, the subscription will receive all messages published to the
     * topic; 2. If the array of `FilterTag` values has a value, only when at least one of the values in the array also exists
     * in the array of `MsgTag` values (i.e., `FilterTag` and `MsgTag` have an intersection) can the subscription receive
     * messages published to the topic; 3. If the array of `FilterTag` values has a value, but `MsgTag` is not configured, then
     * no message published to the topic will be received, which can be considered as a special case of rule 2 as `FilterTag`
     * and `MsgTag` do not intersect in this case. The overall design idea of rules is based on the intention of the
     * subscriber.
     */
    public readonly filterTags!: pulumi.Output<string[] | undefined>;
    /**
     * Push content format. Valid values: 1. JSON; 2. SIMPLIFIED, i.e., the raw format. If `Protocol` is `queue`, this value
     * must be `SIMPLIFIED`. If `Protocol` is `http`, both options are acceptable, and the default value is `JSON`.
     */
    public readonly notifyContentFormat!: pulumi.Output<string | undefined>;
    /**
     * CMQ push server retry policy in case an error occurs while pushing a message to `Endpoint`. Valid values: 1.
     * `BACKOFF_RETRY`: backoff retry, which is to retry at a fixed interval, discard the message after a certain number of
     * retries, and continue to push the next message; 2. `EXPONENTIAL_DECAY_RETRY`: exponential decay retry, which is to retry
     * at an exponentially increasing interval, such as 1s, 2s, 4s, 8s, and so on. As a message can be retained in a topic for
     * one day, failed messages will be discarded at most after one day of retry. Default value: `EXPONENTIAL_DECAY_RETRY`.
     */
    public readonly notifyStrategy!: pulumi.Output<string | undefined>;
    /**
     * ubscription protocol. Currently, two protocols are supported: `http` and `queue`. To use the `http` protocol, you need
     * to build your own web server to receive messages. With the `queue` protocol, messages are automatically pushed to a CMQ
     * queue and you can pull them concurrently.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Subscription name, which must be unique in the same topic under the same account in the same region. It can contain up
     * to 64 letters, digits, and hyphens and must begin with a letter.
     */
    public readonly subscriptionName!: pulumi.Output<string>;
    /**
     * Tag description list.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64
     * letters, digits, and hyphens and must begin with a letter.
     */
    public readonly topicName!: pulumi.Output<string>;

    /**
     * Create a Subscribe resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubscribeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubscribeArgs | SubscribeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubscribeState | undefined;
            resourceInputs["bindingKeys"] = state ? state.bindingKeys : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["filterTags"] = state ? state.filterTags : undefined;
            resourceInputs["notifyContentFormat"] = state ? state.notifyContentFormat : undefined;
            resourceInputs["notifyStrategy"] = state ? state.notifyStrategy : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["subscriptionName"] = state ? state.subscriptionName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["topicName"] = state ? state.topicName : undefined;
        } else {
            const args = argsOrState as SubscribeArgs | undefined;
            if ((!args || args.endpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpoint'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.subscriptionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionName'");
            }
            if ((!args || args.topicName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicName'");
            }
            resourceInputs["bindingKeys"] = args ? args.bindingKeys : undefined;
            resourceInputs["endpoint"] = args ? args.endpoint : undefined;
            resourceInputs["filterTags"] = args ? args.filterTags : undefined;
            resourceInputs["notifyContentFormat"] = args ? args.notifyContentFormat : undefined;
            resourceInputs["notifyStrategy"] = args ? args.notifyStrategy : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["subscriptionName"] = args ? args.subscriptionName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["topicName"] = args ? args.topicName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subscribe.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Subscribe resources.
 */
export interface SubscribeState {
    /**
     * The number of `BindingKey` cannot exceed 5, and the length of each `BindingKey` cannot exceed 64 bytes. This field
     * indicates the filtering policy for subscribing to and receiving messages. Each `BindingKey` includes up to 15 dots
     * (namely up to 16 segments).
     */
    bindingKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * `Endpoint` for notification receipt, which is distinguished by `Protocol`. For `http`, `Endpoint` must begin with
     * `http://` and `host` can be a domain name or IP. For `Queue`, enter `QueueName`. Note that currently the push service
     * cannot push messages to a VPC; therefore, if a VPC domain name or address is entered for `Endpoint`, pushed messages
     * will not be received. Currently, messages can be pushed only to the public network and classic network.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * Message body tag (used for message filtering). The number of tags cannot exceed 5, and each tag can contain up to 16
     * characters. It is used in conjunction with the `MsgTag` parameter of `(Batch)PublishMessage`. Rules: 1. If `FilterTag`
     * is not configured, no matter whether `MsgTag` is configured, the subscription will receive all messages published to the
     * topic; 2. If the array of `FilterTag` values has a value, only when at least one of the values in the array also exists
     * in the array of `MsgTag` values (i.e., `FilterTag` and `MsgTag` have an intersection) can the subscription receive
     * messages published to the topic; 3. If the array of `FilterTag` values has a value, but `MsgTag` is not configured, then
     * no message published to the topic will be received, which can be considered as a special case of rule 2 as `FilterTag`
     * and `MsgTag` do not intersect in this case. The overall design idea of rules is based on the intention of the
     * subscriber.
     */
    filterTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Push content format. Valid values: 1. JSON; 2. SIMPLIFIED, i.e., the raw format. If `Protocol` is `queue`, this value
     * must be `SIMPLIFIED`. If `Protocol` is `http`, both options are acceptable, and the default value is `JSON`.
     */
    notifyContentFormat?: pulumi.Input<string>;
    /**
     * CMQ push server retry policy in case an error occurs while pushing a message to `Endpoint`. Valid values: 1.
     * `BACKOFF_RETRY`: backoff retry, which is to retry at a fixed interval, discard the message after a certain number of
     * retries, and continue to push the next message; 2. `EXPONENTIAL_DECAY_RETRY`: exponential decay retry, which is to retry
     * at an exponentially increasing interval, such as 1s, 2s, 4s, 8s, and so on. As a message can be retained in a topic for
     * one day, failed messages will be discarded at most after one day of retry. Default value: `EXPONENTIAL_DECAY_RETRY`.
     */
    notifyStrategy?: pulumi.Input<string>;
    /**
     * ubscription protocol. Currently, two protocols are supported: `http` and `queue`. To use the `http` protocol, you need
     * to build your own web server to receive messages. With the `queue` protocol, messages are automatically pushed to a CMQ
     * queue and you can pull them concurrently.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Subscription name, which must be unique in the same topic under the same account in the same region. It can contain up
     * to 64 letters, digits, and hyphens and must begin with a letter.
     */
    subscriptionName?: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64
     * letters, digits, and hyphens and must begin with a letter.
     */
    topicName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Subscribe resource.
 */
export interface SubscribeArgs {
    /**
     * The number of `BindingKey` cannot exceed 5, and the length of each `BindingKey` cannot exceed 64 bytes. This field
     * indicates the filtering policy for subscribing to and receiving messages. Each `BindingKey` includes up to 15 dots
     * (namely up to 16 segments).
     */
    bindingKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * `Endpoint` for notification receipt, which is distinguished by `Protocol`. For `http`, `Endpoint` must begin with
     * `http://` and `host` can be a domain name or IP. For `Queue`, enter `QueueName`. Note that currently the push service
     * cannot push messages to a VPC; therefore, if a VPC domain name or address is entered for `Endpoint`, pushed messages
     * will not be received. Currently, messages can be pushed only to the public network and classic network.
     */
    endpoint: pulumi.Input<string>;
    /**
     * Message body tag (used for message filtering). The number of tags cannot exceed 5, and each tag can contain up to 16
     * characters. It is used in conjunction with the `MsgTag` parameter of `(Batch)PublishMessage`. Rules: 1. If `FilterTag`
     * is not configured, no matter whether `MsgTag` is configured, the subscription will receive all messages published to the
     * topic; 2. If the array of `FilterTag` values has a value, only when at least one of the values in the array also exists
     * in the array of `MsgTag` values (i.e., `FilterTag` and `MsgTag` have an intersection) can the subscription receive
     * messages published to the topic; 3. If the array of `FilterTag` values has a value, but `MsgTag` is not configured, then
     * no message published to the topic will be received, which can be considered as a special case of rule 2 as `FilterTag`
     * and `MsgTag` do not intersect in this case. The overall design idea of rules is based on the intention of the
     * subscriber.
     */
    filterTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Push content format. Valid values: 1. JSON; 2. SIMPLIFIED, i.e., the raw format. If `Protocol` is `queue`, this value
     * must be `SIMPLIFIED`. If `Protocol` is `http`, both options are acceptable, and the default value is `JSON`.
     */
    notifyContentFormat?: pulumi.Input<string>;
    /**
     * CMQ push server retry policy in case an error occurs while pushing a message to `Endpoint`. Valid values: 1.
     * `BACKOFF_RETRY`: backoff retry, which is to retry at a fixed interval, discard the message after a certain number of
     * retries, and continue to push the next message; 2. `EXPONENTIAL_DECAY_RETRY`: exponential decay retry, which is to retry
     * at an exponentially increasing interval, such as 1s, 2s, 4s, 8s, and so on. As a message can be retained in a topic for
     * one day, failed messages will be discarded at most after one day of retry. Default value: `EXPONENTIAL_DECAY_RETRY`.
     */
    notifyStrategy?: pulumi.Input<string>;
    /**
     * ubscription protocol. Currently, two protocols are supported: `http` and `queue`. To use the `http` protocol, you need
     * to build your own web server to receive messages. With the `queue` protocol, messages are automatically pushed to a CMQ
     * queue and you can pull them concurrently.
     */
    protocol: pulumi.Input<string>;
    /**
     * Subscription name, which must be unique in the same topic under the same account in the same region. It can contain up
     * to 64 letters, digits, and hyphens and must begin with a letter.
     */
    subscriptionName: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64
     * letters, digits, and hyphens and must begin with a letter.
     */
    topicName: pulumi.Input<string>;
}
