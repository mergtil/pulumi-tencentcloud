// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export function getData(args: GetDataArgs, opts?: pulumi.InvokeOptions): Promise<GetDataResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:Monitor/getData:getData", {
        "dimensions": args.dimensions,
        "endTime": args.endTime,
        "metricName": args.metricName,
        "namespace": args.namespace,
        "period": args.period,
        "resultOutputFile": args.resultOutputFile,
        "startTime": args.startTime,
    }, opts);
}

/**
 * A collection of arguments for invoking getData.
 */
export interface GetDataArgs {
    dimensions: inputs.Monitor.GetDataDimension[];
    endTime: string;
    metricName: string;
    namespace: string;
    period?: number;
    resultOutputFile?: string;
    startTime: string;
}

/**
 * A collection of values returned by getData.
 */
export interface GetDataResult {
    readonly dimensions: outputs.Monitor.GetDataDimension[];
    readonly endTime: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly lists: outputs.Monitor.GetDataList[];
    readonly metricName: string;
    readonly namespace: string;
    readonly period?: number;
    readonly resultOutputFile?: string;
    readonly startTime: string;
}
export function getDataOutput(args: GetDataOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDataResult> {
    return pulumi.output(args).apply((a: any) => getData(a, opts))
}

/**
 * A collection of arguments for invoking getData.
 */
export interface GetDataOutputArgs {
    dimensions: pulumi.Input<pulumi.Input<inputs.Monitor.GetDataDimensionArgs>[]>;
    endTime: pulumi.Input<string>;
    metricName: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    resultOutputFile?: pulumi.Input<string>;
    startTime: pulumi.Input<string>;
}
