// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Invoker extends pulumi.CustomResource {
    /**
     * Get an existing Invoker resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InvokerState, opts?: pulumi.CustomResourceOptions): Invoker {
        return new Invoker(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tat/invoker:Invoker';

    /**
     * Returns true if the given object is an instance of Invoker.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Invoker {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Invoker.__pulumiType;
    }

    /**
     * Remote command ID.
     */
    public readonly commandId!: pulumi.Output<string>;
    /**
     * Creation time.
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * Whether to enable the invoker.
     */
    public /*out*/ readonly enable!: pulumi.Output<boolean>;
    /**
     * ID of the instance bound to the trigger. Up to 100 IDs are allowed.
     */
    public readonly instanceIds!: pulumi.Output<string[]>;
    /**
     * Invoker ID.
     */
    public /*out*/ readonly invokerId!: pulumi.Output<string>;
    /**
     * Invoker name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Custom parameters of the command.
     */
    public readonly parameters!: pulumi.Output<string | undefined>;
    /**
     * Settings required for a recurring invoker.
     */
    public readonly scheduleSettings!: pulumi.Output<outputs.Tat.InvokerScheduleSettings | undefined>;
    /**
     * Invoker type. It can only be `SCHEDULE` (recurring invokers).
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Modification time.
     */
    public /*out*/ readonly updatedTime!: pulumi.Output<string>;
    /**
     * The user who executes the command.
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a Invoker resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InvokerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InvokerArgs | InvokerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InvokerState | undefined;
            resourceInputs["commandId"] = state ? state.commandId : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["instanceIds"] = state ? state.instanceIds : undefined;
            resourceInputs["invokerId"] = state ? state.invokerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["scheduleSettings"] = state ? state.scheduleSettings : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedTime"] = state ? state.updatedTime : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as InvokerArgs | undefined;
            if ((!args || args.commandId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commandId'");
            }
            if ((!args || args.instanceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceIds'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["commandId"] = args ? args.commandId : undefined;
            resourceInputs["instanceIds"] = args ? args.instanceIds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["scheduleSettings"] = args ? args.scheduleSettings : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["enable"] = undefined /*out*/;
            resourceInputs["invokerId"] = undefined /*out*/;
            resourceInputs["updatedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Invoker.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Invoker resources.
 */
export interface InvokerState {
    /**
     * Remote command ID.
     */
    commandId?: pulumi.Input<string>;
    /**
     * Creation time.
     */
    createdTime?: pulumi.Input<string>;
    /**
     * Whether to enable the invoker.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * ID of the instance bound to the trigger. Up to 100 IDs are allowed.
     */
    instanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Invoker ID.
     */
    invokerId?: pulumi.Input<string>;
    /**
     * Invoker name.
     */
    name?: pulumi.Input<string>;
    /**
     * Custom parameters of the command.
     */
    parameters?: pulumi.Input<string>;
    /**
     * Settings required for a recurring invoker.
     */
    scheduleSettings?: pulumi.Input<inputs.Tat.InvokerScheduleSettings>;
    /**
     * Invoker type. It can only be `SCHEDULE` (recurring invokers).
     */
    type?: pulumi.Input<string>;
    /**
     * Modification time.
     */
    updatedTime?: pulumi.Input<string>;
    /**
     * The user who executes the command.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Invoker resource.
 */
export interface InvokerArgs {
    /**
     * Remote command ID.
     */
    commandId: pulumi.Input<string>;
    /**
     * ID of the instance bound to the trigger. Up to 100 IDs are allowed.
     */
    instanceIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Invoker name.
     */
    name?: pulumi.Input<string>;
    /**
     * Custom parameters of the command.
     */
    parameters?: pulumi.Input<string>;
    /**
     * Settings required for a recurring invoker.
     */
    scheduleSettings?: pulumi.Input<inputs.Tat.InvokerScheduleSettings>;
    /**
     * Invoker type. It can only be `SCHEDULE` (recurring invokers).
     */
    type: pulumi.Input<string>;
    /**
     * The user who executes the command.
     */
    username?: pulumi.Input<string>;
}
