// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class File extends pulumi.CustomResource {
    /**
     * Get an existing File resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileState, opts?: pulumi.CustomResourceOptions): File {
        return new File(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Pts/file:File';

    /**
     * Returns true if the given object is an instance of File.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is File {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === File.__pulumiType;
    }

    /**
     * File id.
     */
    public readonly fileId!: pulumi.Output<string>;
    /**
     * Files in a folder.
     */
    public readonly fileInfos!: pulumi.Output<outputs.Pts.FileFileInfo[] | undefined>;
    /**
     * The first few lines of data.
     */
    public readonly headLines!: pulumi.Output<string[] | undefined>;
    /**
     * Meter head.
     */
    public readonly headerColumns!: pulumi.Output<string[] | undefined>;
    /**
     * Whether the header is in the file.
     */
    public readonly headerInFile!: pulumi.Output<boolean | undefined>;
    /**
     * File kind, parameter file-1, protocol file-2, request file-3.
     */
    public readonly kind!: pulumi.Output<number>;
    /**
     * Line count.
     */
    public readonly lineCount!: pulumi.Output<number | undefined>;
    /**
     * File name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Project id.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * File size.
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * The last few lines of data.
     */
    public readonly tailLines!: pulumi.Output<string[] | undefined>;
    /**
     * File type, folder-folder.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a File resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileArgs | FileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileState | undefined;
            resourceInputs["fileId"] = state ? state.fileId : undefined;
            resourceInputs["fileInfos"] = state ? state.fileInfos : undefined;
            resourceInputs["headLines"] = state ? state.headLines : undefined;
            resourceInputs["headerColumns"] = state ? state.headerColumns : undefined;
            resourceInputs["headerInFile"] = state ? state.headerInFile : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["lineCount"] = state ? state.lineCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["tailLines"] = state ? state.tailLines : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as FileArgs | undefined;
            if ((!args || args.fileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileId'");
            }
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["fileId"] = args ? args.fileId : undefined;
            resourceInputs["fileInfos"] = args ? args.fileInfos : undefined;
            resourceInputs["headLines"] = args ? args.headLines : undefined;
            resourceInputs["headerColumns"] = args ? args.headerColumns : undefined;
            resourceInputs["headerInFile"] = args ? args.headerInFile : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["lineCount"] = args ? args.lineCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["tailLines"] = args ? args.tailLines : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(File.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering File resources.
 */
export interface FileState {
    /**
     * File id.
     */
    fileId?: pulumi.Input<string>;
    /**
     * Files in a folder.
     */
    fileInfos?: pulumi.Input<pulumi.Input<inputs.Pts.FileFileInfo>[]>;
    /**
     * The first few lines of data.
     */
    headLines?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Meter head.
     */
    headerColumns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the header is in the file.
     */
    headerInFile?: pulumi.Input<boolean>;
    /**
     * File kind, parameter file-1, protocol file-2, request file-3.
     */
    kind?: pulumi.Input<number>;
    /**
     * Line count.
     */
    lineCount?: pulumi.Input<number>;
    /**
     * File name.
     */
    name?: pulumi.Input<string>;
    /**
     * Project id.
     */
    projectId?: pulumi.Input<string>;
    /**
     * File size.
     */
    size?: pulumi.Input<number>;
    /**
     * The last few lines of data.
     */
    tailLines?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * File type, folder-folder.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a File resource.
 */
export interface FileArgs {
    /**
     * File id.
     */
    fileId: pulumi.Input<string>;
    /**
     * Files in a folder.
     */
    fileInfos?: pulumi.Input<pulumi.Input<inputs.Pts.FileFileInfo>[]>;
    /**
     * The first few lines of data.
     */
    headLines?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Meter head.
     */
    headerColumns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the header is in the file.
     */
    headerInFile?: pulumi.Input<boolean>;
    /**
     * File kind, parameter file-1, protocol file-2, request file-3.
     */
    kind: pulumi.Input<number>;
    /**
     * Line count.
     */
    lineCount?: pulumi.Input<number>;
    /**
     * File name.
     */
    name?: pulumi.Input<string>;
    /**
     * Project id.
     */
    projectId: pulumi.Input<string>;
    /**
     * File size.
     */
    size: pulumi.Input<number>;
    /**
     * The last few lines of data.
     */
    tailLines?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * File type, folder-folder.
     */
    type: pulumi.Input<string>;
}
