// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Clickhouse/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * Billing type: `PREPAID` prepaid, `POSTPAID_BY_HOUR` postpaid.
     */
    public readonly chargeType!: pulumi.Output<string>;
    /**
     * CLS log set id.
     */
    public readonly clsLogSetId!: pulumi.Output<string>;
    /**
     * ZK node.
     */
    public readonly commonSpec!: pulumi.Output<outputs.Clickhouse.InstanceCommonSpec>;
    /**
     * COS bucket name.
     */
    public readonly cosBucketName!: pulumi.Output<string>;
    /**
     * Data spec.
     */
    public readonly dataSpec!: pulumi.Output<outputs.Clickhouse.InstanceDataSpec>;
    /**
     * Expire time.
     */
    public /*out*/ readonly expireTime!: pulumi.Output<string>;
    /**
     * Whether it is highly available.
     */
    public readonly haFlag!: pulumi.Output<boolean>;
    /**
     * Whether ZK is highly available.
     */
    public readonly haZk!: pulumi.Output<boolean>;
    /**
     * Instance name.
     */
    public readonly instanceName!: pulumi.Output<string>;
    /**
     * Whether it is mounted on a bare disk.
     */
    public readonly mountDiskType!: pulumi.Output<number>;
    /**
     * Product version.
     */
    public readonly productVersion!: pulumi.Output<string>;
    /**
     * PREPAID needs to be passed. Whether to renew automatically. 1 means auto renewal is enabled.
     */
    public readonly renewFlag!: pulumi.Output<number>;
    /**
     * Subnet.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * Tag description list.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any}>;
    /**
     * Prepaid needs to be delivered, billing time length, how many months.
     */
    public readonly timeSpan!: pulumi.Output<number | undefined>;
    /**
     * Private network.
     */
    public readonly vpcId!: pulumi.Output<string>;
    /**
     * Availability zone.
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["chargeType"] = state ? state.chargeType : undefined;
            resourceInputs["clsLogSetId"] = state ? state.clsLogSetId : undefined;
            resourceInputs["commonSpec"] = state ? state.commonSpec : undefined;
            resourceInputs["cosBucketName"] = state ? state.cosBucketName : undefined;
            resourceInputs["dataSpec"] = state ? state.dataSpec : undefined;
            resourceInputs["expireTime"] = state ? state.expireTime : undefined;
            resourceInputs["haFlag"] = state ? state.haFlag : undefined;
            resourceInputs["haZk"] = state ? state.haZk : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["mountDiskType"] = state ? state.mountDiskType : undefined;
            resourceInputs["productVersion"] = state ? state.productVersion : undefined;
            resourceInputs["renewFlag"] = state ? state.renewFlag : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeSpan"] = state ? state.timeSpan : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.chargeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'chargeType'");
            }
            if ((!args || args.dataSpec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSpec'");
            }
            if ((!args || args.haFlag === undefined) && !opts.urn) {
                throw new Error("Missing required property 'haFlag'");
            }
            if ((!args || args.instanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            if ((!args || args.productVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productVersion'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["chargeType"] = args ? args.chargeType : undefined;
            resourceInputs["clsLogSetId"] = args ? args.clsLogSetId : undefined;
            resourceInputs["commonSpec"] = args ? args.commonSpec : undefined;
            resourceInputs["cosBucketName"] = args ? args.cosBucketName : undefined;
            resourceInputs["dataSpec"] = args ? args.dataSpec : undefined;
            resourceInputs["haFlag"] = args ? args.haFlag : undefined;
            resourceInputs["haZk"] = args ? args.haZk : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["mountDiskType"] = args ? args.mountDiskType : undefined;
            resourceInputs["productVersion"] = args ? args.productVersion : undefined;
            resourceInputs["renewFlag"] = args ? args.renewFlag : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeSpan"] = args ? args.timeSpan : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["expireTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * Billing type: `PREPAID` prepaid, `POSTPAID_BY_HOUR` postpaid.
     */
    chargeType?: pulumi.Input<string>;
    /**
     * CLS log set id.
     */
    clsLogSetId?: pulumi.Input<string>;
    /**
     * ZK node.
     */
    commonSpec?: pulumi.Input<inputs.Clickhouse.InstanceCommonSpec>;
    /**
     * COS bucket name.
     */
    cosBucketName?: pulumi.Input<string>;
    /**
     * Data spec.
     */
    dataSpec?: pulumi.Input<inputs.Clickhouse.InstanceDataSpec>;
    /**
     * Expire time.
     */
    expireTime?: pulumi.Input<string>;
    /**
     * Whether it is highly available.
     */
    haFlag?: pulumi.Input<boolean>;
    /**
     * Whether ZK is highly available.
     */
    haZk?: pulumi.Input<boolean>;
    /**
     * Instance name.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * Whether it is mounted on a bare disk.
     */
    mountDiskType?: pulumi.Input<number>;
    /**
     * Product version.
     */
    productVersion?: pulumi.Input<string>;
    /**
     * PREPAID needs to be passed. Whether to renew automatically. 1 means auto renewal is enabled.
     */
    renewFlag?: pulumi.Input<number>;
    /**
     * Subnet.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Prepaid needs to be delivered, billing time length, how many months.
     */
    timeSpan?: pulumi.Input<number>;
    /**
     * Private network.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * Availability zone.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * Billing type: `PREPAID` prepaid, `POSTPAID_BY_HOUR` postpaid.
     */
    chargeType: pulumi.Input<string>;
    /**
     * CLS log set id.
     */
    clsLogSetId?: pulumi.Input<string>;
    /**
     * ZK node.
     */
    commonSpec?: pulumi.Input<inputs.Clickhouse.InstanceCommonSpec>;
    /**
     * COS bucket name.
     */
    cosBucketName?: pulumi.Input<string>;
    /**
     * Data spec.
     */
    dataSpec: pulumi.Input<inputs.Clickhouse.InstanceDataSpec>;
    /**
     * Whether it is highly available.
     */
    haFlag: pulumi.Input<boolean>;
    /**
     * Whether ZK is highly available.
     */
    haZk?: pulumi.Input<boolean>;
    /**
     * Instance name.
     */
    instanceName: pulumi.Input<string>;
    /**
     * Whether it is mounted on a bare disk.
     */
    mountDiskType?: pulumi.Input<number>;
    /**
     * Product version.
     */
    productVersion: pulumi.Input<string>;
    /**
     * PREPAID needs to be passed. Whether to renew automatically. 1 means auto renewal is enabled.
     */
    renewFlag?: pulumi.Input<number>;
    /**
     * Subnet.
     */
    subnetId: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Prepaid needs to be delivered, billing time length, how many months.
     */
    timeSpan?: pulumi.Input<number>;
    /**
     * Private network.
     */
    vpcId: pulumi.Input<string>;
    /**
     * Availability zone.
     */
    zone: pulumi.Input<string>;
}
