// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class MigrateService extends pulumi.CustomResource {
    /**
     * Get an existing MigrateService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MigrateServiceState, opts?: pulumi.CustomResourceOptions): MigrateService {
        return new MigrateService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Dts/migrateService:MigrateService';

    /**
     * Returns true if the given object is an instance of MigrateService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MigrateService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MigrateService.__pulumiType;
    }

    /**
     * destination database type, optional value is mysql/redis/percona/mongodb/postgresql/sqlserver/mariadb.
     */
    public readonly dstDatabaseType!: pulumi.Output<string>;
    /**
     * destination region.
     */
    public readonly dstRegion!: pulumi.Output<string>;
    /**
     * instance class, optional value is small/medium/large/xlarge/2xlarge.
     */
    public readonly instanceClass!: pulumi.Output<string>;
    /**
     * job name.
     */
    public readonly jobName!: pulumi.Output<string | undefined>;
    /**
     * source database type, optional value is mysql/redis/percona/mongodb/postgresql/sqlserver/mariadb.
     */
    public readonly srcDatabaseType!: pulumi.Output<string>;
    /**
     * source region.
     */
    public readonly srcRegion!: pulumi.Output<string>;
    /**
     * tags.
     */
    public readonly tags!: pulumi.Output<outputs.Dts.MigrateServiceTag[] | undefined>;

    /**
     * Create a MigrateService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MigrateServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MigrateServiceArgs | MigrateServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MigrateServiceState | undefined;
            resourceInputs["dstDatabaseType"] = state ? state.dstDatabaseType : undefined;
            resourceInputs["dstRegion"] = state ? state.dstRegion : undefined;
            resourceInputs["instanceClass"] = state ? state.instanceClass : undefined;
            resourceInputs["jobName"] = state ? state.jobName : undefined;
            resourceInputs["srcDatabaseType"] = state ? state.srcDatabaseType : undefined;
            resourceInputs["srcRegion"] = state ? state.srcRegion : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as MigrateServiceArgs | undefined;
            if ((!args || args.dstDatabaseType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstDatabaseType'");
            }
            if ((!args || args.dstRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstRegion'");
            }
            if ((!args || args.instanceClass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceClass'");
            }
            if ((!args || args.srcDatabaseType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcDatabaseType'");
            }
            if ((!args || args.srcRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcRegion'");
            }
            resourceInputs["dstDatabaseType"] = args ? args.dstDatabaseType : undefined;
            resourceInputs["dstRegion"] = args ? args.dstRegion : undefined;
            resourceInputs["instanceClass"] = args ? args.instanceClass : undefined;
            resourceInputs["jobName"] = args ? args.jobName : undefined;
            resourceInputs["srcDatabaseType"] = args ? args.srcDatabaseType : undefined;
            resourceInputs["srcRegion"] = args ? args.srcRegion : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MigrateService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MigrateService resources.
 */
export interface MigrateServiceState {
    /**
     * destination database type, optional value is mysql/redis/percona/mongodb/postgresql/sqlserver/mariadb.
     */
    dstDatabaseType?: pulumi.Input<string>;
    /**
     * destination region.
     */
    dstRegion?: pulumi.Input<string>;
    /**
     * instance class, optional value is small/medium/large/xlarge/2xlarge.
     */
    instanceClass?: pulumi.Input<string>;
    /**
     * job name.
     */
    jobName?: pulumi.Input<string>;
    /**
     * source database type, optional value is mysql/redis/percona/mongodb/postgresql/sqlserver/mariadb.
     */
    srcDatabaseType?: pulumi.Input<string>;
    /**
     * source region.
     */
    srcRegion?: pulumi.Input<string>;
    /**
     * tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Dts.MigrateServiceTag>[]>;
}

/**
 * The set of arguments for constructing a MigrateService resource.
 */
export interface MigrateServiceArgs {
    /**
     * destination database type, optional value is mysql/redis/percona/mongodb/postgresql/sqlserver/mariadb.
     */
    dstDatabaseType: pulumi.Input<string>;
    /**
     * destination region.
     */
    dstRegion: pulumi.Input<string>;
    /**
     * instance class, optional value is small/medium/large/xlarge/2xlarge.
     */
    instanceClass: pulumi.Input<string>;
    /**
     * job name.
     */
    jobName?: pulumi.Input<string>;
    /**
     * source database type, optional value is mysql/redis/percona/mongodb/postgresql/sqlserver/mariadb.
     */
    srcDatabaseType: pulumi.Input<string>;
    /**
     * source region.
     */
    srcRegion: pulumi.Input<string>;
    /**
     * tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.Dts.MigrateServiceTag>[]>;
}
