// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class SyncImage extends pulumi.CustomResource {
    /**
     * Get an existing SyncImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SyncImageState, opts?: pulumi.CustomResourceOptions): SyncImage {
        return new SyncImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Cvm/syncImage:SyncImage';

    /**
     * Returns true if the given object is an instance of SyncImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SyncImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SyncImage.__pulumiType;
    }

    /**
     * List of destination regions for synchronization. Limits: It must be a valid region. For a custom image, the destination
     * region cannot be the source region. For a shared image, the destination region must be the source region, which
     * indicates to create a copy of the image as a custom image in the same region.
     */
    public readonly destinationRegions!: pulumi.Output<string[]>;
    /**
     * Checks whether image synchronization can be initiated.
     */
    public readonly dryRun!: pulumi.Output<boolean | undefined>;
    /**
     * Image ID. The specified image must meet the following requirement: the images must be in the `NORMAL` state.
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * Destination image name.
     */
    public readonly imageName!: pulumi.Output<string | undefined>;
    /**
     * Whether to return the ID of image created in the destination region.
     */
    public readonly imageSetRequired!: pulumi.Output<boolean | undefined>;

    /**
     * Create a SyncImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SyncImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SyncImageArgs | SyncImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SyncImageState | undefined;
            resourceInputs["destinationRegions"] = state ? state.destinationRegions : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["imageSetRequired"] = state ? state.imageSetRequired : undefined;
        } else {
            const args = argsOrState as SyncImageArgs | undefined;
            if ((!args || args.destinationRegions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationRegions'");
            }
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            resourceInputs["destinationRegions"] = args ? args.destinationRegions : undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["imageSetRequired"] = args ? args.imageSetRequired : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SyncImage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SyncImage resources.
 */
export interface SyncImageState {
    /**
     * List of destination regions for synchronization. Limits: It must be a valid region. For a custom image, the destination
     * region cannot be the source region. For a shared image, the destination region must be the source region, which
     * indicates to create a copy of the image as a custom image in the same region.
     */
    destinationRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Checks whether image synchronization can be initiated.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Image ID. The specified image must meet the following requirement: the images must be in the `NORMAL` state.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Destination image name.
     */
    imageName?: pulumi.Input<string>;
    /**
     * Whether to return the ID of image created in the destination region.
     */
    imageSetRequired?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SyncImage resource.
 */
export interface SyncImageArgs {
    /**
     * List of destination regions for synchronization. Limits: It must be a valid region. For a custom image, the destination
     * region cannot be the source region. For a shared image, the destination region must be the source region, which
     * indicates to create a copy of the image as a custom image in the same region.
     */
    destinationRegions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Checks whether image synchronization can be initiated.
     */
    dryRun?: pulumi.Input<boolean>;
    /**
     * Image ID. The specified image must meet the following requirement: the images must be in the `NORMAL` state.
     */
    imageId: pulumi.Input<string>;
    /**
     * Destination image name.
     */
    imageName?: pulumi.Input<string>;
    /**
     * Whether to return the ID of image created in the destination region.
     */
    imageSetRequired?: pulumi.Input<boolean>;
}
