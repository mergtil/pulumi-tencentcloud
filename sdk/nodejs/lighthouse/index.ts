// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApplyDiskBackupArgs, ApplyDiskBackupState } from "./applyDiskBackup";
export type ApplyDiskBackup = import("./applyDiskBackup").ApplyDiskBackup;
export const ApplyDiskBackup: typeof import("./applyDiskBackup").ApplyDiskBackup = null as any;
utilities.lazyLoad(exports, ["ApplyDiskBackup"], () => require("./applyDiskBackup"));

export { ApplyInstanceSnapshotArgs, ApplyInstanceSnapshotState } from "./applyInstanceSnapshot";
export type ApplyInstanceSnapshot = import("./applyInstanceSnapshot").ApplyInstanceSnapshot;
export const ApplyInstanceSnapshot: typeof import("./applyInstanceSnapshot").ApplyInstanceSnapshot = null as any;
utilities.lazyLoad(exports, ["ApplyInstanceSnapshot"], () => require("./applyInstanceSnapshot"));

export { BlueprintArgs, BlueprintState } from "./blueprint";
export type Blueprint = import("./blueprint").Blueprint;
export const Blueprint: typeof import("./blueprint").Blueprint = null as any;
utilities.lazyLoad(exports, ["Blueprint"], () => require("./blueprint"));

export { DiskArgs, DiskState } from "./disk";
export type Disk = import("./disk").Disk;
export const Disk: typeof import("./disk").Disk = null as any;
utilities.lazyLoad(exports, ["Disk"], () => require("./disk"));

export { DiskAttachmentArgs, DiskAttachmentState } from "./diskAttachment";
export type DiskAttachment = import("./diskAttachment").DiskAttachment;
export const DiskAttachment: typeof import("./diskAttachment").DiskAttachment = null as any;
utilities.lazyLoad(exports, ["DiskAttachment"], () => require("./diskAttachment"));

export { DiskBackupArgs, DiskBackupState } from "./diskBackup";
export type DiskBackup = import("./diskBackup").DiskBackup;
export const DiskBackup: typeof import("./diskBackup").DiskBackup = null as any;
utilities.lazyLoad(exports, ["DiskBackup"], () => require("./diskBackup"));

export { FirewallRuleArgs, FirewallRuleState } from "./firewallRule";
export type FirewallRule = import("./firewallRule").FirewallRule;
export const FirewallRule: typeof import("./firewallRule").FirewallRule = null as any;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));

export { FirewallTemplateArgs, FirewallTemplateState } from "./firewallTemplate";
export type FirewallTemplate = import("./firewallTemplate").FirewallTemplate;
export const FirewallTemplate: typeof import("./firewallTemplate").FirewallTemplate = null as any;
utilities.lazyLoad(exports, ["FirewallTemplate"], () => require("./firewallTemplate"));

export { GetAllSceneArgs, GetAllSceneResult, GetAllSceneOutputArgs } from "./getAllScene";
export const getAllScene: typeof import("./getAllScene").getAllScene = null as any;
export const getAllSceneOutput: typeof import("./getAllScene").getAllSceneOutput = null as any;
utilities.lazyLoad(exports, ["getAllScene","getAllSceneOutput"], () => require("./getAllScene"));

export { GetBundleArgs, GetBundleResult, GetBundleOutputArgs } from "./getBundle";
export const getBundle: typeof import("./getBundle").getBundle = null as any;
export const getBundleOutput: typeof import("./getBundle").getBundleOutput = null as any;
utilities.lazyLoad(exports, ["getBundle","getBundleOutput"], () => require("./getBundle"));

export { GetDiskConfigArgs, GetDiskConfigResult, GetDiskConfigOutputArgs } from "./getDiskConfig";
export const getDiskConfig: typeof import("./getDiskConfig").getDiskConfig = null as any;
export const getDiskConfigOutput: typeof import("./getDiskConfig").getDiskConfigOutput = null as any;
utilities.lazyLoad(exports, ["getDiskConfig","getDiskConfigOutput"], () => require("./getDiskConfig"));

export { GetDisksArgs, GetDisksResult, GetDisksOutputArgs } from "./getDisks";
export const getDisks: typeof import("./getDisks").getDisks = null as any;
export const getDisksOutput: typeof import("./getDisks").getDisksOutput = null as any;
utilities.lazyLoad(exports, ["getDisks","getDisksOutput"], () => require("./getDisks"));

export { GetFirewallRulesTemplateArgs, GetFirewallRulesTemplateResult, GetFirewallRulesTemplateOutputArgs } from "./getFirewallRulesTemplate";
export const getFirewallRulesTemplate: typeof import("./getFirewallRulesTemplate").getFirewallRulesTemplate = null as any;
export const getFirewallRulesTemplateOutput: typeof import("./getFirewallRulesTemplate").getFirewallRulesTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallRulesTemplate","getFirewallRulesTemplateOutput"], () => require("./getFirewallRulesTemplate"));

export { GetInstanceBlueprintArgs, GetInstanceBlueprintResult, GetInstanceBlueprintOutputArgs } from "./getInstanceBlueprint";
export const getInstanceBlueprint: typeof import("./getInstanceBlueprint").getInstanceBlueprint = null as any;
export const getInstanceBlueprintOutput: typeof import("./getInstanceBlueprint").getInstanceBlueprintOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceBlueprint","getInstanceBlueprintOutput"], () => require("./getInstanceBlueprint"));

export { GetInstanceDiskNumArgs, GetInstanceDiskNumResult, GetInstanceDiskNumOutputArgs } from "./getInstanceDiskNum";
export const getInstanceDiskNum: typeof import("./getInstanceDiskNum").getInstanceDiskNum = null as any;
export const getInstanceDiskNumOutput: typeof import("./getInstanceDiskNum").getInstanceDiskNumOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceDiskNum","getInstanceDiskNumOutput"], () => require("./getInstanceDiskNum"));

export { GetInstanceTrafficPackageArgs, GetInstanceTrafficPackageResult, GetInstanceTrafficPackageOutputArgs } from "./getInstanceTrafficPackage";
export const getInstanceTrafficPackage: typeof import("./getInstanceTrafficPackage").getInstanceTrafficPackage = null as any;
export const getInstanceTrafficPackageOutput: typeof import("./getInstanceTrafficPackage").getInstanceTrafficPackageOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceTrafficPackage","getInstanceTrafficPackageOutput"], () => require("./getInstanceTrafficPackage"));

export { GetInstanceVncUrlArgs, GetInstanceVncUrlResult, GetInstanceVncUrlOutputArgs } from "./getInstanceVncUrl";
export const getInstanceVncUrl: typeof import("./getInstanceVncUrl").getInstanceVncUrl = null as any;
export const getInstanceVncUrlOutput: typeof import("./getInstanceVncUrl").getInstanceVncUrlOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceVncUrl","getInstanceVncUrlOutput"], () => require("./getInstanceVncUrl"));

export { GetModifyInstanceBundleArgs, GetModifyInstanceBundleResult, GetModifyInstanceBundleOutputArgs } from "./getModifyInstanceBundle";
export const getModifyInstanceBundle: typeof import("./getModifyInstanceBundle").getModifyInstanceBundle = null as any;
export const getModifyInstanceBundleOutput: typeof import("./getModifyInstanceBundle").getModifyInstanceBundleOutput = null as any;
utilities.lazyLoad(exports, ["getModifyInstanceBundle","getModifyInstanceBundleOutput"], () => require("./getModifyInstanceBundle"));

export { GetRegionArgs, GetRegionResult, GetRegionOutputArgs } from "./getRegion";
export const getRegion: typeof import("./getRegion").getRegion = null as any;
export const getRegionOutput: typeof import("./getRegion").getRegionOutput = null as any;
utilities.lazyLoad(exports, ["getRegion","getRegionOutput"], () => require("./getRegion"));

export { GetResetInstanceBlueprintArgs, GetResetInstanceBlueprintResult, GetResetInstanceBlueprintOutputArgs } from "./getResetInstanceBlueprint";
export const getResetInstanceBlueprint: typeof import("./getResetInstanceBlueprint").getResetInstanceBlueprint = null as any;
export const getResetInstanceBlueprintOutput: typeof import("./getResetInstanceBlueprint").getResetInstanceBlueprintOutput = null as any;
utilities.lazyLoad(exports, ["getResetInstanceBlueprint","getResetInstanceBlueprintOutput"], () => require("./getResetInstanceBlueprint"));

export { GetSceneArgs, GetSceneResult, GetSceneOutputArgs } from "./getScene";
export const getScene: typeof import("./getScene").getScene = null as any;
export const getSceneOutput: typeof import("./getScene").getSceneOutput = null as any;
utilities.lazyLoad(exports, ["getScene","getSceneOutput"], () => require("./getScene"));

export { GetZoneArgs, GetZoneResult, GetZoneOutputArgs } from "./getZone";
export const getZone: typeof import("./getZone").getZone = null as any;
export const getZoneOutput: typeof import("./getZone").getZoneOutput = null as any;
utilities.lazyLoad(exports, ["getZone","getZoneOutput"], () => require("./getZone"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { KeyPairArgs, KeyPairState } from "./keyPair";
export type KeyPair = import("./keyPair").KeyPair;
export const KeyPair: typeof import("./keyPair").KeyPair = null as any;
utilities.lazyLoad(exports, ["KeyPair"], () => require("./keyPair"));

export { KeyPairAttachmentArgs, KeyPairAttachmentState } from "./keyPairAttachment";
export type KeyPairAttachment = import("./keyPairAttachment").KeyPairAttachment;
export const KeyPairAttachment: typeof import("./keyPairAttachment").KeyPairAttachment = null as any;
utilities.lazyLoad(exports, ["KeyPairAttachment"], () => require("./keyPairAttachment"));

export { RebootInstanceArgs, RebootInstanceState } from "./rebootInstance";
export type RebootInstance = import("./rebootInstance").RebootInstance;
export const RebootInstance: typeof import("./rebootInstance").RebootInstance = null as any;
utilities.lazyLoad(exports, ["RebootInstance"], () => require("./rebootInstance"));

export { RenewDiskArgs, RenewDiskState } from "./renewDisk";
export type RenewDisk = import("./renewDisk").RenewDisk;
export const RenewDisk: typeof import("./renewDisk").RenewDisk = null as any;
utilities.lazyLoad(exports, ["RenewDisk"], () => require("./renewDisk"));

export { RenewInstanceArgs, RenewInstanceState } from "./renewInstance";
export type RenewInstance = import("./renewInstance").RenewInstance;
export const RenewInstance: typeof import("./renewInstance").RenewInstance = null as any;
utilities.lazyLoad(exports, ["RenewInstance"], () => require("./renewInstance"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { StartInstanceArgs, StartInstanceState } from "./startInstance";
export type StartInstance = import("./startInstance").StartInstance;
export const StartInstance: typeof import("./startInstance").StartInstance = null as any;
utilities.lazyLoad(exports, ["StartInstance"], () => require("./startInstance"));

export { StopInstanceArgs, StopInstanceState } from "./stopInstance";
export type StopInstance = import("./stopInstance").StopInstance;
export const StopInstance: typeof import("./stopInstance").StopInstance = null as any;
utilities.lazyLoad(exports, ["StopInstance"], () => require("./stopInstance"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Lighthouse/applyDiskBackup:ApplyDiskBackup":
                return new ApplyDiskBackup(name, <any>undefined, { urn })
            case "tencentcloud:Lighthouse/applyInstanceSnapshot:ApplyInstanceSnapshot":
                return new ApplyInstanceSnapshot(name, <any>undefined, { urn })
            case "tencentcloud:Lighthouse/blueprint:Blueprint":
                return new Blueprint(name, <any>undefined, { urn })
            case "tencentcloud:Lighthouse/disk:Disk":
                return new Disk(name, <any>undefined, { urn })
            case "tencentcloud:Lighthouse/diskAttachment:DiskAttachment":
                return new DiskAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Lighthouse/diskBackup:DiskBackup":
                return new DiskBackup(name, <any>undefined, { urn })
            case "tencentcloud:Lighthouse/firewallRule:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "tencentcloud:Lighthouse/firewallTemplate:FirewallTemplate":
                return new FirewallTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Lighthouse/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "tencentcloud:Lighthouse/keyPair:KeyPair":
                return new KeyPair(name, <any>undefined, { urn })
            case "tencentcloud:Lighthouse/keyPairAttachment:KeyPairAttachment":
                return new KeyPairAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Lighthouse/rebootInstance:RebootInstance":
                return new RebootInstance(name, <any>undefined, { urn })
            case "tencentcloud:Lighthouse/renewDisk:RenewDisk":
                return new RenewDisk(name, <any>undefined, { urn })
            case "tencentcloud:Lighthouse/renewInstance:RenewInstance":
                return new RenewInstance(name, <any>undefined, { urn })
            case "tencentcloud:Lighthouse/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "tencentcloud:Lighthouse/startInstance:StartInstance":
                return new StartInstance(name, <any>undefined, { urn })
            case "tencentcloud:Lighthouse/stopInstance:StopInstance":
                return new StopInstance(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Lighthouse/applyDiskBackup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Lighthouse/applyInstanceSnapshot", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Lighthouse/blueprint", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Lighthouse/disk", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Lighthouse/diskAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Lighthouse/diskBackup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Lighthouse/firewallRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Lighthouse/firewallTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Lighthouse/instance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Lighthouse/keyPair", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Lighthouse/keyPairAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Lighthouse/rebootInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Lighthouse/renewDisk", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Lighthouse/renewInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Lighthouse/snapshot", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Lighthouse/startInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Lighthouse/stopInstance", _module)
