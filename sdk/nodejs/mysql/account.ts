// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Account extends pulumi.CustomResource {
    /**
     * Get an existing Account resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountState, opts?: pulumi.CustomResourceOptions): Account {
        return new Account(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Mysql/account:Account';

    /**
     * Returns true if the given object is an instance of Account.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Account {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Account.__pulumiType;
    }

    /**
     * Database description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Account host, default is `%`.
     */
    public readonly host!: pulumi.Output<string | undefined>;
    /**
     * The maximum number of available connections for a new account, the default value is 10240, and the maximum value that
     * can be set is 10240.
     */
    public readonly maxUserConnections!: pulumi.Output<number>;
    /**
     * Instance ID to which the account belongs.
     */
    public readonly mysqlId!: pulumi.Output<string>;
    /**
     * Account name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Operation password.
     */
    public readonly password!: pulumi.Output<string>;

    /**
     * Create a Account resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountArgs | AccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["maxUserConnections"] = state ? state.maxUserConnections : undefined;
            resourceInputs["mysqlId"] = state ? state.mysqlId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
        } else {
            const args = argsOrState as AccountArgs | undefined;
            if ((!args || args.mysqlId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mysqlId'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["maxUserConnections"] = args ? args.maxUserConnections : undefined;
            resourceInputs["mysqlId"] = args ? args.mysqlId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Account.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Account resources.
 */
export interface AccountState {
    /**
     * Database description.
     */
    description?: pulumi.Input<string>;
    /**
     * Account host, default is `%`.
     */
    host?: pulumi.Input<string>;
    /**
     * The maximum number of available connections for a new account, the default value is 10240, and the maximum value that
     * can be set is 10240.
     */
    maxUserConnections?: pulumi.Input<number>;
    /**
     * Instance ID to which the account belongs.
     */
    mysqlId?: pulumi.Input<string>;
    /**
     * Account name.
     */
    name?: pulumi.Input<string>;
    /**
     * Operation password.
     */
    password?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Account resource.
 */
export interface AccountArgs {
    /**
     * Database description.
     */
    description?: pulumi.Input<string>;
    /**
     * Account host, default is `%`.
     */
    host?: pulumi.Input<string>;
    /**
     * The maximum number of available connections for a new account, the default value is 10240, and the maximum value that
     * can be set is 10240.
     */
    maxUserConnections?: pulumi.Input<number>;
    /**
     * Instance ID to which the account belongs.
     */
    mysqlId: pulumi.Input<string>;
    /**
     * Account name.
     */
    name?: pulumi.Input<string>;
    /**
     * Operation password.
     */
    password: pulumi.Input<string>;
}
