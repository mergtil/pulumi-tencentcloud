// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class BackupPolicy extends pulumi.CustomResource {
    /**
     * Get an existing BackupPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupPolicyState, opts?: pulumi.CustomResourceOptions): BackupPolicy {
        return new BackupPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Mysql/backupPolicy:BackupPolicy';

    /**
     * Returns true if the given object is an instance of BackupPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackupPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackupPolicy.__pulumiType;
    }

    /**
     * Backup method. Supported values include: `physical` - physical backup.
     */
    public readonly backupModel!: pulumi.Output<string | undefined>;
    /**
     * Instance backup time, in the format of 'HH:mm-HH:mm'. Time setting interval is four hours. Default to `02:00-06:00`. The
     * following value can be supported: `02:00-06:00`, `06:00-10:00`, `10:00-14:00`, `14:00-18:00`, `18:00-22:00`, and
     * `22:00-02:00`.
     */
    public readonly backupTime!: pulumi.Output<string | undefined>;
    /**
     * Retention period for binlog in days.
     */
    public /*out*/ readonly binlogPeriod!: pulumi.Output<number>;
    /**
     * Instance ID to which policies will be applied.
     */
    public readonly mysqlId!: pulumi.Output<string>;
    /**
     * Instance backup retention days. Valid value ranges: [7~730]. And default value is `7`.
     */
    public readonly retentionPeriod!: pulumi.Output<number | undefined>;

    /**
     * Create a BackupPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupPolicyArgs | BackupPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupPolicyState | undefined;
            resourceInputs["backupModel"] = state ? state.backupModel : undefined;
            resourceInputs["backupTime"] = state ? state.backupTime : undefined;
            resourceInputs["binlogPeriod"] = state ? state.binlogPeriod : undefined;
            resourceInputs["mysqlId"] = state ? state.mysqlId : undefined;
            resourceInputs["retentionPeriod"] = state ? state.retentionPeriod : undefined;
        } else {
            const args = argsOrState as BackupPolicyArgs | undefined;
            if ((!args || args.mysqlId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mysqlId'");
            }
            resourceInputs["backupModel"] = args ? args.backupModel : undefined;
            resourceInputs["backupTime"] = args ? args.backupTime : undefined;
            resourceInputs["mysqlId"] = args ? args.mysqlId : undefined;
            resourceInputs["retentionPeriod"] = args ? args.retentionPeriod : undefined;
            resourceInputs["binlogPeriod"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackupPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BackupPolicy resources.
 */
export interface BackupPolicyState {
    /**
     * Backup method. Supported values include: `physical` - physical backup.
     */
    backupModel?: pulumi.Input<string>;
    /**
     * Instance backup time, in the format of 'HH:mm-HH:mm'. Time setting interval is four hours. Default to `02:00-06:00`. The
     * following value can be supported: `02:00-06:00`, `06:00-10:00`, `10:00-14:00`, `14:00-18:00`, `18:00-22:00`, and
     * `22:00-02:00`.
     */
    backupTime?: pulumi.Input<string>;
    /**
     * Retention period for binlog in days.
     */
    binlogPeriod?: pulumi.Input<number>;
    /**
     * Instance ID to which policies will be applied.
     */
    mysqlId?: pulumi.Input<string>;
    /**
     * Instance backup retention days. Valid value ranges: [7~730]. And default value is `7`.
     */
    retentionPeriod?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a BackupPolicy resource.
 */
export interface BackupPolicyArgs {
    /**
     * Backup method. Supported values include: `physical` - physical backup.
     */
    backupModel?: pulumi.Input<string>;
    /**
     * Instance backup time, in the format of 'HH:mm-HH:mm'. Time setting interval is four hours. Default to `02:00-06:00`. The
     * following value can be supported: `02:00-06:00`, `06:00-10:00`, `10:00-14:00`, `14:00-18:00`, `18:00-22:00`, and
     * `22:00-02:00`.
     */
    backupTime?: pulumi.Input<string>;
    /**
     * Instance ID to which policies will be applied.
     */
    mysqlId: pulumi.Input<string>;
    /**
     * Instance backup retention days. Valid value ranges: [7~730]. And default value is `7`.
     */
    retentionPeriod?: pulumi.Input<number>;
}
