// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GatewayArgs, GatewayState } from "./gateway";
export type Gateway = import("./gateway").Gateway;
export const Gateway: typeof import("./gateway").Gateway = null as any;
utilities.lazyLoad(exports, ["Gateway"], () => require("./gateway"));

export { GatewayAttachmentArgs, GatewayAttachmentState } from "./gatewayAttachment";
export type GatewayAttachment = import("./gatewayAttachment").GatewayAttachment;
export const GatewayAttachment: typeof import("./gatewayAttachment").GatewayAttachment = null as any;
utilities.lazyLoad(exports, ["GatewayAttachment"], () => require("./gatewayAttachment"));

export { GatewayCcnRouteArgs, GatewayCcnRouteState } from "./gatewayCcnRoute";
export type GatewayCcnRoute = import("./gatewayCcnRoute").GatewayCcnRoute;
export const GatewayCcnRoute: typeof import("./gatewayCcnRoute").GatewayCcnRoute = null as any;
utilities.lazyLoad(exports, ["GatewayCcnRoute"], () => require("./gatewayCcnRoute"));

export { GetAccessPointsArgs, GetAccessPointsResult, GetAccessPointsOutputArgs } from "./getAccessPoints";
export const getAccessPoints: typeof import("./getAccessPoints").getAccessPoints = null as any;
export const getAccessPointsOutput: typeof import("./getAccessPoints").getAccessPointsOutput = null as any;
utilities.lazyLoad(exports, ["getAccessPoints","getAccessPointsOutput"], () => require("./getAccessPoints"));

export { GetGatewayCcnRoutesArgs, GetGatewayCcnRoutesResult, GetGatewayCcnRoutesOutputArgs } from "./getGatewayCcnRoutes";
export const getGatewayCcnRoutes: typeof import("./getGatewayCcnRoutes").getGatewayCcnRoutes = null as any;
export const getGatewayCcnRoutesOutput: typeof import("./getGatewayCcnRoutes").getGatewayCcnRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayCcnRoutes","getGatewayCcnRoutesOutput"], () => require("./getGatewayCcnRoutes"));

export { GetGatewayInstancesArgs, GetGatewayInstancesResult, GetGatewayInstancesOutputArgs } from "./getGatewayInstances";
export const getGatewayInstances: typeof import("./getGatewayInstances").getGatewayInstances = null as any;
export const getGatewayInstancesOutput: typeof import("./getGatewayInstances").getGatewayInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayInstances","getGatewayInstancesOutput"], () => require("./getGatewayInstances"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetInternetAddressQuotaArgs, GetInternetAddressQuotaResult, GetInternetAddressQuotaOutputArgs } from "./getInternetAddressQuota";
export const getInternetAddressQuota: typeof import("./getInternetAddressQuota").getInternetAddressQuota = null as any;
export const getInternetAddressQuotaOutput: typeof import("./getInternetAddressQuota").getInternetAddressQuotaOutput = null as any;
utilities.lazyLoad(exports, ["getInternetAddressQuota","getInternetAddressQuotaOutput"], () => require("./getInternetAddressQuota"));

export { GetInternetAddressStatisticsArgs, GetInternetAddressStatisticsResult, GetInternetAddressStatisticsOutputArgs } from "./getInternetAddressStatistics";
export const getInternetAddressStatistics: typeof import("./getInternetAddressStatistics").getInternetAddressStatistics = null as any;
export const getInternetAddressStatisticsOutput: typeof import("./getInternetAddressStatistics").getInternetAddressStatisticsOutput = null as any;
utilities.lazyLoad(exports, ["getInternetAddressStatistics","getInternetAddressStatisticsOutput"], () => require("./getInternetAddressStatistics"));

export { GetPublicDirectConnectTunnelRoutesArgs, GetPublicDirectConnectTunnelRoutesResult, GetPublicDirectConnectTunnelRoutesOutputArgs } from "./getPublicDirectConnectTunnelRoutes";
export const getPublicDirectConnectTunnelRoutes: typeof import("./getPublicDirectConnectTunnelRoutes").getPublicDirectConnectTunnelRoutes = null as any;
export const getPublicDirectConnectTunnelRoutesOutput: typeof import("./getPublicDirectConnectTunnelRoutes").getPublicDirectConnectTunnelRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getPublicDirectConnectTunnelRoutes","getPublicDirectConnectTunnelRoutesOutput"], () => require("./getPublicDirectConnectTunnelRoutes"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InternetAddressArgs, InternetAddressState } from "./internetAddress";
export type InternetAddress = import("./internetAddress").InternetAddress;
export const InternetAddress: typeof import("./internetAddress").InternetAddress = null as any;
utilities.lazyLoad(exports, ["InternetAddress"], () => require("./internetAddress"));

export { InternetAddressConfigArgs, InternetAddressConfigState } from "./internetAddressConfig";
export type InternetAddressConfig = import("./internetAddressConfig").InternetAddressConfig;
export const InternetAddressConfig: typeof import("./internetAddressConfig").InternetAddressConfig = null as any;
utilities.lazyLoad(exports, ["InternetAddressConfig"], () => require("./internetAddressConfig"));

export { ShareDcxConfigArgs, ShareDcxConfigState } from "./shareDcxConfig";
export type ShareDcxConfig = import("./shareDcxConfig").ShareDcxConfig;
export const ShareDcxConfig: typeof import("./shareDcxConfig").ShareDcxConfig = null as any;
utilities.lazyLoad(exports, ["ShareDcxConfig"], () => require("./shareDcxConfig"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Dc/gateway:Gateway":
                return new Gateway(name, <any>undefined, { urn })
            case "tencentcloud:Dc/gatewayAttachment:GatewayAttachment":
                return new GatewayAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Dc/gatewayCcnRoute:GatewayCcnRoute":
                return new GatewayCcnRoute(name, <any>undefined, { urn })
            case "tencentcloud:Dc/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "tencentcloud:Dc/internetAddress:InternetAddress":
                return new InternetAddress(name, <any>undefined, { urn })
            case "tencentcloud:Dc/internetAddressConfig:InternetAddressConfig":
                return new InternetAddressConfig(name, <any>undefined, { urn })
            case "tencentcloud:Dc/shareDcxConfig:ShareDcxConfig":
                return new ShareDcxConfig(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Dc/gateway", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dc/gatewayAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dc/gatewayCcnRoute", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dc/instance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dc/internetAddress", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dc/internetAddressConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Dc/shareDcxConfig", _module)
