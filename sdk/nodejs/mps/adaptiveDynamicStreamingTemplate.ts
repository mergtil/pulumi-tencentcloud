// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class AdaptiveDynamicStreamingTemplate extends pulumi.CustomResource {
    /**
     * Get an existing AdaptiveDynamicStreamingTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AdaptiveDynamicStreamingTemplateState, opts?: pulumi.CustomResourceOptions): AdaptiveDynamicStreamingTemplate {
        return new AdaptiveDynamicStreamingTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Mps/adaptiveDynamicStreamingTemplate:AdaptiveDynamicStreamingTemplate';

    /**
     * Returns true if the given object is an instance of AdaptiveDynamicStreamingTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AdaptiveDynamicStreamingTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AdaptiveDynamicStreamingTemplate.__pulumiType;
    }

    /**
     * Template description information, length limit: 256 characters.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Whether to prohibit video from low bit rate to high bit rate, value range:0: no.1: yes.Default value: 0.
     */
    public readonly disableHigherVideoBitrate!: pulumi.Output<number | undefined>;
    /**
     * Whether to prohibit the conversion of video resolution to high resolution, value range:0: no.1: yes.Default value: 0.
     */
    public readonly disableHigherVideoResolution!: pulumi.Output<number | undefined>;
    /**
     * Adaptive transcoding format, value range:HLS, MPEG-DASH.
     */
    public readonly format!: pulumi.Output<string>;
    /**
     * Template name, length limit: 64 characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Convert adaptive code stream to output sub-stream parameter information, and output up to 10 sub-streams.Note: The frame
     * rate of each sub-stream must be consistent; if not, the frame rate of the first sub-stream is used as the output frame
     * rate.
     */
    public readonly streamInfos!: pulumi.Output<outputs.Mps.AdaptiveDynamicStreamingTemplateStreamInfo[]>;

    /**
     * Create a AdaptiveDynamicStreamingTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AdaptiveDynamicStreamingTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AdaptiveDynamicStreamingTemplateArgs | AdaptiveDynamicStreamingTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AdaptiveDynamicStreamingTemplateState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["disableHigherVideoBitrate"] = state ? state.disableHigherVideoBitrate : undefined;
            resourceInputs["disableHigherVideoResolution"] = state ? state.disableHigherVideoResolution : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["streamInfos"] = state ? state.streamInfos : undefined;
        } else {
            const args = argsOrState as AdaptiveDynamicStreamingTemplateArgs | undefined;
            if ((!args || args.format === undefined) && !opts.urn) {
                throw new Error("Missing required property 'format'");
            }
            if ((!args || args.streamInfos === undefined) && !opts.urn) {
                throw new Error("Missing required property 'streamInfos'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["disableHigherVideoBitrate"] = args ? args.disableHigherVideoBitrate : undefined;
            resourceInputs["disableHigherVideoResolution"] = args ? args.disableHigherVideoResolution : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["streamInfos"] = args ? args.streamInfos : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AdaptiveDynamicStreamingTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AdaptiveDynamicStreamingTemplate resources.
 */
export interface AdaptiveDynamicStreamingTemplateState {
    /**
     * Template description information, length limit: 256 characters.
     */
    comment?: pulumi.Input<string>;
    /**
     * Whether to prohibit video from low bit rate to high bit rate, value range:0: no.1: yes.Default value: 0.
     */
    disableHigherVideoBitrate?: pulumi.Input<number>;
    /**
     * Whether to prohibit the conversion of video resolution to high resolution, value range:0: no.1: yes.Default value: 0.
     */
    disableHigherVideoResolution?: pulumi.Input<number>;
    /**
     * Adaptive transcoding format, value range:HLS, MPEG-DASH.
     */
    format?: pulumi.Input<string>;
    /**
     * Template name, length limit: 64 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Convert adaptive code stream to output sub-stream parameter information, and output up to 10 sub-streams.Note: The frame
     * rate of each sub-stream must be consistent; if not, the frame rate of the first sub-stream is used as the output frame
     * rate.
     */
    streamInfos?: pulumi.Input<pulumi.Input<inputs.Mps.AdaptiveDynamicStreamingTemplateStreamInfo>[]>;
}

/**
 * The set of arguments for constructing a AdaptiveDynamicStreamingTemplate resource.
 */
export interface AdaptiveDynamicStreamingTemplateArgs {
    /**
     * Template description information, length limit: 256 characters.
     */
    comment?: pulumi.Input<string>;
    /**
     * Whether to prohibit video from low bit rate to high bit rate, value range:0: no.1: yes.Default value: 0.
     */
    disableHigherVideoBitrate?: pulumi.Input<number>;
    /**
     * Whether to prohibit the conversion of video resolution to high resolution, value range:0: no.1: yes.Default value: 0.
     */
    disableHigherVideoResolution?: pulumi.Input<number>;
    /**
     * Adaptive transcoding format, value range:HLS, MPEG-DASH.
     */
    format: pulumi.Input<string>;
    /**
     * Template name, length limit: 64 characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Convert adaptive code stream to output sub-stream parameter information, and output up to 10 sub-streams.Note: The frame
     * rate of each sub-stream must be consistent; if not, the frame rate of the first sub-stream is used as the output frame
     * rate.
     */
    streamInfos: pulumi.Input<pulumi.Input<inputs.Mps.AdaptiveDynamicStreamingTemplateStreamInfo>[]>;
}
