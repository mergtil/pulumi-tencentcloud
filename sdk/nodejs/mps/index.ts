// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AdaptiveDynamicStreamingTemplateArgs, AdaptiveDynamicStreamingTemplateState } from "./adaptiveDynamicStreamingTemplate";
export type AdaptiveDynamicStreamingTemplate = import("./adaptiveDynamicStreamingTemplate").AdaptiveDynamicStreamingTemplate;
export const AdaptiveDynamicStreamingTemplate: typeof import("./adaptiveDynamicStreamingTemplate").AdaptiveDynamicStreamingTemplate = null as any;
utilities.lazyLoad(exports, ["AdaptiveDynamicStreamingTemplate"], () => require("./adaptiveDynamicStreamingTemplate"));

export { AiAnalysisTemplateArgs, AiAnalysisTemplateState } from "./aiAnalysisTemplate";
export type AiAnalysisTemplate = import("./aiAnalysisTemplate").AiAnalysisTemplate;
export const AiAnalysisTemplate: typeof import("./aiAnalysisTemplate").AiAnalysisTemplate = null as any;
utilities.lazyLoad(exports, ["AiAnalysisTemplate"], () => require("./aiAnalysisTemplate"));

export { AiRecognitionTemplateArgs, AiRecognitionTemplateState } from "./aiRecognitionTemplate";
export type AiRecognitionTemplate = import("./aiRecognitionTemplate").AiRecognitionTemplate;
export const AiRecognitionTemplate: typeof import("./aiRecognitionTemplate").AiRecognitionTemplate = null as any;
utilities.lazyLoad(exports, ["AiRecognitionTemplate"], () => require("./aiRecognitionTemplate"));

export { AnimatedGraphicsTemplateArgs, AnimatedGraphicsTemplateState } from "./animatedGraphicsTemplate";
export type AnimatedGraphicsTemplate = import("./animatedGraphicsTemplate").AnimatedGraphicsTemplate;
export const AnimatedGraphicsTemplate: typeof import("./animatedGraphicsTemplate").AnimatedGraphicsTemplate = null as any;
utilities.lazyLoad(exports, ["AnimatedGraphicsTemplate"], () => require("./animatedGraphicsTemplate"));

export { ImageSpriteTemplateArgs, ImageSpriteTemplateState } from "./imageSpriteTemplate";
export type ImageSpriteTemplate = import("./imageSpriteTemplate").ImageSpriteTemplate;
export const ImageSpriteTemplate: typeof import("./imageSpriteTemplate").ImageSpriteTemplate = null as any;
utilities.lazyLoad(exports, ["ImageSpriteTemplate"], () => require("./imageSpriteTemplate"));

export { PersonSampleArgs, PersonSampleState } from "./personSample";
export type PersonSample = import("./personSample").PersonSample;
export const PersonSample: typeof import("./personSample").PersonSample = null as any;
utilities.lazyLoad(exports, ["PersonSample"], () => require("./personSample"));

export { SampleSnapshotTemplateArgs, SampleSnapshotTemplateState } from "./sampleSnapshotTemplate";
export type SampleSnapshotTemplate = import("./sampleSnapshotTemplate").SampleSnapshotTemplate;
export const SampleSnapshotTemplate: typeof import("./sampleSnapshotTemplate").SampleSnapshotTemplate = null as any;
utilities.lazyLoad(exports, ["SampleSnapshotTemplate"], () => require("./sampleSnapshotTemplate"));

export { SnapshotByTimeoffsetTemplateArgs, SnapshotByTimeoffsetTemplateState } from "./snapshotByTimeoffsetTemplate";
export type SnapshotByTimeoffsetTemplate = import("./snapshotByTimeoffsetTemplate").SnapshotByTimeoffsetTemplate;
export const SnapshotByTimeoffsetTemplate: typeof import("./snapshotByTimeoffsetTemplate").SnapshotByTimeoffsetTemplate = null as any;
utilities.lazyLoad(exports, ["SnapshotByTimeoffsetTemplate"], () => require("./snapshotByTimeoffsetTemplate"));

export { TranscodeTemplateArgs, TranscodeTemplateState } from "./transcodeTemplate";
export type TranscodeTemplate = import("./transcodeTemplate").TranscodeTemplate;
export const TranscodeTemplate: typeof import("./transcodeTemplate").TranscodeTemplate = null as any;
utilities.lazyLoad(exports, ["TranscodeTemplate"], () => require("./transcodeTemplate"));

export { WatermarkTemplateArgs, WatermarkTemplateState } from "./watermarkTemplate";
export type WatermarkTemplate = import("./watermarkTemplate").WatermarkTemplate;
export const WatermarkTemplate: typeof import("./watermarkTemplate").WatermarkTemplate = null as any;
utilities.lazyLoad(exports, ["WatermarkTemplate"], () => require("./watermarkTemplate"));

export { WorkflowArgs, WorkflowState } from "./workflow";
export type Workflow = import("./workflow").Workflow;
export const Workflow: typeof import("./workflow").Workflow = null as any;
utilities.lazyLoad(exports, ["Workflow"], () => require("./workflow"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Mps/adaptiveDynamicStreamingTemplate:AdaptiveDynamicStreamingTemplate":
                return new AdaptiveDynamicStreamingTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Mps/aiAnalysisTemplate:AiAnalysisTemplate":
                return new AiAnalysisTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Mps/aiRecognitionTemplate:AiRecognitionTemplate":
                return new AiRecognitionTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Mps/animatedGraphicsTemplate:AnimatedGraphicsTemplate":
                return new AnimatedGraphicsTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Mps/imageSpriteTemplate:ImageSpriteTemplate":
                return new ImageSpriteTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Mps/personSample:PersonSample":
                return new PersonSample(name, <any>undefined, { urn })
            case "tencentcloud:Mps/sampleSnapshotTemplate:SampleSnapshotTemplate":
                return new SampleSnapshotTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Mps/snapshotByTimeoffsetTemplate:SnapshotByTimeoffsetTemplate":
                return new SnapshotByTimeoffsetTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Mps/transcodeTemplate:TranscodeTemplate":
                return new TranscodeTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Mps/watermarkTemplate:WatermarkTemplate":
                return new WatermarkTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Mps/workflow:Workflow":
                return new Workflow(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/adaptiveDynamicStreamingTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/aiAnalysisTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/aiRecognitionTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/animatedGraphicsTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/imageSpriteTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/personSample", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/sampleSnapshotTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/snapshotByTimeoffsetTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/transcodeTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/watermarkTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Mps/workflow", _module)
