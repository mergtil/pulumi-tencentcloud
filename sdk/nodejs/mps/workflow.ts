// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Workflow extends pulumi.CustomResource {
    /**
     * Get an existing Workflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkflowState, opts?: pulumi.CustomResourceOptions): Workflow {
        return new Workflow(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Mps/workflow:Workflow';

    /**
     * Returns true if the given object is an instance of Workflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Workflow {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workflow.__pulumiType;
    }

    /**
     * Video Content Analysis Type Task Parameters.
     */
    public readonly aiAnalysisTask!: pulumi.Output<outputs.Mps.WorkflowAiAnalysisTask | undefined>;
    /**
     * Video Content Moderation Type Task Parameters.
     */
    public readonly aiContentReviewTask!: pulumi.Output<outputs.Mps.WorkflowAiContentReviewTask | undefined>;
    /**
     * Video content recognition type task parameters.
     */
    public readonly aiRecognitionTask!: pulumi.Output<outputs.Mps.WorkflowAiRecognitionTask | undefined>;
    /**
     * Media Processing Type Task Parameters.
     */
    public readonly mediaProcessTask!: pulumi.Output<outputs.Mps.WorkflowMediaProcessTask | undefined>;
    /**
     * The target directory of the output file generated by media processing, if not filled, it means that it is consistent
     * with the directory where the trigger file is located.
     */
    public readonly outputDir!: pulumi.Output<string | undefined>;
    /**
     * File output storage location for media processing. If left blank, the storage location in Trigger will be inherited.
     */
    public readonly outputStorage!: pulumi.Output<outputs.Mps.WorkflowOutputStorage | undefined>;
    /**
     * The event notification configuration of the task, if it is not filled, it means that the event notification will not be
     * obtained.
     */
    public readonly taskNotifyConfig!: pulumi.Output<outputs.Mps.WorkflowTaskNotifyConfig | undefined>;
    /**
     * The priority of the workflow, the larger the value, the higher the priority, the value range is -10 to 10, and blank
     * means 0.
     */
    public readonly taskPriority!: pulumi.Output<number | undefined>;
    /**
     * The trigger rule bound to the workflow, when the uploaded video hits the rule to this object, the workflow will be
     * triggered.
     */
    public readonly trigger!: pulumi.Output<outputs.Mps.WorkflowTrigger>;
    /**
     * Workflow name, up to 128 characters. The name is unique for the same user.
     */
    public readonly workflowName!: pulumi.Output<string>;

    /**
     * Create a Workflow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkflowArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkflowArgs | WorkflowState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkflowState | undefined;
            resourceInputs["aiAnalysisTask"] = state ? state.aiAnalysisTask : undefined;
            resourceInputs["aiContentReviewTask"] = state ? state.aiContentReviewTask : undefined;
            resourceInputs["aiRecognitionTask"] = state ? state.aiRecognitionTask : undefined;
            resourceInputs["mediaProcessTask"] = state ? state.mediaProcessTask : undefined;
            resourceInputs["outputDir"] = state ? state.outputDir : undefined;
            resourceInputs["outputStorage"] = state ? state.outputStorage : undefined;
            resourceInputs["taskNotifyConfig"] = state ? state.taskNotifyConfig : undefined;
            resourceInputs["taskPriority"] = state ? state.taskPriority : undefined;
            resourceInputs["trigger"] = state ? state.trigger : undefined;
            resourceInputs["workflowName"] = state ? state.workflowName : undefined;
        } else {
            const args = argsOrState as WorkflowArgs | undefined;
            if ((!args || args.trigger === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trigger'");
            }
            if ((!args || args.workflowName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workflowName'");
            }
            resourceInputs["aiAnalysisTask"] = args ? args.aiAnalysisTask : undefined;
            resourceInputs["aiContentReviewTask"] = args ? args.aiContentReviewTask : undefined;
            resourceInputs["aiRecognitionTask"] = args ? args.aiRecognitionTask : undefined;
            resourceInputs["mediaProcessTask"] = args ? args.mediaProcessTask : undefined;
            resourceInputs["outputDir"] = args ? args.outputDir : undefined;
            resourceInputs["outputStorage"] = args ? args.outputStorage : undefined;
            resourceInputs["taskNotifyConfig"] = args ? args.taskNotifyConfig : undefined;
            resourceInputs["taskPriority"] = args ? args.taskPriority : undefined;
            resourceInputs["trigger"] = args ? args.trigger : undefined;
            resourceInputs["workflowName"] = args ? args.workflowName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Workflow.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Workflow resources.
 */
export interface WorkflowState {
    /**
     * Video Content Analysis Type Task Parameters.
     */
    aiAnalysisTask?: pulumi.Input<inputs.Mps.WorkflowAiAnalysisTask>;
    /**
     * Video Content Moderation Type Task Parameters.
     */
    aiContentReviewTask?: pulumi.Input<inputs.Mps.WorkflowAiContentReviewTask>;
    /**
     * Video content recognition type task parameters.
     */
    aiRecognitionTask?: pulumi.Input<inputs.Mps.WorkflowAiRecognitionTask>;
    /**
     * Media Processing Type Task Parameters.
     */
    mediaProcessTask?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTask>;
    /**
     * The target directory of the output file generated by media processing, if not filled, it means that it is consistent
     * with the directory where the trigger file is located.
     */
    outputDir?: pulumi.Input<string>;
    /**
     * File output storage location for media processing. If left blank, the storage location in Trigger will be inherited.
     */
    outputStorage?: pulumi.Input<inputs.Mps.WorkflowOutputStorage>;
    /**
     * The event notification configuration of the task, if it is not filled, it means that the event notification will not be
     * obtained.
     */
    taskNotifyConfig?: pulumi.Input<inputs.Mps.WorkflowTaskNotifyConfig>;
    /**
     * The priority of the workflow, the larger the value, the higher the priority, the value range is -10 to 10, and blank
     * means 0.
     */
    taskPriority?: pulumi.Input<number>;
    /**
     * The trigger rule bound to the workflow, when the uploaded video hits the rule to this object, the workflow will be
     * triggered.
     */
    trigger?: pulumi.Input<inputs.Mps.WorkflowTrigger>;
    /**
     * Workflow name, up to 128 characters. The name is unique for the same user.
     */
    workflowName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Workflow resource.
 */
export interface WorkflowArgs {
    /**
     * Video Content Analysis Type Task Parameters.
     */
    aiAnalysisTask?: pulumi.Input<inputs.Mps.WorkflowAiAnalysisTask>;
    /**
     * Video Content Moderation Type Task Parameters.
     */
    aiContentReviewTask?: pulumi.Input<inputs.Mps.WorkflowAiContentReviewTask>;
    /**
     * Video content recognition type task parameters.
     */
    aiRecognitionTask?: pulumi.Input<inputs.Mps.WorkflowAiRecognitionTask>;
    /**
     * Media Processing Type Task Parameters.
     */
    mediaProcessTask?: pulumi.Input<inputs.Mps.WorkflowMediaProcessTask>;
    /**
     * The target directory of the output file generated by media processing, if not filled, it means that it is consistent
     * with the directory where the trigger file is located.
     */
    outputDir?: pulumi.Input<string>;
    /**
     * File output storage location for media processing. If left blank, the storage location in Trigger will be inherited.
     */
    outputStorage?: pulumi.Input<inputs.Mps.WorkflowOutputStorage>;
    /**
     * The event notification configuration of the task, if it is not filled, it means that the event notification will not be
     * obtained.
     */
    taskNotifyConfig?: pulumi.Input<inputs.Mps.WorkflowTaskNotifyConfig>;
    /**
     * The priority of the workflow, the larger the value, the higher the priority, the value range is -10 to 10, and blank
     * means 0.
     */
    taskPriority?: pulumi.Input<number>;
    /**
     * The trigger rule bound to the workflow, when the uploaded video hits the rule to this object, the workflow will be
     * triggered.
     */
    trigger: pulumi.Input<inputs.Mps.WorkflowTrigger>;
    /**
     * Workflow name, up to 128 characters. The name is unique for the same user.
     */
    workflowName: pulumi.Input<string>;
}
