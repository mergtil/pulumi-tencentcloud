// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class UserQuota extends pulumi.CustomResource {
    /**
     * Get an existing UserQuota resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserQuotaState, opts?: pulumi.CustomResourceOptions): UserQuota {
        return new UserQuota(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Cfs/userQuota:UserQuota';

    /**
     * Returns true if the given object is an instance of UserQuota.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserQuota {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserQuota.__pulumiType;
    }

    /**
     * Capacity Limit(GB).
     */
    public readonly capacityHardLimit!: pulumi.Output<number | undefined>;
    /**
     * File limit.
     */
    public readonly fileHardLimit!: pulumi.Output<number | undefined>;
    /**
     * File system ID.
     */
    public readonly fileSystemId!: pulumi.Output<string>;
    /**
     * Info of UID/GID.
     */
    public readonly userId!: pulumi.Output<string>;
    /**
     * Quota type. Valid value: `Uid`, `Gid`.
     */
    public readonly userType!: pulumi.Output<string>;

    /**
     * Create a UserQuota resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserQuotaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserQuotaArgs | UserQuotaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserQuotaState | undefined;
            resourceInputs["capacityHardLimit"] = state ? state.capacityHardLimit : undefined;
            resourceInputs["fileHardLimit"] = state ? state.fileHardLimit : undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["userType"] = state ? state.userType : undefined;
        } else {
            const args = argsOrState as UserQuotaArgs | undefined;
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            if ((!args || args.userType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userType'");
            }
            resourceInputs["capacityHardLimit"] = args ? args.capacityHardLimit : undefined;
            resourceInputs["fileHardLimit"] = args ? args.fileHardLimit : undefined;
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["userType"] = args ? args.userType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserQuota.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserQuota resources.
 */
export interface UserQuotaState {
    /**
     * Capacity Limit(GB).
     */
    capacityHardLimit?: pulumi.Input<number>;
    /**
     * File limit.
     */
    fileHardLimit?: pulumi.Input<number>;
    /**
     * File system ID.
     */
    fileSystemId?: pulumi.Input<string>;
    /**
     * Info of UID/GID.
     */
    userId?: pulumi.Input<string>;
    /**
     * Quota type. Valid value: `Uid`, `Gid`.
     */
    userType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserQuota resource.
 */
export interface UserQuotaArgs {
    /**
     * Capacity Limit(GB).
     */
    capacityHardLimit?: pulumi.Input<number>;
    /**
     * File limit.
     */
    fileHardLimit?: pulumi.Input<number>;
    /**
     * File system ID.
     */
    fileSystemId: pulumi.Input<string>;
    /**
     * Info of UID/GID.
     */
    userId: pulumi.Input<string>;
    /**
     * Quota type. Valid value: `Uid`, `Gid`.
     */
    userType: pulumi.Input<string>;
}
