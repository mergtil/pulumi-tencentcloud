// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class AutoSnapshotPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AutoSnapshotPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutoSnapshotPolicyState, opts?: pulumi.CustomResourceOptions): AutoSnapshotPolicy {
        return new AutoSnapshotPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Cfs/autoSnapshotPolicy:AutoSnapshotPolicy';

    /**
     * Returns true if the given object is an instance of AutoSnapshotPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutoSnapshotPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutoSnapshotPolicy.__pulumiType;
    }

    /**
     * Snapshot retention period.
     */
    public readonly aliveDays!: pulumi.Output<number | undefined>;
    /**
     * The specific day (day 1 to day 31) of the month on which to create a snapshot.
     */
    public readonly dayOfMonth!: pulumi.Output<string | undefined>;
    /**
     * The day of the week on which to repeat the snapshot operation.
     */
    public readonly dayOfWeek!: pulumi.Output<string | undefined>;
    /**
     * The time point when to repeat the snapshot operation.
     */
    public readonly hour!: pulumi.Output<string>;
    /**
     * The snapshot interval, in days.
     */
    public readonly intervalDays!: pulumi.Output<number | undefined>;
    /**
     * Policy name.
     */
    public readonly policyName!: pulumi.Output<string | undefined>;

    /**
     * Create a AutoSnapshotPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutoSnapshotPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutoSnapshotPolicyArgs | AutoSnapshotPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutoSnapshotPolicyState | undefined;
            resourceInputs["aliveDays"] = state ? state.aliveDays : undefined;
            resourceInputs["dayOfMonth"] = state ? state.dayOfMonth : undefined;
            resourceInputs["dayOfWeek"] = state ? state.dayOfWeek : undefined;
            resourceInputs["hour"] = state ? state.hour : undefined;
            resourceInputs["intervalDays"] = state ? state.intervalDays : undefined;
            resourceInputs["policyName"] = state ? state.policyName : undefined;
        } else {
            const args = argsOrState as AutoSnapshotPolicyArgs | undefined;
            if ((!args || args.hour === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hour'");
            }
            resourceInputs["aliveDays"] = args ? args.aliveDays : undefined;
            resourceInputs["dayOfMonth"] = args ? args.dayOfMonth : undefined;
            resourceInputs["dayOfWeek"] = args ? args.dayOfWeek : undefined;
            resourceInputs["hour"] = args ? args.hour : undefined;
            resourceInputs["intervalDays"] = args ? args.intervalDays : undefined;
            resourceInputs["policyName"] = args ? args.policyName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutoSnapshotPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AutoSnapshotPolicy resources.
 */
export interface AutoSnapshotPolicyState {
    /**
     * Snapshot retention period.
     */
    aliveDays?: pulumi.Input<number>;
    /**
     * The specific day (day 1 to day 31) of the month on which to create a snapshot.
     */
    dayOfMonth?: pulumi.Input<string>;
    /**
     * The day of the week on which to repeat the snapshot operation.
     */
    dayOfWeek?: pulumi.Input<string>;
    /**
     * The time point when to repeat the snapshot operation.
     */
    hour?: pulumi.Input<string>;
    /**
     * The snapshot interval, in days.
     */
    intervalDays?: pulumi.Input<number>;
    /**
     * Policy name.
     */
    policyName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AutoSnapshotPolicy resource.
 */
export interface AutoSnapshotPolicyArgs {
    /**
     * Snapshot retention period.
     */
    aliveDays?: pulumi.Input<number>;
    /**
     * The specific day (day 1 to day 31) of the month on which to create a snapshot.
     */
    dayOfMonth?: pulumi.Input<string>;
    /**
     * The day of the week on which to repeat the snapshot operation.
     */
    dayOfWeek?: pulumi.Input<string>;
    /**
     * The time point when to repeat the snapshot operation.
     */
    hour: pulumi.Input<string>;
    /**
     * The snapshot interval, in days.
     */
    intervalDays?: pulumi.Input<number>;
    /**
     * Policy name.
     */
    policyName?: pulumi.Input<string>;
}
