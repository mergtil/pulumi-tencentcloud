// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationState, opts?: pulumi.CustomResourceOptions): Application {
        return new Application(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tsf/application:Application';

    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Application {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }

    /**
     * Application description.
     */
    public readonly applicationDesc!: pulumi.Output<string | undefined>;
    /**
     * Application log configuration, deprecated parameter.
     */
    public readonly applicationLogConfig!: pulumi.Output<string | undefined>;
    /**
     * Application name.
     */
    public readonly applicationName!: pulumi.Output<string>;
    /**
     * Application resource type, deprecated parameter.
     */
    public readonly applicationResourceType!: pulumi.Output<string | undefined>;
    /**
     * Application runtime type.
     */
    public readonly applicationRuntimeType!: pulumi.Output<string | undefined>;
    /**
     * Application type: V for virtual machine, C for container, S for serverless.
     */
    public readonly applicationType!: pulumi.Output<string>;
    /**
     * Ignore creating image repository.
     */
    public readonly ignoreCreateImageRepository!: pulumi.Output<boolean | undefined>;
    /**
     * Application microservice type: M for service mesh, N for normal application, G for gateway application.
     */
    public readonly microserviceType!: pulumi.Output<string>;
    /**
     * ID of the dataset to be bound.
     */
    public readonly programId!: pulumi.Output<string | undefined>;
    /**
     * N/A.
     */
    public readonly programIdLists!: pulumi.Output<string[] | undefined>;
    /**
     * List of service configuration information.
     */
    public readonly serviceConfigLists!: pulumi.Output<outputs.Tsf.ApplicationServiceConfigList[] | undefined>;

    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationArgs | ApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationState | undefined;
            resourceInputs["applicationDesc"] = state ? state.applicationDesc : undefined;
            resourceInputs["applicationLogConfig"] = state ? state.applicationLogConfig : undefined;
            resourceInputs["applicationName"] = state ? state.applicationName : undefined;
            resourceInputs["applicationResourceType"] = state ? state.applicationResourceType : undefined;
            resourceInputs["applicationRuntimeType"] = state ? state.applicationRuntimeType : undefined;
            resourceInputs["applicationType"] = state ? state.applicationType : undefined;
            resourceInputs["ignoreCreateImageRepository"] = state ? state.ignoreCreateImageRepository : undefined;
            resourceInputs["microserviceType"] = state ? state.microserviceType : undefined;
            resourceInputs["programId"] = state ? state.programId : undefined;
            resourceInputs["programIdLists"] = state ? state.programIdLists : undefined;
            resourceInputs["serviceConfigLists"] = state ? state.serviceConfigLists : undefined;
        } else {
            const args = argsOrState as ApplicationArgs | undefined;
            if ((!args || args.applicationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationName'");
            }
            if ((!args || args.applicationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationType'");
            }
            if ((!args || args.microserviceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'microserviceType'");
            }
            resourceInputs["applicationDesc"] = args ? args.applicationDesc : undefined;
            resourceInputs["applicationLogConfig"] = args ? args.applicationLogConfig : undefined;
            resourceInputs["applicationName"] = args ? args.applicationName : undefined;
            resourceInputs["applicationResourceType"] = args ? args.applicationResourceType : undefined;
            resourceInputs["applicationRuntimeType"] = args ? args.applicationRuntimeType : undefined;
            resourceInputs["applicationType"] = args ? args.applicationType : undefined;
            resourceInputs["ignoreCreateImageRepository"] = args ? args.ignoreCreateImageRepository : undefined;
            resourceInputs["microserviceType"] = args ? args.microserviceType : undefined;
            resourceInputs["programId"] = args ? args.programId : undefined;
            resourceInputs["programIdLists"] = args ? args.programIdLists : undefined;
            resourceInputs["serviceConfigLists"] = args ? args.serviceConfigLists : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Application.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Application resources.
 */
export interface ApplicationState {
    /**
     * Application description.
     */
    applicationDesc?: pulumi.Input<string>;
    /**
     * Application log configuration, deprecated parameter.
     */
    applicationLogConfig?: pulumi.Input<string>;
    /**
     * Application name.
     */
    applicationName?: pulumi.Input<string>;
    /**
     * Application resource type, deprecated parameter.
     */
    applicationResourceType?: pulumi.Input<string>;
    /**
     * Application runtime type.
     */
    applicationRuntimeType?: pulumi.Input<string>;
    /**
     * Application type: V for virtual machine, C for container, S for serverless.
     */
    applicationType?: pulumi.Input<string>;
    /**
     * Ignore creating image repository.
     */
    ignoreCreateImageRepository?: pulumi.Input<boolean>;
    /**
     * Application microservice type: M for service mesh, N for normal application, G for gateway application.
     */
    microserviceType?: pulumi.Input<string>;
    /**
     * ID of the dataset to be bound.
     */
    programId?: pulumi.Input<string>;
    /**
     * N/A.
     */
    programIdLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of service configuration information.
     */
    serviceConfigLists?: pulumi.Input<pulumi.Input<inputs.Tsf.ApplicationServiceConfigList>[]>;
}

/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    /**
     * Application description.
     */
    applicationDesc?: pulumi.Input<string>;
    /**
     * Application log configuration, deprecated parameter.
     */
    applicationLogConfig?: pulumi.Input<string>;
    /**
     * Application name.
     */
    applicationName: pulumi.Input<string>;
    /**
     * Application resource type, deprecated parameter.
     */
    applicationResourceType?: pulumi.Input<string>;
    /**
     * Application runtime type.
     */
    applicationRuntimeType?: pulumi.Input<string>;
    /**
     * Application type: V for virtual machine, C for container, S for serverless.
     */
    applicationType: pulumi.Input<string>;
    /**
     * Ignore creating image repository.
     */
    ignoreCreateImageRepository?: pulumi.Input<boolean>;
    /**
     * Application microservice type: M for service mesh, N for normal application, G for gateway application.
     */
    microserviceType: pulumi.Input<string>;
    /**
     * ID of the dataset to be bound.
     */
    programId?: pulumi.Input<string>;
    /**
     * N/A.
     */
    programIdLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of service configuration information.
     */
    serviceConfigLists?: pulumi.Input<pulumi.Input<inputs.Tsf.ApplicationServiceConfigList>[]>;
}
