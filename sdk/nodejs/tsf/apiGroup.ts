// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class ApiGroup extends pulumi.CustomResource {
    /**
     * Get an existing ApiGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiGroupState, opts?: pulumi.CustomResourceOptions): ApiGroup {
        return new ApiGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tsf/apiGroup:ApiGroup';

    /**
     * Returns true if the given object is an instance of ApiGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiGroup.__pulumiType;
    }

    /**
     * Access group ACL type.
     */
    public /*out*/ readonly aclMode!: pulumi.Output<string>;
    /**
     * number of APIs.
     */
    public /*out*/ readonly apiCount!: pulumi.Output<number>;
    /**
     * authentication type. secret: key authentication; none: no authentication.
     */
    public readonly authType!: pulumi.Output<string>;
    /**
     * api group bound gateway deployment group.
     */
    public /*out*/ readonly bindedGatewayDeployGroups!: pulumi.Output<outputs.Tsf.ApiGroupBindedGatewayDeployGroup[]>;
    /**
     * Group creation time such as: 2019-06-20 15:51:28.
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * remarks.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * gateway entity ID.
     */
    public readonly gatewayInstanceId!: pulumi.Output<string>;
    /**
     * Type of gateway instance.
     */
    public /*out*/ readonly gatewayInstanceType!: pulumi.Output<string>;
    /**
     * grouping context.
     */
    public readonly groupContext!: pulumi.Output<string>;
    /**
     * Api Group Id.
     */
    public /*out*/ readonly groupId!: pulumi.Output<string>;
    /**
     * group name, cannot contain Chinese.
     */
    public readonly groupName!: pulumi.Output<string>;
    /**
     * grouping type, default ms. ms: microservice grouping; external: external Api grouping.
     */
    public readonly groupType!: pulumi.Output<string>;
    /**
     * namespace parameter key value.
     */
    public readonly namespaceNameKey!: pulumi.Output<string>;
    /**
     * namespace parameter position, path, header or query, the default is path.
     */
    public readonly namespaceNameKeyPosition!: pulumi.Output<string>;
    /**
     * microservice name parameter key value.
     */
    public readonly serviceNameKey!: pulumi.Output<string>;
    /**
     * microservice name parameter position, path, header or query, the default is path.
     */
    public readonly serviceNameKeyPosition!: pulumi.Output<string>;
    /**
     * Release status, drafted: Not published. released: released.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Group update time such as: 2019-06-20 15:51:28.
     */
    public /*out*/ readonly updatedTime!: pulumi.Output<string>;

    /**
     * Create a ApiGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiGroupArgs | ApiGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiGroupState | undefined;
            resourceInputs["aclMode"] = state ? state.aclMode : undefined;
            resourceInputs["apiCount"] = state ? state.apiCount : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["bindedGatewayDeployGroups"] = state ? state.bindedGatewayDeployGroups : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["gatewayInstanceId"] = state ? state.gatewayInstanceId : undefined;
            resourceInputs["gatewayInstanceType"] = state ? state.gatewayInstanceType : undefined;
            resourceInputs["groupContext"] = state ? state.groupContext : undefined;
            resourceInputs["groupId"] = state ? state.groupId : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["groupType"] = state ? state.groupType : undefined;
            resourceInputs["namespaceNameKey"] = state ? state.namespaceNameKey : undefined;
            resourceInputs["namespaceNameKeyPosition"] = state ? state.namespaceNameKeyPosition : undefined;
            resourceInputs["serviceNameKey"] = state ? state.serviceNameKey : undefined;
            resourceInputs["serviceNameKeyPosition"] = state ? state.serviceNameKeyPosition : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["updatedTime"] = state ? state.updatedTime : undefined;
        } else {
            const args = argsOrState as ApiGroupArgs | undefined;
            if ((!args || args.groupContext === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupContext'");
            }
            if ((!args || args.groupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupName'");
            }
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["gatewayInstanceId"] = args ? args.gatewayInstanceId : undefined;
            resourceInputs["groupContext"] = args ? args.groupContext : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["groupType"] = args ? args.groupType : undefined;
            resourceInputs["namespaceNameKey"] = args ? args.namespaceNameKey : undefined;
            resourceInputs["namespaceNameKeyPosition"] = args ? args.namespaceNameKeyPosition : undefined;
            resourceInputs["serviceNameKey"] = args ? args.serviceNameKey : undefined;
            resourceInputs["serviceNameKeyPosition"] = args ? args.serviceNameKeyPosition : undefined;
            resourceInputs["aclMode"] = undefined /*out*/;
            resourceInputs["apiCount"] = undefined /*out*/;
            resourceInputs["bindedGatewayDeployGroups"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["gatewayInstanceType"] = undefined /*out*/;
            resourceInputs["groupId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApiGroup resources.
 */
export interface ApiGroupState {
    /**
     * Access group ACL type.
     */
    aclMode?: pulumi.Input<string>;
    /**
     * number of APIs.
     */
    apiCount?: pulumi.Input<number>;
    /**
     * authentication type. secret: key authentication; none: no authentication.
     */
    authType?: pulumi.Input<string>;
    /**
     * api group bound gateway deployment group.
     */
    bindedGatewayDeployGroups?: pulumi.Input<pulumi.Input<inputs.Tsf.ApiGroupBindedGatewayDeployGroup>[]>;
    /**
     * Group creation time such as: 2019-06-20 15:51:28.
     */
    createdTime?: pulumi.Input<string>;
    /**
     * remarks.
     */
    description?: pulumi.Input<string>;
    /**
     * gateway entity ID.
     */
    gatewayInstanceId?: pulumi.Input<string>;
    /**
     * Type of gateway instance.
     */
    gatewayInstanceType?: pulumi.Input<string>;
    /**
     * grouping context.
     */
    groupContext?: pulumi.Input<string>;
    /**
     * Api Group Id.
     */
    groupId?: pulumi.Input<string>;
    /**
     * group name, cannot contain Chinese.
     */
    groupName?: pulumi.Input<string>;
    /**
     * grouping type, default ms. ms: microservice grouping; external: external Api grouping.
     */
    groupType?: pulumi.Input<string>;
    /**
     * namespace parameter key value.
     */
    namespaceNameKey?: pulumi.Input<string>;
    /**
     * namespace parameter position, path, header or query, the default is path.
     */
    namespaceNameKeyPosition?: pulumi.Input<string>;
    /**
     * microservice name parameter key value.
     */
    serviceNameKey?: pulumi.Input<string>;
    /**
     * microservice name parameter position, path, header or query, the default is path.
     */
    serviceNameKeyPosition?: pulumi.Input<string>;
    /**
     * Release status, drafted: Not published. released: released.
     */
    status?: pulumi.Input<string>;
    /**
     * Group update time such as: 2019-06-20 15:51:28.
     */
    updatedTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApiGroup resource.
 */
export interface ApiGroupArgs {
    /**
     * authentication type. secret: key authentication; none: no authentication.
     */
    authType?: pulumi.Input<string>;
    /**
     * remarks.
     */
    description?: pulumi.Input<string>;
    /**
     * gateway entity ID.
     */
    gatewayInstanceId?: pulumi.Input<string>;
    /**
     * grouping context.
     */
    groupContext: pulumi.Input<string>;
    /**
     * group name, cannot contain Chinese.
     */
    groupName: pulumi.Input<string>;
    /**
     * grouping type, default ms. ms: microservice grouping; external: external Api grouping.
     */
    groupType?: pulumi.Input<string>;
    /**
     * namespace parameter key value.
     */
    namespaceNameKey?: pulumi.Input<string>;
    /**
     * namespace parameter position, path, header or query, the default is path.
     */
    namespaceNameKeyPosition?: pulumi.Input<string>;
    /**
     * microservice name parameter key value.
     */
    serviceNameKey?: pulumi.Input<string>;
    /**
     * microservice name parameter position, path, header or query, the default is path.
     */
    serviceNameKeyPosition?: pulumi.Input<string>;
}
