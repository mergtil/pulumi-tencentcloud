// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryState, opts?: pulumi.CustomResourceOptions): Repository {
        return new Repository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tsf/repository:Repository';

    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }

    /**
     * the name of the bucket where the warehouse is located.
     */
    public readonly bucketName!: pulumi.Output<string>;
    /**
     * Bucket region where the warehouse is located.
     */
    public readonly bucketRegion!: pulumi.Output<string>;
    /**
     * warehouse creation time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * directory.
     */
    public readonly directory!: pulumi.Output<string>;
    /**
     * whether the repository is in use.
     */
    public /*out*/ readonly isUsed!: pulumi.Output<boolean>;
    /**
     * warehouse description.
     */
    public readonly repositoryDesc!: pulumi.Output<string>;
    /**
     * Warehouse ID.
     */
    public /*out*/ readonly repositoryId!: pulumi.Output<string>;
    /**
     * warehouse name.
     */
    public readonly repositoryName!: pulumi.Output<string>;
    /**
     * warehouse type (default warehouse: default, private warehouse: private).
     */
    public readonly repositoryType!: pulumi.Output<string>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryArgs | RepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryState | undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["bucketRegion"] = state ? state.bucketRegion : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["directory"] = state ? state.directory : undefined;
            resourceInputs["isUsed"] = state ? state.isUsed : undefined;
            resourceInputs["repositoryDesc"] = state ? state.repositoryDesc : undefined;
            resourceInputs["repositoryId"] = state ? state.repositoryId : undefined;
            resourceInputs["repositoryName"] = state ? state.repositoryName : undefined;
            resourceInputs["repositoryType"] = state ? state.repositoryType : undefined;
        } else {
            const args = argsOrState as RepositoryArgs | undefined;
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if ((!args || args.bucketRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketRegion'");
            }
            if ((!args || args.repositoryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositoryName'");
            }
            if ((!args || args.repositoryType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repositoryType'");
            }
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["bucketRegion"] = args ? args.bucketRegion : undefined;
            resourceInputs["directory"] = args ? args.directory : undefined;
            resourceInputs["repositoryDesc"] = args ? args.repositoryDesc : undefined;
            resourceInputs["repositoryName"] = args ? args.repositoryName : undefined;
            resourceInputs["repositoryType"] = args ? args.repositoryType : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["isUsed"] = undefined /*out*/;
            resourceInputs["repositoryId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Repository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Repository resources.
 */
export interface RepositoryState {
    /**
     * the name of the bucket where the warehouse is located.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * Bucket region where the warehouse is located.
     */
    bucketRegion?: pulumi.Input<string>;
    /**
     * warehouse creation time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * directory.
     */
    directory?: pulumi.Input<string>;
    /**
     * whether the repository is in use.
     */
    isUsed?: pulumi.Input<boolean>;
    /**
     * warehouse description.
     */
    repositoryDesc?: pulumi.Input<string>;
    /**
     * Warehouse ID.
     */
    repositoryId?: pulumi.Input<string>;
    /**
     * warehouse name.
     */
    repositoryName?: pulumi.Input<string>;
    /**
     * warehouse type (default warehouse: default, private warehouse: private).
     */
    repositoryType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    /**
     * the name of the bucket where the warehouse is located.
     */
    bucketName: pulumi.Input<string>;
    /**
     * Bucket region where the warehouse is located.
     */
    bucketRegion: pulumi.Input<string>;
    /**
     * directory.
     */
    directory?: pulumi.Input<string>;
    /**
     * warehouse description.
     */
    repositoryDesc?: pulumi.Input<string>;
    /**
     * warehouse name.
     */
    repositoryName: pulumi.Input<string>;
    /**
     * warehouse type (default warehouse: default, private warehouse: private).
     */
    repositoryType: pulumi.Input<string>;
}
