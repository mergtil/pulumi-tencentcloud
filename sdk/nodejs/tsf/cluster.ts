// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tsf/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * Abnormal number of deployment groups.
     */
    public /*out*/ readonly abnormalGroupCount!: pulumi.Output<number>;
    /**
     * CIDR assigned to cluster containers and service IP.
     */
    public readonly clusterCidr!: pulumi.Output<string | undefined>;
    /**
     * cluster notes.
     */
    public readonly clusterDesc!: pulumi.Output<string | undefined>;
    /**
     * Cluster ID.
     */
    public /*out*/ readonly clusterId!: pulumi.Output<string>;
    /**
     * Cluster remaining cpu limit.
     */
    public /*out*/ readonly clusterLimitCpu!: pulumi.Output<string>;
    /**
     * Cluster remaining memory limit.
     */
    public /*out*/ readonly clusterLimitMem!: pulumi.Output<string>;
    /**
     * Cluster name.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * cluster remark name.
     */
    public readonly clusterRemarkName!: pulumi.Output<string>;
    /**
     * cluster status.
     */
    public /*out*/ readonly clusterStatus!: pulumi.Output<string>;
    /**
     * The total CPU of the cluster, unit: core.
     */
    public /*out*/ readonly clusterTotalCpu!: pulumi.Output<number>;
    /**
     * The total memory of the cluster, unit: G.
     */
    public /*out*/ readonly clusterTotalMem!: pulumi.Output<number>;
    /**
     * Cluster type.
     */
    public readonly clusterType!: pulumi.Output<string>;
    /**
     * CPU used by the cluster, unit: core.
     */
    public /*out*/ readonly clusterUsedCpu!: pulumi.Output<number>;
    /**
     * The memory used by the cluster, unit: G.
     */
    public /*out*/ readonly clusterUsedMem!: pulumi.Output<number>;
    /**
     * cluster version.
     */
    public readonly clusterVersion!: pulumi.Output<string | undefined>;
    /**
     * Create time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Delete flag: `true`: can be deleted; `false`: can not be deleted.
     */
    public /*out*/ readonly deleteFlag!: pulumi.Output<boolean>;
    /**
     * Reasons why clusters cannot be deleted.
     */
    public /*out*/ readonly deleteFlagReason!: pulumi.Output<string>;
    /**
     * Total number of deployment groups.
     */
    public /*out*/ readonly groupCount!: pulumi.Output<number>;
    /**
     * Number of cluster machine instances.
     */
    public /*out*/ readonly instanceCount!: pulumi.Output<number>;
    /**
     * api address.
     */
    public readonly kuberneteApiServer!: pulumi.Output<string | undefined>;
    /**
     * native secret.
     */
    public readonly kuberneteNativeSecret!: pulumi.Output<string | undefined>;
    /**
     * `K`:kubeconfig, `S`:service account.
     */
    public readonly kuberneteNativeType!: pulumi.Output<string | undefined>;
    /**
     * The maximum number of services in the cluster. The value ranges from 32 to 32768. If it is not a power of 2, the nearest
     * power of 2 will be taken up.
     */
    public readonly maxClusterServiceNum!: pulumi.Output<number | undefined>;
    /**
     * The maximum number of Pods on each Node in the cluster. The value ranges from 4 to 256. When the value is not a power of
     * 2, the nearest power of 2 will be taken up.
     */
    public readonly maxNodePodNum!: pulumi.Output<number | undefined>;
    /**
     * The number of machine instances in the normal state of the cluster.
     */
    public /*out*/ readonly normalInstanceCount!: pulumi.Output<number>;
    /**
     * Control information for buttons on the front end.
     */
    public /*out*/ readonly operationInfos!: pulumi.Output<outputs.Tsf.ClusterOperationInfo[]>;
    /**
     * The dataset ID to be bound.
     */
    public readonly programId!: pulumi.Output<string | undefined>;
    /**
     * Program id list.
     */
    public readonly programIdLists!: pulumi.Output<string[] | undefined>;
    /**
     * Number of Deployment Groups in progress.
     */
    public /*out*/ readonly runGroupCount!: pulumi.Output<number>;
    /**
     * Number of machine instances running in the cluster.
     */
    public /*out*/ readonly runInstanceCount!: pulumi.Output<number>;
    /**
     * Number of running service instances.
     */
    public /*out*/ readonly runServiceInstanceCount!: pulumi.Output<number>;
    /**
     * Number of deployment groups in stop.
     */
    public /*out*/ readonly stopGroupCount!: pulumi.Output<number>;
    /**
     * Subnet id.
     */
    public readonly subnetId!: pulumi.Output<string | undefined>;
    /**
     * Tag description list.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The TSF region to which the cluster belongs.
     */
    public readonly tsfRegionId!: pulumi.Output<string | undefined>;
    /**
     * Name of the TSF region to which the cluster belongs.
     */
    public /*out*/ readonly tsfRegionName!: pulumi.Output<string>;
    /**
     * The TSF availability zone to which the cluster belongs.
     */
    public readonly tsfZoneId!: pulumi.Output<string | undefined>;
    /**
     * The name of the TSF availability zone to which the cluster belongs.
     */
    public /*out*/ readonly tsfZoneName!: pulumi.Output<string>;
    /**
     * Update time.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * Vpc id.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["abnormalGroupCount"] = state ? state.abnormalGroupCount : undefined;
            resourceInputs["clusterCidr"] = state ? state.clusterCidr : undefined;
            resourceInputs["clusterDesc"] = state ? state.clusterDesc : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["clusterLimitCpu"] = state ? state.clusterLimitCpu : undefined;
            resourceInputs["clusterLimitMem"] = state ? state.clusterLimitMem : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterRemarkName"] = state ? state.clusterRemarkName : undefined;
            resourceInputs["clusterStatus"] = state ? state.clusterStatus : undefined;
            resourceInputs["clusterTotalCpu"] = state ? state.clusterTotalCpu : undefined;
            resourceInputs["clusterTotalMem"] = state ? state.clusterTotalMem : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["clusterUsedCpu"] = state ? state.clusterUsedCpu : undefined;
            resourceInputs["clusterUsedMem"] = state ? state.clusterUsedMem : undefined;
            resourceInputs["clusterVersion"] = state ? state.clusterVersion : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deleteFlag"] = state ? state.deleteFlag : undefined;
            resourceInputs["deleteFlagReason"] = state ? state.deleteFlagReason : undefined;
            resourceInputs["groupCount"] = state ? state.groupCount : undefined;
            resourceInputs["instanceCount"] = state ? state.instanceCount : undefined;
            resourceInputs["kuberneteApiServer"] = state ? state.kuberneteApiServer : undefined;
            resourceInputs["kuberneteNativeSecret"] = state ? state.kuberneteNativeSecret : undefined;
            resourceInputs["kuberneteNativeType"] = state ? state.kuberneteNativeType : undefined;
            resourceInputs["maxClusterServiceNum"] = state ? state.maxClusterServiceNum : undefined;
            resourceInputs["maxNodePodNum"] = state ? state.maxNodePodNum : undefined;
            resourceInputs["normalInstanceCount"] = state ? state.normalInstanceCount : undefined;
            resourceInputs["operationInfos"] = state ? state.operationInfos : undefined;
            resourceInputs["programId"] = state ? state.programId : undefined;
            resourceInputs["programIdLists"] = state ? state.programIdLists : undefined;
            resourceInputs["runGroupCount"] = state ? state.runGroupCount : undefined;
            resourceInputs["runInstanceCount"] = state ? state.runInstanceCount : undefined;
            resourceInputs["runServiceInstanceCount"] = state ? state.runServiceInstanceCount : undefined;
            resourceInputs["stopGroupCount"] = state ? state.stopGroupCount : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tsfRegionId"] = state ? state.tsfRegionId : undefined;
            resourceInputs["tsfRegionName"] = state ? state.tsfRegionName : undefined;
            resourceInputs["tsfZoneId"] = state ? state.tsfZoneId : undefined;
            resourceInputs["tsfZoneName"] = state ? state.tsfZoneName : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.clusterType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterType'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["clusterCidr"] = args ? args.clusterCidr : undefined;
            resourceInputs["clusterDesc"] = args ? args.clusterDesc : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["clusterRemarkName"] = args ? args.clusterRemarkName : undefined;
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["clusterVersion"] = args ? args.clusterVersion : undefined;
            resourceInputs["kuberneteApiServer"] = args ? args.kuberneteApiServer : undefined;
            resourceInputs["kuberneteNativeSecret"] = args ? args.kuberneteNativeSecret : undefined;
            resourceInputs["kuberneteNativeType"] = args ? args.kuberneteNativeType : undefined;
            resourceInputs["maxClusterServiceNum"] = args ? args.maxClusterServiceNum : undefined;
            resourceInputs["maxNodePodNum"] = args ? args.maxNodePodNum : undefined;
            resourceInputs["programId"] = args ? args.programId : undefined;
            resourceInputs["programIdLists"] = args ? args.programIdLists : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tsfRegionId"] = args ? args.tsfRegionId : undefined;
            resourceInputs["tsfZoneId"] = args ? args.tsfZoneId : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["abnormalGroupCount"] = undefined /*out*/;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["clusterLimitCpu"] = undefined /*out*/;
            resourceInputs["clusterLimitMem"] = undefined /*out*/;
            resourceInputs["clusterStatus"] = undefined /*out*/;
            resourceInputs["clusterTotalCpu"] = undefined /*out*/;
            resourceInputs["clusterTotalMem"] = undefined /*out*/;
            resourceInputs["clusterUsedCpu"] = undefined /*out*/;
            resourceInputs["clusterUsedMem"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["deleteFlag"] = undefined /*out*/;
            resourceInputs["deleteFlagReason"] = undefined /*out*/;
            resourceInputs["groupCount"] = undefined /*out*/;
            resourceInputs["instanceCount"] = undefined /*out*/;
            resourceInputs["normalInstanceCount"] = undefined /*out*/;
            resourceInputs["operationInfos"] = undefined /*out*/;
            resourceInputs["runGroupCount"] = undefined /*out*/;
            resourceInputs["runInstanceCount"] = undefined /*out*/;
            resourceInputs["runServiceInstanceCount"] = undefined /*out*/;
            resourceInputs["stopGroupCount"] = undefined /*out*/;
            resourceInputs["tsfRegionName"] = undefined /*out*/;
            resourceInputs["tsfZoneName"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * Abnormal number of deployment groups.
     */
    abnormalGroupCount?: pulumi.Input<number>;
    /**
     * CIDR assigned to cluster containers and service IP.
     */
    clusterCidr?: pulumi.Input<string>;
    /**
     * cluster notes.
     */
    clusterDesc?: pulumi.Input<string>;
    /**
     * Cluster ID.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Cluster remaining cpu limit.
     */
    clusterLimitCpu?: pulumi.Input<string>;
    /**
     * Cluster remaining memory limit.
     */
    clusterLimitMem?: pulumi.Input<string>;
    /**
     * Cluster name.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * cluster remark name.
     */
    clusterRemarkName?: pulumi.Input<string>;
    /**
     * cluster status.
     */
    clusterStatus?: pulumi.Input<string>;
    /**
     * The total CPU of the cluster, unit: core.
     */
    clusterTotalCpu?: pulumi.Input<number>;
    /**
     * The total memory of the cluster, unit: G.
     */
    clusterTotalMem?: pulumi.Input<number>;
    /**
     * Cluster type.
     */
    clusterType?: pulumi.Input<string>;
    /**
     * CPU used by the cluster, unit: core.
     */
    clusterUsedCpu?: pulumi.Input<number>;
    /**
     * The memory used by the cluster, unit: G.
     */
    clusterUsedMem?: pulumi.Input<number>;
    /**
     * cluster version.
     */
    clusterVersion?: pulumi.Input<string>;
    /**
     * Create time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Delete flag: `true`: can be deleted; `false`: can not be deleted.
     */
    deleteFlag?: pulumi.Input<boolean>;
    /**
     * Reasons why clusters cannot be deleted.
     */
    deleteFlagReason?: pulumi.Input<string>;
    /**
     * Total number of deployment groups.
     */
    groupCount?: pulumi.Input<number>;
    /**
     * Number of cluster machine instances.
     */
    instanceCount?: pulumi.Input<number>;
    /**
     * api address.
     */
    kuberneteApiServer?: pulumi.Input<string>;
    /**
     * native secret.
     */
    kuberneteNativeSecret?: pulumi.Input<string>;
    /**
     * `K`:kubeconfig, `S`:service account.
     */
    kuberneteNativeType?: pulumi.Input<string>;
    /**
     * The maximum number of services in the cluster. The value ranges from 32 to 32768. If it is not a power of 2, the nearest
     * power of 2 will be taken up.
     */
    maxClusterServiceNum?: pulumi.Input<number>;
    /**
     * The maximum number of Pods on each Node in the cluster. The value ranges from 4 to 256. When the value is not a power of
     * 2, the nearest power of 2 will be taken up.
     */
    maxNodePodNum?: pulumi.Input<number>;
    /**
     * The number of machine instances in the normal state of the cluster.
     */
    normalInstanceCount?: pulumi.Input<number>;
    /**
     * Control information for buttons on the front end.
     */
    operationInfos?: pulumi.Input<pulumi.Input<inputs.Tsf.ClusterOperationInfo>[]>;
    /**
     * The dataset ID to be bound.
     */
    programId?: pulumi.Input<string>;
    /**
     * Program id list.
     */
    programIdLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of Deployment Groups in progress.
     */
    runGroupCount?: pulumi.Input<number>;
    /**
     * Number of machine instances running in the cluster.
     */
    runInstanceCount?: pulumi.Input<number>;
    /**
     * Number of running service instances.
     */
    runServiceInstanceCount?: pulumi.Input<number>;
    /**
     * Number of deployment groups in stop.
     */
    stopGroupCount?: pulumi.Input<number>;
    /**
     * Subnet id.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The TSF region to which the cluster belongs.
     */
    tsfRegionId?: pulumi.Input<string>;
    /**
     * Name of the TSF region to which the cluster belongs.
     */
    tsfRegionName?: pulumi.Input<string>;
    /**
     * The TSF availability zone to which the cluster belongs.
     */
    tsfZoneId?: pulumi.Input<string>;
    /**
     * The name of the TSF availability zone to which the cluster belongs.
     */
    tsfZoneName?: pulumi.Input<string>;
    /**
     * Update time.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Vpc id.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * CIDR assigned to cluster containers and service IP.
     */
    clusterCidr?: pulumi.Input<string>;
    /**
     * cluster notes.
     */
    clusterDesc?: pulumi.Input<string>;
    /**
     * Cluster name.
     */
    clusterName: pulumi.Input<string>;
    /**
     * cluster remark name.
     */
    clusterRemarkName?: pulumi.Input<string>;
    /**
     * Cluster type.
     */
    clusterType: pulumi.Input<string>;
    /**
     * cluster version.
     */
    clusterVersion?: pulumi.Input<string>;
    /**
     * api address.
     */
    kuberneteApiServer?: pulumi.Input<string>;
    /**
     * native secret.
     */
    kuberneteNativeSecret?: pulumi.Input<string>;
    /**
     * `K`:kubeconfig, `S`:service account.
     */
    kuberneteNativeType?: pulumi.Input<string>;
    /**
     * The maximum number of services in the cluster. The value ranges from 32 to 32768. If it is not a power of 2, the nearest
     * power of 2 will be taken up.
     */
    maxClusterServiceNum?: pulumi.Input<number>;
    /**
     * The maximum number of Pods on each Node in the cluster. The value ranges from 4 to 256. When the value is not a power of
     * 2, the nearest power of 2 will be taken up.
     */
    maxNodePodNum?: pulumi.Input<number>;
    /**
     * The dataset ID to be bound.
     */
    programId?: pulumi.Input<string>;
    /**
     * Program id list.
     */
    programIdLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Subnet id.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * The TSF region to which the cluster belongs.
     */
    tsfRegionId?: pulumi.Input<string>;
    /**
     * The TSF availability zone to which the cluster belongs.
     */
    tsfZoneId?: pulumi.Input<string>;
    /**
     * Vpc id.
     */
    vpcId: pulumi.Input<string>;
}
