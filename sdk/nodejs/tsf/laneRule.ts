// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class LaneRule extends pulumi.CustomResource {
    /**
     * Get an existing LaneRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LaneRuleState, opts?: pulumi.CustomResourceOptions): LaneRule {
        return new LaneRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tsf/laneRule:LaneRule';

    /**
     * Returns true if the given object is an instance of LaneRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LaneRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LaneRule.__pulumiType;
    }

    /**
     * creation time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<number>;
    /**
     * open state, true/false, default: false.
     */
    public readonly enable!: pulumi.Output<boolean>;
    /**
     * lane ID.
     */
    public readonly laneId!: pulumi.Output<string>;
    /**
     * Priority.
     */
    public /*out*/ readonly priority!: pulumi.Output<number>;
    /**
     * Program id list.
     */
    public readonly programIdLists!: pulumi.Output<string[] | undefined>;
    /**
     * Lane rule notes.
     */
    public readonly remark!: pulumi.Output<string>;
    /**
     * Rule id.
     */
    public /*out*/ readonly ruleId!: pulumi.Output<string>;
    /**
     * lane rule name.
     */
    public readonly ruleName!: pulumi.Output<string>;
    /**
     * list of swimlane rule labels.
     */
    public readonly ruleTagLists!: pulumi.Output<outputs.Tsf.LaneRuleRuleTagList[]>;
    /**
     * lane rule label relationship.
     */
    public readonly ruleTagRelationship!: pulumi.Output<string>;
    /**
     * update time.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<number>;

    /**
     * Create a LaneRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LaneRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LaneRuleArgs | LaneRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LaneRuleState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["laneId"] = state ? state.laneId : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["programIdLists"] = state ? state.programIdLists : undefined;
            resourceInputs["remark"] = state ? state.remark : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["ruleTagLists"] = state ? state.ruleTagLists : undefined;
            resourceInputs["ruleTagRelationship"] = state ? state.ruleTagRelationship : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as LaneRuleArgs | undefined;
            if ((!args || args.enable === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enable'");
            }
            if ((!args || args.laneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'laneId'");
            }
            if ((!args || args.remark === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remark'");
            }
            if ((!args || args.ruleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            if ((!args || args.ruleTagLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleTagLists'");
            }
            if ((!args || args.ruleTagRelationship === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleTagRelationship'");
            }
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["laneId"] = args ? args.laneId : undefined;
            resourceInputs["programIdLists"] = args ? args.programIdLists : undefined;
            resourceInputs["remark"] = args ? args.remark : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["ruleTagLists"] = args ? args.ruleTagLists : undefined;
            resourceInputs["ruleTagRelationship"] = args ? args.ruleTagRelationship : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["priority"] = undefined /*out*/;
            resourceInputs["ruleId"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LaneRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LaneRule resources.
 */
export interface LaneRuleState {
    /**
     * creation time.
     */
    createTime?: pulumi.Input<number>;
    /**
     * open state, true/false, default: false.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * lane ID.
     */
    laneId?: pulumi.Input<string>;
    /**
     * Priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * Program id list.
     */
    programIdLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Lane rule notes.
     */
    remark?: pulumi.Input<string>;
    /**
     * Rule id.
     */
    ruleId?: pulumi.Input<string>;
    /**
     * lane rule name.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * list of swimlane rule labels.
     */
    ruleTagLists?: pulumi.Input<pulumi.Input<inputs.Tsf.LaneRuleRuleTagList>[]>;
    /**
     * lane rule label relationship.
     */
    ruleTagRelationship?: pulumi.Input<string>;
    /**
     * update time.
     */
    updateTime?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LaneRule resource.
 */
export interface LaneRuleArgs {
    /**
     * open state, true/false, default: false.
     */
    enable: pulumi.Input<boolean>;
    /**
     * lane ID.
     */
    laneId: pulumi.Input<string>;
    /**
     * Program id list.
     */
    programIdLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Lane rule notes.
     */
    remark: pulumi.Input<string>;
    /**
     * lane rule name.
     */
    ruleName: pulumi.Input<string>;
    /**
     * list of swimlane rule labels.
     */
    ruleTagLists: pulumi.Input<pulumi.Input<inputs.Tsf.LaneRuleRuleTagList>[]>;
    /**
     * lane rule label relationship.
     */
    ruleTagRelationship: pulumi.Input<string>;
}
