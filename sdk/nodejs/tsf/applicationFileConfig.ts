// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class ApplicationFileConfig extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationFileConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationFileConfigState, opts?: pulumi.CustomResourceOptions): ApplicationFileConfig {
        return new ApplicationFileConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tsf/applicationFileConfig:ApplicationFileConfig';

    /**
     * Returns true if the given object is an instance of ApplicationFileConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationFileConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationFileConfig.__pulumiType;
    }

    /**
     * Config file associated application ID.
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * Configuration file encoding, utf-8 or gbk. Note: If you choose gbk, you need the support of a new version of
     * tsf-consul-template (public cloud virtual machines need to use 1.32 tsf-agent, and containers need to obtain the latest
     * tsf-consul-template-docker.tar.gz from the documentation).
     */
    public readonly configFileCode!: pulumi.Output<string | undefined>;
    /**
     * Config file name.
     */
    public readonly configFileName!: pulumi.Output<string>;
    /**
     * config release path.
     */
    public readonly configFilePath!: pulumi.Output<string>;
    /**
     * Configuration file content (the original content encoding needs to be in utf-8 format, if the ConfigFileCode is gbk, it
     * will be converted in the background).
     */
    public readonly configFileValue!: pulumi.Output<string>;
    /**
     * Config Name.
     */
    public readonly configName!: pulumi.Output<string>;
    /**
     * post command.
     */
    public readonly configPostCmd!: pulumi.Output<string | undefined>;
    /**
     * Config version.
     */
    public readonly configVersion!: pulumi.Output<string>;
    /**
     * config version description.
     */
    public readonly configVersionDesc!: pulumi.Output<string | undefined>;
    /**
     * the config value is encoded with base64 or not.
     */
    public readonly encodeWithBase64!: pulumi.Output<boolean | undefined>;
    /**
     * datasource for auth.
     */
    public readonly programIdLists!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ApplicationFileConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationFileConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationFileConfigArgs | ApplicationFileConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationFileConfigState | undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["configFileCode"] = state ? state.configFileCode : undefined;
            resourceInputs["configFileName"] = state ? state.configFileName : undefined;
            resourceInputs["configFilePath"] = state ? state.configFilePath : undefined;
            resourceInputs["configFileValue"] = state ? state.configFileValue : undefined;
            resourceInputs["configName"] = state ? state.configName : undefined;
            resourceInputs["configPostCmd"] = state ? state.configPostCmd : undefined;
            resourceInputs["configVersion"] = state ? state.configVersion : undefined;
            resourceInputs["configVersionDesc"] = state ? state.configVersionDesc : undefined;
            resourceInputs["encodeWithBase64"] = state ? state.encodeWithBase64 : undefined;
            resourceInputs["programIdLists"] = state ? state.programIdLists : undefined;
        } else {
            const args = argsOrState as ApplicationFileConfigArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if ((!args || args.configFileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configFileName'");
            }
            if ((!args || args.configFilePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configFilePath'");
            }
            if ((!args || args.configFileValue === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configFileValue'");
            }
            if ((!args || args.configName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configName'");
            }
            if ((!args || args.configVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configVersion'");
            }
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["configFileCode"] = args ? args.configFileCode : undefined;
            resourceInputs["configFileName"] = args ? args.configFileName : undefined;
            resourceInputs["configFilePath"] = args ? args.configFilePath : undefined;
            resourceInputs["configFileValue"] = args ? args.configFileValue : undefined;
            resourceInputs["configName"] = args ? args.configName : undefined;
            resourceInputs["configPostCmd"] = args ? args.configPostCmd : undefined;
            resourceInputs["configVersion"] = args ? args.configVersion : undefined;
            resourceInputs["configVersionDesc"] = args ? args.configVersionDesc : undefined;
            resourceInputs["encodeWithBase64"] = args ? args.encodeWithBase64 : undefined;
            resourceInputs["programIdLists"] = args ? args.programIdLists : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationFileConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplicationFileConfig resources.
 */
export interface ApplicationFileConfigState {
    /**
     * Config file associated application ID.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * Configuration file encoding, utf-8 or gbk. Note: If you choose gbk, you need the support of a new version of
     * tsf-consul-template (public cloud virtual machines need to use 1.32 tsf-agent, and containers need to obtain the latest
     * tsf-consul-template-docker.tar.gz from the documentation).
     */
    configFileCode?: pulumi.Input<string>;
    /**
     * Config file name.
     */
    configFileName?: pulumi.Input<string>;
    /**
     * config release path.
     */
    configFilePath?: pulumi.Input<string>;
    /**
     * Configuration file content (the original content encoding needs to be in utf-8 format, if the ConfigFileCode is gbk, it
     * will be converted in the background).
     */
    configFileValue?: pulumi.Input<string>;
    /**
     * Config Name.
     */
    configName?: pulumi.Input<string>;
    /**
     * post command.
     */
    configPostCmd?: pulumi.Input<string>;
    /**
     * Config version.
     */
    configVersion?: pulumi.Input<string>;
    /**
     * config version description.
     */
    configVersionDesc?: pulumi.Input<string>;
    /**
     * the config value is encoded with base64 or not.
     */
    encodeWithBase64?: pulumi.Input<boolean>;
    /**
     * datasource for auth.
     */
    programIdLists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ApplicationFileConfig resource.
 */
export interface ApplicationFileConfigArgs {
    /**
     * Config file associated application ID.
     */
    applicationId: pulumi.Input<string>;
    /**
     * Configuration file encoding, utf-8 or gbk. Note: If you choose gbk, you need the support of a new version of
     * tsf-consul-template (public cloud virtual machines need to use 1.32 tsf-agent, and containers need to obtain the latest
     * tsf-consul-template-docker.tar.gz from the documentation).
     */
    configFileCode?: pulumi.Input<string>;
    /**
     * Config file name.
     */
    configFileName: pulumi.Input<string>;
    /**
     * config release path.
     */
    configFilePath: pulumi.Input<string>;
    /**
     * Configuration file content (the original content encoding needs to be in utf-8 format, if the ConfigFileCode is gbk, it
     * will be converted in the background).
     */
    configFileValue: pulumi.Input<string>;
    /**
     * Config Name.
     */
    configName: pulumi.Input<string>;
    /**
     * post command.
     */
    configPostCmd?: pulumi.Input<string>;
    /**
     * Config version.
     */
    configVersion: pulumi.Input<string>;
    /**
     * config version description.
     */
    configVersionDesc?: pulumi.Input<string>;
    /**
     * the config value is encoded with base64 or not.
     */
    encodeWithBase64?: pulumi.Input<boolean>;
    /**
     * datasource for auth.
     */
    programIdLists?: pulumi.Input<pulumi.Input<string>[]>;
}
