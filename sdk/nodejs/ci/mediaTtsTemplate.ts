// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class MediaTtsTemplate extends pulumi.CustomResource {
    /**
     * Get an existing MediaTtsTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MediaTtsTemplateState, opts?: pulumi.CustomResourceOptions): MediaTtsTemplate {
        return new MediaTtsTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Ci/mediaTtsTemplate:MediaTtsTemplate';

    /**
     * Returns true if the given object is an instance of MediaTtsTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MediaTtsTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MediaTtsTemplate.__pulumiType;
    }

    /**
     * bucket name.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * Audio format, default wav (synchronous)/pcm (asynchronous, wav, mp3, pcm.
     */
    public readonly codec!: pulumi.Output<string | undefined>;
    /**
     * Processing mode, default value Asyc, Asyc (asynchronous composition), Sync (synchronous composition), When Asyc is
     * selected, the codec only supports pcm.
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Speech rate, the default value is 100, [50,200].
     */
    public readonly speed!: pulumi.Output<string | undefined>;
    /**
     * Timbre, the default value is ruxue.
     */
    public readonly voiceType!: pulumi.Output<string | undefined>;
    /**
     * Volume, default value 0, [-10,10].
     */
    public readonly volume!: pulumi.Output<string | undefined>;

    /**
     * Create a MediaTtsTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MediaTtsTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MediaTtsTemplateArgs | MediaTtsTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MediaTtsTemplateState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["codec"] = state ? state.codec : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["speed"] = state ? state.speed : undefined;
            resourceInputs["voiceType"] = state ? state.voiceType : undefined;
            resourceInputs["volume"] = state ? state.volume : undefined;
        } else {
            const args = argsOrState as MediaTtsTemplateArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["codec"] = args ? args.codec : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["speed"] = args ? args.speed : undefined;
            resourceInputs["voiceType"] = args ? args.voiceType : undefined;
            resourceInputs["volume"] = args ? args.volume : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MediaTtsTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MediaTtsTemplate resources.
 */
export interface MediaTtsTemplateState {
    /**
     * bucket name.
     */
    bucket?: pulumi.Input<string>;
    /**
     * Audio format, default wav (synchronous)/pcm (asynchronous, wav, mp3, pcm.
     */
    codec?: pulumi.Input<string>;
    /**
     * Processing mode, default value Asyc, Asyc (asynchronous composition), Sync (synchronous composition), When Asyc is
     * selected, the codec only supports pcm.
     */
    mode?: pulumi.Input<string>;
    /**
     * The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
     */
    name?: pulumi.Input<string>;
    /**
     * Speech rate, the default value is 100, [50,200].
     */
    speed?: pulumi.Input<string>;
    /**
     * Timbre, the default value is ruxue.
     */
    voiceType?: pulumi.Input<string>;
    /**
     * Volume, default value 0, [-10,10].
     */
    volume?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MediaTtsTemplate resource.
 */
export interface MediaTtsTemplateArgs {
    /**
     * bucket name.
     */
    bucket: pulumi.Input<string>;
    /**
     * Audio format, default wav (synchronous)/pcm (asynchronous, wav, mp3, pcm.
     */
    codec?: pulumi.Input<string>;
    /**
     * Processing mode, default value Asyc, Asyc (asynchronous composition), Sync (synchronous composition), When Asyc is
     * selected, the codec only supports pcm.
     */
    mode?: pulumi.Input<string>;
    /**
     * The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
     */
    name?: pulumi.Input<string>;
    /**
     * Speech rate, the default value is 100, [50,200].
     */
    speed?: pulumi.Input<string>;
    /**
     * Timbre, the default value is ruxue.
     */
    voiceType?: pulumi.Input<string>;
    /**
     * Volume, default value 0, [-10,10].
     */
    volume?: pulumi.Input<string>;
}
