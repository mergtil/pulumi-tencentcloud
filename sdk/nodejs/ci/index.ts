// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BucketAttachmentArgs, BucketAttachmentState } from "./bucketAttachment";
export type BucketAttachment = import("./bucketAttachment").BucketAttachment;
export const BucketAttachment: typeof import("./bucketAttachment").BucketAttachment = null as any;
utilities.lazyLoad(exports, ["BucketAttachment"], () => require("./bucketAttachment"));

export { BucketPicStyleArgs, BucketPicStyleState } from "./bucketPicStyle";
export type BucketPicStyle = import("./bucketPicStyle").BucketPicStyle;
export const BucketPicStyle: typeof import("./bucketPicStyle").BucketPicStyle = null as any;
utilities.lazyLoad(exports, ["BucketPicStyle"], () => require("./bucketPicStyle"));

export { GuetzliArgs, GuetzliState } from "./guetzli";
export type Guetzli = import("./guetzli").Guetzli;
export const Guetzli: typeof import("./guetzli").Guetzli = null as any;
utilities.lazyLoad(exports, ["Guetzli"], () => require("./guetzli"));

export { HotLinkArgs, HotLinkState } from "./hotLink";
export type HotLink = import("./hotLink").HotLink;
export const HotLink: typeof import("./hotLink").HotLink = null as any;
utilities.lazyLoad(exports, ["HotLink"], () => require("./hotLink"));

export { MediaAnimationTemplateArgs, MediaAnimationTemplateState } from "./mediaAnimationTemplate";
export type MediaAnimationTemplate = import("./mediaAnimationTemplate").MediaAnimationTemplate;
export const MediaAnimationTemplate: typeof import("./mediaAnimationTemplate").MediaAnimationTemplate = null as any;
utilities.lazyLoad(exports, ["MediaAnimationTemplate"], () => require("./mediaAnimationTemplate"));

export { MediaConcatTemplateArgs, MediaConcatTemplateState } from "./mediaConcatTemplate";
export type MediaConcatTemplate = import("./mediaConcatTemplate").MediaConcatTemplate;
export const MediaConcatTemplate: typeof import("./mediaConcatTemplate").MediaConcatTemplate = null as any;
utilities.lazyLoad(exports, ["MediaConcatTemplate"], () => require("./mediaConcatTemplate"));

export { MediaPicProcessTemplateArgs, MediaPicProcessTemplateState } from "./mediaPicProcessTemplate";
export type MediaPicProcessTemplate = import("./mediaPicProcessTemplate").MediaPicProcessTemplate;
export const MediaPicProcessTemplate: typeof import("./mediaPicProcessTemplate").MediaPicProcessTemplate = null as any;
utilities.lazyLoad(exports, ["MediaPicProcessTemplate"], () => require("./mediaPicProcessTemplate"));

export { MediaSmartCoverTemplateArgs, MediaSmartCoverTemplateState } from "./mediaSmartCoverTemplate";
export type MediaSmartCoverTemplate = import("./mediaSmartCoverTemplate").MediaSmartCoverTemplate;
export const MediaSmartCoverTemplate: typeof import("./mediaSmartCoverTemplate").MediaSmartCoverTemplate = null as any;
utilities.lazyLoad(exports, ["MediaSmartCoverTemplate"], () => require("./mediaSmartCoverTemplate"));

export { MediaSnapshotTemplateArgs, MediaSnapshotTemplateState } from "./mediaSnapshotTemplate";
export type MediaSnapshotTemplate = import("./mediaSnapshotTemplate").MediaSnapshotTemplate;
export const MediaSnapshotTemplate: typeof import("./mediaSnapshotTemplate").MediaSnapshotTemplate = null as any;
utilities.lazyLoad(exports, ["MediaSnapshotTemplate"], () => require("./mediaSnapshotTemplate"));

export { MediaSpeechRecognitionTemplateArgs, MediaSpeechRecognitionTemplateState } from "./mediaSpeechRecognitionTemplate";
export type MediaSpeechRecognitionTemplate = import("./mediaSpeechRecognitionTemplate").MediaSpeechRecognitionTemplate;
export const MediaSpeechRecognitionTemplate: typeof import("./mediaSpeechRecognitionTemplate").MediaSpeechRecognitionTemplate = null as any;
utilities.lazyLoad(exports, ["MediaSpeechRecognitionTemplate"], () => require("./mediaSpeechRecognitionTemplate"));

export { MediaSuperResolutionTemplateArgs, MediaSuperResolutionTemplateState } from "./mediaSuperResolutionTemplate";
export type MediaSuperResolutionTemplate = import("./mediaSuperResolutionTemplate").MediaSuperResolutionTemplate;
export const MediaSuperResolutionTemplate: typeof import("./mediaSuperResolutionTemplate").MediaSuperResolutionTemplate = null as any;
utilities.lazyLoad(exports, ["MediaSuperResolutionTemplate"], () => require("./mediaSuperResolutionTemplate"));

export { MediaTranscodeProTemplateArgs, MediaTranscodeProTemplateState } from "./mediaTranscodeProTemplate";
export type MediaTranscodeProTemplate = import("./mediaTranscodeProTemplate").MediaTranscodeProTemplate;
export const MediaTranscodeProTemplate: typeof import("./mediaTranscodeProTemplate").MediaTranscodeProTemplate = null as any;
utilities.lazyLoad(exports, ["MediaTranscodeProTemplate"], () => require("./mediaTranscodeProTemplate"));

export { MediaTranscodeTemplateArgs, MediaTranscodeTemplateState } from "./mediaTranscodeTemplate";
export type MediaTranscodeTemplate = import("./mediaTranscodeTemplate").MediaTranscodeTemplate;
export const MediaTranscodeTemplate: typeof import("./mediaTranscodeTemplate").MediaTranscodeTemplate = null as any;
utilities.lazyLoad(exports, ["MediaTranscodeTemplate"], () => require("./mediaTranscodeTemplate"));

export { MediaTtsTemplateArgs, MediaTtsTemplateState } from "./mediaTtsTemplate";
export type MediaTtsTemplate = import("./mediaTtsTemplate").MediaTtsTemplate;
export const MediaTtsTemplate: typeof import("./mediaTtsTemplate").MediaTtsTemplate = null as any;
utilities.lazyLoad(exports, ["MediaTtsTemplate"], () => require("./mediaTtsTemplate"));

export { MediaVideoMontageTemplateArgs, MediaVideoMontageTemplateState } from "./mediaVideoMontageTemplate";
export type MediaVideoMontageTemplate = import("./mediaVideoMontageTemplate").MediaVideoMontageTemplate;
export const MediaVideoMontageTemplate: typeof import("./mediaVideoMontageTemplate").MediaVideoMontageTemplate = null as any;
utilities.lazyLoad(exports, ["MediaVideoMontageTemplate"], () => require("./mediaVideoMontageTemplate"));

export { MediaVideoProcessTemplateArgs, MediaVideoProcessTemplateState } from "./mediaVideoProcessTemplate";
export type MediaVideoProcessTemplate = import("./mediaVideoProcessTemplate").MediaVideoProcessTemplate;
export const MediaVideoProcessTemplate: typeof import("./mediaVideoProcessTemplate").MediaVideoProcessTemplate = null as any;
utilities.lazyLoad(exports, ["MediaVideoProcessTemplate"], () => require("./mediaVideoProcessTemplate"));

export { MediaVoiceSeparateTemplateArgs, MediaVoiceSeparateTemplateState } from "./mediaVoiceSeparateTemplate";
export type MediaVoiceSeparateTemplate = import("./mediaVoiceSeparateTemplate").MediaVoiceSeparateTemplate;
export const MediaVoiceSeparateTemplate: typeof import("./mediaVoiceSeparateTemplate").MediaVoiceSeparateTemplate = null as any;
utilities.lazyLoad(exports, ["MediaVoiceSeparateTemplate"], () => require("./mediaVoiceSeparateTemplate"));

export { MediaWatermarkTemplateArgs, MediaWatermarkTemplateState } from "./mediaWatermarkTemplate";
export type MediaWatermarkTemplate = import("./mediaWatermarkTemplate").MediaWatermarkTemplate;
export const MediaWatermarkTemplate: typeof import("./mediaWatermarkTemplate").MediaWatermarkTemplate = null as any;
utilities.lazyLoad(exports, ["MediaWatermarkTemplate"], () => require("./mediaWatermarkTemplate"));

export { OriginalImageProtectionArgs, OriginalImageProtectionState } from "./originalImageProtection";
export type OriginalImageProtection = import("./originalImageProtection").OriginalImageProtection;
export const OriginalImageProtection: typeof import("./originalImageProtection").OriginalImageProtection = null as any;
utilities.lazyLoad(exports, ["OriginalImageProtection"], () => require("./originalImageProtection"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Ci/bucketAttachment:BucketAttachment":
                return new BucketAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Ci/bucketPicStyle:BucketPicStyle":
                return new BucketPicStyle(name, <any>undefined, { urn })
            case "tencentcloud:Ci/guetzli:Guetzli":
                return new Guetzli(name, <any>undefined, { urn })
            case "tencentcloud:Ci/hotLink:HotLink":
                return new HotLink(name, <any>undefined, { urn })
            case "tencentcloud:Ci/mediaAnimationTemplate:MediaAnimationTemplate":
                return new MediaAnimationTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Ci/mediaConcatTemplate:MediaConcatTemplate":
                return new MediaConcatTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Ci/mediaPicProcessTemplate:MediaPicProcessTemplate":
                return new MediaPicProcessTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Ci/mediaSmartCoverTemplate:MediaSmartCoverTemplate":
                return new MediaSmartCoverTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Ci/mediaSnapshotTemplate:MediaSnapshotTemplate":
                return new MediaSnapshotTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Ci/mediaSpeechRecognitionTemplate:MediaSpeechRecognitionTemplate":
                return new MediaSpeechRecognitionTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Ci/mediaSuperResolutionTemplate:MediaSuperResolutionTemplate":
                return new MediaSuperResolutionTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Ci/mediaTranscodeProTemplate:MediaTranscodeProTemplate":
                return new MediaTranscodeProTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Ci/mediaTranscodeTemplate:MediaTranscodeTemplate":
                return new MediaTranscodeTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Ci/mediaTtsTemplate:MediaTtsTemplate":
                return new MediaTtsTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Ci/mediaVideoMontageTemplate:MediaVideoMontageTemplate":
                return new MediaVideoMontageTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Ci/mediaVideoProcessTemplate:MediaVideoProcessTemplate":
                return new MediaVideoProcessTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Ci/mediaVoiceSeparateTemplate:MediaVoiceSeparateTemplate":
                return new MediaVoiceSeparateTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Ci/mediaWatermarkTemplate:MediaWatermarkTemplate":
                return new MediaWatermarkTemplate(name, <any>undefined, { urn })
            case "tencentcloud:Ci/originalImageProtection:OriginalImageProtection":
                return new OriginalImageProtection(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Ci/bucketAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ci/bucketPicStyle", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ci/guetzli", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ci/hotLink", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ci/mediaAnimationTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ci/mediaConcatTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ci/mediaPicProcessTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ci/mediaSmartCoverTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ci/mediaSnapshotTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ci/mediaSpeechRecognitionTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ci/mediaSuperResolutionTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ci/mediaTranscodeProTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ci/mediaTranscodeTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ci/mediaTtsTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ci/mediaVideoMontageTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ci/mediaVideoProcessTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ci/mediaVoiceSeparateTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ci/mediaWatermarkTemplate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Ci/originalImageProtection", _module)
