// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class InstanceAccount extends pulumi.CustomResource {
    /**
     * Get an existing InstanceAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceAccountState, opts?: pulumi.CustomResourceOptions): InstanceAccount {
        return new InstanceAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Mongodb/instanceAccount:InstanceAccount';

    /**
     * Returns true if the given object is an instance of InstanceAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceAccount.__pulumiType;
    }

    /**
     * The read and write permission information of the account.
     */
    public readonly authRoles!: pulumi.Output<outputs.Mongodb.InstanceAccountAuthRole[] | undefined>;
    /**
     * Instance ID, the format is: cmgo-9d0p6umb.Same as the instance ID displayed in the cloud database console page.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The password corresponding to the mongouser account. mongouser is the system default account, which is the password set
     * when creating an instance.
     */
    public readonly mongoUserPassword!: pulumi.Output<string>;
    /**
     * New account password. Password complexity requirements are as follows: character length range [8,32]. Contains at least
     * letters, numbers and special characters (exclamation point!, at@, pound sign #, percent sign %, caret ^, asterisk *,
     * parentheses (), underscore _).
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Account remarks.
     */
    public readonly userDesc!: pulumi.Output<string | undefined>;
    /**
     * The new account name. Its format requirements are as follows: character range [1,32]. Characters in the range of [A,Z],
     * [a,z], [1,9] as well as underscore _ and dash - can be input.
     */
    public readonly userName!: pulumi.Output<string>;

    /**
     * Create a InstanceAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceAccountArgs | InstanceAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceAccountState | undefined;
            resourceInputs["authRoles"] = state ? state.authRoles : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["mongoUserPassword"] = state ? state.mongoUserPassword : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["userDesc"] = state ? state.userDesc : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as InstanceAccountArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.mongoUserPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mongoUserPassword'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["authRoles"] = args ? args.authRoles : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["mongoUserPassword"] = args ? args.mongoUserPassword : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["userDesc"] = args ? args.userDesc : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InstanceAccount resources.
 */
export interface InstanceAccountState {
    /**
     * The read and write permission information of the account.
     */
    authRoles?: pulumi.Input<pulumi.Input<inputs.Mongodb.InstanceAccountAuthRole>[]>;
    /**
     * Instance ID, the format is: cmgo-9d0p6umb.Same as the instance ID displayed in the cloud database console page.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The password corresponding to the mongouser account. mongouser is the system default account, which is the password set
     * when creating an instance.
     */
    mongoUserPassword?: pulumi.Input<string>;
    /**
     * New account password. Password complexity requirements are as follows: character length range [8,32]. Contains at least
     * letters, numbers and special characters (exclamation point!, at@, pound sign #, percent sign %, caret ^, asterisk *,
     * parentheses (), underscore _).
     */
    password?: pulumi.Input<string>;
    /**
     * Account remarks.
     */
    userDesc?: pulumi.Input<string>;
    /**
     * The new account name. Its format requirements are as follows: character range [1,32]. Characters in the range of [A,Z],
     * [a,z], [1,9] as well as underscore _ and dash - can be input.
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstanceAccount resource.
 */
export interface InstanceAccountArgs {
    /**
     * The read and write permission information of the account.
     */
    authRoles?: pulumi.Input<pulumi.Input<inputs.Mongodb.InstanceAccountAuthRole>[]>;
    /**
     * Instance ID, the format is: cmgo-9d0p6umb.Same as the instance ID displayed in the cloud database console page.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The password corresponding to the mongouser account. mongouser is the system default account, which is the password set
     * when creating an instance.
     */
    mongoUserPassword: pulumi.Input<string>;
    /**
     * New account password. Password complexity requirements are as follows: character length range [8,32]. Contains at least
     * letters, numbers and special characters (exclamation point!, at@, pound sign #, percent sign %, caret ^, asterisk *,
     * parentheses (), underscore _).
     */
    password: pulumi.Input<string>;
    /**
     * Account remarks.
     */
    userDesc?: pulumi.Input<string>;
    /**
     * The new account name. Its format requirements are as follows: character range [1,32]. Characters in the range of [A,Z],
     * [a,z], [1,9] as well as underscore _ and dash - can be input.
     */
    userName: pulumi.Input<string>;
}
