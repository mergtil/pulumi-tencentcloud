// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class BackupStorageLocation extends pulumi.CustomResource {
    /**
     * Get an existing BackupStorageLocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupStorageLocationState, opts?: pulumi.CustomResourceOptions): BackupStorageLocation {
        return new BackupStorageLocation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Kubernetes/backupStorageLocation:BackupStorageLocation';

    /**
     * Returns true if the given object is an instance of BackupStorageLocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackupStorageLocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackupStorageLocation.__pulumiType;
    }

    /**
     * Name of the bucket.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * Message of the backup storage location.
     */
    public /*out*/ readonly message!: pulumi.Output<string>;
    /**
     * Name of the backup storage location.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Prefix of the bucket.
     */
    public readonly path!: pulumi.Output<string | undefined>;
    /**
     * State of the backup storage location.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Region of the storage.
     */
    public readonly storageRegion!: pulumi.Output<string>;

    /**
     * Create a BackupStorageLocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupStorageLocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupStorageLocationArgs | BackupStorageLocationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupStorageLocationState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["message"] = state ? state.message : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["storageRegion"] = state ? state.storageRegion : undefined;
        } else {
            const args = argsOrState as BackupStorageLocationArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.storageRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageRegion'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["storageRegion"] = args ? args.storageRegion : undefined;
            resourceInputs["message"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackupStorageLocation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BackupStorageLocation resources.
 */
export interface BackupStorageLocationState {
    /**
     * Name of the bucket.
     */
    bucket?: pulumi.Input<string>;
    /**
     * Message of the backup storage location.
     */
    message?: pulumi.Input<string>;
    /**
     * Name of the backup storage location.
     */
    name?: pulumi.Input<string>;
    /**
     * Prefix of the bucket.
     */
    path?: pulumi.Input<string>;
    /**
     * State of the backup storage location.
     */
    state?: pulumi.Input<string>;
    /**
     * Region of the storage.
     */
    storageRegion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BackupStorageLocation resource.
 */
export interface BackupStorageLocationArgs {
    /**
     * Name of the bucket.
     */
    bucket: pulumi.Input<string>;
    /**
     * Name of the backup storage location.
     */
    name?: pulumi.Input<string>;
    /**
     * Prefix of the bucket.
     */
    path?: pulumi.Input<string>;
    /**
     * Region of the storage.
     */
    storageRegion: pulumi.Input<string>;
}
