// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class AccountPrivileges extends pulumi.CustomResource {
    /**
     * Get an existing AccountPrivileges resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountPrivilegesState, opts?: pulumi.CustomResourceOptions): AccountPrivileges {
        return new AccountPrivileges(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Dcdb/accountPrivileges:AccountPrivileges';

    /**
     * Returns true if the given object is an instance of AccountPrivileges.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountPrivileges {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountPrivileges.__pulumiType;
    }

    /**
     * The account of the database, including username and host.
     */
    public readonly account!: pulumi.Output<outputs.Dcdb.AccountPrivilegesAccount>;
    /**
     * Permissions for columns in database tables. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE,
     * REFERENCES. Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them,
     * please pass an empty array in the complex type Privileges field.
     */
    public readonly columnPrivileges!: pulumi.Output<outputs.Dcdb.AccountPrivilegesColumnPrivileges | undefined>;
    /**
     * Database permissions. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP,
     * REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER
     * ROUTINE, EVENT, TRIGGER. Note that if this parameter is not passed, the existing privileges are reserved. If you need to
     * clear them, please pass an empty array in the complex type Privileges field.
     */
    public readonly databasePrivileges!: pulumi.Output<outputs.Dcdb.AccountPrivilegesDatabasePrivileges | undefined>;
    /**
     * Global permissions. Among them, the optional value of the permission in GlobalPrivileges is: SELECT, INSERT, UPDATE,
     * DELETE, CREATE, PROCESS, DROP, REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE,
     * CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER. Note that if this parameter is not passed, it
     * means that the existing permissions are reserved. If it needs to be cleared, pass an empty array in this field.
     */
    public readonly globalPrivileges!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Permissions for tables in the database. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE,
     * DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER. Note that if this parameter is not
     * passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type
     * Privileges field.
     */
    public readonly tablePrivileges!: pulumi.Output<outputs.Dcdb.AccountPrivilegesTablePrivileges | undefined>;
    /**
     * Permissions for database views. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE,
     * CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER. Note that if this parameter is not passed, the
     * existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges
     * field.
     */
    public readonly viewPrivileges!: pulumi.Output<outputs.Dcdb.AccountPrivilegesViewPrivileges | undefined>;

    /**
     * Create a AccountPrivileges resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountPrivilegesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountPrivilegesArgs | AccountPrivilegesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountPrivilegesState | undefined;
            resourceInputs["account"] = state ? state.account : undefined;
            resourceInputs["columnPrivileges"] = state ? state.columnPrivileges : undefined;
            resourceInputs["databasePrivileges"] = state ? state.databasePrivileges : undefined;
            resourceInputs["globalPrivileges"] = state ? state.globalPrivileges : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["tablePrivileges"] = state ? state.tablePrivileges : undefined;
            resourceInputs["viewPrivileges"] = state ? state.viewPrivileges : undefined;
        } else {
            const args = argsOrState as AccountPrivilegesArgs | undefined;
            if ((!args || args.account === undefined) && !opts.urn) {
                throw new Error("Missing required property 'account'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["account"] = args ? args.account : undefined;
            resourceInputs["columnPrivileges"] = args ? args.columnPrivileges : undefined;
            resourceInputs["databasePrivileges"] = args ? args.databasePrivileges : undefined;
            resourceInputs["globalPrivileges"] = args ? args.globalPrivileges : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["tablePrivileges"] = args ? args.tablePrivileges : undefined;
            resourceInputs["viewPrivileges"] = args ? args.viewPrivileges : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountPrivileges.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccountPrivileges resources.
 */
export interface AccountPrivilegesState {
    /**
     * The account of the database, including username and host.
     */
    account?: pulumi.Input<inputs.Dcdb.AccountPrivilegesAccount>;
    /**
     * Permissions for columns in database tables. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE,
     * REFERENCES. Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them,
     * please pass an empty array in the complex type Privileges field.
     */
    columnPrivileges?: pulumi.Input<inputs.Dcdb.AccountPrivilegesColumnPrivileges>;
    /**
     * Database permissions. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP,
     * REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER
     * ROUTINE, EVENT, TRIGGER. Note that if this parameter is not passed, the existing privileges are reserved. If you need to
     * clear them, please pass an empty array in the complex type Privileges field.
     */
    databasePrivileges?: pulumi.Input<inputs.Dcdb.AccountPrivilegesDatabasePrivileges>;
    /**
     * Global permissions. Among them, the optional value of the permission in GlobalPrivileges is: SELECT, INSERT, UPDATE,
     * DELETE, CREATE, PROCESS, DROP, REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE,
     * CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER. Note that if this parameter is not passed, it
     * means that the existing permissions are reserved. If it needs to be cleared, pass an empty array in this field.
     */
    globalPrivileges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Permissions for tables in the database. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE,
     * DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER. Note that if this parameter is not
     * passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type
     * Privileges field.
     */
    tablePrivileges?: pulumi.Input<inputs.Dcdb.AccountPrivilegesTablePrivileges>;
    /**
     * Permissions for database views. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE,
     * CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER. Note that if this parameter is not passed, the
     * existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges
     * field.
     */
    viewPrivileges?: pulumi.Input<inputs.Dcdb.AccountPrivilegesViewPrivileges>;
}

/**
 * The set of arguments for constructing a AccountPrivileges resource.
 */
export interface AccountPrivilegesArgs {
    /**
     * The account of the database, including username and host.
     */
    account: pulumi.Input<inputs.Dcdb.AccountPrivilegesAccount>;
    /**
     * Permissions for columns in database tables. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE,
     * REFERENCES. Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them,
     * please pass an empty array in the complex type Privileges field.
     */
    columnPrivileges?: pulumi.Input<inputs.Dcdb.AccountPrivilegesColumnPrivileges>;
    /**
     * Database permissions. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP,
     * REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER
     * ROUTINE, EVENT, TRIGGER. Note that if this parameter is not passed, the existing privileges are reserved. If you need to
     * clear them, please pass an empty array in the complex type Privileges field.
     */
    databasePrivileges?: pulumi.Input<inputs.Dcdb.AccountPrivilegesDatabasePrivileges>;
    /**
     * Global permissions. Among them, the optional value of the permission in GlobalPrivileges is: SELECT, INSERT, UPDATE,
     * DELETE, CREATE, PROCESS, DROP, REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE,
     * CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER. Note that if this parameter is not passed, it
     * means that the existing permissions are reserved. If it needs to be cleared, pass an empty array in this field.
     */
    globalPrivileges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Permissions for tables in the database. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE,
     * DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER. Note that if this parameter is not
     * passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type
     * Privileges field.
     */
    tablePrivileges?: pulumi.Input<inputs.Dcdb.AccountPrivilegesTablePrivileges>;
    /**
     * Permissions for database views. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE,
     * CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER. Note that if this parameter is not passed, the
     * existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges
     * field.
     */
    viewPrivileges?: pulumi.Input<inputs.Dcdb.AccountPrivilegesViewPrivileges>;
}
