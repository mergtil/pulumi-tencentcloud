// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class HourdbInstance extends pulumi.CustomResource {
    /**
     * Get an existing HourdbInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HourdbInstanceState, opts?: pulumi.CustomResourceOptions): HourdbInstance {
        return new HourdbInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Dcdb/hourdbInstance:HourdbInstance';

    /**
     * Returns true if the given object is an instance of HourdbInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HourdbInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HourdbInstance.__pulumiType;
    }

    /**
     * db engine version, default to Percona 5.7.17.
     */
    public readonly dbVersionId!: pulumi.Output<string | undefined>;
    /**
     * DCN source instance ID.
     */
    public readonly dcnInstanceId!: pulumi.Output<string | undefined>;
    /**
     * DCN source region.
     */
    public readonly dcnRegion!: pulumi.Output<string | undefined>;
    /**
     * Whether to open the extranet access.
     */
    public readonly extranetAccess!: pulumi.Output<boolean | undefined>;
    /**
     * name of this instance.
     */
    public readonly instanceName!: pulumi.Output<string | undefined>;
    /**
     * Whether to support IPv6.
     */
    public readonly ipv6Flag!: pulumi.Output<number | undefined>;
    /**
     * project id.
     */
    public readonly projectId!: pulumi.Output<number | undefined>;
    /**
     * resource tags.
     */
    public readonly resourceTags!: pulumi.Output<outputs.Dcdb.HourdbInstanceResourceTag[] | undefined>;
    /**
     * security group id.
     */
    public readonly securityGroupId!: pulumi.Output<string | undefined>;
    /**
     * instance shard count.
     */
    public readonly shardCount!: pulumi.Output<number>;
    /**
     * memory(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
     */
    public readonly shardMemory!: pulumi.Output<number>;
    /**
     * node count for each shard. It can be obtained by querying api DescribeShardSpec.
     */
    public readonly shardNodeCount!: pulumi.Output<number>;
    /**
     * storage(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
     */
    public readonly shardStorage!: pulumi.Output<number>;
    /**
     * subnet id, its required when vpcId is set.
     */
    public readonly subnetId!: pulumi.Output<string | undefined>;
    /**
     * The field is required to specify VIP.
     */
    public readonly vip!: pulumi.Output<string>;
    /**
     * The field is required to specify VIPv6.
     */
    public readonly vipv6!: pulumi.Output<string>;
    /**
     * vpc id.
     */
    public readonly vpcId!: pulumi.Output<string | undefined>;
    /**
     * Intranet port.
     */
    public /*out*/ readonly vport!: pulumi.Output<number>;
    /**
     * available zone.
     */
    public readonly zones!: pulumi.Output<string[] | undefined>;

    /**
     * Create a HourdbInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HourdbInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HourdbInstanceArgs | HourdbInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HourdbInstanceState | undefined;
            resourceInputs["dbVersionId"] = state ? state.dbVersionId : undefined;
            resourceInputs["dcnInstanceId"] = state ? state.dcnInstanceId : undefined;
            resourceInputs["dcnRegion"] = state ? state.dcnRegion : undefined;
            resourceInputs["extranetAccess"] = state ? state.extranetAccess : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["ipv6Flag"] = state ? state.ipv6Flag : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["resourceTags"] = state ? state.resourceTags : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["shardCount"] = state ? state.shardCount : undefined;
            resourceInputs["shardMemory"] = state ? state.shardMemory : undefined;
            resourceInputs["shardNodeCount"] = state ? state.shardNodeCount : undefined;
            resourceInputs["shardStorage"] = state ? state.shardStorage : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["vip"] = state ? state.vip : undefined;
            resourceInputs["vipv6"] = state ? state.vipv6 : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vport"] = state ? state.vport : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        } else {
            const args = argsOrState as HourdbInstanceArgs | undefined;
            if ((!args || args.shardCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shardCount'");
            }
            if ((!args || args.shardMemory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shardMemory'");
            }
            if ((!args || args.shardNodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shardNodeCount'");
            }
            if ((!args || args.shardStorage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shardStorage'");
            }
            resourceInputs["dbVersionId"] = args ? args.dbVersionId : undefined;
            resourceInputs["dcnInstanceId"] = args ? args.dcnInstanceId : undefined;
            resourceInputs["dcnRegion"] = args ? args.dcnRegion : undefined;
            resourceInputs["extranetAccess"] = args ? args.extranetAccess : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["ipv6Flag"] = args ? args.ipv6Flag : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["resourceTags"] = args ? args.resourceTags : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["shardCount"] = args ? args.shardCount : undefined;
            resourceInputs["shardMemory"] = args ? args.shardMemory : undefined;
            resourceInputs["shardNodeCount"] = args ? args.shardNodeCount : undefined;
            resourceInputs["shardStorage"] = args ? args.shardStorage : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["vip"] = args ? args.vip : undefined;
            resourceInputs["vipv6"] = args ? args.vipv6 : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
            resourceInputs["vport"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HourdbInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HourdbInstance resources.
 */
export interface HourdbInstanceState {
    /**
     * db engine version, default to Percona 5.7.17.
     */
    dbVersionId?: pulumi.Input<string>;
    /**
     * DCN source instance ID.
     */
    dcnInstanceId?: pulumi.Input<string>;
    /**
     * DCN source region.
     */
    dcnRegion?: pulumi.Input<string>;
    /**
     * Whether to open the extranet access.
     */
    extranetAccess?: pulumi.Input<boolean>;
    /**
     * name of this instance.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * Whether to support IPv6.
     */
    ipv6Flag?: pulumi.Input<number>;
    /**
     * project id.
     */
    projectId?: pulumi.Input<number>;
    /**
     * resource tags.
     */
    resourceTags?: pulumi.Input<pulumi.Input<inputs.Dcdb.HourdbInstanceResourceTag>[]>;
    /**
     * security group id.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * instance shard count.
     */
    shardCount?: pulumi.Input<number>;
    /**
     * memory(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
     */
    shardMemory?: pulumi.Input<number>;
    /**
     * node count for each shard. It can be obtained by querying api DescribeShardSpec.
     */
    shardNodeCount?: pulumi.Input<number>;
    /**
     * storage(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
     */
    shardStorage?: pulumi.Input<number>;
    /**
     * subnet id, its required when vpcId is set.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The field is required to specify VIP.
     */
    vip?: pulumi.Input<string>;
    /**
     * The field is required to specify VIPv6.
     */
    vipv6?: pulumi.Input<string>;
    /**
     * vpc id.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * Intranet port.
     */
    vport?: pulumi.Input<number>;
    /**
     * available zone.
     */
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a HourdbInstance resource.
 */
export interface HourdbInstanceArgs {
    /**
     * db engine version, default to Percona 5.7.17.
     */
    dbVersionId?: pulumi.Input<string>;
    /**
     * DCN source instance ID.
     */
    dcnInstanceId?: pulumi.Input<string>;
    /**
     * DCN source region.
     */
    dcnRegion?: pulumi.Input<string>;
    /**
     * Whether to open the extranet access.
     */
    extranetAccess?: pulumi.Input<boolean>;
    /**
     * name of this instance.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * Whether to support IPv6.
     */
    ipv6Flag?: pulumi.Input<number>;
    /**
     * project id.
     */
    projectId?: pulumi.Input<number>;
    /**
     * resource tags.
     */
    resourceTags?: pulumi.Input<pulumi.Input<inputs.Dcdb.HourdbInstanceResourceTag>[]>;
    /**
     * security group id.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * instance shard count.
     */
    shardCount: pulumi.Input<number>;
    /**
     * memory(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
     */
    shardMemory: pulumi.Input<number>;
    /**
     * node count for each shard. It can be obtained by querying api DescribeShardSpec.
     */
    shardNodeCount: pulumi.Input<number>;
    /**
     * storage(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
     */
    shardStorage: pulumi.Input<number>;
    /**
     * subnet id, its required when vpcId is set.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The field is required to specify VIP.
     */
    vip?: pulumi.Input<string>;
    /**
     * The field is required to specify VIPv6.
     */
    vipv6?: pulumi.Input<string>;
    /**
     * vpc id.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * available zone.
     */
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
