// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Deprecatedeks/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * Description of EKS cluster.
     */
    public readonly clusterDesc!: pulumi.Output<string | undefined>;
    /**
     * Name of EKS cluster.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * List of cluster custom DNS Server info.
     */
    public readonly dnsServers!: pulumi.Output<outputs.Deprecatedeks.ClusterDnsServer[] | undefined>;
    /**
     * Indicates whether to enable dns in user cluster, default value is `true`.
     */
    public readonly enableVpcCoreDns!: pulumi.Output<boolean | undefined>;
    /**
     * Extend parameters.
     */
    public readonly extraParam!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Cluster internal access LoadBalancer info.
     */
    public readonly internalLb!: pulumi.Output<outputs.Deprecatedeks.ClusterInternalLb | undefined>;
    /**
     * Kubernetes version of EKS cluster.
     */
    public readonly k8sVersion!: pulumi.Output<string>;
    /**
     * EKS cluster kubeconfig.
     */
    public /*out*/ readonly kubeConfig!: pulumi.Output<string>;
    /**
     * Delete CBS after EKS cluster remove.
     */
    public readonly needDeleteCbs!: pulumi.Output<boolean | undefined>;
    /**
     * Cluster public access LoadBalancer info.
     */
    public readonly publicLb!: pulumi.Output<outputs.Deprecatedeks.ClusterPublicLb | undefined>;
    /**
     * Subnet id of service.
     */
    public readonly serviceSubnetId!: pulumi.Output<string | undefined>;
    /**
     * Subnet Ids for EKS cluster.
     */
    public readonly subnetIds!: pulumi.Output<string[]>;
    /**
     * Tags of EKS cluster.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Vpc Id of EKS cluster.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["clusterDesc"] = state ? state.clusterDesc : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["dnsServers"] = state ? state.dnsServers : undefined;
            resourceInputs["enableVpcCoreDns"] = state ? state.enableVpcCoreDns : undefined;
            resourceInputs["extraParam"] = state ? state.extraParam : undefined;
            resourceInputs["internalLb"] = state ? state.internalLb : undefined;
            resourceInputs["k8sVersion"] = state ? state.k8sVersion : undefined;
            resourceInputs["kubeConfig"] = state ? state.kubeConfig : undefined;
            resourceInputs["needDeleteCbs"] = state ? state.needDeleteCbs : undefined;
            resourceInputs["publicLb"] = state ? state.publicLb : undefined;
            resourceInputs["serviceSubnetId"] = state ? state.serviceSubnetId : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.k8sVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'k8sVersion'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["clusterDesc"] = args ? args.clusterDesc : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["dnsServers"] = args ? args.dnsServers : undefined;
            resourceInputs["enableVpcCoreDns"] = args ? args.enableVpcCoreDns : undefined;
            resourceInputs["extraParam"] = args ? args.extraParam : undefined;
            resourceInputs["internalLb"] = args ? args.internalLb : undefined;
            resourceInputs["k8sVersion"] = args ? args.k8sVersion : undefined;
            resourceInputs["needDeleteCbs"] = args ? args.needDeleteCbs : undefined;
            resourceInputs["publicLb"] = args ? args.publicLb : undefined;
            resourceInputs["serviceSubnetId"] = args ? args.serviceSubnetId : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["kubeConfig"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * Description of EKS cluster.
     */
    clusterDesc?: pulumi.Input<string>;
    /**
     * Name of EKS cluster.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * List of cluster custom DNS Server info.
     */
    dnsServers?: pulumi.Input<pulumi.Input<inputs.Deprecatedeks.ClusterDnsServer>[]>;
    /**
     * Indicates whether to enable dns in user cluster, default value is `true`.
     */
    enableVpcCoreDns?: pulumi.Input<boolean>;
    /**
     * Extend parameters.
     */
    extraParam?: pulumi.Input<{[key: string]: any}>;
    /**
     * Cluster internal access LoadBalancer info.
     */
    internalLb?: pulumi.Input<inputs.Deprecatedeks.ClusterInternalLb>;
    /**
     * Kubernetes version of EKS cluster.
     */
    k8sVersion?: pulumi.Input<string>;
    /**
     * EKS cluster kubeconfig.
     */
    kubeConfig?: pulumi.Input<string>;
    /**
     * Delete CBS after EKS cluster remove.
     */
    needDeleteCbs?: pulumi.Input<boolean>;
    /**
     * Cluster public access LoadBalancer info.
     */
    publicLb?: pulumi.Input<inputs.Deprecatedeks.ClusterPublicLb>;
    /**
     * Subnet id of service.
     */
    serviceSubnetId?: pulumi.Input<string>;
    /**
     * Subnet Ids for EKS cluster.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Tags of EKS cluster.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Vpc Id of EKS cluster.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * Description of EKS cluster.
     */
    clusterDesc?: pulumi.Input<string>;
    /**
     * Name of EKS cluster.
     */
    clusterName: pulumi.Input<string>;
    /**
     * List of cluster custom DNS Server info.
     */
    dnsServers?: pulumi.Input<pulumi.Input<inputs.Deprecatedeks.ClusterDnsServer>[]>;
    /**
     * Indicates whether to enable dns in user cluster, default value is `true`.
     */
    enableVpcCoreDns?: pulumi.Input<boolean>;
    /**
     * Extend parameters.
     */
    extraParam?: pulumi.Input<{[key: string]: any}>;
    /**
     * Cluster internal access LoadBalancer info.
     */
    internalLb?: pulumi.Input<inputs.Deprecatedeks.ClusterInternalLb>;
    /**
     * Kubernetes version of EKS cluster.
     */
    k8sVersion: pulumi.Input<string>;
    /**
     * Delete CBS after EKS cluster remove.
     */
    needDeleteCbs?: pulumi.Input<boolean>;
    /**
     * Cluster public access LoadBalancer info.
     */
    publicLb?: pulumi.Input<inputs.Deprecatedeks.ClusterPublicLb>;
    /**
     * Subnet id of service.
     */
    serviceSubnetId?: pulumi.Input<string>;
    /**
     * Subnet Ids for EKS cluster.
     */
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Tags of EKS cluster.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Vpc Id of EKS cluster.
     */
    vpcId: pulumi.Input<string>;
}
