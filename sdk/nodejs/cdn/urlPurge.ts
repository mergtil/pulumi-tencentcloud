// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class UrlPurge extends pulumi.CustomResource {
    /**
     * Get an existing UrlPurge resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UrlPurgeState, opts?: pulumi.CustomResourceOptions): UrlPurge {
        return new UrlPurge(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Cdn/urlPurge:UrlPurge';

    /**
     * Returns true if the given object is an instance of UrlPurge.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UrlPurge {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UrlPurge.__pulumiType;
    }

    /**
     * Specify purge area. NOTE: only purge same area cache contents.
     */
    public readonly area!: pulumi.Output<string | undefined>;
    /**
     * logs of latest purge task.
     */
    public /*out*/ readonly purgeHistories!: pulumi.Output<outputs.Cdn.UrlPurgePurgeHistory[]>;
    /**
     * Change to purge again. NOTE: this argument only works while resource update, if set to `0` or null will not be
     * triggered.
     */
    public readonly redo!: pulumi.Output<number | undefined>;
    /**
     * Task id of last operation.
     */
    public /*out*/ readonly taskId!: pulumi.Output<string>;
    /**
     * Whether to encode urls, if set to `true` will auto encode instead of manual process.
     */
    public readonly urlEncode!: pulumi.Output<boolean | undefined>;
    /**
     * List of url to purge. NOTE: urls need include protocol prefix `http://` or `https://`.
     */
    public readonly urls!: pulumi.Output<string[]>;

    /**
     * Create a UrlPurge resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UrlPurgeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UrlPurgeArgs | UrlPurgeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UrlPurgeState | undefined;
            resourceInputs["area"] = state ? state.area : undefined;
            resourceInputs["purgeHistories"] = state ? state.purgeHistories : undefined;
            resourceInputs["redo"] = state ? state.redo : undefined;
            resourceInputs["taskId"] = state ? state.taskId : undefined;
            resourceInputs["urlEncode"] = state ? state.urlEncode : undefined;
            resourceInputs["urls"] = state ? state.urls : undefined;
        } else {
            const args = argsOrState as UrlPurgeArgs | undefined;
            if ((!args || args.urls === undefined) && !opts.urn) {
                throw new Error("Missing required property 'urls'");
            }
            resourceInputs["area"] = args ? args.area : undefined;
            resourceInputs["redo"] = args ? args.redo : undefined;
            resourceInputs["urlEncode"] = args ? args.urlEncode : undefined;
            resourceInputs["urls"] = args ? args.urls : undefined;
            resourceInputs["purgeHistories"] = undefined /*out*/;
            resourceInputs["taskId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UrlPurge.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UrlPurge resources.
 */
export interface UrlPurgeState {
    /**
     * Specify purge area. NOTE: only purge same area cache contents.
     */
    area?: pulumi.Input<string>;
    /**
     * logs of latest purge task.
     */
    purgeHistories?: pulumi.Input<pulumi.Input<inputs.Cdn.UrlPurgePurgeHistory>[]>;
    /**
     * Change to purge again. NOTE: this argument only works while resource update, if set to `0` or null will not be
     * triggered.
     */
    redo?: pulumi.Input<number>;
    /**
     * Task id of last operation.
     */
    taskId?: pulumi.Input<string>;
    /**
     * Whether to encode urls, if set to `true` will auto encode instead of manual process.
     */
    urlEncode?: pulumi.Input<boolean>;
    /**
     * List of url to purge. NOTE: urls need include protocol prefix `http://` or `https://`.
     */
    urls?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a UrlPurge resource.
 */
export interface UrlPurgeArgs {
    /**
     * Specify purge area. NOTE: only purge same area cache contents.
     */
    area?: pulumi.Input<string>;
    /**
     * Change to purge again. NOTE: this argument only works while resource update, if set to `0` or null will not be
     * triggered.
     */
    redo?: pulumi.Input<number>;
    /**
     * Whether to encode urls, if set to `true` will auto encode instead of manual process.
     */
    urlEncode?: pulumi.Input<boolean>;
    /**
     * List of url to purge. NOTE: urls need include protocol prefix `http://` or `https://`.
     */
    urls: pulumi.Input<pulumi.Input<string>[]>;
}
