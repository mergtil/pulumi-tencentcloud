// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CreateImageSignatureOperationArgs, CreateImageSignatureOperationState } from "./createImageSignatureOperation";
export type CreateImageSignatureOperation = import("./createImageSignatureOperation").CreateImageSignatureOperation;
export const CreateImageSignatureOperation: typeof import("./createImageSignatureOperation").CreateImageSignatureOperation = null as any;
utilities.lazyLoad(exports, ["CreateImageSignatureOperation"], () => require("./createImageSignatureOperation"));

export { CustomizedDomainArgs, CustomizedDomainState } from "./customizedDomain";
export type CustomizedDomain = import("./customizedDomain").CustomizedDomain;
export const CustomizedDomain: typeof import("./customizedDomain").CustomizedDomain = null as any;
utilities.lazyLoad(exports, ["CustomizedDomain"], () => require("./customizedDomain"));

export { DeleteImageOperationArgs, DeleteImageOperationState } from "./deleteImageOperation";
export type DeleteImageOperation = import("./deleteImageOperation").DeleteImageOperation;
export const DeleteImageOperation: typeof import("./deleteImageOperation").DeleteImageOperation = null as any;
utilities.lazyLoad(exports, ["DeleteImageOperation"], () => require("./deleteImageOperation"));

export { GetImageManifestsArgs, GetImageManifestsResult, GetImageManifestsOutputArgs } from "./getImageManifests";
export const getImageManifests: typeof import("./getImageManifests").getImageManifests = null as any;
export const getImageManifestsOutput: typeof import("./getImageManifests").getImageManifestsOutput = null as any;
utilities.lazyLoad(exports, ["getImageManifests","getImageManifestsOutput"], () => require("./getImageManifests"));

export { GetImagesArgs, GetImagesResult, GetImagesOutputArgs } from "./getImages";
export const getImages: typeof import("./getImages").getImages = null as any;
export const getImagesOutput: typeof import("./getImages").getImagesOutput = null as any;
utilities.lazyLoad(exports, ["getImages","getImagesOutput"], () => require("./getImages"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetNamespacesArgs, GetNamespacesResult, GetNamespacesOutputArgs } from "./getNamespaces";
export const getNamespaces: typeof import("./getNamespaces").getNamespaces = null as any;
export const getNamespacesOutput: typeof import("./getNamespaces").getNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getNamespaces","getNamespacesOutput"], () => require("./getNamespaces"));

export { GetReplicationInstanceCreateTasksArgs, GetReplicationInstanceCreateTasksResult, GetReplicationInstanceCreateTasksOutputArgs } from "./getReplicationInstanceCreateTasks";
export const getReplicationInstanceCreateTasks: typeof import("./getReplicationInstanceCreateTasks").getReplicationInstanceCreateTasks = null as any;
export const getReplicationInstanceCreateTasksOutput: typeof import("./getReplicationInstanceCreateTasks").getReplicationInstanceCreateTasksOutput = null as any;
utilities.lazyLoad(exports, ["getReplicationInstanceCreateTasks","getReplicationInstanceCreateTasksOutput"], () => require("./getReplicationInstanceCreateTasks"));

export { GetReplicationInstanceSyncStatusArgs, GetReplicationInstanceSyncStatusResult, GetReplicationInstanceSyncStatusOutputArgs } from "./getReplicationInstanceSyncStatus";
export const getReplicationInstanceSyncStatus: typeof import("./getReplicationInstanceSyncStatus").getReplicationInstanceSyncStatus = null as any;
export const getReplicationInstanceSyncStatusOutput: typeof import("./getReplicationInstanceSyncStatus").getReplicationInstanceSyncStatusOutput = null as any;
utilities.lazyLoad(exports, ["getReplicationInstanceSyncStatus","getReplicationInstanceSyncStatusOutput"], () => require("./getReplicationInstanceSyncStatus"));

export { GetRepositoriesArgs, GetRepositoriesResult, GetRepositoriesOutputArgs } from "./getRepositories";
export const getRepositories: typeof import("./getRepositories").getRepositories = null as any;
export const getRepositoriesOutput: typeof import("./getRepositories").getRepositoriesOutput = null as any;
utilities.lazyLoad(exports, ["getRepositories","getRepositoriesOutput"], () => require("./getRepositories"));

export { GetTagRetentionExecutionTasksArgs, GetTagRetentionExecutionTasksResult, GetTagRetentionExecutionTasksOutputArgs } from "./getTagRetentionExecutionTasks";
export const getTagRetentionExecutionTasks: typeof import("./getTagRetentionExecutionTasks").getTagRetentionExecutionTasks = null as any;
export const getTagRetentionExecutionTasksOutput: typeof import("./getTagRetentionExecutionTasks").getTagRetentionExecutionTasksOutput = null as any;
utilities.lazyLoad(exports, ["getTagRetentionExecutionTasks","getTagRetentionExecutionTasksOutput"], () => require("./getTagRetentionExecutionTasks"));

export { GetTagRetentionExecutionsArgs, GetTagRetentionExecutionsResult, GetTagRetentionExecutionsOutputArgs } from "./getTagRetentionExecutions";
export const getTagRetentionExecutions: typeof import("./getTagRetentionExecutions").getTagRetentionExecutions = null as any;
export const getTagRetentionExecutionsOutput: typeof import("./getTagRetentionExecutions").getTagRetentionExecutionsOutput = null as any;
utilities.lazyLoad(exports, ["getTagRetentionExecutions","getTagRetentionExecutionsOutput"], () => require("./getTagRetentionExecutions"));

export { GetTokensArgs, GetTokensResult, GetTokensOutputArgs } from "./getTokens";
export const getTokens: typeof import("./getTokens").getTokens = null as any;
export const getTokensOutput: typeof import("./getTokens").getTokensOutput = null as any;
utilities.lazyLoad(exports, ["getTokens","getTokensOutput"], () => require("./getTokens"));

export { GetVpcAttachmentsArgs, GetVpcAttachmentsResult, GetVpcAttachmentsOutputArgs } from "./getVpcAttachments";
export const getVpcAttachments: typeof import("./getVpcAttachments").getVpcAttachments = null as any;
export const getVpcAttachmentsOutput: typeof import("./getVpcAttachments").getVpcAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcAttachments","getVpcAttachmentsOutput"], () => require("./getVpcAttachments"));

export { GetWebhookTriggerLogsArgs, GetWebhookTriggerLogsResult, GetWebhookTriggerLogsOutputArgs } from "./getWebhookTriggerLogs";
export const getWebhookTriggerLogs: typeof import("./getWebhookTriggerLogs").getWebhookTriggerLogs = null as any;
export const getWebhookTriggerLogsOutput: typeof import("./getWebhookTriggerLogs").getWebhookTriggerLogsOutput = null as any;
utilities.lazyLoad(exports, ["getWebhookTriggerLogs","getWebhookTriggerLogsOutput"], () => require("./getWebhookTriggerLogs"));

export { ImmutableTagRuleArgs, ImmutableTagRuleState } from "./immutableTagRule";
export type ImmutableTagRule = import("./immutableTagRule").ImmutableTagRule;
export const ImmutableTagRule: typeof import("./immutableTagRule").ImmutableTagRule = null as any;
utilities.lazyLoad(exports, ["ImmutableTagRule"], () => require("./immutableTagRule"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { ManageReplicationOperationArgs, ManageReplicationOperationState } from "./manageReplicationOperation";
export type ManageReplicationOperation = import("./manageReplicationOperation").ManageReplicationOperation;
export const ManageReplicationOperation: typeof import("./manageReplicationOperation").ManageReplicationOperation = null as any;
utilities.lazyLoad(exports, ["ManageReplicationOperation"], () => require("./manageReplicationOperation"));

export { NamespaceArgs, NamespaceState } from "./namespace";
export type Namespace = import("./namespace").Namespace;
export const Namespace: typeof import("./namespace").Namespace = null as any;
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));

export { RepositoryArgs, RepositoryState } from "./repository";
export type Repository = import("./repository").Repository;
export const Repository: typeof import("./repository").Repository = null as any;
utilities.lazyLoad(exports, ["Repository"], () => require("./repository"));

export { ServiceAccountArgs, ServiceAccountState } from "./serviceAccount";
export type ServiceAccount = import("./serviceAccount").ServiceAccount;
export const ServiceAccount: typeof import("./serviceAccount").ServiceAccount = null as any;
utilities.lazyLoad(exports, ["ServiceAccount"], () => require("./serviceAccount"));

export { TagRetentionExecutionConfigArgs, TagRetentionExecutionConfigState } from "./tagRetentionExecutionConfig";
export type TagRetentionExecutionConfig = import("./tagRetentionExecutionConfig").TagRetentionExecutionConfig;
export const TagRetentionExecutionConfig: typeof import("./tagRetentionExecutionConfig").TagRetentionExecutionConfig = null as any;
utilities.lazyLoad(exports, ["TagRetentionExecutionConfig"], () => require("./tagRetentionExecutionConfig"));

export { TagRetentionRuleArgs, TagRetentionRuleState } from "./tagRetentionRule";
export type TagRetentionRule = import("./tagRetentionRule").TagRetentionRule;
export const TagRetentionRule: typeof import("./tagRetentionRule").TagRetentionRule = null as any;
utilities.lazyLoad(exports, ["TagRetentionRule"], () => require("./tagRetentionRule"));

export { TokenArgs, TokenState } from "./token";
export type Token = import("./token").Token;
export const Token: typeof import("./token").Token = null as any;
utilities.lazyLoad(exports, ["Token"], () => require("./token"));

export { VpcAttachmentArgs, VpcAttachmentState } from "./vpcAttachment";
export type VpcAttachment = import("./vpcAttachment").VpcAttachment;
export const VpcAttachment: typeof import("./vpcAttachment").VpcAttachment = null as any;
utilities.lazyLoad(exports, ["VpcAttachment"], () => require("./vpcAttachment"));

export { WebhookTriggerArgs, WebhookTriggerState } from "./webhookTrigger";
export type WebhookTrigger = import("./webhookTrigger").WebhookTrigger;
export const WebhookTrigger: typeof import("./webhookTrigger").WebhookTrigger = null as any;
utilities.lazyLoad(exports, ["WebhookTrigger"], () => require("./webhookTrigger"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Tcr/createImageSignatureOperation:CreateImageSignatureOperation":
                return new CreateImageSignatureOperation(name, <any>undefined, { urn })
            case "tencentcloud:Tcr/customizedDomain:CustomizedDomain":
                return new CustomizedDomain(name, <any>undefined, { urn })
            case "tencentcloud:Tcr/deleteImageOperation:DeleteImageOperation":
                return new DeleteImageOperation(name, <any>undefined, { urn })
            case "tencentcloud:Tcr/immutableTagRule:ImmutableTagRule":
                return new ImmutableTagRule(name, <any>undefined, { urn })
            case "tencentcloud:Tcr/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "tencentcloud:Tcr/manageReplicationOperation:ManageReplicationOperation":
                return new ManageReplicationOperation(name, <any>undefined, { urn })
            case "tencentcloud:Tcr/namespace:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "tencentcloud:Tcr/repository:Repository":
                return new Repository(name, <any>undefined, { urn })
            case "tencentcloud:Tcr/serviceAccount:ServiceAccount":
                return new ServiceAccount(name, <any>undefined, { urn })
            case "tencentcloud:Tcr/tagRetentionExecutionConfig:TagRetentionExecutionConfig":
                return new TagRetentionExecutionConfig(name, <any>undefined, { urn })
            case "tencentcloud:Tcr/tagRetentionRule:TagRetentionRule":
                return new TagRetentionRule(name, <any>undefined, { urn })
            case "tencentcloud:Tcr/token:Token":
                return new Token(name, <any>undefined, { urn })
            case "tencentcloud:Tcr/vpcAttachment:VpcAttachment":
                return new VpcAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Tcr/webhookTrigger:WebhookTrigger":
                return new WebhookTrigger(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Tcr/createImageSignatureOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tcr/customizedDomain", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tcr/deleteImageOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tcr/immutableTagRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tcr/instance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tcr/manageReplicationOperation", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tcr/namespace", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tcr/repository", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tcr/serviceAccount", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tcr/tagRetentionExecutionConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tcr/tagRetentionRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tcr/token", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tcr/vpcAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tcr/webhookTrigger", _module)
