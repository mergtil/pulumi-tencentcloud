// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class ServiceAccount extends pulumi.CustomResource {
    /**
     * Get an existing ServiceAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceAccountState, opts?: pulumi.CustomResourceOptions): ServiceAccount {
        return new ServiceAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tcr/serviceAccount:ServiceAccount';

    /**
     * Returns true if the given object is an instance of ServiceAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceAccount.__pulumiType;
    }

    /**
     * Service account description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * whether to disable Service accounts.
     */
    public readonly disable!: pulumi.Output<boolean | undefined>;
    /**
     * expiration date (unit: day), calculated from the current time, priority is higher than ExpiresAt Service account
     * description.
     */
    public readonly duration!: pulumi.Output<number | undefined>;
    /**
     * Service account expiration time (time stamp, unit: milliseconds).
     */
    public readonly expiresAt!: pulumi.Output<number>;
    /**
     * Service account name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Password of the service account.
     */
    public /*out*/ readonly password!: pulumi.Output<string>;
    /**
     * strategy list.
     */
    public readonly permissions!: pulumi.Output<outputs.Tcr.ServiceAccountPermission[]>;
    /**
     * instance id.
     */
    public readonly registryId!: pulumi.Output<string>;
    /**
     * Tag description list.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;

    /**
     * Create a ServiceAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceAccountArgs | ServiceAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceAccountState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["registryId"] = state ? state.registryId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ServiceAccountArgs | undefined;
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            if ((!args || args.registryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["expiresAt"] = args ? args.expiresAt : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["registryId"] = args ? args.registryId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["password"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceAccount resources.
 */
export interface ServiceAccountState {
    /**
     * Service account description.
     */
    description?: pulumi.Input<string>;
    /**
     * whether to disable Service accounts.
     */
    disable?: pulumi.Input<boolean>;
    /**
     * expiration date (unit: day), calculated from the current time, priority is higher than ExpiresAt Service account
     * description.
     */
    duration?: pulumi.Input<number>;
    /**
     * Service account expiration time (time stamp, unit: milliseconds).
     */
    expiresAt?: pulumi.Input<number>;
    /**
     * Service account name.
     */
    name?: pulumi.Input<string>;
    /**
     * Password of the service account.
     */
    password?: pulumi.Input<string>;
    /**
     * strategy list.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.Tcr.ServiceAccountPermission>[]>;
    /**
     * instance id.
     */
    registryId?: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a ServiceAccount resource.
 */
export interface ServiceAccountArgs {
    /**
     * Service account description.
     */
    description?: pulumi.Input<string>;
    /**
     * whether to disable Service accounts.
     */
    disable?: pulumi.Input<boolean>;
    /**
     * expiration date (unit: day), calculated from the current time, priority is higher than ExpiresAt Service account
     * description.
     */
    duration?: pulumi.Input<number>;
    /**
     * Service account expiration time (time stamp, unit: milliseconds).
     */
    expiresAt?: pulumi.Input<number>;
    /**
     * Service account name.
     */
    name?: pulumi.Input<string>;
    /**
     * strategy list.
     */
    permissions: pulumi.Input<pulumi.Input<inputs.Tcr.ServiceAccountPermission>[]>;
    /**
     * instance id.
     */
    registryId: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
}
