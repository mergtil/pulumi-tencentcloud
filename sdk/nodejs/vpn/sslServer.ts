// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class SslServer extends pulumi.CustomResource {
    /**
     * Get an existing SslServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslServerState, opts?: pulumi.CustomResourceOptions): SslServer {
        return new SslServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Vpn/sslServer:SslServer';

    /**
     * Returns true if the given object is an instance of SslServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SslServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SslServer.__pulumiType;
    }

    /**
     * need compressed. Default value: False.
     */
    public readonly compress!: pulumi.Output<boolean | undefined>;
    /**
     * The encrypt algorithm. Valid values: AES-128-CBC, AES-192-CBC, AES-256-CBC, NONE.Default value: NONE.
     */
    public readonly encryptAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * The integrity algorithm. Valid values: SHA1, MD5 and NONE. Default value: NONE.
     */
    public readonly integrityAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * List of local CIDR.
     */
    public readonly localAddresses!: pulumi.Output<string[]>;
    /**
     * Remote CIDR for client.
     */
    public readonly remoteAddress!: pulumi.Output<string>;
    /**
     * The port of ssl vpn. Default value: 1194.
     */
    public readonly sslVpnPort!: pulumi.Output<number | undefined>;
    /**
     * The protocol of ssl vpn. Default value: UDP.
     */
    public readonly sslVpnProtocol!: pulumi.Output<string | undefined>;
    /**
     * The name of ssl vpn server to be created.
     */
    public readonly sslVpnServerName!: pulumi.Output<string>;
    /**
     * VPN gateway ID.
     */
    public readonly vpnGatewayId!: pulumi.Output<string>;

    /**
     * Create a SslServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslServerArgs | SslServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslServerState | undefined;
            resourceInputs["compress"] = state ? state.compress : undefined;
            resourceInputs["encryptAlgorithm"] = state ? state.encryptAlgorithm : undefined;
            resourceInputs["integrityAlgorithm"] = state ? state.integrityAlgorithm : undefined;
            resourceInputs["localAddresses"] = state ? state.localAddresses : undefined;
            resourceInputs["remoteAddress"] = state ? state.remoteAddress : undefined;
            resourceInputs["sslVpnPort"] = state ? state.sslVpnPort : undefined;
            resourceInputs["sslVpnProtocol"] = state ? state.sslVpnProtocol : undefined;
            resourceInputs["sslVpnServerName"] = state ? state.sslVpnServerName : undefined;
            resourceInputs["vpnGatewayId"] = state ? state.vpnGatewayId : undefined;
        } else {
            const args = argsOrState as SslServerArgs | undefined;
            if ((!args || args.localAddresses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localAddresses'");
            }
            if ((!args || args.remoteAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteAddress'");
            }
            if ((!args || args.sslVpnServerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sslVpnServerName'");
            }
            if ((!args || args.vpnGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpnGatewayId'");
            }
            resourceInputs["compress"] = args ? args.compress : undefined;
            resourceInputs["encryptAlgorithm"] = args ? args.encryptAlgorithm : undefined;
            resourceInputs["integrityAlgorithm"] = args ? args.integrityAlgorithm : undefined;
            resourceInputs["localAddresses"] = args ? args.localAddresses : undefined;
            resourceInputs["remoteAddress"] = args ? args.remoteAddress : undefined;
            resourceInputs["sslVpnPort"] = args ? args.sslVpnPort : undefined;
            resourceInputs["sslVpnProtocol"] = args ? args.sslVpnProtocol : undefined;
            resourceInputs["sslVpnServerName"] = args ? args.sslVpnServerName : undefined;
            resourceInputs["vpnGatewayId"] = args ? args.vpnGatewayId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SslServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SslServer resources.
 */
export interface SslServerState {
    /**
     * need compressed. Default value: False.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * The encrypt algorithm. Valid values: AES-128-CBC, AES-192-CBC, AES-256-CBC, NONE.Default value: NONE.
     */
    encryptAlgorithm?: pulumi.Input<string>;
    /**
     * The integrity algorithm. Valid values: SHA1, MD5 and NONE. Default value: NONE.
     */
    integrityAlgorithm?: pulumi.Input<string>;
    /**
     * List of local CIDR.
     */
    localAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Remote CIDR for client.
     */
    remoteAddress?: pulumi.Input<string>;
    /**
     * The port of ssl vpn. Default value: 1194.
     */
    sslVpnPort?: pulumi.Input<number>;
    /**
     * The protocol of ssl vpn. Default value: UDP.
     */
    sslVpnProtocol?: pulumi.Input<string>;
    /**
     * The name of ssl vpn server to be created.
     */
    sslVpnServerName?: pulumi.Input<string>;
    /**
     * VPN gateway ID.
     */
    vpnGatewayId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SslServer resource.
 */
export interface SslServerArgs {
    /**
     * need compressed. Default value: False.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * The encrypt algorithm. Valid values: AES-128-CBC, AES-192-CBC, AES-256-CBC, NONE.Default value: NONE.
     */
    encryptAlgorithm?: pulumi.Input<string>;
    /**
     * The integrity algorithm. Valid values: SHA1, MD5 and NONE. Default value: NONE.
     */
    integrityAlgorithm?: pulumi.Input<string>;
    /**
     * List of local CIDR.
     */
    localAddresses: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Remote CIDR for client.
     */
    remoteAddress: pulumi.Input<string>;
    /**
     * The port of ssl vpn. Default value: 1194.
     */
    sslVpnPort?: pulumi.Input<number>;
    /**
     * The protocol of ssl vpn. Default value: UDP.
     */
    sslVpnProtocol?: pulumi.Input<string>;
    /**
     * The name of ssl vpn server to be created.
     */
    sslVpnServerName: pulumi.Input<string>;
    /**
     * VPN gateway ID.
     */
    vpnGatewayId: pulumi.Input<string>;
}
