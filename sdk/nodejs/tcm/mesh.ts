// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Mesh extends pulumi.CustomResource {
    /**
     * Get an existing Mesh resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MeshState, opts?: pulumi.CustomResourceOptions): Mesh {
        return new Mesh(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tcm/mesh:Mesh';

    /**
     * Returns true if the given object is an instance of Mesh.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Mesh {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Mesh.__pulumiType;
    }

    /**
     * Mesh configuration.
     */
    public readonly config!: pulumi.Output<outputs.Tcm.MeshConfig>;
    /**
     * Mesh name.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Mesh ID.
     */
    public readonly meshId!: pulumi.Output<string>;
    /**
     * Mesh version.
     */
    public readonly meshVersion!: pulumi.Output<string>;
    /**
     * A list of associated tags.
     */
    public readonly tagLists!: pulumi.Output<outputs.Tcm.MeshTagList[] | undefined>;
    /**
     * Mesh type.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Mesh resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MeshArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MeshArgs | MeshState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MeshState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["meshId"] = state ? state.meshId : undefined;
            resourceInputs["meshVersion"] = state ? state.meshVersion : undefined;
            resourceInputs["tagLists"] = state ? state.tagLists : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as MeshArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.meshVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'meshVersion'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["meshId"] = args ? args.meshId : undefined;
            resourceInputs["meshVersion"] = args ? args.meshVersion : undefined;
            resourceInputs["tagLists"] = args ? args.tagLists : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Mesh.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Mesh resources.
 */
export interface MeshState {
    /**
     * Mesh configuration.
     */
    config?: pulumi.Input<inputs.Tcm.MeshConfig>;
    /**
     * Mesh name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Mesh ID.
     */
    meshId?: pulumi.Input<string>;
    /**
     * Mesh version.
     */
    meshVersion?: pulumi.Input<string>;
    /**
     * A list of associated tags.
     */
    tagLists?: pulumi.Input<pulumi.Input<inputs.Tcm.MeshTagList>[]>;
    /**
     * Mesh type.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Mesh resource.
 */
export interface MeshArgs {
    /**
     * Mesh configuration.
     */
    config: pulumi.Input<inputs.Tcm.MeshConfig>;
    /**
     * Mesh name.
     */
    displayName: pulumi.Input<string>;
    /**
     * Mesh ID.
     */
    meshId?: pulumi.Input<string>;
    /**
     * Mesh version.
     */
    meshVersion: pulumi.Input<string>;
    /**
     * A list of associated tags.
     */
    tagLists?: pulumi.Input<pulumi.Input<inputs.Tcm.MeshTagList>[]>;
    /**
     * Mesh type.
     */
    type: pulumi.Input<string>;
}
