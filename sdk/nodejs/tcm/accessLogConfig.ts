// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class AccessLogConfig extends pulumi.CustomResource {
    /**
     * Get an existing AccessLogConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessLogConfigState, opts?: pulumi.CustomResourceOptions): AccessLogConfig {
        return new AccessLogConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tcm/accessLogConfig:AccessLogConfig';

    /**
     * Returns true if the given object is an instance of AccessLogConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccessLogConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessLogConfig.__pulumiType;
    }

    /**
     * Third party grpc server address.
     */
    public readonly address!: pulumi.Output<string | undefined>;
    /**
     * CLS config.
     */
    public readonly cls!: pulumi.Output<outputs.Tcm.AccessLogConfigCls | undefined>;
    /**
     * Whether enable log.
     */
    public readonly enable!: pulumi.Output<boolean | undefined>;
    /**
     * Whether enable third party grpc server.
     */
    public readonly enableServer!: pulumi.Output<boolean | undefined>;
    /**
     * Whether enable stdout.
     */
    public readonly enableStdout!: pulumi.Output<boolean | undefined>;
    /**
     * Log encoding, TEXT or JSON.
     */
    public readonly encoding!: pulumi.Output<string | undefined>;
    /**
     * Log format.
     */
    public readonly format!: pulumi.Output<string | undefined>;
    /**
     * Mesh ID.
     */
    public readonly meshName!: pulumi.Output<string>;
    /**
     * Selected range.
     */
    public readonly selectedRange!: pulumi.Output<outputs.Tcm.AccessLogConfigSelectedRange | undefined>;
    /**
     * Log template, istio/trace/custome.
     */
    public readonly template!: pulumi.Output<string | undefined>;

    /**
     * Create a AccessLogConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessLogConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessLogConfigArgs | AccessLogConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessLogConfigState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["cls"] = state ? state.cls : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["enableServer"] = state ? state.enableServer : undefined;
            resourceInputs["enableStdout"] = state ? state.enableStdout : undefined;
            resourceInputs["encoding"] = state ? state.encoding : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["meshName"] = state ? state.meshName : undefined;
            resourceInputs["selectedRange"] = state ? state.selectedRange : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
        } else {
            const args = argsOrState as AccessLogConfigArgs | undefined;
            if ((!args || args.meshName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'meshName'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["cls"] = args ? args.cls : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["enableServer"] = args ? args.enableServer : undefined;
            resourceInputs["enableStdout"] = args ? args.enableStdout : undefined;
            resourceInputs["encoding"] = args ? args.encoding : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["meshName"] = args ? args.meshName : undefined;
            resourceInputs["selectedRange"] = args ? args.selectedRange : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccessLogConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccessLogConfig resources.
 */
export interface AccessLogConfigState {
    /**
     * Third party grpc server address.
     */
    address?: pulumi.Input<string>;
    /**
     * CLS config.
     */
    cls?: pulumi.Input<inputs.Tcm.AccessLogConfigCls>;
    /**
     * Whether enable log.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Whether enable third party grpc server.
     */
    enableServer?: pulumi.Input<boolean>;
    /**
     * Whether enable stdout.
     */
    enableStdout?: pulumi.Input<boolean>;
    /**
     * Log encoding, TEXT or JSON.
     */
    encoding?: pulumi.Input<string>;
    /**
     * Log format.
     */
    format?: pulumi.Input<string>;
    /**
     * Mesh ID.
     */
    meshName?: pulumi.Input<string>;
    /**
     * Selected range.
     */
    selectedRange?: pulumi.Input<inputs.Tcm.AccessLogConfigSelectedRange>;
    /**
     * Log template, istio/trace/custome.
     */
    template?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AccessLogConfig resource.
 */
export interface AccessLogConfigArgs {
    /**
     * Third party grpc server address.
     */
    address?: pulumi.Input<string>;
    /**
     * CLS config.
     */
    cls?: pulumi.Input<inputs.Tcm.AccessLogConfigCls>;
    /**
     * Whether enable log.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Whether enable third party grpc server.
     */
    enableServer?: pulumi.Input<boolean>;
    /**
     * Whether enable stdout.
     */
    enableStdout?: pulumi.Input<boolean>;
    /**
     * Log encoding, TEXT or JSON.
     */
    encoding?: pulumi.Input<string>;
    /**
     * Log format.
     */
    format?: pulumi.Input<string>;
    /**
     * Mesh ID.
     */
    meshName: pulumi.Input<string>;
    /**
     * Selected range.
     */
    selectedRange?: pulumi.Input<inputs.Tcm.AccessLogConfigSelectedRange>;
    /**
     * Log template, istio/trace/custome.
     */
    template?: pulumi.Input<string>;
}
