// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class LogConfig extends pulumi.CustomResource {
    /**
     * Get an existing LogConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogConfigState, opts?: pulumi.CustomResourceOptions): LogConfig {
        return new LogConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tem/logConfig:LogConfig';

    /**
     * Returns true if the given object is an instance of LogConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogConfig.__pulumiType;
    }

    /**
     * application ID.
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * regex pattern.
     */
    public readonly beginningRegex!: pulumi.Output<string | undefined>;
    /**
     * environment ID.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * file name pattern if container_file.
     */
    public readonly filePattern!: pulumi.Output<string | undefined>;
    /**
     * container_stdout or container_file.
     */
    public readonly inputType!: pulumi.Output<string>;
    /**
     * directory if container_file.
     */
    public readonly logPath!: pulumi.Output<string | undefined>;
    /**
     * minimalist_log or multiline_log.
     */
    public readonly logType!: pulumi.Output<string>;
    /**
     * logset.
     */
    public readonly logsetId!: pulumi.Output<string>;
    /**
     * appConfig name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * topic.
     */
    public readonly topicId!: pulumi.Output<string>;
    /**
     * application ID, which is combined by environment ID and application ID, like `en-o5edaepv#app-3j29aa2p`.
     */
    public readonly workloadId!: pulumi.Output<string>;

    /**
     * Create a LogConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogConfigArgs | LogConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogConfigState | undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["beginningRegex"] = state ? state.beginningRegex : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["filePattern"] = state ? state.filePattern : undefined;
            resourceInputs["inputType"] = state ? state.inputType : undefined;
            resourceInputs["logPath"] = state ? state.logPath : undefined;
            resourceInputs["logType"] = state ? state.logType : undefined;
            resourceInputs["logsetId"] = state ? state.logsetId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["topicId"] = state ? state.topicId : undefined;
            resourceInputs["workloadId"] = state ? state.workloadId : undefined;
        } else {
            const args = argsOrState as LogConfigArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.inputType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputType'");
            }
            if ((!args || args.logType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logType'");
            }
            if ((!args || args.logsetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logsetId'");
            }
            if ((!args || args.topicId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicId'");
            }
            if ((!args || args.workloadId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workloadId'");
            }
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["beginningRegex"] = args ? args.beginningRegex : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["filePattern"] = args ? args.filePattern : undefined;
            resourceInputs["inputType"] = args ? args.inputType : undefined;
            resourceInputs["logPath"] = args ? args.logPath : undefined;
            resourceInputs["logType"] = args ? args.logType : undefined;
            resourceInputs["logsetId"] = args ? args.logsetId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["topicId"] = args ? args.topicId : undefined;
            resourceInputs["workloadId"] = args ? args.workloadId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogConfig resources.
 */
export interface LogConfigState {
    /**
     * application ID.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * regex pattern.
     */
    beginningRegex?: pulumi.Input<string>;
    /**
     * environment ID.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * file name pattern if container_file.
     */
    filePattern?: pulumi.Input<string>;
    /**
     * container_stdout or container_file.
     */
    inputType?: pulumi.Input<string>;
    /**
     * directory if container_file.
     */
    logPath?: pulumi.Input<string>;
    /**
     * minimalist_log or multiline_log.
     */
    logType?: pulumi.Input<string>;
    /**
     * logset.
     */
    logsetId?: pulumi.Input<string>;
    /**
     * appConfig name.
     */
    name?: pulumi.Input<string>;
    /**
     * topic.
     */
    topicId?: pulumi.Input<string>;
    /**
     * application ID, which is combined by environment ID and application ID, like `en-o5edaepv#app-3j29aa2p`.
     */
    workloadId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogConfig resource.
 */
export interface LogConfigArgs {
    /**
     * application ID.
     */
    applicationId: pulumi.Input<string>;
    /**
     * regex pattern.
     */
    beginningRegex?: pulumi.Input<string>;
    /**
     * environment ID.
     */
    environmentId: pulumi.Input<string>;
    /**
     * file name pattern if container_file.
     */
    filePattern?: pulumi.Input<string>;
    /**
     * container_stdout or container_file.
     */
    inputType: pulumi.Input<string>;
    /**
     * directory if container_file.
     */
    logPath?: pulumi.Input<string>;
    /**
     * minimalist_log or multiline_log.
     */
    logType: pulumi.Input<string>;
    /**
     * logset.
     */
    logsetId: pulumi.Input<string>;
    /**
     * appConfig name.
     */
    name?: pulumi.Input<string>;
    /**
     * topic.
     */
    topicId: pulumi.Input<string>;
    /**
     * application ID, which is combined by environment ID and application ID, like `en-o5edaepv#app-3j29aa2p`.
     */
    workloadId: pulumi.Input<string>;
}
