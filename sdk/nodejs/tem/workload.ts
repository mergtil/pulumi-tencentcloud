// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Workload extends pulumi.CustomResource {
    /**
     * Get an existing Workload resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkloadState, opts?: pulumi.CustomResourceOptions): Workload {
        return new Workload(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tem/workload:Workload';

    /**
     * Returns true if the given object is an instance of Workload.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Workload {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workload.__pulumiType;
    }

    /**
     * application ID.
     */
    public readonly applicationId!: pulumi.Output<string>;
    /**
     * cpu.
     */
    public readonly cpuSpec!: pulumi.Output<number>;
    /**
     * deploy mode, support IMAGE.
     */
    public readonly deployMode!: pulumi.Output<string>;
    /**
     * deploy strategy.
     */
    public readonly deployStrategyConf!: pulumi.Output<outputs.Tem.WorkloadDeployStrategyConf | undefined>;
    /**
     * deploy version.
     */
    public readonly deployVersion!: pulumi.Output<string>;
    /**
     * .
     */
    public readonly envConfs!: pulumi.Output<outputs.Tem.WorkloadEnvConf[]>;
    /**
     * environment ID.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * repository name.
     */
    public readonly imgRepo!: pulumi.Output<string>;
    /**
     * initial pod number.
     */
    public readonly initPodNum!: pulumi.Output<number>;
    /**
     * liveness config.
     */
    public readonly liveness!: pulumi.Output<outputs.Tem.WorkloadLiveness | undefined>;
    /**
     * mem.
     */
    public readonly memorySpec!: pulumi.Output<number>;
    /**
     * mem.
     */
    public readonly postStart!: pulumi.Output<string | undefined>;
    /**
     * mem.
     */
    public readonly preStop!: pulumi.Output<string | undefined>;
    /**
     * .
     */
    public readonly readiness!: pulumi.Output<outputs.Tem.WorkloadReadiness | undefined>;
    /**
     * repo server addr when deploy by image.
     */
    public readonly repoServer!: pulumi.Output<string | undefined>;
    /**
     * repo type when deploy: 0: tcr personal; 1: tcr enterprise; 2: public repository; 3: tem host tcr; 4: demo repo.
     */
    public readonly repoType!: pulumi.Output<number | undefined>;
    /**
     * security groups.
     */
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * .
     */
    public readonly startupProbe!: pulumi.Output<outputs.Tem.WorkloadStartupProbe | undefined>;
    /**
     * storage configuration.
     */
    public readonly storageConfs!: pulumi.Output<outputs.Tem.WorkloadStorageConf[] | undefined>;
    /**
     * storage mount configuration.
     */
    public readonly storageMountConfs!: pulumi.Output<outputs.Tem.WorkloadStorageMountConf[] | undefined>;
    /**
     * tcr instance id when deploy by image.
     */
    public readonly tcrInstanceId!: pulumi.Output<string | undefined>;

    /**
     * Create a Workload resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkloadArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkloadArgs | WorkloadState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkloadState | undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["cpuSpec"] = state ? state.cpuSpec : undefined;
            resourceInputs["deployMode"] = state ? state.deployMode : undefined;
            resourceInputs["deployStrategyConf"] = state ? state.deployStrategyConf : undefined;
            resourceInputs["deployVersion"] = state ? state.deployVersion : undefined;
            resourceInputs["envConfs"] = state ? state.envConfs : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["imgRepo"] = state ? state.imgRepo : undefined;
            resourceInputs["initPodNum"] = state ? state.initPodNum : undefined;
            resourceInputs["liveness"] = state ? state.liveness : undefined;
            resourceInputs["memorySpec"] = state ? state.memorySpec : undefined;
            resourceInputs["postStart"] = state ? state.postStart : undefined;
            resourceInputs["preStop"] = state ? state.preStop : undefined;
            resourceInputs["readiness"] = state ? state.readiness : undefined;
            resourceInputs["repoServer"] = state ? state.repoServer : undefined;
            resourceInputs["repoType"] = state ? state.repoType : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["startupProbe"] = state ? state.startupProbe : undefined;
            resourceInputs["storageConfs"] = state ? state.storageConfs : undefined;
            resourceInputs["storageMountConfs"] = state ? state.storageMountConfs : undefined;
            resourceInputs["tcrInstanceId"] = state ? state.tcrInstanceId : undefined;
        } else {
            const args = argsOrState as WorkloadArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if ((!args || args.cpuSpec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cpuSpec'");
            }
            if ((!args || args.deployMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deployMode'");
            }
            if ((!args || args.deployVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deployVersion'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.imgRepo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imgRepo'");
            }
            if ((!args || args.initPodNum === undefined) && !opts.urn) {
                throw new Error("Missing required property 'initPodNum'");
            }
            if ((!args || args.memorySpec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memorySpec'");
            }
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["cpuSpec"] = args ? args.cpuSpec : undefined;
            resourceInputs["deployMode"] = args ? args.deployMode : undefined;
            resourceInputs["deployStrategyConf"] = args ? args.deployStrategyConf : undefined;
            resourceInputs["deployVersion"] = args ? args.deployVersion : undefined;
            resourceInputs["envConfs"] = args ? args.envConfs : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["imgRepo"] = args ? args.imgRepo : undefined;
            resourceInputs["initPodNum"] = args ? args.initPodNum : undefined;
            resourceInputs["liveness"] = args ? args.liveness : undefined;
            resourceInputs["memorySpec"] = args ? args.memorySpec : undefined;
            resourceInputs["postStart"] = args ? args.postStart : undefined;
            resourceInputs["preStop"] = args ? args.preStop : undefined;
            resourceInputs["readiness"] = args ? args.readiness : undefined;
            resourceInputs["repoServer"] = args ? args.repoServer : undefined;
            resourceInputs["repoType"] = args ? args.repoType : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["startupProbe"] = args ? args.startupProbe : undefined;
            resourceInputs["storageConfs"] = args ? args.storageConfs : undefined;
            resourceInputs["storageMountConfs"] = args ? args.storageMountConfs : undefined;
            resourceInputs["tcrInstanceId"] = args ? args.tcrInstanceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Workload.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Workload resources.
 */
export interface WorkloadState {
    /**
     * application ID.
     */
    applicationId?: pulumi.Input<string>;
    /**
     * cpu.
     */
    cpuSpec?: pulumi.Input<number>;
    /**
     * deploy mode, support IMAGE.
     */
    deployMode?: pulumi.Input<string>;
    /**
     * deploy strategy.
     */
    deployStrategyConf?: pulumi.Input<inputs.Tem.WorkloadDeployStrategyConf>;
    /**
     * deploy version.
     */
    deployVersion?: pulumi.Input<string>;
    /**
     * .
     */
    envConfs?: pulumi.Input<pulumi.Input<inputs.Tem.WorkloadEnvConf>[]>;
    /**
     * environment ID.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * repository name.
     */
    imgRepo?: pulumi.Input<string>;
    /**
     * initial pod number.
     */
    initPodNum?: pulumi.Input<number>;
    /**
     * liveness config.
     */
    liveness?: pulumi.Input<inputs.Tem.WorkloadLiveness>;
    /**
     * mem.
     */
    memorySpec?: pulumi.Input<number>;
    /**
     * mem.
     */
    postStart?: pulumi.Input<string>;
    /**
     * mem.
     */
    preStop?: pulumi.Input<string>;
    /**
     * .
     */
    readiness?: pulumi.Input<inputs.Tem.WorkloadReadiness>;
    /**
     * repo server addr when deploy by image.
     */
    repoServer?: pulumi.Input<string>;
    /**
     * repo type when deploy: 0: tcr personal; 1: tcr enterprise; 2: public repository; 3: tem host tcr; 4: demo repo.
     */
    repoType?: pulumi.Input<number>;
    /**
     * security groups.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * .
     */
    startupProbe?: pulumi.Input<inputs.Tem.WorkloadStartupProbe>;
    /**
     * storage configuration.
     */
    storageConfs?: pulumi.Input<pulumi.Input<inputs.Tem.WorkloadStorageConf>[]>;
    /**
     * storage mount configuration.
     */
    storageMountConfs?: pulumi.Input<pulumi.Input<inputs.Tem.WorkloadStorageMountConf>[]>;
    /**
     * tcr instance id when deploy by image.
     */
    tcrInstanceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Workload resource.
 */
export interface WorkloadArgs {
    /**
     * application ID.
     */
    applicationId: pulumi.Input<string>;
    /**
     * cpu.
     */
    cpuSpec: pulumi.Input<number>;
    /**
     * deploy mode, support IMAGE.
     */
    deployMode: pulumi.Input<string>;
    /**
     * deploy strategy.
     */
    deployStrategyConf?: pulumi.Input<inputs.Tem.WorkloadDeployStrategyConf>;
    /**
     * deploy version.
     */
    deployVersion: pulumi.Input<string>;
    /**
     * .
     */
    envConfs?: pulumi.Input<pulumi.Input<inputs.Tem.WorkloadEnvConf>[]>;
    /**
     * environment ID.
     */
    environmentId: pulumi.Input<string>;
    /**
     * repository name.
     */
    imgRepo: pulumi.Input<string>;
    /**
     * initial pod number.
     */
    initPodNum: pulumi.Input<number>;
    /**
     * liveness config.
     */
    liveness?: pulumi.Input<inputs.Tem.WorkloadLiveness>;
    /**
     * mem.
     */
    memorySpec: pulumi.Input<number>;
    /**
     * mem.
     */
    postStart?: pulumi.Input<string>;
    /**
     * mem.
     */
    preStop?: pulumi.Input<string>;
    /**
     * .
     */
    readiness?: pulumi.Input<inputs.Tem.WorkloadReadiness>;
    /**
     * repo server addr when deploy by image.
     */
    repoServer?: pulumi.Input<string>;
    /**
     * repo type when deploy: 0: tcr personal; 1: tcr enterprise; 2: public repository; 3: tem host tcr; 4: demo repo.
     */
    repoType?: pulumi.Input<number>;
    /**
     * security groups.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * .
     */
    startupProbe?: pulumi.Input<inputs.Tem.WorkloadStartupProbe>;
    /**
     * storage configuration.
     */
    storageConfs?: pulumi.Input<pulumi.Input<inputs.Tem.WorkloadStorageConf>[]>;
    /**
     * storage mount configuration.
     */
    storageMountConfs?: pulumi.Input<pulumi.Input<inputs.Tem.WorkloadStorageMountConf>[]>;
    /**
     * tcr instance id when deploy by image.
     */
    tcrInstanceId?: pulumi.Input<string>;
}
