// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationState, opts?: pulumi.CustomResourceOptions): Application {
        return new Application(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tem/application:Application';

    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Application {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }

    /**
     * application name.
     */
    public readonly applicationName!: pulumi.Output<string>;
    /**
     * program language, like JAVA.
     */
    public readonly codingLanguage!: pulumi.Output<string>;
    /**
     * application description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * tcr instance id.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * repository name.
     */
    public readonly repoName!: pulumi.Output<string | undefined>;
    /**
     * registry address.
     */
    public readonly repoServer!: pulumi.Output<string | undefined>;
    /**
     * repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
     */
    public readonly repoType!: pulumi.Output<number | undefined>;
    /**
     * application tag list.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * create image repo or not.
     */
    public readonly useDefaultImageService!: pulumi.Output<number | undefined>;

    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationArgs | ApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationState | undefined;
            resourceInputs["applicationName"] = state ? state.applicationName : undefined;
            resourceInputs["codingLanguage"] = state ? state.codingLanguage : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["repoName"] = state ? state.repoName : undefined;
            resourceInputs["repoServer"] = state ? state.repoServer : undefined;
            resourceInputs["repoType"] = state ? state.repoType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["useDefaultImageService"] = state ? state.useDefaultImageService : undefined;
        } else {
            const args = argsOrState as ApplicationArgs | undefined;
            if ((!args || args.applicationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationName'");
            }
            if ((!args || args.codingLanguage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'codingLanguage'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["applicationName"] = args ? args.applicationName : undefined;
            resourceInputs["codingLanguage"] = args ? args.codingLanguage : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["repoName"] = args ? args.repoName : undefined;
            resourceInputs["repoServer"] = args ? args.repoServer : undefined;
            resourceInputs["repoType"] = args ? args.repoType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["useDefaultImageService"] = args ? args.useDefaultImageService : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Application.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Application resources.
 */
export interface ApplicationState {
    /**
     * application name.
     */
    applicationName?: pulumi.Input<string>;
    /**
     * program language, like JAVA.
     */
    codingLanguage?: pulumi.Input<string>;
    /**
     * application description.
     */
    description?: pulumi.Input<string>;
    /**
     * tcr instance id.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * repository name.
     */
    repoName?: pulumi.Input<string>;
    /**
     * registry address.
     */
    repoServer?: pulumi.Input<string>;
    /**
     * repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
     */
    repoType?: pulumi.Input<number>;
    /**
     * application tag list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * create image repo or not.
     */
    useDefaultImageService?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    /**
     * application name.
     */
    applicationName: pulumi.Input<string>;
    /**
     * program language, like JAVA.
     */
    codingLanguage: pulumi.Input<string>;
    /**
     * application description.
     */
    description: pulumi.Input<string>;
    /**
     * tcr instance id.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * repository name.
     */
    repoName?: pulumi.Input<string>;
    /**
     * registry address.
     */
    repoServer?: pulumi.Input<string>;
    /**
     * repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
     */
    repoType?: pulumi.Input<number>;
    /**
     * application tag list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * create image repo or not.
     */
    useDefaultImageService?: pulumi.Input<number>;
}
