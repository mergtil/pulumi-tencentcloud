// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AppConfigArgs, AppConfigState } from "./appConfig";
export type AppConfig = import("./appConfig").AppConfig;
export const AppConfig: typeof import("./appConfig").AppConfig = null as any;
utilities.lazyLoad(exports, ["AppConfig"], () => require("./appConfig"));

export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { ApplicationServiceArgs, ApplicationServiceState } from "./applicationService";
export type ApplicationService = import("./applicationService").ApplicationService;
export const ApplicationService: typeof import("./applicationService").ApplicationService = null as any;
utilities.lazyLoad(exports, ["ApplicationService"], () => require("./applicationService"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { GatewayArgs, GatewayState } from "./gateway";
export type Gateway = import("./gateway").Gateway;
export const Gateway: typeof import("./gateway").Gateway = null as any;
utilities.lazyLoad(exports, ["Gateway"], () => require("./gateway"));

export { LogConfigArgs, LogConfigState } from "./logConfig";
export type LogConfig = import("./logConfig").LogConfig;
export const LogConfig: typeof import("./logConfig").LogConfig = null as any;
utilities.lazyLoad(exports, ["LogConfig"], () => require("./logConfig"));

export { ScaleRuleArgs, ScaleRuleState } from "./scaleRule";
export type ScaleRule = import("./scaleRule").ScaleRule;
export const ScaleRule: typeof import("./scaleRule").ScaleRule = null as any;
utilities.lazyLoad(exports, ["ScaleRule"], () => require("./scaleRule"));

export { WorkloadArgs, WorkloadState } from "./workload";
export type Workload = import("./workload").Workload;
export const Workload: typeof import("./workload").Workload = null as any;
utilities.lazyLoad(exports, ["Workload"], () => require("./workload"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Tem/appConfig:AppConfig":
                return new AppConfig(name, <any>undefined, { urn })
            case "tencentcloud:Tem/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "tencentcloud:Tem/applicationService:ApplicationService":
                return new ApplicationService(name, <any>undefined, { urn })
            case "tencentcloud:Tem/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "tencentcloud:Tem/gateway:Gateway":
                return new Gateway(name, <any>undefined, { urn })
            case "tencentcloud:Tem/logConfig:LogConfig":
                return new LogConfig(name, <any>undefined, { urn })
            case "tencentcloud:Tem/scaleRule:ScaleRule":
                return new ScaleRule(name, <any>undefined, { urn })
            case "tencentcloud:Tem/workload:Workload":
                return new Workload(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Tem/appConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tem/application", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tem/applicationService", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tem/environment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tem/gateway", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tem/logConfig", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tem/scaleRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tem/workload", _module)
