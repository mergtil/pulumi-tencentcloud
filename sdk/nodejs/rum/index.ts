// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetOfflineLogConfigArgs, GetOfflineLogConfigResult, GetOfflineLogConfigOutputArgs } from "./getOfflineLogConfig";
export const getOfflineLogConfig: typeof import("./getOfflineLogConfig").getOfflineLogConfig = null as any;
export const getOfflineLogConfigOutput: typeof import("./getOfflineLogConfig").getOfflineLogConfigOutput = null as any;
utilities.lazyLoad(exports, ["getOfflineLogConfig","getOfflineLogConfigOutput"], () => require("./getOfflineLogConfig"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetTawInstanceArgs, GetTawInstanceResult, GetTawInstanceOutputArgs } from "./getTawInstance";
export const getTawInstance: typeof import("./getTawInstance").getTawInstance = null as any;
export const getTawInstanceOutput: typeof import("./getTawInstance").getTawInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getTawInstance","getTawInstanceOutput"], () => require("./getTawInstance"));

export { GetWhitelistArgs, GetWhitelistResult, GetWhitelistOutputArgs } from "./getWhitelist";
export const getWhitelist: typeof import("./getWhitelist").getWhitelist = null as any;
export const getWhitelistOutput: typeof import("./getWhitelist").getWhitelistOutput = null as any;
utilities.lazyLoad(exports, ["getWhitelist","getWhitelistOutput"], () => require("./getWhitelist"));

export { OfflineLogConfigAttachmentArgs, OfflineLogConfigAttachmentState } from "./offlineLogConfigAttachment";
export type OfflineLogConfigAttachment = import("./offlineLogConfigAttachment").OfflineLogConfigAttachment;
export const OfflineLogConfigAttachment: typeof import("./offlineLogConfigAttachment").OfflineLogConfigAttachment = null as any;
utilities.lazyLoad(exports, ["OfflineLogConfigAttachment"], () => require("./offlineLogConfigAttachment"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { TawInstanceArgs, TawInstanceState } from "./tawInstance";
export type TawInstance = import("./tawInstance").TawInstance;
export const TawInstance: typeof import("./tawInstance").TawInstance = null as any;
utilities.lazyLoad(exports, ["TawInstance"], () => require("./tawInstance"));

export { WhitelistArgs, WhitelistState } from "./whitelist";
export type Whitelist = import("./whitelist").Whitelist;
export const Whitelist: typeof import("./whitelist").Whitelist = null as any;
utilities.lazyLoad(exports, ["Whitelist"], () => require("./whitelist"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Rum/offlineLogConfigAttachment:OfflineLogConfigAttachment":
                return new OfflineLogConfigAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Rum/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "tencentcloud:Rum/tawInstance:TawInstance":
                return new TawInstance(name, <any>undefined, { urn })
            case "tencentcloud:Rum/whitelist:Whitelist":
                return new Whitelist(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Rum/offlineLogConfigAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Rum/project", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Rum/tawInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Rum/whitelist", _module)
