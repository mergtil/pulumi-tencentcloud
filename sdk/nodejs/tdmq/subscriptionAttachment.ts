// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class SubscriptionAttachment extends pulumi.CustomResource {
    /**
     * Get an existing SubscriptionAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubscriptionAttachmentState, opts?: pulumi.CustomResourceOptions): SubscriptionAttachment {
        return new SubscriptionAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tdmq/subscriptionAttachment:SubscriptionAttachment';

    /**
     * Returns true if the given object is an instance of SubscriptionAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SubscriptionAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SubscriptionAttachment.__pulumiType;
    }

    /**
     * Whether to automatically create dead letters and retry topics, True means to create, False means not to create, the
     * default is to automatically create dead letters and retry topics.
     */
    public readonly autoCreatePolicyTopic!: pulumi.Output<boolean | undefined>;
    /**
     * ID of the Pulsar cluster.
     */
    public readonly clusterId!: pulumi.Output<string | undefined>;
    /**
     * Environment (namespace) name.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * Remarks, within 128 characters.
     */
    public readonly remark!: pulumi.Output<string | undefined>;
    /**
     * Subscriber name, no more than 128 characters.
     */
    public readonly subscriptionName!: pulumi.Output<string>;
    /**
     * topic name.
     */
    public readonly topicName!: pulumi.Output<string>;

    /**
     * Create a SubscriptionAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubscriptionAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubscriptionAttachmentArgs | SubscriptionAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubscriptionAttachmentState | undefined;
            resourceInputs["autoCreatePolicyTopic"] = state ? state.autoCreatePolicyTopic : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["remark"] = state ? state.remark : undefined;
            resourceInputs["subscriptionName"] = state ? state.subscriptionName : undefined;
            resourceInputs["topicName"] = state ? state.topicName : undefined;
        } else {
            const args = argsOrState as SubscriptionAttachmentArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.subscriptionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionName'");
            }
            if ((!args || args.topicName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicName'");
            }
            resourceInputs["autoCreatePolicyTopic"] = args ? args.autoCreatePolicyTopic : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["remark"] = args ? args.remark : undefined;
            resourceInputs["subscriptionName"] = args ? args.subscriptionName : undefined;
            resourceInputs["topicName"] = args ? args.topicName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SubscriptionAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SubscriptionAttachment resources.
 */
export interface SubscriptionAttachmentState {
    /**
     * Whether to automatically create dead letters and retry topics, True means to create, False means not to create, the
     * default is to automatically create dead letters and retry topics.
     */
    autoCreatePolicyTopic?: pulumi.Input<boolean>;
    /**
     * ID of the Pulsar cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Environment (namespace) name.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * Remarks, within 128 characters.
     */
    remark?: pulumi.Input<string>;
    /**
     * Subscriber name, no more than 128 characters.
     */
    subscriptionName?: pulumi.Input<string>;
    /**
     * topic name.
     */
    topicName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SubscriptionAttachment resource.
 */
export interface SubscriptionAttachmentArgs {
    /**
     * Whether to automatically create dead letters and retry topics, True means to create, False means not to create, the
     * default is to automatically create dead letters and retry topics.
     */
    autoCreatePolicyTopic?: pulumi.Input<boolean>;
    /**
     * ID of the Pulsar cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Environment (namespace) name.
     */
    environmentId: pulumi.Input<string>;
    /**
     * Remarks, within 128 characters.
     */
    remark?: pulumi.Input<string>;
    /**
     * Subscriber name, no more than 128 characters.
     */
    subscriptionName: pulumi.Input<string>;
    /**
     * topic name.
     */
    topicName: pulumi.Input<string>;
}
