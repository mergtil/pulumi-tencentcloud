// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class SendRocketmqMessage extends pulumi.CustomResource {
    /**
     * Get an existing SendRocketmqMessage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SendRocketmqMessageState, opts?: pulumi.CustomResourceOptions): SendRocketmqMessage {
        return new SendRocketmqMessage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Tdmq/sendRocketmqMessage:SendRocketmqMessage';

    /**
     * Returns true if the given object is an instance of SendRocketmqMessage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SendRocketmqMessage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SendRocketmqMessage.__pulumiType;
    }

    /**
     * Cluster id.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Information.
     */
    public readonly msgBody!: pulumi.Output<string>;
    /**
     * Message key information.
     */
    public readonly msgKey!: pulumi.Output<string | undefined>;
    /**
     * Message tag information.
     */
    public readonly msgTag!: pulumi.Output<string | undefined>;
    /**
     * Namespaces.
     */
    public readonly namespaceId!: pulumi.Output<string>;
    /**
     * topic name.
     */
    public readonly topicName!: pulumi.Output<string>;

    /**
     * Create a SendRocketmqMessage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SendRocketmqMessageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SendRocketmqMessageArgs | SendRocketmqMessageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SendRocketmqMessageState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["msgBody"] = state ? state.msgBody : undefined;
            resourceInputs["msgKey"] = state ? state.msgKey : undefined;
            resourceInputs["msgTag"] = state ? state.msgTag : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["topicName"] = state ? state.topicName : undefined;
        } else {
            const args = argsOrState as SendRocketmqMessageArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.msgBody === undefined) && !opts.urn) {
                throw new Error("Missing required property 'msgBody'");
            }
            if ((!args || args.namespaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceId'");
            }
            if ((!args || args.topicName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicName'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["msgBody"] = args ? args.msgBody : undefined;
            resourceInputs["msgKey"] = args ? args.msgKey : undefined;
            resourceInputs["msgTag"] = args ? args.msgTag : undefined;
            resourceInputs["namespaceId"] = args ? args.namespaceId : undefined;
            resourceInputs["topicName"] = args ? args.topicName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SendRocketmqMessage.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SendRocketmqMessage resources.
 */
export interface SendRocketmqMessageState {
    /**
     * Cluster id.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Information.
     */
    msgBody?: pulumi.Input<string>;
    /**
     * Message key information.
     */
    msgKey?: pulumi.Input<string>;
    /**
     * Message tag information.
     */
    msgTag?: pulumi.Input<string>;
    /**
     * Namespaces.
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * topic name.
     */
    topicName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SendRocketmqMessage resource.
 */
export interface SendRocketmqMessageArgs {
    /**
     * Cluster id.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Information.
     */
    msgBody: pulumi.Input<string>;
    /**
     * Message key information.
     */
    msgKey?: pulumi.Input<string>;
    /**
     * Message tag information.
     */
    msgTag?: pulumi.Input<string>;
    /**
     * Namespaces.
     */
    namespaceId: pulumi.Input<string>;
    /**
     * topic name.
     */
    topicName: pulumi.Input<string>;
}
