// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetEnvironmentAttributesArgs, GetEnvironmentAttributesResult, GetEnvironmentAttributesOutputArgs } from "./getEnvironmentAttributes";
export const getEnvironmentAttributes: typeof import("./getEnvironmentAttributes").getEnvironmentAttributes = null as any;
export const getEnvironmentAttributesOutput: typeof import("./getEnvironmentAttributes").getEnvironmentAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironmentAttributes","getEnvironmentAttributesOutput"], () => require("./getEnvironmentAttributes"));

export { GetProInstanceDetailArgs, GetProInstanceDetailResult, GetProInstanceDetailOutputArgs } from "./getProInstanceDetail";
export const getProInstanceDetail: typeof import("./getProInstanceDetail").getProInstanceDetail = null as any;
export const getProInstanceDetailOutput: typeof import("./getProInstanceDetail").getProInstanceDetailOutput = null as any;
utilities.lazyLoad(exports, ["getProInstanceDetail","getProInstanceDetailOutput"], () => require("./getProInstanceDetail"));

export { GetProInstancesArgs, GetProInstancesResult, GetProInstancesOutputArgs } from "./getProInstances";
export const getProInstances: typeof import("./getProInstances").getProInstances = null as any;
export const getProInstancesOutput: typeof import("./getProInstances").getProInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getProInstances","getProInstancesOutput"], () => require("./getProInstances"));

export { GetPublisherSummaryArgs, GetPublisherSummaryResult, GetPublisherSummaryOutputArgs } from "./getPublisherSummary";
export const getPublisherSummary: typeof import("./getPublisherSummary").getPublisherSummary = null as any;
export const getPublisherSummaryOutput: typeof import("./getPublisherSummary").getPublisherSummaryOutput = null as any;
utilities.lazyLoad(exports, ["getPublisherSummary","getPublisherSummaryOutput"], () => require("./getPublisherSummary"));

export { GetPublishersArgs, GetPublishersResult, GetPublishersOutputArgs } from "./getPublishers";
export const getPublishers: typeof import("./getPublishers").getPublishers = null as any;
export const getPublishersOutput: typeof import("./getPublishers").getPublishersOutput = null as any;
utilities.lazyLoad(exports, ["getPublishers","getPublishersOutput"], () => require("./getPublishers"));

export { GetRabbitmqNodeListArgs, GetRabbitmqNodeListResult, GetRabbitmqNodeListOutputArgs } from "./getRabbitmqNodeList";
export const getRabbitmqNodeList: typeof import("./getRabbitmqNodeList").getRabbitmqNodeList = null as any;
export const getRabbitmqNodeListOutput: typeof import("./getRabbitmqNodeList").getRabbitmqNodeListOutput = null as any;
utilities.lazyLoad(exports, ["getRabbitmqNodeList","getRabbitmqNodeListOutput"], () => require("./getRabbitmqNodeList"));

export { GetRabbitmqVipInstanceArgs, GetRabbitmqVipInstanceResult, GetRabbitmqVipInstanceOutputArgs } from "./getRabbitmqVipInstance";
export const getRabbitmqVipInstance: typeof import("./getRabbitmqVipInstance").getRabbitmqVipInstance = null as any;
export const getRabbitmqVipInstanceOutput: typeof import("./getRabbitmqVipInstance").getRabbitmqVipInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getRabbitmqVipInstance","getRabbitmqVipInstanceOutput"], () => require("./getRabbitmqVipInstance"));

export { GetRocketmqClusterArgs, GetRocketmqClusterResult, GetRocketmqClusterOutputArgs } from "./getRocketmqCluster";
export const getRocketmqCluster: typeof import("./getRocketmqCluster").getRocketmqCluster = null as any;
export const getRocketmqClusterOutput: typeof import("./getRocketmqCluster").getRocketmqClusterOutput = null as any;
utilities.lazyLoad(exports, ["getRocketmqCluster","getRocketmqClusterOutput"], () => require("./getRocketmqCluster"));

export { GetRocketmqGroupArgs, GetRocketmqGroupResult, GetRocketmqGroupOutputArgs } from "./getRocketmqGroup";
export const getRocketmqGroup: typeof import("./getRocketmqGroup").getRocketmqGroup = null as any;
export const getRocketmqGroupOutput: typeof import("./getRocketmqGroup").getRocketmqGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRocketmqGroup","getRocketmqGroupOutput"], () => require("./getRocketmqGroup"));

export { GetRocketmqMessagesArgs, GetRocketmqMessagesResult, GetRocketmqMessagesOutputArgs } from "./getRocketmqMessages";
export const getRocketmqMessages: typeof import("./getRocketmqMessages").getRocketmqMessages = null as any;
export const getRocketmqMessagesOutput: typeof import("./getRocketmqMessages").getRocketmqMessagesOutput = null as any;
utilities.lazyLoad(exports, ["getRocketmqMessages","getRocketmqMessagesOutput"], () => require("./getRocketmqMessages"));

export { GetRocketmqNamespaceArgs, GetRocketmqNamespaceResult, GetRocketmqNamespaceOutputArgs } from "./getRocketmqNamespace";
export const getRocketmqNamespace: typeof import("./getRocketmqNamespace").getRocketmqNamespace = null as any;
export const getRocketmqNamespaceOutput: typeof import("./getRocketmqNamespace").getRocketmqNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getRocketmqNamespace","getRocketmqNamespaceOutput"], () => require("./getRocketmqNamespace"));

export { GetRocketmqRoleArgs, GetRocketmqRoleResult, GetRocketmqRoleOutputArgs } from "./getRocketmqRole";
export const getRocketmqRole: typeof import("./getRocketmqRole").getRocketmqRole = null as any;
export const getRocketmqRoleOutput: typeof import("./getRocketmqRole").getRocketmqRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRocketmqRole","getRocketmqRoleOutput"], () => require("./getRocketmqRole"));

export { GetRocketmqTopicArgs, GetRocketmqTopicResult, GetRocketmqTopicOutputArgs } from "./getRocketmqTopic";
export const getRocketmqTopic: typeof import("./getRocketmqTopic").getRocketmqTopic = null as any;
export const getRocketmqTopicOutput: typeof import("./getRocketmqTopic").getRocketmqTopicOutput = null as any;
utilities.lazyLoad(exports, ["getRocketmqTopic","getRocketmqTopicOutput"], () => require("./getRocketmqTopic"));

export { GetVipInstanceArgs, GetVipInstanceResult, GetVipInstanceOutputArgs } from "./getVipInstance";
export const getVipInstance: typeof import("./getVipInstance").getVipInstance = null as any;
export const getVipInstanceOutput: typeof import("./getVipInstance").getVipInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getVipInstance","getVipInstanceOutput"], () => require("./getVipInstance"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { NamespaceArgs, NamespaceState } from "./namespace";
export type Namespace = import("./namespace").Namespace;
export const Namespace: typeof import("./namespace").Namespace = null as any;
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));

export { NamespaceRoleAttachmentArgs, NamespaceRoleAttachmentState } from "./namespaceRoleAttachment";
export type NamespaceRoleAttachment = import("./namespaceRoleAttachment").NamespaceRoleAttachment;
export const NamespaceRoleAttachment: typeof import("./namespaceRoleAttachment").NamespaceRoleAttachment = null as any;
utilities.lazyLoad(exports, ["NamespaceRoleAttachment"], () => require("./namespaceRoleAttachment"));

export { RabbitmqUserArgs, RabbitmqUserState } from "./rabbitmqUser";
export type RabbitmqUser = import("./rabbitmqUser").RabbitmqUser;
export const RabbitmqUser: typeof import("./rabbitmqUser").RabbitmqUser = null as any;
utilities.lazyLoad(exports, ["RabbitmqUser"], () => require("./rabbitmqUser"));

export { RabbitmqVipInstanceArgs, RabbitmqVipInstanceState } from "./rabbitmqVipInstance";
export type RabbitmqVipInstance = import("./rabbitmqVipInstance").RabbitmqVipInstance;
export const RabbitmqVipInstance: typeof import("./rabbitmqVipInstance").RabbitmqVipInstance = null as any;
utilities.lazyLoad(exports, ["RabbitmqVipInstance"], () => require("./rabbitmqVipInstance"));

export { RabbitmqVirtualHostArgs, RabbitmqVirtualHostState } from "./rabbitmqVirtualHost";
export type RabbitmqVirtualHost = import("./rabbitmqVirtualHost").RabbitmqVirtualHost;
export const RabbitmqVirtualHost: typeof import("./rabbitmqVirtualHost").RabbitmqVirtualHost = null as any;
utilities.lazyLoad(exports, ["RabbitmqVirtualHost"], () => require("./rabbitmqVirtualHost"));

export { RocketmqClusterArgs, RocketmqClusterState } from "./rocketmqCluster";
export type RocketmqCluster = import("./rocketmqCluster").RocketmqCluster;
export const RocketmqCluster: typeof import("./rocketmqCluster").RocketmqCluster = null as any;
utilities.lazyLoad(exports, ["RocketmqCluster"], () => require("./rocketmqCluster"));

export { RocketmqEnvironmentRoleArgs, RocketmqEnvironmentRoleState } from "./rocketmqEnvironmentRole";
export type RocketmqEnvironmentRole = import("./rocketmqEnvironmentRole").RocketmqEnvironmentRole;
export const RocketmqEnvironmentRole: typeof import("./rocketmqEnvironmentRole").RocketmqEnvironmentRole = null as any;
utilities.lazyLoad(exports, ["RocketmqEnvironmentRole"], () => require("./rocketmqEnvironmentRole"));

export { RocketmqGroupArgs, RocketmqGroupState } from "./rocketmqGroup";
export type RocketmqGroup = import("./rocketmqGroup").RocketmqGroup;
export const RocketmqGroup: typeof import("./rocketmqGroup").RocketmqGroup = null as any;
utilities.lazyLoad(exports, ["RocketmqGroup"], () => require("./rocketmqGroup"));

export { RocketmqNamespaceArgs, RocketmqNamespaceState } from "./rocketmqNamespace";
export type RocketmqNamespace = import("./rocketmqNamespace").RocketmqNamespace;
export const RocketmqNamespace: typeof import("./rocketmqNamespace").RocketmqNamespace = null as any;
utilities.lazyLoad(exports, ["RocketmqNamespace"], () => require("./rocketmqNamespace"));

export { RocketmqRoleArgs, RocketmqRoleState } from "./rocketmqRole";
export type RocketmqRole = import("./rocketmqRole").RocketmqRole;
export const RocketmqRole: typeof import("./rocketmqRole").RocketmqRole = null as any;
utilities.lazyLoad(exports, ["RocketmqRole"], () => require("./rocketmqRole"));

export { RocketmqTopicArgs, RocketmqTopicState } from "./rocketmqTopic";
export type RocketmqTopic = import("./rocketmqTopic").RocketmqTopic;
export const RocketmqTopic: typeof import("./rocketmqTopic").RocketmqTopic = null as any;
utilities.lazyLoad(exports, ["RocketmqTopic"], () => require("./rocketmqTopic"));

export { RocketmqVipInstanceArgs, RocketmqVipInstanceState } from "./rocketmqVipInstance";
export type RocketmqVipInstance = import("./rocketmqVipInstance").RocketmqVipInstance;
export const RocketmqVipInstance: typeof import("./rocketmqVipInstance").RocketmqVipInstance = null as any;
utilities.lazyLoad(exports, ["RocketmqVipInstance"], () => require("./rocketmqVipInstance"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { SendRocketmqMessageArgs, SendRocketmqMessageState } from "./sendRocketmqMessage";
export type SendRocketmqMessage = import("./sendRocketmqMessage").SendRocketmqMessage;
export const SendRocketmqMessage: typeof import("./sendRocketmqMessage").SendRocketmqMessage = null as any;
utilities.lazyLoad(exports, ["SendRocketmqMessage"], () => require("./sendRocketmqMessage"));

export { SubscriptionAttachmentArgs, SubscriptionAttachmentState } from "./subscriptionAttachment";
export type SubscriptionAttachment = import("./subscriptionAttachment").SubscriptionAttachment;
export const SubscriptionAttachment: typeof import("./subscriptionAttachment").SubscriptionAttachment = null as any;
utilities.lazyLoad(exports, ["SubscriptionAttachment"], () => require("./subscriptionAttachment"));

export { TopicArgs, TopicState } from "./topic";
export type Topic = import("./topic").Topic;
export const Topic: typeof import("./topic").Topic = null as any;
utilities.lazyLoad(exports, ["Topic"], () => require("./topic"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Tdmq/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "tencentcloud:Tdmq/namespace:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "tencentcloud:Tdmq/namespaceRoleAttachment:NamespaceRoleAttachment":
                return new NamespaceRoleAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Tdmq/rabbitmqUser:RabbitmqUser":
                return new RabbitmqUser(name, <any>undefined, { urn })
            case "tencentcloud:Tdmq/rabbitmqVipInstance:RabbitmqVipInstance":
                return new RabbitmqVipInstance(name, <any>undefined, { urn })
            case "tencentcloud:Tdmq/rabbitmqVirtualHost:RabbitmqVirtualHost":
                return new RabbitmqVirtualHost(name, <any>undefined, { urn })
            case "tencentcloud:Tdmq/rocketmqCluster:RocketmqCluster":
                return new RocketmqCluster(name, <any>undefined, { urn })
            case "tencentcloud:Tdmq/rocketmqEnvironmentRole:RocketmqEnvironmentRole":
                return new RocketmqEnvironmentRole(name, <any>undefined, { urn })
            case "tencentcloud:Tdmq/rocketmqGroup:RocketmqGroup":
                return new RocketmqGroup(name, <any>undefined, { urn })
            case "tencentcloud:Tdmq/rocketmqNamespace:RocketmqNamespace":
                return new RocketmqNamespace(name, <any>undefined, { urn })
            case "tencentcloud:Tdmq/rocketmqRole:RocketmqRole":
                return new RocketmqRole(name, <any>undefined, { urn })
            case "tencentcloud:Tdmq/rocketmqTopic:RocketmqTopic":
                return new RocketmqTopic(name, <any>undefined, { urn })
            case "tencentcloud:Tdmq/rocketmqVipInstance:RocketmqVipInstance":
                return new RocketmqVipInstance(name, <any>undefined, { urn })
            case "tencentcloud:Tdmq/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "tencentcloud:Tdmq/sendRocketmqMessage:SendRocketmqMessage":
                return new SendRocketmqMessage(name, <any>undefined, { urn })
            case "tencentcloud:Tdmq/subscriptionAttachment:SubscriptionAttachment":
                return new SubscriptionAttachment(name, <any>undefined, { urn })
            case "tencentcloud:Tdmq/topic:Topic":
                return new Topic(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Tdmq/instance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tdmq/namespace", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tdmq/namespaceRoleAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tdmq/rabbitmqUser", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tdmq/rabbitmqVipInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tdmq/rabbitmqVirtualHost", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tdmq/rocketmqCluster", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tdmq/rocketmqEnvironmentRole", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tdmq/rocketmqGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tdmq/rocketmqNamespace", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tdmq/rocketmqRole", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tdmq/rocketmqTopic", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tdmq/rocketmqVipInstance", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tdmq/role", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tdmq/sendRocketmqMessage", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tdmq/subscriptionAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tdmq/topic", _module)
