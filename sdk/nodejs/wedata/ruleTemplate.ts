// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class RuleTemplate extends pulumi.CustomResource {
    /**
     * Get an existing RuleTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleTemplateState, opts?: pulumi.CustomResourceOptions): RuleTemplate {
        return new RuleTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Wedata/ruleTemplate:RuleTemplate';

    /**
     * Returns true if the given object is an instance of RuleTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RuleTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RuleTemplate.__pulumiType;
    }

    /**
     * Description of Template.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether to associate other library tables.
     */
    public readonly multiSourceFlag!: pulumi.Output<boolean | undefined>;
    /**
     * Template name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Project ID.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Quality inspection dimensions. `1`: Accuracy, `2`: Uniqueness, `3`: Completeness, `4`: Consistency, `5`: Timeliness,
     * `6`: Effectiveness.
     */
    public readonly qualityDim!: pulumi.Output<number | undefined>;
    /**
     * The engine type corresponding to the source. `2`: hive,`4`: spark, `16`: dlc.
     */
    public readonly sourceEngineTypes!: pulumi.Output<number[] | undefined>;
    /**
     * Source data object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
     */
    public readonly sourceObjectType!: pulumi.Output<number | undefined>;
    /**
     * SQL Expression.
     */
    public readonly sqlExpression!: pulumi.Output<string | undefined>;
    /**
     * Template type. `1` means System template, `2` means Custom template.
     */
    public readonly type!: pulumi.Output<number | undefined>;
    /**
     * If add where.
     */
    public readonly whereFlag!: pulumi.Output<boolean | undefined>;

    /**
     * Create a RuleTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleTemplateArgs | RuleTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleTemplateState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["multiSourceFlag"] = state ? state.multiSourceFlag : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["qualityDim"] = state ? state.qualityDim : undefined;
            resourceInputs["sourceEngineTypes"] = state ? state.sourceEngineTypes : undefined;
            resourceInputs["sourceObjectType"] = state ? state.sourceObjectType : undefined;
            resourceInputs["sqlExpression"] = state ? state.sqlExpression : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["whereFlag"] = state ? state.whereFlag : undefined;
        } else {
            const args = argsOrState as RuleTemplateArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["multiSourceFlag"] = args ? args.multiSourceFlag : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["qualityDim"] = args ? args.qualityDim : undefined;
            resourceInputs["sourceEngineTypes"] = args ? args.sourceEngineTypes : undefined;
            resourceInputs["sourceObjectType"] = args ? args.sourceObjectType : undefined;
            resourceInputs["sqlExpression"] = args ? args.sqlExpression : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["whereFlag"] = args ? args.whereFlag : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RuleTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RuleTemplate resources.
 */
export interface RuleTemplateState {
    /**
     * Description of Template.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to associate other library tables.
     */
    multiSourceFlag?: pulumi.Input<boolean>;
    /**
     * Template name.
     */
    name?: pulumi.Input<string>;
    /**
     * Project ID.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Quality inspection dimensions. `1`: Accuracy, `2`: Uniqueness, `3`: Completeness, `4`: Consistency, `5`: Timeliness,
     * `6`: Effectiveness.
     */
    qualityDim?: pulumi.Input<number>;
    /**
     * The engine type corresponding to the source. `2`: hive,`4`: spark, `16`: dlc.
     */
    sourceEngineTypes?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Source data object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
     */
    sourceObjectType?: pulumi.Input<number>;
    /**
     * SQL Expression.
     */
    sqlExpression?: pulumi.Input<string>;
    /**
     * Template type. `1` means System template, `2` means Custom template.
     */
    type?: pulumi.Input<number>;
    /**
     * If add where.
     */
    whereFlag?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a RuleTemplate resource.
 */
export interface RuleTemplateArgs {
    /**
     * Description of Template.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to associate other library tables.
     */
    multiSourceFlag?: pulumi.Input<boolean>;
    /**
     * Template name.
     */
    name?: pulumi.Input<string>;
    /**
     * Project ID.
     */
    projectId: pulumi.Input<string>;
    /**
     * Quality inspection dimensions. `1`: Accuracy, `2`: Uniqueness, `3`: Completeness, `4`: Consistency, `5`: Timeliness,
     * `6`: Effectiveness.
     */
    qualityDim?: pulumi.Input<number>;
    /**
     * The engine type corresponding to the source. `2`: hive,`4`: spark, `16`: dlc.
     */
    sourceEngineTypes?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Source data object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
     */
    sourceObjectType?: pulumi.Input<number>;
    /**
     * SQL Expression.
     */
    sqlExpression?: pulumi.Input<string>;
    /**
     * Template type. `1` means System template, `2` means Custom template.
     */
    type?: pulumi.Input<number>;
    /**
     * If add where.
     */
    whereFlag?: pulumi.Input<boolean>;
}
