// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Sign extends pulumi.CustomResource {
    /**
     * Get an existing Sign resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SignState, opts?: pulumi.CustomResourceOptions): Sign {
        return new Sign(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Sms/sign:Sign';

    /**
     * Returns true if the given object is an instance of Sign.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sign {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sign.__pulumiType;
    }

    /**
     * Power of attorney, which should be submitted if SignPurpose is for use by others. You should Base64-encode the image
     * first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this
     * parameter. Note: this field will take effect only when SignPurpose is 1 (for user by others).
     */
    public readonly commissionImage!: pulumi.Output<string | undefined>;
    /**
     * DocumentType is used for enterprise authentication, or website, app authentication, etc. DocumentType: 0, 1, 2, 3, 4, 5,
     * 6, 7, 8.
     */
    public readonly documentType!: pulumi.Output<number>;
    /**
     * Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
     */
    public readonly international!: pulumi.Output<number>;
    /**
     * You should Base64-encode the image of the identity certificate corresponding to the signature first, remove the prefix
     * data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter.
     */
    public readonly proofImage!: pulumi.Output<string>;
    /**
     * Signature application remarks.
     */
    public readonly remark!: pulumi.Output<string | undefined>;
    /**
     * Sms sign name, unique.
     */
    public readonly signName!: pulumi.Output<string>;
    /**
     * Signature purpose: 0: for personal use; 1: for others.
     */
    public readonly signPurpose!: pulumi.Output<number>;
    /**
     * Sms sign type: 0, 1, 2, 3, 4, 5, 6.
     */
    public readonly signType!: pulumi.Output<number>;

    /**
     * Create a Sign resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SignArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SignArgs | SignState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SignState | undefined;
            resourceInputs["commissionImage"] = state ? state.commissionImage : undefined;
            resourceInputs["documentType"] = state ? state.documentType : undefined;
            resourceInputs["international"] = state ? state.international : undefined;
            resourceInputs["proofImage"] = state ? state.proofImage : undefined;
            resourceInputs["remark"] = state ? state.remark : undefined;
            resourceInputs["signName"] = state ? state.signName : undefined;
            resourceInputs["signPurpose"] = state ? state.signPurpose : undefined;
            resourceInputs["signType"] = state ? state.signType : undefined;
        } else {
            const args = argsOrState as SignArgs | undefined;
            if ((!args || args.documentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'documentType'");
            }
            if ((!args || args.international === undefined) && !opts.urn) {
                throw new Error("Missing required property 'international'");
            }
            if ((!args || args.proofImage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'proofImage'");
            }
            if ((!args || args.signName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'signName'");
            }
            if ((!args || args.signPurpose === undefined) && !opts.urn) {
                throw new Error("Missing required property 'signPurpose'");
            }
            if ((!args || args.signType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'signType'");
            }
            resourceInputs["commissionImage"] = args ? args.commissionImage : undefined;
            resourceInputs["documentType"] = args ? args.documentType : undefined;
            resourceInputs["international"] = args ? args.international : undefined;
            resourceInputs["proofImage"] = args ? args.proofImage : undefined;
            resourceInputs["remark"] = args ? args.remark : undefined;
            resourceInputs["signName"] = args ? args.signName : undefined;
            resourceInputs["signPurpose"] = args ? args.signPurpose : undefined;
            resourceInputs["signType"] = args ? args.signType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Sign.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Sign resources.
 */
export interface SignState {
    /**
     * Power of attorney, which should be submitted if SignPurpose is for use by others. You should Base64-encode the image
     * first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this
     * parameter. Note: this field will take effect only when SignPurpose is 1 (for user by others).
     */
    commissionImage?: pulumi.Input<string>;
    /**
     * DocumentType is used for enterprise authentication, or website, app authentication, etc. DocumentType: 0, 1, 2, 3, 4, 5,
     * 6, 7, 8.
     */
    documentType?: pulumi.Input<number>;
    /**
     * Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
     */
    international?: pulumi.Input<number>;
    /**
     * You should Base64-encode the image of the identity certificate corresponding to the signature first, remove the prefix
     * data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter.
     */
    proofImage?: pulumi.Input<string>;
    /**
     * Signature application remarks.
     */
    remark?: pulumi.Input<string>;
    /**
     * Sms sign name, unique.
     */
    signName?: pulumi.Input<string>;
    /**
     * Signature purpose: 0: for personal use; 1: for others.
     */
    signPurpose?: pulumi.Input<number>;
    /**
     * Sms sign type: 0, 1, 2, 3, 4, 5, 6.
     */
    signType?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Sign resource.
 */
export interface SignArgs {
    /**
     * Power of attorney, which should be submitted if SignPurpose is for use by others. You should Base64-encode the image
     * first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this
     * parameter. Note: this field will take effect only when SignPurpose is 1 (for user by others).
     */
    commissionImage?: pulumi.Input<string>;
    /**
     * DocumentType is used for enterprise authentication, or website, app authentication, etc. DocumentType: 0, 1, 2, 3, 4, 5,
     * 6, 7, 8.
     */
    documentType: pulumi.Input<number>;
    /**
     * Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
     */
    international: pulumi.Input<number>;
    /**
     * You should Base64-encode the image of the identity certificate corresponding to the signature first, remove the prefix
     * data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter.
     */
    proofImage: pulumi.Input<string>;
    /**
     * Signature application remarks.
     */
    remark?: pulumi.Input<string>;
    /**
     * Sms sign name, unique.
     */
    signName: pulumi.Input<string>;
    /**
     * Signature purpose: 0: for personal use; 1: for others.
     */
    signPurpose: pulumi.Input<number>;
    /**
     * Sms sign type: 0, 1, 2, 3, 4, 5, 6.
     */
    signType: pulumi.Input<number>;
}
