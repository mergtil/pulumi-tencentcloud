// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { DomainErrorPageArgs, DomainErrorPageState } from "./domainErrorPage";
export type DomainErrorPage = import("./domainErrorPage").DomainErrorPage;
export const DomainErrorPage: typeof import("./domainErrorPage").DomainErrorPage = null as any;
utilities.lazyLoad(exports, ["DomainErrorPage"], () => require("./domainErrorPage"));

export { GetCertificatesArgs, GetCertificatesResult, GetCertificatesOutputArgs } from "./getCertificates";
export const getCertificates: typeof import("./getCertificates").getCertificates = null as any;
export const getCertificatesOutput: typeof import("./getCertificates").getCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getCertificates","getCertificatesOutput"], () => require("./getCertificates"));

export { GetDomainErrorPagesArgs, GetDomainErrorPagesResult, GetDomainErrorPagesOutputArgs } from "./getDomainErrorPages";
export const getDomainErrorPages: typeof import("./getDomainErrorPages").getDomainErrorPages = null as any;
export const getDomainErrorPagesOutput: typeof import("./getDomainErrorPages").getDomainErrorPagesOutput = null as any;
utilities.lazyLoad(exports, ["getDomainErrorPages","getDomainErrorPagesOutput"], () => require("./getDomainErrorPages"));

export { GetHttpDomainsArgs, GetHttpDomainsResult, GetHttpDomainsOutputArgs } from "./getHttpDomains";
export const getHttpDomains: typeof import("./getHttpDomains").getHttpDomains = null as any;
export const getHttpDomainsOutput: typeof import("./getHttpDomains").getHttpDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getHttpDomains","getHttpDomainsOutput"], () => require("./getHttpDomains"));

export { GetHttpRulesArgs, GetHttpRulesResult, GetHttpRulesOutputArgs } from "./getHttpRules";
export const getHttpRules: typeof import("./getHttpRules").getHttpRules = null as any;
export const getHttpRulesOutput: typeof import("./getHttpRules").getHttpRulesOutput = null as any;
utilities.lazyLoad(exports, ["getHttpRules","getHttpRulesOutput"], () => require("./getHttpRules"));

export { GetLayer4ListenersArgs, GetLayer4ListenersResult, GetLayer4ListenersOutputArgs } from "./getLayer4Listeners";
export const getLayer4Listeners: typeof import("./getLayer4Listeners").getLayer4Listeners = null as any;
export const getLayer4ListenersOutput: typeof import("./getLayer4Listeners").getLayer4ListenersOutput = null as any;
utilities.lazyLoad(exports, ["getLayer4Listeners","getLayer4ListenersOutput"], () => require("./getLayer4Listeners"));

export { GetLayer7ListenersArgs, GetLayer7ListenersResult, GetLayer7ListenersOutputArgs } from "./getLayer7Listeners";
export const getLayer7Listeners: typeof import("./getLayer7Listeners").getLayer7Listeners = null as any;
export const getLayer7ListenersOutput: typeof import("./getLayer7Listeners").getLayer7ListenersOutput = null as any;
utilities.lazyLoad(exports, ["getLayer7Listeners","getLayer7ListenersOutput"], () => require("./getLayer7Listeners"));

export { GetProxiesArgs, GetProxiesResult, GetProxiesOutputArgs } from "./getProxies";
export const getProxies: typeof import("./getProxies").getProxies = null as any;
export const getProxiesOutput: typeof import("./getProxies").getProxiesOutput = null as any;
utilities.lazyLoad(exports, ["getProxies","getProxiesOutput"], () => require("./getProxies"));

export { GetRealserversArgs, GetRealserversResult, GetRealserversOutputArgs } from "./getRealservers";
export const getRealservers: typeof import("./getRealservers").getRealservers = null as any;
export const getRealserversOutput: typeof import("./getRealservers").getRealserversOutput = null as any;
utilities.lazyLoad(exports, ["getRealservers","getRealserversOutput"], () => require("./getRealservers"));

export { GetSecurityPoliciesArgs, GetSecurityPoliciesResult, GetSecurityPoliciesOutputArgs } from "./getSecurityPolicies";
export const getSecurityPolicies: typeof import("./getSecurityPolicies").getSecurityPolicies = null as any;
export const getSecurityPoliciesOutput: typeof import("./getSecurityPolicies").getSecurityPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityPolicies","getSecurityPoliciesOutput"], () => require("./getSecurityPolicies"));

export { GetSecurityRulesArgs, GetSecurityRulesResult, GetSecurityRulesOutputArgs } from "./getSecurityRules";
export const getSecurityRules: typeof import("./getSecurityRules").getSecurityRules = null as any;
export const getSecurityRulesOutput: typeof import("./getSecurityRules").getSecurityRulesOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityRules","getSecurityRulesOutput"], () => require("./getSecurityRules"));

export { HttpDomainArgs, HttpDomainState } from "./httpDomain";
export type HttpDomain = import("./httpDomain").HttpDomain;
export const HttpDomain: typeof import("./httpDomain").HttpDomain = null as any;
utilities.lazyLoad(exports, ["HttpDomain"], () => require("./httpDomain"));

export { HttpRuleArgs, HttpRuleState } from "./httpRule";
export type HttpRule = import("./httpRule").HttpRule;
export const HttpRule: typeof import("./httpRule").HttpRule = null as any;
utilities.lazyLoad(exports, ["HttpRule"], () => require("./httpRule"));

export { Layer4ListenerArgs, Layer4ListenerState } from "./layer4Listener";
export type Layer4Listener = import("./layer4Listener").Layer4Listener;
export const Layer4Listener: typeof import("./layer4Listener").Layer4Listener = null as any;
utilities.lazyLoad(exports, ["Layer4Listener"], () => require("./layer4Listener"));

export { Layer7ListenerArgs, Layer7ListenerState } from "./layer7Listener";
export type Layer7Listener = import("./layer7Listener").Layer7Listener;
export const Layer7Listener: typeof import("./layer7Listener").Layer7Listener = null as any;
utilities.lazyLoad(exports, ["Layer7Listener"], () => require("./layer7Listener"));

export { ProxyArgs, ProxyState } from "./proxy";
export type Proxy = import("./proxy").Proxy;
export const Proxy: typeof import("./proxy").Proxy = null as any;
utilities.lazyLoad(exports, ["Proxy"], () => require("./proxy"));

export { RealserverArgs, RealserverState } from "./realserver";
export type Realserver = import("./realserver").Realserver;
export const Realserver: typeof import("./realserver").Realserver = null as any;
utilities.lazyLoad(exports, ["Realserver"], () => require("./realserver"));

export { SecurityPolicyArgs, SecurityPolicyState } from "./securityPolicy";
export type SecurityPolicy = import("./securityPolicy").SecurityPolicy;
export const SecurityPolicy: typeof import("./securityPolicy").SecurityPolicy = null as any;
utilities.lazyLoad(exports, ["SecurityPolicy"], () => require("./securityPolicy"));

export { SecurityRuleArgs, SecurityRuleState } from "./securityRule";
export type SecurityRule = import("./securityRule").SecurityRule;
export const SecurityRule: typeof import("./securityRule").SecurityRule = null as any;
utilities.lazyLoad(exports, ["SecurityRule"], () => require("./securityRule"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Gaap/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "tencentcloud:Gaap/domainErrorPage:DomainErrorPage":
                return new DomainErrorPage(name, <any>undefined, { urn })
            case "tencentcloud:Gaap/httpDomain:HttpDomain":
                return new HttpDomain(name, <any>undefined, { urn })
            case "tencentcloud:Gaap/httpRule:HttpRule":
                return new HttpRule(name, <any>undefined, { urn })
            case "tencentcloud:Gaap/layer4Listener:Layer4Listener":
                return new Layer4Listener(name, <any>undefined, { urn })
            case "tencentcloud:Gaap/layer7Listener:Layer7Listener":
                return new Layer7Listener(name, <any>undefined, { urn })
            case "tencentcloud:Gaap/proxy:Proxy":
                return new Proxy(name, <any>undefined, { urn })
            case "tencentcloud:Gaap/realserver:Realserver":
                return new Realserver(name, <any>undefined, { urn })
            case "tencentcloud:Gaap/securityPolicy:SecurityPolicy":
                return new SecurityPolicy(name, <any>undefined, { urn })
            case "tencentcloud:Gaap/securityRule:SecurityRule":
                return new SecurityRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Gaap/certificate", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Gaap/domainErrorPage", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Gaap/httpDomain", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Gaap/httpRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Gaap/layer4Listener", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Gaap/layer7Listener", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Gaap/proxy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Gaap/realserver", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Gaap/securityPolicy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Gaap/securityRule", _module)
