// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Gaap/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * Beginning time of the certificate.
     */
    public /*out*/ readonly beginTime!: pulumi.Output<string>;
    /**
     * Content of the certificate, and URL encoding. When the certificate is basic authentication, use the `user:xxx
     * password:xxx` format, where the password is encrypted with `htpasswd` or `openssl`; When the certificate is `CA` or
     * `SSL`, the format is `pem`.
     */
    public readonly content!: pulumi.Output<string>;
    /**
     * Creation time of the certificate.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Ending time of the certificate.
     */
    public /*out*/ readonly endTime!: pulumi.Output<string>;
    /**
     * Issuer name of the certificate.
     */
    public /*out*/ readonly issuerCn!: pulumi.Output<string>;
    /**
     * Key of the `SSL` certificate.
     */
    public readonly key!: pulumi.Output<string | undefined>;
    /**
     * Name of the certificate.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Subject name of the certificate.
     */
    public /*out*/ readonly subjectCn!: pulumi.Output<string>;
    /**
     * Type of the certificate. Valid value: `BASIC`, `CLIENT`, `SERVER`, `REALSERVER` and `PROXY`. `BASIC` means basic
     * certificate; `CLIENT` means client CA certificate; `SERVER` means server SSL certificate; `REALSERVER` means realserver
     * CA certificate; `PROXY` means proxy SSL certificate.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            resourceInputs["beginTime"] = state ? state.beginTime : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["issuerCn"] = state ? state.issuerCn : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["subjectCn"] = state ? state.subjectCn : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["key"] = args?.key ? pulumi.secret(args.key) : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["beginTime"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["endTime"] = undefined /*out*/;
            resourceInputs["issuerCn"] = undefined /*out*/;
            resourceInputs["subjectCn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["key"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Certificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    /**
     * Beginning time of the certificate.
     */
    beginTime?: pulumi.Input<string>;
    /**
     * Content of the certificate, and URL encoding. When the certificate is basic authentication, use the `user:xxx
     * password:xxx` format, where the password is encrypted with `htpasswd` or `openssl`; When the certificate is `CA` or
     * `SSL`, the format is `pem`.
     */
    content?: pulumi.Input<string>;
    /**
     * Creation time of the certificate.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Ending time of the certificate.
     */
    endTime?: pulumi.Input<string>;
    /**
     * Issuer name of the certificate.
     */
    issuerCn?: pulumi.Input<string>;
    /**
     * Key of the `SSL` certificate.
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the certificate.
     */
    name?: pulumi.Input<string>;
    /**
     * Subject name of the certificate.
     */
    subjectCn?: pulumi.Input<string>;
    /**
     * Type of the certificate. Valid value: `BASIC`, `CLIENT`, `SERVER`, `REALSERVER` and `PROXY`. `BASIC` means basic
     * certificate; `CLIENT` means client CA certificate; `SERVER` means server SSL certificate; `REALSERVER` means realserver
     * CA certificate; `PROXY` means proxy SSL certificate.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * Content of the certificate, and URL encoding. When the certificate is basic authentication, use the `user:xxx
     * password:xxx` format, where the password is encrypted with `htpasswd` or `openssl`; When the certificate is `CA` or
     * `SSL`, the format is `pem`.
     */
    content: pulumi.Input<string>;
    /**
     * Key of the `SSL` certificate.
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the certificate.
     */
    name?: pulumi.Input<string>;
    /**
     * Type of the certificate. Valid value: `BASIC`, `CLIENT`, `SERVER`, `REALSERVER` and `PROXY`. `BASIC` means basic
     * certificate; `CLIENT` means client CA certificate; `SERVER` means server SSL certificate; `REALSERVER` means realserver
     * CA certificate; `PROXY` means proxy SSL certificate.
     */
    type: pulumi.Input<string>;
}
