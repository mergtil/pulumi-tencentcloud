// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class StreamLiveInput extends pulumi.CustomResource {
    /**
     * Get an existing StreamLiveInput resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamLiveInputState, opts?: pulumi.CustomResourceOptions): StreamLiveInput {
        return new StreamLiveInput(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Mdl/streamLiveInput:StreamLiveInput';

    /**
     * Returns true if the given object is an instance of StreamLiveInput.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamLiveInput {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamLiveInput.__pulumiType;
    }

    /**
     * Input settings. For the type `RTMP_PUSH`, `RTMP_PULL`, `HLS_PULL`, or `MP4_PULL`, 1 or 2 inputs of the corresponding
     * type can be configured.
     */
    public readonly inputSettings!: pulumi.Output<outputs.Mdl.StreamLiveInputInputSetting[]>;
    /**
     * Input name, which can contain 1-32 case-sensitive letters, digits, and underscores and must be unique at the region
     * level.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the input security group to attachYou can attach only one security group to an input.
     */
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * Input typeValid values: `RTMP_PUSH`, `RTP_PUSH`, `UDP_PUSH`, `RTMP_PULL`, `HLS_PULL`, `MP4_PULL`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a StreamLiveInput resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamLiveInputArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamLiveInputArgs | StreamLiveInputState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamLiveInputState | undefined;
            resourceInputs["inputSettings"] = state ? state.inputSettings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as StreamLiveInputArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["inputSettings"] = args ? args.inputSettings : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamLiveInput.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StreamLiveInput resources.
 */
export interface StreamLiveInputState {
    /**
     * Input settings. For the type `RTMP_PUSH`, `RTMP_PULL`, `HLS_PULL`, or `MP4_PULL`, 1 or 2 inputs of the corresponding
     * type can be configured.
     */
    inputSettings?: pulumi.Input<pulumi.Input<inputs.Mdl.StreamLiveInputInputSetting>[]>;
    /**
     * Input name, which can contain 1-32 case-sensitive letters, digits, and underscores and must be unique at the region
     * level.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the input security group to attachYou can attach only one security group to an input.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Input typeValid values: `RTMP_PUSH`, `RTP_PUSH`, `UDP_PUSH`, `RTMP_PULL`, `HLS_PULL`, `MP4_PULL`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StreamLiveInput resource.
 */
export interface StreamLiveInputArgs {
    /**
     * Input settings. For the type `RTMP_PUSH`, `RTMP_PULL`, `HLS_PULL`, or `MP4_PULL`, 1 or 2 inputs of the corresponding
     * type can be configured.
     */
    inputSettings?: pulumi.Input<pulumi.Input<inputs.Mdl.StreamLiveInputInputSetting>[]>;
    /**
     * Input name, which can contain 1-32 case-sensitive letters, digits, and underscores and must be unique at the region
     * level.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the input security group to attachYou can attach only one security group to an input.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Input typeValid values: `RTMP_PUSH`, `RTP_PUSH`, `UDP_PUSH`, `RTMP_PULL`, `HLS_PULL`, `MP4_PULL`.
     */
    type: pulumi.Input<string>;
}
