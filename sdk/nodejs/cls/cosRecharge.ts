// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class CosRecharge extends pulumi.CustomResource {
    /**
     * Get an existing CosRecharge resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CosRechargeState, opts?: pulumi.CustomResourceOptions): CosRecharge {
        return new CosRecharge(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Cls/cosRecharge:CosRecharge';

    /**
     * Returns true if the given object is an instance of CosRecharge.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CosRecharge {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CosRecharge.__pulumiType;
    }

    /**
     * cos bucket.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * cos bucket region.
     */
    public readonly bucketRegion!: pulumi.Output<string>;
    /**
     * supported gzip, lzop, snappy.
     */
    public readonly compress!: pulumi.Output<string | undefined>;
    /**
     * extract rule info.
     */
    public readonly extractRuleInfo!: pulumi.Output<outputs.Cls.CosRechargeExtractRuleInfo>;
    /**
     * log type.
     */
    public readonly logType!: pulumi.Output<string>;
    /**
     * logset id.
     */
    public readonly logsetId!: pulumi.Output<string>;
    /**
     * recharge name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * cos file prefix.
     */
    public readonly prefix!: pulumi.Output<string>;
    /**
     * topic id.
     */
    public readonly topicId!: pulumi.Output<string>;

    /**
     * Create a CosRecharge resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CosRechargeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CosRechargeArgs | CosRechargeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CosRechargeState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["bucketRegion"] = state ? state.bucketRegion : undefined;
            resourceInputs["compress"] = state ? state.compress : undefined;
            resourceInputs["extractRuleInfo"] = state ? state.extractRuleInfo : undefined;
            resourceInputs["logType"] = state ? state.logType : undefined;
            resourceInputs["logsetId"] = state ? state.logsetId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["topicId"] = state ? state.topicId : undefined;
        } else {
            const args = argsOrState as CosRechargeArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.bucketRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketRegion'");
            }
            if ((!args || args.logType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logType'");
            }
            if ((!args || args.logsetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logsetId'");
            }
            if ((!args || args.prefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefix'");
            }
            if ((!args || args.topicId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicId'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["bucketRegion"] = args ? args.bucketRegion : undefined;
            resourceInputs["compress"] = args ? args.compress : undefined;
            resourceInputs["extractRuleInfo"] = args ? args.extractRuleInfo : undefined;
            resourceInputs["logType"] = args ? args.logType : undefined;
            resourceInputs["logsetId"] = args ? args.logsetId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["topicId"] = args ? args.topicId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CosRecharge.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CosRecharge resources.
 */
export interface CosRechargeState {
    /**
     * cos bucket.
     */
    bucket?: pulumi.Input<string>;
    /**
     * cos bucket region.
     */
    bucketRegion?: pulumi.Input<string>;
    /**
     * supported gzip, lzop, snappy.
     */
    compress?: pulumi.Input<string>;
    /**
     * extract rule info.
     */
    extractRuleInfo?: pulumi.Input<inputs.Cls.CosRechargeExtractRuleInfo>;
    /**
     * log type.
     */
    logType?: pulumi.Input<string>;
    /**
     * logset id.
     */
    logsetId?: pulumi.Input<string>;
    /**
     * recharge name.
     */
    name?: pulumi.Input<string>;
    /**
     * cos file prefix.
     */
    prefix?: pulumi.Input<string>;
    /**
     * topic id.
     */
    topicId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CosRecharge resource.
 */
export interface CosRechargeArgs {
    /**
     * cos bucket.
     */
    bucket: pulumi.Input<string>;
    /**
     * cos bucket region.
     */
    bucketRegion: pulumi.Input<string>;
    /**
     * supported gzip, lzop, snappy.
     */
    compress?: pulumi.Input<string>;
    /**
     * extract rule info.
     */
    extractRuleInfo?: pulumi.Input<inputs.Cls.CosRechargeExtractRuleInfo>;
    /**
     * log type.
     */
    logType: pulumi.Input<string>;
    /**
     * logset id.
     */
    logsetId: pulumi.Input<string>;
    /**
     * recharge name.
     */
    name?: pulumi.Input<string>;
    /**
     * cos file prefix.
     */
    prefix: pulumi.Input<string>;
    /**
     * topic id.
     */
    topicId: pulumi.Input<string>;
}
