// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class CkafkaConsumer extends pulumi.CustomResource {
    /**
     * Get an existing CkafkaConsumer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CkafkaConsumerState, opts?: pulumi.CustomResourceOptions): CkafkaConsumer {
        return new CkafkaConsumer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Cls/ckafkaConsumer:CkafkaConsumer';

    /**
     * Returns true if the given object is an instance of CkafkaConsumer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CkafkaConsumer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CkafkaConsumer.__pulumiType;
    }

    /**
     * ckafka info.
     */
    public readonly ckafka!: pulumi.Output<outputs.Cls.CkafkaConsumerCkafka | undefined>;
    /**
     * compression method. 0 for NONE, 2 for SNAPPY, 3 for LZ4.
     */
    public readonly compression!: pulumi.Output<number | undefined>;
    /**
     * metadata information.
     */
    public readonly content!: pulumi.Output<outputs.Cls.CkafkaConsumerContent | undefined>;
    /**
     * whether to deliver the metadata information of the log.
     */
    public readonly needContent!: pulumi.Output<boolean | undefined>;
    /**
     * topic id.
     */
    public readonly topicId!: pulumi.Output<string>;

    /**
     * Create a CkafkaConsumer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CkafkaConsumerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CkafkaConsumerArgs | CkafkaConsumerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CkafkaConsumerState | undefined;
            resourceInputs["ckafka"] = state ? state.ckafka : undefined;
            resourceInputs["compression"] = state ? state.compression : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["needContent"] = state ? state.needContent : undefined;
            resourceInputs["topicId"] = state ? state.topicId : undefined;
        } else {
            const args = argsOrState as CkafkaConsumerArgs | undefined;
            if ((!args || args.topicId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicId'");
            }
            resourceInputs["ckafka"] = args ? args.ckafka : undefined;
            resourceInputs["compression"] = args ? args.compression : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["needContent"] = args ? args.needContent : undefined;
            resourceInputs["topicId"] = args ? args.topicId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CkafkaConsumer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CkafkaConsumer resources.
 */
export interface CkafkaConsumerState {
    /**
     * ckafka info.
     */
    ckafka?: pulumi.Input<inputs.Cls.CkafkaConsumerCkafka>;
    /**
     * compression method. 0 for NONE, 2 for SNAPPY, 3 for LZ4.
     */
    compression?: pulumi.Input<number>;
    /**
     * metadata information.
     */
    content?: pulumi.Input<inputs.Cls.CkafkaConsumerContent>;
    /**
     * whether to deliver the metadata information of the log.
     */
    needContent?: pulumi.Input<boolean>;
    /**
     * topic id.
     */
    topicId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CkafkaConsumer resource.
 */
export interface CkafkaConsumerArgs {
    /**
     * ckafka info.
     */
    ckafka?: pulumi.Input<inputs.Cls.CkafkaConsumerCkafka>;
    /**
     * compression method. 0 for NONE, 2 for SNAPPY, 3 for LZ4.
     */
    compression?: pulumi.Input<number>;
    /**
     * metadata information.
     */
    content?: pulumi.Input<inputs.Cls.CkafkaConsumerContent>;
    /**
     * whether to deliver the metadata information of the log.
     */
    needContent?: pulumi.Input<boolean>;
    /**
     * topic id.
     */
    topicId: pulumi.Input<string>;
}
