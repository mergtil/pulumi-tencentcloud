// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Logset extends pulumi.CustomResource {
    /**
     * Get an existing Logset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogsetState, opts?: pulumi.CustomResourceOptions): Logset {
        return new Logset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Cls/logset:Logset';

    /**
     * Returns true if the given object is an instance of Logset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Logset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Logset.__pulumiType;
    }

    /**
     * Creation time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Logset name, which must be unique.
     */
    public readonly logsetName!: pulumi.Output<string>;
    /**
     * If assumer_uin is not empty, it indicates the service provider who creates the logset.
     */
    public /*out*/ readonly roleName!: pulumi.Output<string>;
    /**
     * Tag description list.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Number of log topics in logset.
     */
    public /*out*/ readonly topicCount!: pulumi.Output<number>;

    /**
     * Create a Logset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogsetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogsetArgs | LogsetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogsetState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["logsetName"] = state ? state.logsetName : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["topicCount"] = state ? state.topicCount : undefined;
        } else {
            const args = argsOrState as LogsetArgs | undefined;
            if ((!args || args.logsetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logsetName'");
            }
            resourceInputs["logsetName"] = args ? args.logsetName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["roleName"] = undefined /*out*/;
            resourceInputs["topicCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Logset.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Logset resources.
 */
export interface LogsetState {
    /**
     * Creation time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Logset name, which must be unique.
     */
    logsetName?: pulumi.Input<string>;
    /**
     * If assumer_uin is not empty, it indicates the service provider who creates the logset.
     */
    roleName?: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Number of log topics in logset.
     */
    topicCount?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Logset resource.
 */
export interface LogsetArgs {
    /**
     * Logset name, which must be unique.
     */
    logsetName: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
}
