// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class KafkaRecharge extends pulumi.CustomResource {
    /**
     * Get an existing KafkaRecharge resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaRechargeState, opts?: pulumi.CustomResourceOptions): KafkaRecharge {
        return new KafkaRecharge(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Cls/kafkaRecharge:KafkaRecharge';

    /**
     * Returns true if the given object is an instance of KafkaRecharge.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaRecharge {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaRecharge.__pulumiType;
    }

    /**
     * user consumer group name.
     */
    public readonly consumerGroupName!: pulumi.Output<string | undefined>;
    /**
     * ServerAddr is encryption addr.
     */
    public readonly isEncryptionAddr!: pulumi.Output<boolean>;
    /**
     * CKafka Instance id.
     */
    public readonly kafkaInstance!: pulumi.Output<string | undefined>;
    /**
     * kafka recharge type, 0 for CKafka, 1 fro user define Kafka.
     */
    public readonly kafkaType!: pulumi.Output<number>;
    /**
     * log recharge rule.
     */
    public readonly logRechargeRule!: pulumi.Output<outputs.Cls.KafkaRechargeLogRechargeRule>;
    /**
     * kafka recharge name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The translation is: -2: Earliest (default) -1: Latest.
     */
    public readonly offset!: pulumi.Output<number>;
    /**
     * encryption protocol.
     */
    public readonly protocol!: pulumi.Output<outputs.Cls.KafkaRechargeProtocol>;
    /**
     * Server addr.
     */
    public readonly serverAddr!: pulumi.Output<string | undefined>;
    /**
     * recharge for cls TopicId.
     */
    public readonly topicId!: pulumi.Output<string>;
    /**
     * user need recharge kafka topic list.
     */
    public readonly userKafkaTopics!: pulumi.Output<string>;

    /**
     * Create a KafkaRecharge resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaRechargeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaRechargeArgs | KafkaRechargeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaRechargeState | undefined;
            resourceInputs["consumerGroupName"] = state ? state.consumerGroupName : undefined;
            resourceInputs["isEncryptionAddr"] = state ? state.isEncryptionAddr : undefined;
            resourceInputs["kafkaInstance"] = state ? state.kafkaInstance : undefined;
            resourceInputs["kafkaType"] = state ? state.kafkaType : undefined;
            resourceInputs["logRechargeRule"] = state ? state.logRechargeRule : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["offset"] = state ? state.offset : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["serverAddr"] = state ? state.serverAddr : undefined;
            resourceInputs["topicId"] = state ? state.topicId : undefined;
            resourceInputs["userKafkaTopics"] = state ? state.userKafkaTopics : undefined;
        } else {
            const args = argsOrState as KafkaRechargeArgs | undefined;
            if ((!args || args.kafkaType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaType'");
            }
            if ((!args || args.offset === undefined) && !opts.urn) {
                throw new Error("Missing required property 'offset'");
            }
            if ((!args || args.topicId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicId'");
            }
            if ((!args || args.userKafkaTopics === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userKafkaTopics'");
            }
            resourceInputs["consumerGroupName"] = args ? args.consumerGroupName : undefined;
            resourceInputs["isEncryptionAddr"] = args ? args.isEncryptionAddr : undefined;
            resourceInputs["kafkaInstance"] = args ? args.kafkaInstance : undefined;
            resourceInputs["kafkaType"] = args ? args.kafkaType : undefined;
            resourceInputs["logRechargeRule"] = args ? args.logRechargeRule : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["offset"] = args ? args.offset : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["serverAddr"] = args ? args.serverAddr : undefined;
            resourceInputs["topicId"] = args ? args.topicId : undefined;
            resourceInputs["userKafkaTopics"] = args ? args.userKafkaTopics : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KafkaRecharge.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KafkaRecharge resources.
 */
export interface KafkaRechargeState {
    /**
     * user consumer group name.
     */
    consumerGroupName?: pulumi.Input<string>;
    /**
     * ServerAddr is encryption addr.
     */
    isEncryptionAddr?: pulumi.Input<boolean>;
    /**
     * CKafka Instance id.
     */
    kafkaInstance?: pulumi.Input<string>;
    /**
     * kafka recharge type, 0 for CKafka, 1 fro user define Kafka.
     */
    kafkaType?: pulumi.Input<number>;
    /**
     * log recharge rule.
     */
    logRechargeRule?: pulumi.Input<inputs.Cls.KafkaRechargeLogRechargeRule>;
    /**
     * kafka recharge name.
     */
    name?: pulumi.Input<string>;
    /**
     * The translation is: -2: Earliest (default) -1: Latest.
     */
    offset?: pulumi.Input<number>;
    /**
     * encryption protocol.
     */
    protocol?: pulumi.Input<inputs.Cls.KafkaRechargeProtocol>;
    /**
     * Server addr.
     */
    serverAddr?: pulumi.Input<string>;
    /**
     * recharge for cls TopicId.
     */
    topicId?: pulumi.Input<string>;
    /**
     * user need recharge kafka topic list.
     */
    userKafkaTopics?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KafkaRecharge resource.
 */
export interface KafkaRechargeArgs {
    /**
     * user consumer group name.
     */
    consumerGroupName?: pulumi.Input<string>;
    /**
     * ServerAddr is encryption addr.
     */
    isEncryptionAddr?: pulumi.Input<boolean>;
    /**
     * CKafka Instance id.
     */
    kafkaInstance?: pulumi.Input<string>;
    /**
     * kafka recharge type, 0 for CKafka, 1 fro user define Kafka.
     */
    kafkaType: pulumi.Input<number>;
    /**
     * log recharge rule.
     */
    logRechargeRule?: pulumi.Input<inputs.Cls.KafkaRechargeLogRechargeRule>;
    /**
     * kafka recharge name.
     */
    name?: pulumi.Input<string>;
    /**
     * The translation is: -2: Earliest (default) -1: Latest.
     */
    offset: pulumi.Input<number>;
    /**
     * encryption protocol.
     */
    protocol?: pulumi.Input<inputs.Cls.KafkaRechargeProtocol>;
    /**
     * Server addr.
     */
    serverAddr?: pulumi.Input<string>;
    /**
     * recharge for cls TopicId.
     */
    topicId: pulumi.Input<string>;
    /**
     * user need recharge kafka topic list.
     */
    userKafkaTopics: pulumi.Input<string>;
}
