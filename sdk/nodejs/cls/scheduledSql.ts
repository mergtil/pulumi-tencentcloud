// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class ScheduledSql extends pulumi.CustomResource {
    /**
     * Get an existing ScheduledSql resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScheduledSqlState, opts?: pulumi.CustomResourceOptions): ScheduledSql {
        return new ScheduledSql(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Cls/scheduledSql:ScheduledSql';

    /**
     * Returns true if the given object is an instance of ScheduledSql.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScheduledSql {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScheduledSql.__pulumiType;
    }

    /**
     * scheduled slq dst resource.
     */
    public readonly dstResource!: pulumi.Output<outputs.Cls.ScheduledSqlDstResource>;
    /**
     * task enable flag.
     */
    public readonly enableFlag!: pulumi.Output<number>;
    /**
     * task name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * process delay.
     */
    public readonly processDelay!: pulumi.Output<number>;
    /**
     * process end timestamp.
     */
    public readonly processEndTime!: pulumi.Output<number>;
    /**
     * process period.
     */
    public readonly processPeriod!: pulumi.Output<number>;
    /**
     * process start timestamp.
     */
    public readonly processStartTime!: pulumi.Output<number>;
    /**
     * process time window.
     */
    public readonly processTimeWindow!: pulumi.Output<string>;
    /**
     * process type.
     */
    public readonly processType!: pulumi.Output<number>;
    /**
     * scheduled sql content.
     */
    public readonly scheduledSqlContent!: pulumi.Output<string>;
    /**
     * src topic id.
     */
    public readonly srcTopicId!: pulumi.Output<string>;
    /**
     * src topic region.
     */
    public readonly srcTopicRegion!: pulumi.Output<string>;
    /**
     * syntax rule.
     */
    public readonly syntaxRule!: pulumi.Output<number | undefined>;

    /**
     * Create a ScheduledSql resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScheduledSqlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScheduledSqlArgs | ScheduledSqlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScheduledSqlState | undefined;
            resourceInputs["dstResource"] = state ? state.dstResource : undefined;
            resourceInputs["enableFlag"] = state ? state.enableFlag : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["processDelay"] = state ? state.processDelay : undefined;
            resourceInputs["processEndTime"] = state ? state.processEndTime : undefined;
            resourceInputs["processPeriod"] = state ? state.processPeriod : undefined;
            resourceInputs["processStartTime"] = state ? state.processStartTime : undefined;
            resourceInputs["processTimeWindow"] = state ? state.processTimeWindow : undefined;
            resourceInputs["processType"] = state ? state.processType : undefined;
            resourceInputs["scheduledSqlContent"] = state ? state.scheduledSqlContent : undefined;
            resourceInputs["srcTopicId"] = state ? state.srcTopicId : undefined;
            resourceInputs["srcTopicRegion"] = state ? state.srcTopicRegion : undefined;
            resourceInputs["syntaxRule"] = state ? state.syntaxRule : undefined;
        } else {
            const args = argsOrState as ScheduledSqlArgs | undefined;
            if ((!args || args.dstResource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstResource'");
            }
            if ((!args || args.enableFlag === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableFlag'");
            }
            if ((!args || args.processDelay === undefined) && !opts.urn) {
                throw new Error("Missing required property 'processDelay'");
            }
            if ((!args || args.processPeriod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'processPeriod'");
            }
            if ((!args || args.processStartTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'processStartTime'");
            }
            if ((!args || args.processTimeWindow === undefined) && !opts.urn) {
                throw new Error("Missing required property 'processTimeWindow'");
            }
            if ((!args || args.processType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'processType'");
            }
            if ((!args || args.scheduledSqlContent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheduledSqlContent'");
            }
            if ((!args || args.srcTopicId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcTopicId'");
            }
            if ((!args || args.srcTopicRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcTopicRegion'");
            }
            resourceInputs["dstResource"] = args ? args.dstResource : undefined;
            resourceInputs["enableFlag"] = args ? args.enableFlag : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["processDelay"] = args ? args.processDelay : undefined;
            resourceInputs["processEndTime"] = args ? args.processEndTime : undefined;
            resourceInputs["processPeriod"] = args ? args.processPeriod : undefined;
            resourceInputs["processStartTime"] = args ? args.processStartTime : undefined;
            resourceInputs["processTimeWindow"] = args ? args.processTimeWindow : undefined;
            resourceInputs["processType"] = args ? args.processType : undefined;
            resourceInputs["scheduledSqlContent"] = args ? args.scheduledSqlContent : undefined;
            resourceInputs["srcTopicId"] = args ? args.srcTopicId : undefined;
            resourceInputs["srcTopicRegion"] = args ? args.srcTopicRegion : undefined;
            resourceInputs["syntaxRule"] = args ? args.syntaxRule : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScheduledSql.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScheduledSql resources.
 */
export interface ScheduledSqlState {
    /**
     * scheduled slq dst resource.
     */
    dstResource?: pulumi.Input<inputs.Cls.ScheduledSqlDstResource>;
    /**
     * task enable flag.
     */
    enableFlag?: pulumi.Input<number>;
    /**
     * task name.
     */
    name?: pulumi.Input<string>;
    /**
     * process delay.
     */
    processDelay?: pulumi.Input<number>;
    /**
     * process end timestamp.
     */
    processEndTime?: pulumi.Input<number>;
    /**
     * process period.
     */
    processPeriod?: pulumi.Input<number>;
    /**
     * process start timestamp.
     */
    processStartTime?: pulumi.Input<number>;
    /**
     * process time window.
     */
    processTimeWindow?: pulumi.Input<string>;
    /**
     * process type.
     */
    processType?: pulumi.Input<number>;
    /**
     * scheduled sql content.
     */
    scheduledSqlContent?: pulumi.Input<string>;
    /**
     * src topic id.
     */
    srcTopicId?: pulumi.Input<string>;
    /**
     * src topic region.
     */
    srcTopicRegion?: pulumi.Input<string>;
    /**
     * syntax rule.
     */
    syntaxRule?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ScheduledSql resource.
 */
export interface ScheduledSqlArgs {
    /**
     * scheduled slq dst resource.
     */
    dstResource: pulumi.Input<inputs.Cls.ScheduledSqlDstResource>;
    /**
     * task enable flag.
     */
    enableFlag: pulumi.Input<number>;
    /**
     * task name.
     */
    name?: pulumi.Input<string>;
    /**
     * process delay.
     */
    processDelay: pulumi.Input<number>;
    /**
     * process end timestamp.
     */
    processEndTime?: pulumi.Input<number>;
    /**
     * process period.
     */
    processPeriod: pulumi.Input<number>;
    /**
     * process start timestamp.
     */
    processStartTime: pulumi.Input<number>;
    /**
     * process time window.
     */
    processTimeWindow: pulumi.Input<string>;
    /**
     * process type.
     */
    processType: pulumi.Input<number>;
    /**
     * scheduled sql content.
     */
    scheduledSqlContent: pulumi.Input<string>;
    /**
     * src topic id.
     */
    srcTopicId: pulumi.Input<string>;
    /**
     * src topic region.
     */
    srcTopicRegion: pulumi.Input<string>;
    /**
     * syntax rule.
     */
    syntaxRule?: pulumi.Input<number>;
}
