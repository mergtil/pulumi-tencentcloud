// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Alarm extends pulumi.CustomResource {
    /**
     * Get an existing Alarm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlarmState, opts?: pulumi.CustomResourceOptions): Alarm {
        return new Alarm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Cls/alarm:Alarm';

    /**
     * Returns true if the given object is an instance of Alarm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Alarm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Alarm.__pulumiType;
    }

    /**
     * list of alarm notice id.
     */
    public readonly alarmNoticeIds!: pulumi.Output<string[]>;
    /**
     * alarm repeat cycle.
     */
    public readonly alarmPeriod!: pulumi.Output<number>;
    /**
     * list of alarm target.
     */
    public readonly alarmTargets!: pulumi.Output<outputs.Cls.AlarmAlarmTarget[]>;
    /**
     * multidimensional analysis.
     */
    public readonly analyses!: pulumi.Output<outputs.Cls.AlarmAnalysis[] | undefined>;
    /**
     * user define callback.
     */
    public readonly callBack!: pulumi.Output<outputs.Cls.AlarmCallBack | undefined>;
    /**
     * triggering conditions.
     */
    public readonly condition!: pulumi.Output<string>;
    /**
     * user define alarm notice.
     */
    public readonly messageTemplate!: pulumi.Output<string | undefined>;
    /**
     * monitor task execution time.
     */
    public readonly monitorTime!: pulumi.Output<outputs.Cls.AlarmMonitorTime>;
    /**
     * log alarm name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * whether to enable the alarm policy.
     */
    public readonly status!: pulumi.Output<boolean | undefined>;
    /**
     * Tag description list.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * continuous cycle.
     */
    public readonly triggerCount!: pulumi.Output<number>;

    /**
     * Create a Alarm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlarmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlarmArgs | AlarmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlarmState | undefined;
            resourceInputs["alarmNoticeIds"] = state ? state.alarmNoticeIds : undefined;
            resourceInputs["alarmPeriod"] = state ? state.alarmPeriod : undefined;
            resourceInputs["alarmTargets"] = state ? state.alarmTargets : undefined;
            resourceInputs["analyses"] = state ? state.analyses : undefined;
            resourceInputs["callBack"] = state ? state.callBack : undefined;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["messageTemplate"] = state ? state.messageTemplate : undefined;
            resourceInputs["monitorTime"] = state ? state.monitorTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["triggerCount"] = state ? state.triggerCount : undefined;
        } else {
            const args = argsOrState as AlarmArgs | undefined;
            if ((!args || args.alarmNoticeIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alarmNoticeIds'");
            }
            if ((!args || args.alarmPeriod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alarmPeriod'");
            }
            if ((!args || args.alarmTargets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alarmTargets'");
            }
            if ((!args || args.condition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'condition'");
            }
            if ((!args || args.monitorTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorTime'");
            }
            if ((!args || args.triggerCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'triggerCount'");
            }
            resourceInputs["alarmNoticeIds"] = args ? args.alarmNoticeIds : undefined;
            resourceInputs["alarmPeriod"] = args ? args.alarmPeriod : undefined;
            resourceInputs["alarmTargets"] = args ? args.alarmTargets : undefined;
            resourceInputs["analyses"] = args ? args.analyses : undefined;
            resourceInputs["callBack"] = args ? args.callBack : undefined;
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["messageTemplate"] = args ? args.messageTemplate : undefined;
            resourceInputs["monitorTime"] = args ? args.monitorTime : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["triggerCount"] = args ? args.triggerCount : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Alarm.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Alarm resources.
 */
export interface AlarmState {
    /**
     * list of alarm notice id.
     */
    alarmNoticeIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * alarm repeat cycle.
     */
    alarmPeriod?: pulumi.Input<number>;
    /**
     * list of alarm target.
     */
    alarmTargets?: pulumi.Input<pulumi.Input<inputs.Cls.AlarmAlarmTarget>[]>;
    /**
     * multidimensional analysis.
     */
    analyses?: pulumi.Input<pulumi.Input<inputs.Cls.AlarmAnalysis>[]>;
    /**
     * user define callback.
     */
    callBack?: pulumi.Input<inputs.Cls.AlarmCallBack>;
    /**
     * triggering conditions.
     */
    condition?: pulumi.Input<string>;
    /**
     * user define alarm notice.
     */
    messageTemplate?: pulumi.Input<string>;
    /**
     * monitor task execution time.
     */
    monitorTime?: pulumi.Input<inputs.Cls.AlarmMonitorTime>;
    /**
     * log alarm name.
     */
    name?: pulumi.Input<string>;
    /**
     * whether to enable the alarm policy.
     */
    status?: pulumi.Input<boolean>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * continuous cycle.
     */
    triggerCount?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Alarm resource.
 */
export interface AlarmArgs {
    /**
     * list of alarm notice id.
     */
    alarmNoticeIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * alarm repeat cycle.
     */
    alarmPeriod: pulumi.Input<number>;
    /**
     * list of alarm target.
     */
    alarmTargets: pulumi.Input<pulumi.Input<inputs.Cls.AlarmAlarmTarget>[]>;
    /**
     * multidimensional analysis.
     */
    analyses?: pulumi.Input<pulumi.Input<inputs.Cls.AlarmAnalysis>[]>;
    /**
     * user define callback.
     */
    callBack?: pulumi.Input<inputs.Cls.AlarmCallBack>;
    /**
     * triggering conditions.
     */
    condition: pulumi.Input<string>;
    /**
     * user define alarm notice.
     */
    messageTemplate?: pulumi.Input<string>;
    /**
     * monitor task execution time.
     */
    monitorTime: pulumi.Input<inputs.Cls.AlarmMonitorTime>;
    /**
     * log alarm name.
     */
    name?: pulumi.Input<string>;
    /**
     * whether to enable the alarm policy.
     */
    status?: pulumi.Input<boolean>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * continuous cycle.
     */
    triggerCount: pulumi.Input<number>;
}
