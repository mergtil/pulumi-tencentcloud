// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CngwCanaryRuleArgs, CngwCanaryRuleState } from "./cngwCanaryRule";
export type CngwCanaryRule = import("./cngwCanaryRule").CngwCanaryRule;
export const CngwCanaryRule: typeof import("./cngwCanaryRule").CngwCanaryRule = null as any;
utilities.lazyLoad(exports, ["CngwCanaryRule"], () => require("./cngwCanaryRule"));

export { CngwGatewayArgs, CngwGatewayState } from "./cngwGateway";
export type CngwGateway = import("./cngwGateway").CngwGateway;
export const CngwGateway: typeof import("./cngwGateway").CngwGateway = null as any;
utilities.lazyLoad(exports, ["CngwGateway"], () => require("./cngwGateway"));

export { CngwGroupArgs, CngwGroupState } from "./cngwGroup";
export type CngwGroup = import("./cngwGroup").CngwGroup;
export const CngwGroup: typeof import("./cngwGroup").CngwGroup = null as any;
utilities.lazyLoad(exports, ["CngwGroup"], () => require("./cngwGroup"));

export { CngwRouteArgs, CngwRouteState } from "./cngwRoute";
export type CngwRoute = import("./cngwRoute").CngwRoute;
export const CngwRoute: typeof import("./cngwRoute").CngwRoute = null as any;
utilities.lazyLoad(exports, ["CngwRoute"], () => require("./cngwRoute"));

export { CngwRouteRateLimitArgs, CngwRouteRateLimitState } from "./cngwRouteRateLimit";
export type CngwRouteRateLimit = import("./cngwRouteRateLimit").CngwRouteRateLimit;
export const CngwRouteRateLimit: typeof import("./cngwRouteRateLimit").CngwRouteRateLimit = null as any;
utilities.lazyLoad(exports, ["CngwRouteRateLimit"], () => require("./cngwRouteRateLimit"));

export { CngwServiceArgs, CngwServiceState } from "./cngwService";
export type CngwService = import("./cngwService").CngwService;
export const CngwService: typeof import("./cngwService").CngwService = null as any;
utilities.lazyLoad(exports, ["CngwService"], () => require("./cngwService"));

export { CngwServiceRateLimitArgs, CngwServiceRateLimitState } from "./cngwServiceRateLimit";
export type CngwServiceRateLimit = import("./cngwServiceRateLimit").CngwServiceRateLimit;
export const CngwServiceRateLimit: typeof import("./cngwServiceRateLimit").CngwServiceRateLimit = null as any;
utilities.lazyLoad(exports, ["CngwServiceRateLimit"], () => require("./cngwServiceRateLimit"));

export { GetAccessAddressArgs, GetAccessAddressResult, GetAccessAddressOutputArgs } from "./getAccessAddress";
export const getAccessAddress: typeof import("./getAccessAddress").getAccessAddress = null as any;
export const getAccessAddressOutput: typeof import("./getAccessAddress").getAccessAddressOutput = null as any;
utilities.lazyLoad(exports, ["getAccessAddress","getAccessAddressOutput"], () => require("./getAccessAddress"));

export { GetGatewayCanaryRulesArgs, GetGatewayCanaryRulesResult, GetGatewayCanaryRulesOutputArgs } from "./getGatewayCanaryRules";
export const getGatewayCanaryRules: typeof import("./getGatewayCanaryRules").getGatewayCanaryRules = null as any;
export const getGatewayCanaryRulesOutput: typeof import("./getGatewayCanaryRules").getGatewayCanaryRulesOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayCanaryRules","getGatewayCanaryRulesOutput"], () => require("./getGatewayCanaryRules"));

export { GetGatewayNodesArgs, GetGatewayNodesResult, GetGatewayNodesOutputArgs } from "./getGatewayNodes";
export const getGatewayNodes: typeof import("./getGatewayNodes").getGatewayNodes = null as any;
export const getGatewayNodesOutput: typeof import("./getGatewayNodes").getGatewayNodesOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayNodes","getGatewayNodesOutput"], () => require("./getGatewayNodes"));

export { GetGatewayRoutesArgs, GetGatewayRoutesResult, GetGatewayRoutesOutputArgs } from "./getGatewayRoutes";
export const getGatewayRoutes: typeof import("./getGatewayRoutes").getGatewayRoutes = null as any;
export const getGatewayRoutesOutput: typeof import("./getGatewayRoutes").getGatewayRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayRoutes","getGatewayRoutesOutput"], () => require("./getGatewayRoutes"));

export { GetGatewayServicesArgs, GetGatewayServicesResult, GetGatewayServicesOutputArgs } from "./getGatewayServices";
export const getGatewayServices: typeof import("./getGatewayServices").getGatewayServices = null as any;
export const getGatewayServicesOutput: typeof import("./getGatewayServices").getGatewayServicesOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayServices","getGatewayServicesOutput"], () => require("./getGatewayServices"));

export { GetGatewaysArgs, GetGatewaysResult, GetGatewaysOutputArgs } from "./getGateways";
export const getGateways: typeof import("./getGateways").getGateways = null as any;
export const getGatewaysOutput: typeof import("./getGateways").getGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getGateways","getGatewaysOutput"], () => require("./getGateways"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetNacosReplicasArgs, GetNacosReplicasResult, GetNacosReplicasOutputArgs } from "./getNacosReplicas";
export const getNacosReplicas: typeof import("./getNacosReplicas").getNacosReplicas = null as any;
export const getNacosReplicasOutput: typeof import("./getNacosReplicas").getNacosReplicasOutput = null as any;
utilities.lazyLoad(exports, ["getNacosReplicas","getNacosReplicasOutput"], () => require("./getNacosReplicas"));

export { GetNacosServerInterfacesArgs, GetNacosServerInterfacesResult, GetNacosServerInterfacesOutputArgs } from "./getNacosServerInterfaces";
export const getNacosServerInterfaces: typeof import("./getNacosServerInterfaces").getNacosServerInterfaces = null as any;
export const getNacosServerInterfacesOutput: typeof import("./getNacosServerInterfaces").getNacosServerInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getNacosServerInterfaces","getNacosServerInterfacesOutput"], () => require("./getNacosServerInterfaces"));

export { GetZookeeperReplicasArgs, GetZookeeperReplicasResult, GetZookeeperReplicasOutputArgs } from "./getZookeeperReplicas";
export const getZookeeperReplicas: typeof import("./getZookeeperReplicas").getZookeeperReplicas = null as any;
export const getZookeeperReplicasOutput: typeof import("./getZookeeperReplicas").getZookeeperReplicasOutput = null as any;
utilities.lazyLoad(exports, ["getZookeeperReplicas","getZookeeperReplicasOutput"], () => require("./getZookeeperReplicas"));

export { GetZookeeperServerInterfacesArgs, GetZookeeperServerInterfacesResult, GetZookeeperServerInterfacesOutputArgs } from "./getZookeeperServerInterfaces";
export const getZookeeperServerInterfaces: typeof import("./getZookeeperServerInterfaces").getZookeeperServerInterfaces = null as any;
export const getZookeeperServerInterfacesOutput: typeof import("./getZookeeperServerInterfaces").getZookeeperServerInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getZookeeperServerInterfaces","getZookeeperServerInterfacesOutput"], () => require("./getZookeeperServerInterfaces"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:Tse/cngwCanaryRule:CngwCanaryRule":
                return new CngwCanaryRule(name, <any>undefined, { urn })
            case "tencentcloud:Tse/cngwGateway:CngwGateway":
                return new CngwGateway(name, <any>undefined, { urn })
            case "tencentcloud:Tse/cngwGroup:CngwGroup":
                return new CngwGroup(name, <any>undefined, { urn })
            case "tencentcloud:Tse/cngwRoute:CngwRoute":
                return new CngwRoute(name, <any>undefined, { urn })
            case "tencentcloud:Tse/cngwRouteRateLimit:CngwRouteRateLimit":
                return new CngwRouteRateLimit(name, <any>undefined, { urn })
            case "tencentcloud:Tse/cngwService:CngwService":
                return new CngwService(name, <any>undefined, { urn })
            case "tencentcloud:Tse/cngwServiceRateLimit:CngwServiceRateLimit":
                return new CngwServiceRateLimit(name, <any>undefined, { urn })
            case "tencentcloud:Tse/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "Tse/cngwCanaryRule", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tse/cngwGateway", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tse/cngwGroup", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tse/cngwRoute", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tse/cngwRouteRateLimit", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tse/cngwService", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tse/cngwServiceRateLimit", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "Tse/instance", _module)
