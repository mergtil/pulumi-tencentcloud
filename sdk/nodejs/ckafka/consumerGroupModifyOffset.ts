// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class ConsumerGroupModifyOffset extends pulumi.CustomResource {
    /**
     * Get an existing ConsumerGroupModifyOffset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConsumerGroupModifyOffsetState, opts?: pulumi.CustomResourceOptions): ConsumerGroupModifyOffset {
        return new ConsumerGroupModifyOffset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Ckafka/consumerGroupModifyOffset:ConsumerGroupModifyOffset';

    /**
     * Returns true if the given object is an instance of ConsumerGroupModifyOffset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConsumerGroupModifyOffset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConsumerGroupModifyOffset.__pulumiType;
    }

    /**
     * kafka group.
     */
    public readonly group!: pulumi.Output<string>;
    /**
     * Kafka instance id.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The offset location that needs to be reset. When strategy is 2, this field must be included.
     */
    public readonly offset!: pulumi.Output<number | undefined>;
    /**
     * The list of partition that needs to be reset if no Topics parameter is specified. Resets the partition in the
     * corresponding Partition list of all topics. When Topics is specified, the partition of the corresponding topic list of
     * the specified Partitions list is reset.
     */
    public readonly partitions!: pulumi.Output<number[] | undefined>;
    /**
     * This field must be included when strategy is 0. If it is greater than zero, the offset will be moved backward by shift
     * bars, and if it is less than zero, the offset will be traced back to the number of shift entries. After the correct
     * reset, the new offset should be (old_offset + shift). It should be noted that if the new offset is less than partition's
     * earliest, it will be set to earliest, and if the latest greater than partition will be set to latest.
     */
    public readonly shift!: pulumi.Output<number | undefined>;
    /**
     * Unit ms. When strategy is 1, you must include this field, where-2 means to reset the offset to the beginning,-1 means to
     * reset to the latest position (equivalent to emptying), and other values represent the specified time. You will get the
     * offset of the specified time in the topic and then reset it. If there is no message at the specified time, get the last
     * offset.
     */
    public readonly shiftTimestamp!: pulumi.Output<number | undefined>;
    /**
     * Reset the policy of offset. `0`: Move the offset forward or backward shift bar; `1`: Alignment reference
     * (by-duration,to-datetime,to-earliest,to-latest), which means moving the offset to the location of the specified
     * timestamp; `2`: Alignment reference (to-offset), which means to move the offset to the specified offset location.
     */
    public readonly strategy!: pulumi.Output<number>;
    /**
     * Indicates the topics that needs to be reset. Leave it empty means all.
     */
    public readonly topics!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ConsumerGroupModifyOffset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConsumerGroupModifyOffsetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConsumerGroupModifyOffsetArgs | ConsumerGroupModifyOffsetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConsumerGroupModifyOffsetState | undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["offset"] = state ? state.offset : undefined;
            resourceInputs["partitions"] = state ? state.partitions : undefined;
            resourceInputs["shift"] = state ? state.shift : undefined;
            resourceInputs["shiftTimestamp"] = state ? state.shiftTimestamp : undefined;
            resourceInputs["strategy"] = state ? state.strategy : undefined;
            resourceInputs["topics"] = state ? state.topics : undefined;
        } else {
            const args = argsOrState as ConsumerGroupModifyOffsetArgs | undefined;
            if ((!args || args.group === undefined) && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.strategy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'strategy'");
            }
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["offset"] = args ? args.offset : undefined;
            resourceInputs["partitions"] = args ? args.partitions : undefined;
            resourceInputs["shift"] = args ? args.shift : undefined;
            resourceInputs["shiftTimestamp"] = args ? args.shiftTimestamp : undefined;
            resourceInputs["strategy"] = args ? args.strategy : undefined;
            resourceInputs["topics"] = args ? args.topics : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConsumerGroupModifyOffset.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConsumerGroupModifyOffset resources.
 */
export interface ConsumerGroupModifyOffsetState {
    /**
     * kafka group.
     */
    group?: pulumi.Input<string>;
    /**
     * Kafka instance id.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The offset location that needs to be reset. When strategy is 2, this field must be included.
     */
    offset?: pulumi.Input<number>;
    /**
     * The list of partition that needs to be reset if no Topics parameter is specified. Resets the partition in the
     * corresponding Partition list of all topics. When Topics is specified, the partition of the corresponding topic list of
     * the specified Partitions list is reset.
     */
    partitions?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * This field must be included when strategy is 0. If it is greater than zero, the offset will be moved backward by shift
     * bars, and if it is less than zero, the offset will be traced back to the number of shift entries. After the correct
     * reset, the new offset should be (old_offset + shift). It should be noted that if the new offset is less than partition's
     * earliest, it will be set to earliest, and if the latest greater than partition will be set to latest.
     */
    shift?: pulumi.Input<number>;
    /**
     * Unit ms. When strategy is 1, you must include this field, where-2 means to reset the offset to the beginning,-1 means to
     * reset to the latest position (equivalent to emptying), and other values represent the specified time. You will get the
     * offset of the specified time in the topic and then reset it. If there is no message at the specified time, get the last
     * offset.
     */
    shiftTimestamp?: pulumi.Input<number>;
    /**
     * Reset the policy of offset. `0`: Move the offset forward or backward shift bar; `1`: Alignment reference
     * (by-duration,to-datetime,to-earliest,to-latest), which means moving the offset to the location of the specified
     * timestamp; `2`: Alignment reference (to-offset), which means to move the offset to the specified offset location.
     */
    strategy?: pulumi.Input<number>;
    /**
     * Indicates the topics that needs to be reset. Leave it empty means all.
     */
    topics?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ConsumerGroupModifyOffset resource.
 */
export interface ConsumerGroupModifyOffsetArgs {
    /**
     * kafka group.
     */
    group: pulumi.Input<string>;
    /**
     * Kafka instance id.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The offset location that needs to be reset. When strategy is 2, this field must be included.
     */
    offset?: pulumi.Input<number>;
    /**
     * The list of partition that needs to be reset if no Topics parameter is specified. Resets the partition in the
     * corresponding Partition list of all topics. When Topics is specified, the partition of the corresponding topic list of
     * the specified Partitions list is reset.
     */
    partitions?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * This field must be included when strategy is 0. If it is greater than zero, the offset will be moved backward by shift
     * bars, and if it is less than zero, the offset will be traced back to the number of shift entries. After the correct
     * reset, the new offset should be (old_offset + shift). It should be noted that if the new offset is less than partition's
     * earliest, it will be set to earliest, and if the latest greater than partition will be set to latest.
     */
    shift?: pulumi.Input<number>;
    /**
     * Unit ms. When strategy is 1, you must include this field, where-2 means to reset the offset to the beginning,-1 means to
     * reset to the latest position (equivalent to emptying), and other values represent the specified time. You will get the
     * offset of the specified time in the topic and then reset it. If there is no message at the specified time, get the last
     * offset.
     */
    shiftTimestamp?: pulumi.Input<number>;
    /**
     * Reset the policy of offset. `0`: Move the offset forward or backward shift bar; `1`: Alignment reference
     * (by-duration,to-datetime,to-earliest,to-latest), which means moving the offset to the location of the specified
     * timestamp; `2`: Alignment reference (to-offset), which means to move the offset to the specified offset location.
     */
    strategy: pulumi.Input<number>;
    /**
     * Indicates the topics that needs to be reset. Leave it empty means all.
     */
    topics?: pulumi.Input<pulumi.Input<string>[]>;
}
