// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class ConnectResource extends pulumi.CustomResource {
    /**
     * Get an existing ConnectResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectResourceState, opts?: pulumi.CustomResourceOptions): ConnectResource {
        return new ConnectResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Ckafka/connectResource:ConnectResource';

    /**
     * Returns true if the given object is an instance of ConnectResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectResource.__pulumiType;
    }

    /**
     * ClickHouse configuration, required when Type is CLICKHOUSE.
     */
    public readonly clickhouseConnectParam!: pulumi.Output<outputs.Ckafka.ConnectResourceClickhouseConnectParam | undefined>;
    /**
     * Connection source description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Doris configuration, required when Type is DORIS.
     */
    public readonly dorisConnectParam!: pulumi.Output<outputs.Ckafka.ConnectResourceDorisConnectParam | undefined>;
    /**
     * Dts configuration, required when Type is DTS.
     */
    public readonly dtsConnectParam!: pulumi.Output<outputs.Ckafka.ConnectResourceDtsConnectParam | undefined>;
    /**
     * Es configuration, required when Type is ES.
     */
    public readonly esConnectParam!: pulumi.Output<outputs.Ckafka.ConnectResourceEsConnectParam | undefined>;
    /**
     * Kafka configuration, required when Type is KAFKA.
     */
    public readonly kafkaConnectParam!: pulumi.Output<outputs.Ckafka.ConnectResourceKafkaConnectParam | undefined>;
    /**
     * Maria DB configuration, required when Type is MARIADB.
     */
    public readonly mariadbConnectParam!: pulumi.Output<outputs.Ckafka.ConnectResourceMariadbConnectParam | undefined>;
    /**
     * Mongo DB configuration, required when Type is MONGODB.
     */
    public readonly mongodbConnectParam!: pulumi.Output<outputs.Ckafka.ConnectResourceMongodbConnectParam | undefined>;
    /**
     * MySQL configuration, required when Type is MYSQL or TDSQL C_MYSQL.
     */
    public readonly mysqlConnectParam!: pulumi.Output<outputs.Ckafka.ConnectResourceMysqlConnectParam | undefined>;
    /**
     * Postgresql configuration, required when Type is POSTGRESQL or TDSQL C POSTGRESQL.
     */
    public readonly postgresqlConnectParam!: pulumi.Output<outputs.Ckafka.ConnectResourcePostgresqlConnectParam | undefined>;
    /**
     * connection source name.
     */
    public readonly resourceName!: pulumi.Output<string>;
    /**
     * SQLServer configuration, required when Type is SQLSERVER.
     */
    public readonly sqlserverConnectParam!: pulumi.Output<outputs.Ckafka.ConnectResourceSqlserverConnectParam | undefined>;
    /**
     * connection source type.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a ConnectResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectResourceArgs | ConnectResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectResourceState | undefined;
            resourceInputs["clickhouseConnectParam"] = state ? state.clickhouseConnectParam : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dorisConnectParam"] = state ? state.dorisConnectParam : undefined;
            resourceInputs["dtsConnectParam"] = state ? state.dtsConnectParam : undefined;
            resourceInputs["esConnectParam"] = state ? state.esConnectParam : undefined;
            resourceInputs["kafkaConnectParam"] = state ? state.kafkaConnectParam : undefined;
            resourceInputs["mariadbConnectParam"] = state ? state.mariadbConnectParam : undefined;
            resourceInputs["mongodbConnectParam"] = state ? state.mongodbConnectParam : undefined;
            resourceInputs["mysqlConnectParam"] = state ? state.mysqlConnectParam : undefined;
            resourceInputs["postgresqlConnectParam"] = state ? state.postgresqlConnectParam : undefined;
            resourceInputs["resourceName"] = state ? state.resourceName : undefined;
            resourceInputs["sqlserverConnectParam"] = state ? state.sqlserverConnectParam : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ConnectResourceArgs | undefined;
            if ((!args || args.resourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceName'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["clickhouseConnectParam"] = args ? args.clickhouseConnectParam : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dorisConnectParam"] = args ? args.dorisConnectParam : undefined;
            resourceInputs["dtsConnectParam"] = args ? args.dtsConnectParam : undefined;
            resourceInputs["esConnectParam"] = args ? args.esConnectParam : undefined;
            resourceInputs["kafkaConnectParam"] = args ? args.kafkaConnectParam : undefined;
            resourceInputs["mariadbConnectParam"] = args ? args.mariadbConnectParam : undefined;
            resourceInputs["mongodbConnectParam"] = args ? args.mongodbConnectParam : undefined;
            resourceInputs["mysqlConnectParam"] = args ? args.mysqlConnectParam : undefined;
            resourceInputs["postgresqlConnectParam"] = args ? args.postgresqlConnectParam : undefined;
            resourceInputs["resourceName"] = args ? args.resourceName : undefined;
            resourceInputs["sqlserverConnectParam"] = args ? args.sqlserverConnectParam : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectResource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectResource resources.
 */
export interface ConnectResourceState {
    /**
     * ClickHouse configuration, required when Type is CLICKHOUSE.
     */
    clickhouseConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourceClickhouseConnectParam>;
    /**
     * Connection source description.
     */
    description?: pulumi.Input<string>;
    /**
     * Doris configuration, required when Type is DORIS.
     */
    dorisConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourceDorisConnectParam>;
    /**
     * Dts configuration, required when Type is DTS.
     */
    dtsConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourceDtsConnectParam>;
    /**
     * Es configuration, required when Type is ES.
     */
    esConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourceEsConnectParam>;
    /**
     * Kafka configuration, required when Type is KAFKA.
     */
    kafkaConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourceKafkaConnectParam>;
    /**
     * Maria DB configuration, required when Type is MARIADB.
     */
    mariadbConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourceMariadbConnectParam>;
    /**
     * Mongo DB configuration, required when Type is MONGODB.
     */
    mongodbConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourceMongodbConnectParam>;
    /**
     * MySQL configuration, required when Type is MYSQL or TDSQL C_MYSQL.
     */
    mysqlConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourceMysqlConnectParam>;
    /**
     * Postgresql configuration, required when Type is POSTGRESQL or TDSQL C POSTGRESQL.
     */
    postgresqlConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourcePostgresqlConnectParam>;
    /**
     * connection source name.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * SQLServer configuration, required when Type is SQLSERVER.
     */
    sqlserverConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourceSqlserverConnectParam>;
    /**
     * connection source type.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectResource resource.
 */
export interface ConnectResourceArgs {
    /**
     * ClickHouse configuration, required when Type is CLICKHOUSE.
     */
    clickhouseConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourceClickhouseConnectParam>;
    /**
     * Connection source description.
     */
    description?: pulumi.Input<string>;
    /**
     * Doris configuration, required when Type is DORIS.
     */
    dorisConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourceDorisConnectParam>;
    /**
     * Dts configuration, required when Type is DTS.
     */
    dtsConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourceDtsConnectParam>;
    /**
     * Es configuration, required when Type is ES.
     */
    esConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourceEsConnectParam>;
    /**
     * Kafka configuration, required when Type is KAFKA.
     */
    kafkaConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourceKafkaConnectParam>;
    /**
     * Maria DB configuration, required when Type is MARIADB.
     */
    mariadbConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourceMariadbConnectParam>;
    /**
     * Mongo DB configuration, required when Type is MONGODB.
     */
    mongodbConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourceMongodbConnectParam>;
    /**
     * MySQL configuration, required when Type is MYSQL or TDSQL C_MYSQL.
     */
    mysqlConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourceMysqlConnectParam>;
    /**
     * Postgresql configuration, required when Type is POSTGRESQL or TDSQL C POSTGRESQL.
     */
    postgresqlConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourcePostgresqlConnectParam>;
    /**
     * connection source name.
     */
    resourceName: pulumi.Input<string>;
    /**
     * SQLServer configuration, required when Type is SQLSERVER.
     */
    sqlserverConnectParam?: pulumi.Input<inputs.Ckafka.ConnectResourceSqlserverConnectParam>;
    /**
     * connection source type.
     */
    type: pulumi.Input<string>;
}
