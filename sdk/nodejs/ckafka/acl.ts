// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Acl extends pulumi.CustomResource {
    /**
     * Get an existing Acl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclState, opts?: pulumi.CustomResourceOptions): Acl {
        return new Acl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Ckafka/acl:Acl';

    /**
     * Returns true if the given object is an instance of Acl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Acl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Acl.__pulumiType;
    }

    /**
     * The default is *, which means that any host can access it. Support filling in IP or network segment, and support
     * `;`separation.
     */
    public readonly host!: pulumi.Output<string | undefined>;
    /**
     * ID of the ckafka instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * ACL operation mode. Valid values: `UNKNOWN`, `ANY`, `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`,
     * `CLUSTER_ACTION`, `DESCRIBE_CONFIGS` and `ALTER_CONFIGS`.
     */
    public readonly operationType!: pulumi.Output<string>;
    /**
     * ACL permission type. Valid values: `UNKNOWN`, `ANY`, `DENY`, `ALLOW`. and `ALLOW` by default. Currently, CKafka supports
     * `ALLOW` (equivalent to allow list), and other fields will be used for future ACLs compatible with open-source Kafka.
     */
    public readonly permissionType!: pulumi.Output<string | undefined>;
    /**
     * User list. The default value is `*`, which means that any user can access. The current user can only be one included in
     * the user list. For example: `root` meaning user root can access.
     */
    public readonly principal!: pulumi.Output<string | undefined>;
    /**
     * ACL resource name, which is related to `resource_type`. For example, if `resource_type` is `TOPIC`, this field indicates
     * the topic name; if `resource_type` is `GROUP`, this field indicates the group name.
     */
    public readonly resourceName!: pulumi.Output<string>;
    /**
     * ACL resource type. Valid values are `UNKNOWN`, `ANY`, `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`. and `TOPIC` by
     * default. Currently, only `TOPIC` is available, and other fields will be used for future ACLs compatible with open-source
     * Kafka.
     */
    public readonly resourceType!: pulumi.Output<string | undefined>;

    /**
     * Create a Acl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclArgs | AclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AclState | undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["operationType"] = state ? state.operationType : undefined;
            resourceInputs["permissionType"] = state ? state.permissionType : undefined;
            resourceInputs["principal"] = state ? state.principal : undefined;
            resourceInputs["resourceName"] = state ? state.resourceName : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
        } else {
            const args = argsOrState as AclArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.operationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operationType'");
            }
            if ((!args || args.resourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceName'");
            }
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["operationType"] = args ? args.operationType : undefined;
            resourceInputs["permissionType"] = args ? args.permissionType : undefined;
            resourceInputs["principal"] = args ? args.principal : undefined;
            resourceInputs["resourceName"] = args ? args.resourceName : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Acl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Acl resources.
 */
export interface AclState {
    /**
     * The default is *, which means that any host can access it. Support filling in IP or network segment, and support
     * `;`separation.
     */
    host?: pulumi.Input<string>;
    /**
     * ID of the ckafka instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * ACL operation mode. Valid values: `UNKNOWN`, `ANY`, `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`,
     * `CLUSTER_ACTION`, `DESCRIBE_CONFIGS` and `ALTER_CONFIGS`.
     */
    operationType?: pulumi.Input<string>;
    /**
     * ACL permission type. Valid values: `UNKNOWN`, `ANY`, `DENY`, `ALLOW`. and `ALLOW` by default. Currently, CKafka supports
     * `ALLOW` (equivalent to allow list), and other fields will be used for future ACLs compatible with open-source Kafka.
     */
    permissionType?: pulumi.Input<string>;
    /**
     * User list. The default value is `*`, which means that any user can access. The current user can only be one included in
     * the user list. For example: `root` meaning user root can access.
     */
    principal?: pulumi.Input<string>;
    /**
     * ACL resource name, which is related to `resource_type`. For example, if `resource_type` is `TOPIC`, this field indicates
     * the topic name; if `resource_type` is `GROUP`, this field indicates the group name.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * ACL resource type. Valid values are `UNKNOWN`, `ANY`, `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`. and `TOPIC` by
     * default. Currently, only `TOPIC` is available, and other fields will be used for future ACLs compatible with open-source
     * Kafka.
     */
    resourceType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Acl resource.
 */
export interface AclArgs {
    /**
     * The default is *, which means that any host can access it. Support filling in IP or network segment, and support
     * `;`separation.
     */
    host?: pulumi.Input<string>;
    /**
     * ID of the ckafka instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * ACL operation mode. Valid values: `UNKNOWN`, `ANY`, `ALL`, `READ`, `WRITE`, `CREATE`, `DELETE`, `ALTER`, `DESCRIBE`,
     * `CLUSTER_ACTION`, `DESCRIBE_CONFIGS` and `ALTER_CONFIGS`.
     */
    operationType: pulumi.Input<string>;
    /**
     * ACL permission type. Valid values: `UNKNOWN`, `ANY`, `DENY`, `ALLOW`. and `ALLOW` by default. Currently, CKafka supports
     * `ALLOW` (equivalent to allow list), and other fields will be used for future ACLs compatible with open-source Kafka.
     */
    permissionType?: pulumi.Input<string>;
    /**
     * User list. The default value is `*`, which means that any user can access. The current user can only be one included in
     * the user list. For example: `root` meaning user root can access.
     */
    principal?: pulumi.Input<string>;
    /**
     * ACL resource name, which is related to `resource_type`. For example, if `resource_type` is `TOPIC`, this field indicates
     * the topic name; if `resource_type` is `GROUP`, this field indicates the group name.
     */
    resourceName: pulumi.Input<string>;
    /**
     * ACL resource type. Valid values are `UNKNOWN`, `ANY`, `TOPIC`, `GROUP`, `CLUSTER`, `TRANSACTIONAL_ID`. and `TOPIC` by
     * default. Currently, only `TOPIC` is available, and other fields will be used for future ACLs compatible with open-source
     * Kafka.
     */
    resourceType?: pulumi.Input<string>;
}
