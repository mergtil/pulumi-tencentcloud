// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class TaskSet extends pulumi.CustomResource {
    /**
     * Get an existing TaskSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TaskSetState, opts?: pulumi.CustomResourceOptions): TaskSet {
        return new TaskSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Cat/taskSet:TaskSet';

    /**
     * Returns true if the given object is an instance of TaskSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TaskSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TaskSet.__pulumiType;
    }

    /**
     * Batch task name address.
     */
    public readonly batchTasks!: pulumi.Output<outputs.Cat.TaskSetBatchTasks>;
    /**
     * Timer task cron expression.
     */
    public readonly cron!: pulumi.Output<string | undefined>;
    /**
     * Task interval minutes in (1,5,10,15,30,60,120,240).
     */
    public readonly interval!: pulumi.Output<number>;
    /**
     * Task Nodes.
     */
    public readonly nodes!: pulumi.Output<string[]>;
    /**
     * tasks parameters.
     */
    public readonly parameters!: pulumi.Output<string>;
    /**
     * Task status 1:TaskPending, 2:TaskRunning,3:TaskRunException,4:TaskSuspending
     * 5:TaskSuspendException,6:TaskSuspendException,7:TaskSuspended,9:TaskDeleted.
     */
    public /*out*/ readonly status!: pulumi.Output<number>;
    /**
     * Tag description list.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Task category,1:PC,2:Mobile.
     */
    public readonly taskCategory!: pulumi.Output<number>;
    /**
     * Task Id.
     */
    public /*out*/ readonly taskId!: pulumi.Output<string>;
    /**
     * Task Type 1:Page Performance, 2:File upload,3:File Download,4:Port performance 5:Audio and video.
     */
    public readonly taskType!: pulumi.Output<number>;

    /**
     * Create a TaskSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TaskSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TaskSetArgs | TaskSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TaskSetState | undefined;
            resourceInputs["batchTasks"] = state ? state.batchTasks : undefined;
            resourceInputs["cron"] = state ? state.cron : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taskCategory"] = state ? state.taskCategory : undefined;
            resourceInputs["taskId"] = state ? state.taskId : undefined;
            resourceInputs["taskType"] = state ? state.taskType : undefined;
        } else {
            const args = argsOrState as TaskSetArgs | undefined;
            if ((!args || args.batchTasks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'batchTasks'");
            }
            if ((!args || args.interval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            if ((!args || args.nodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodes'");
            }
            if ((!args || args.parameters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parameters'");
            }
            if ((!args || args.taskCategory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskCategory'");
            }
            if ((!args || args.taskType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskType'");
            }
            resourceInputs["batchTasks"] = args ? args.batchTasks : undefined;
            resourceInputs["cron"] = args ? args.cron : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["nodes"] = args ? args.nodes : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taskCategory"] = args ? args.taskCategory : undefined;
            resourceInputs["taskType"] = args ? args.taskType : undefined;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["taskId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TaskSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TaskSet resources.
 */
export interface TaskSetState {
    /**
     * Batch task name address.
     */
    batchTasks?: pulumi.Input<inputs.Cat.TaskSetBatchTasks>;
    /**
     * Timer task cron expression.
     */
    cron?: pulumi.Input<string>;
    /**
     * Task interval minutes in (1,5,10,15,30,60,120,240).
     */
    interval?: pulumi.Input<number>;
    /**
     * Task Nodes.
     */
    nodes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * tasks parameters.
     */
    parameters?: pulumi.Input<string>;
    /**
     * Task status 1:TaskPending, 2:TaskRunning,3:TaskRunException,4:TaskSuspending
     * 5:TaskSuspendException,6:TaskSuspendException,7:TaskSuspended,9:TaskDeleted.
     */
    status?: pulumi.Input<number>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Task category,1:PC,2:Mobile.
     */
    taskCategory?: pulumi.Input<number>;
    /**
     * Task Id.
     */
    taskId?: pulumi.Input<string>;
    /**
     * Task Type 1:Page Performance, 2:File upload,3:File Download,4:Port performance 5:Audio and video.
     */
    taskType?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TaskSet resource.
 */
export interface TaskSetArgs {
    /**
     * Batch task name address.
     */
    batchTasks: pulumi.Input<inputs.Cat.TaskSetBatchTasks>;
    /**
     * Timer task cron expression.
     */
    cron?: pulumi.Input<string>;
    /**
     * Task interval minutes in (1,5,10,15,30,60,120,240).
     */
    interval: pulumi.Input<number>;
    /**
     * Task Nodes.
     */
    nodes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * tasks parameters.
     */
    parameters: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Task category,1:PC,2:Mobile.
     */
    taskCategory: pulumi.Input<number>;
    /**
     * Task Type 1:Page Performance, 2:File upload,3:File Download,4:Port performance 5:Audio and video.
     */
    taskType: pulumi.Input<number>;
}
