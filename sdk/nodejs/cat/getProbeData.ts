// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export function getProbeData(args: GetProbeDataArgs, opts?: pulumi.InvokeOptions): Promise<GetProbeDataResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tencentcloud:Cat/getProbeData:getProbeData", {
        "ascending": args.ascending,
        "beginTime": args.beginTime,
        "cities": args.cities,
        "codes": args.codes,
        "districts": args.districts,
        "endTime": args.endTime,
        "errorTypes": args.errorTypes,
        "limit": args.limit,
        "offset": args.offset,
        "operators": args.operators,
        "resultOutputFile": args.resultOutputFile,
        "selectedFields": args.selectedFields,
        "sortField": args.sortField,
        "taskIds": args.taskIds,
        "taskType": args.taskType,
    }, opts);
}

/**
 * A collection of arguments for invoking getProbeData.
 */
export interface GetProbeDataArgs {
    ascending: boolean;
    beginTime: number;
    cities?: string[];
    codes?: string[];
    districts?: string[];
    endTime: number;
    errorTypes?: string[];
    limit: number;
    offset: number;
    operators?: string[];
    resultOutputFile?: string;
    selectedFields: string[];
    sortField: string;
    taskIds?: string[];
    taskType: string;
}

/**
 * A collection of values returned by getProbeData.
 */
export interface GetProbeDataResult {
    readonly ascending: boolean;
    readonly beginTime: number;
    readonly cities?: string[];
    readonly codes?: string[];
    readonly detailedSingleDataDefines: outputs.Cat.GetProbeDataDetailedSingleDataDefine[];
    readonly districts?: string[];
    readonly endTime: number;
    readonly errorTypes?: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly limit: number;
    readonly offset: number;
    readonly operators?: string[];
    readonly resultOutputFile?: string;
    readonly selectedFields: string[];
    readonly sortField: string;
    readonly taskIds?: string[];
    readonly taskType: string;
}
export function getProbeDataOutput(args: GetProbeDataOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProbeDataResult> {
    return pulumi.output(args).apply((a: any) => getProbeData(a, opts))
}

/**
 * A collection of arguments for invoking getProbeData.
 */
export interface GetProbeDataOutputArgs {
    ascending: pulumi.Input<boolean>;
    beginTime: pulumi.Input<number>;
    cities?: pulumi.Input<pulumi.Input<string>[]>;
    codes?: pulumi.Input<pulumi.Input<string>[]>;
    districts?: pulumi.Input<pulumi.Input<string>[]>;
    endTime: pulumi.Input<number>;
    errorTypes?: pulumi.Input<pulumi.Input<string>[]>;
    limit: pulumi.Input<number>;
    offset: pulumi.Input<number>;
    operators?: pulumi.Input<pulumi.Input<string>[]>;
    resultOutputFile?: pulumi.Input<string>;
    selectedFields: pulumi.Input<pulumi.Input<string>[]>;
    sortField: pulumi.Input<string>;
    taskIds?: pulumi.Input<pulumi.Input<string>[]>;
    taskType: pulumi.Input<string>;
}
