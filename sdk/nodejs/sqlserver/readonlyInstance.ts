// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class ReadonlyInstance extends pulumi.CustomResource {
    /**
     * Get an existing ReadonlyInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReadonlyInstanceState, opts?: pulumi.CustomResourceOptions): ReadonlyInstance {
        return new ReadonlyInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Sqlserver/readonlyInstance:ReadonlyInstance';

    /**
     * Returns true if the given object is an instance of ReadonlyInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReadonlyInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReadonlyInstance.__pulumiType;
    }

    /**
     * Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
     */
    public readonly autoVoucher!: pulumi.Output<number | undefined>;
    /**
     * Availability zone.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * Pay type of the SQL Server instance. Available values `PREPAID`, `POSTPAID_BY_HOUR`.
     */
    public readonly chargeType!: pulumi.Output<string | undefined>;
    /**
     * Create time of the SQL Server instance.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Indicate that the master instance upgrade or not. `true` for upgrading the master SQL Server instance to cluster type by
     * force. Default is false. Note: this is not supported with `DUAL`(ha_type), `2017`(engine_version) master SQL Server
     * instance, for it will cause ha_type of the master SQL Server instance change.
     */
    public readonly forceUpgrade!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates the master instance ID of recovery instances.
     */
    public readonly masterInstanceId!: pulumi.Output<string>;
    /**
     * Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloud_sqlserver_specinfos`
     * provides.
     */
    public readonly memory!: pulumi.Output<number>;
    /**
     * Name of the SQL Server instance.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Purchase instance period in month. The value does not exceed 48.
     */
    public readonly period!: pulumi.Output<number | undefined>;
    /**
     * ID of the readonly group that this instance belongs to. When `readonly_group_type` set value `3`, it must be set with
     * valid value.
     */
    public readonly readonlyGroupId!: pulumi.Output<string>;
    /**
     * Required when `readonly_group_type`=2, the name of the newly created read-only group.
     */
    public readonly readonlyGroupName!: pulumi.Output<string>;
    /**
     * Type of readonly group. Valid values: `1`, `3`. `1` for one auto-assigned readonly instance per one readonly group, `2`
     * for creating new readonly group, `3` for all exist readonly instances stay in the exist readonly group. For now, only
     * `1` and `3` are supported.
     */
    public readonly readonlyGroupType!: pulumi.Output<number>;
    /**
     * Required when `readonly_group_type`=2, whether the newly created read-only group has delay elimination enabled,
     * 1-enabled, 0-disabled. When the delay between the read-only copy and the primary instance exceeds the threshold, it is
     * automatically removed.
     */
    public readonly readonlyGroupsIsOfflineDelay!: pulumi.Output<number>;
    /**
     * Required when `readonly_group_type`=2 and `readonly_groups_is_offline_delay`=1, the threshold for delayed elimination of
     * newly created read-only groups.
     */
    public readonly readonlyGroupsMaxDelayTime!: pulumi.Output<number>;
    /**
     * When `readonly_group_type`=2 and `readonly_groups_is_offline_delay`=1, it is required. After the newly created read-only
     * group is delayed and removed, at least the number of read-only copies should be retained.
     */
    public readonly readonlyGroupsMinInGroup!: pulumi.Output<number>;
    /**
     * Readonly flag. `RO` (read-only instance), `MASTER` (primary instance with read-only instances). If it is left empty, it
     * refers to an instance which is not read-only and has no RO group.
     */
    public /*out*/ readonly roFlag!: pulumi.Output<string>;
    /**
     * Security group bound to the instance.
     */
    public readonly securityGroups!: pulumi.Output<string[] | undefined>;
    /**
     * Status of the SQL Server instance. 1 for applying, 2 for running, 3 for running with limit, 4 for isolated, 5 for
     * recycling, 6 for recycled, 7 for running with task, 8 for off-line, 9 for expanding, 10 for migrating, 11 for readonly,
     * 12 for rebooting.
     */
    public /*out*/ readonly status!: pulumi.Output<number>;
    /**
     * Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and
     * `storage_max` which data source `tencentcloud_sqlserver_specinfos` provides.
     */
    public readonly storage!: pulumi.Output<number>;
    /**
     * ID of subnet.
     */
    public readonly subnetId!: pulumi.Output<string | undefined>;
    /**
     * The tags of the SQL Server.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * IP for private access.
     */
    public /*out*/ readonly vip!: pulumi.Output<string>;
    /**
     * An array of voucher IDs, currently only one can be used for a single order.
     */
    public readonly voucherIds!: pulumi.Output<string[] | undefined>;
    /**
     * ID of VPC.
     */
    public readonly vpcId!: pulumi.Output<string | undefined>;
    /**
     * Port for private access.
     */
    public /*out*/ readonly vport!: pulumi.Output<number>;
    /**
     * The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
     *
     * @deprecated It has been deprecated from version 1.81.2.
     */
    public readonly waitSwitch!: pulumi.Output<number | undefined>;

    /**
     * Create a ReadonlyInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReadonlyInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReadonlyInstanceArgs | ReadonlyInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReadonlyInstanceState | undefined;
            resourceInputs["autoVoucher"] = state ? state.autoVoucher : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["chargeType"] = state ? state.chargeType : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["forceUpgrade"] = state ? state.forceUpgrade : undefined;
            resourceInputs["masterInstanceId"] = state ? state.masterInstanceId : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["readonlyGroupId"] = state ? state.readonlyGroupId : undefined;
            resourceInputs["readonlyGroupName"] = state ? state.readonlyGroupName : undefined;
            resourceInputs["readonlyGroupType"] = state ? state.readonlyGroupType : undefined;
            resourceInputs["readonlyGroupsIsOfflineDelay"] = state ? state.readonlyGroupsIsOfflineDelay : undefined;
            resourceInputs["readonlyGroupsMaxDelayTime"] = state ? state.readonlyGroupsMaxDelayTime : undefined;
            resourceInputs["readonlyGroupsMinInGroup"] = state ? state.readonlyGroupsMinInGroup : undefined;
            resourceInputs["roFlag"] = state ? state.roFlag : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vip"] = state ? state.vip : undefined;
            resourceInputs["voucherIds"] = state ? state.voucherIds : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vport"] = state ? state.vport : undefined;
            resourceInputs["waitSwitch"] = state ? state.waitSwitch : undefined;
        } else {
            const args = argsOrState as ReadonlyInstanceArgs | undefined;
            if ((!args || args.masterInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterInstanceId'");
            }
            if ((!args || args.memory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memory'");
            }
            if ((!args || args.readonlyGroupType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'readonlyGroupType'");
            }
            if ((!args || args.storage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storage'");
            }
            resourceInputs["autoVoucher"] = args ? args.autoVoucher : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["chargeType"] = args ? args.chargeType : undefined;
            resourceInputs["forceUpgrade"] = args ? args.forceUpgrade : undefined;
            resourceInputs["masterInstanceId"] = args ? args.masterInstanceId : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["readonlyGroupId"] = args ? args.readonlyGroupId : undefined;
            resourceInputs["readonlyGroupName"] = args ? args.readonlyGroupName : undefined;
            resourceInputs["readonlyGroupType"] = args ? args.readonlyGroupType : undefined;
            resourceInputs["readonlyGroupsIsOfflineDelay"] = args ? args.readonlyGroupsIsOfflineDelay : undefined;
            resourceInputs["readonlyGroupsMaxDelayTime"] = args ? args.readonlyGroupsMaxDelayTime : undefined;
            resourceInputs["readonlyGroupsMinInGroup"] = args ? args.readonlyGroupsMinInGroup : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["voucherIds"] = args ? args.voucherIds : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["waitSwitch"] = args ? args.waitSwitch : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["roFlag"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["vip"] = undefined /*out*/;
            resourceInputs["vport"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReadonlyInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ReadonlyInstance resources.
 */
export interface ReadonlyInstanceState {
    /**
     * Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
     */
    autoVoucher?: pulumi.Input<number>;
    /**
     * Availability zone.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Pay type of the SQL Server instance. Available values `PREPAID`, `POSTPAID_BY_HOUR`.
     */
    chargeType?: pulumi.Input<string>;
    /**
     * Create time of the SQL Server instance.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Indicate that the master instance upgrade or not. `true` for upgrading the master SQL Server instance to cluster type by
     * force. Default is false. Note: this is not supported with `DUAL`(ha_type), `2017`(engine_version) master SQL Server
     * instance, for it will cause ha_type of the master SQL Server instance change.
     */
    forceUpgrade?: pulumi.Input<boolean>;
    /**
     * Indicates the master instance ID of recovery instances.
     */
    masterInstanceId?: pulumi.Input<string>;
    /**
     * Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloud_sqlserver_specinfos`
     * provides.
     */
    memory?: pulumi.Input<number>;
    /**
     * Name of the SQL Server instance.
     */
    name?: pulumi.Input<string>;
    /**
     * Purchase instance period in month. The value does not exceed 48.
     */
    period?: pulumi.Input<number>;
    /**
     * ID of the readonly group that this instance belongs to. When `readonly_group_type` set value `3`, it must be set with
     * valid value.
     */
    readonlyGroupId?: pulumi.Input<string>;
    /**
     * Required when `readonly_group_type`=2, the name of the newly created read-only group.
     */
    readonlyGroupName?: pulumi.Input<string>;
    /**
     * Type of readonly group. Valid values: `1`, `3`. `1` for one auto-assigned readonly instance per one readonly group, `2`
     * for creating new readonly group, `3` for all exist readonly instances stay in the exist readonly group. For now, only
     * `1` and `3` are supported.
     */
    readonlyGroupType?: pulumi.Input<number>;
    /**
     * Required when `readonly_group_type`=2, whether the newly created read-only group has delay elimination enabled,
     * 1-enabled, 0-disabled. When the delay between the read-only copy and the primary instance exceeds the threshold, it is
     * automatically removed.
     */
    readonlyGroupsIsOfflineDelay?: pulumi.Input<number>;
    /**
     * Required when `readonly_group_type`=2 and `readonly_groups_is_offline_delay`=1, the threshold for delayed elimination of
     * newly created read-only groups.
     */
    readonlyGroupsMaxDelayTime?: pulumi.Input<number>;
    /**
     * When `readonly_group_type`=2 and `readonly_groups_is_offline_delay`=1, it is required. After the newly created read-only
     * group is delayed and removed, at least the number of read-only copies should be retained.
     */
    readonlyGroupsMinInGroup?: pulumi.Input<number>;
    /**
     * Readonly flag. `RO` (read-only instance), `MASTER` (primary instance with read-only instances). If it is left empty, it
     * refers to an instance which is not read-only and has no RO group.
     */
    roFlag?: pulumi.Input<string>;
    /**
     * Security group bound to the instance.
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Status of the SQL Server instance. 1 for applying, 2 for running, 3 for running with limit, 4 for isolated, 5 for
     * recycling, 6 for recycled, 7 for running with task, 8 for off-line, 9 for expanding, 10 for migrating, 11 for readonly,
     * 12 for rebooting.
     */
    status?: pulumi.Input<number>;
    /**
     * Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and
     * `storage_max` which data source `tencentcloud_sqlserver_specinfos` provides.
     */
    storage?: pulumi.Input<number>;
    /**
     * ID of subnet.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The tags of the SQL Server.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * IP for private access.
     */
    vip?: pulumi.Input<string>;
    /**
     * An array of voucher IDs, currently only one can be used for a single order.
     */
    voucherIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of VPC.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * Port for private access.
     */
    vport?: pulumi.Input<number>;
    /**
     * The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
     *
     * @deprecated It has been deprecated from version 1.81.2.
     */
    waitSwitch?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ReadonlyInstance resource.
 */
export interface ReadonlyInstanceArgs {
    /**
     * Whether to use the voucher automatically; 1 for yes, 0 for no, the default is 0.
     */
    autoVoucher?: pulumi.Input<number>;
    /**
     * Availability zone.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Pay type of the SQL Server instance. Available values `PREPAID`, `POSTPAID_BY_HOUR`.
     */
    chargeType?: pulumi.Input<string>;
    /**
     * Indicate that the master instance upgrade or not. `true` for upgrading the master SQL Server instance to cluster type by
     * force. Default is false. Note: this is not supported with `DUAL`(ha_type), `2017`(engine_version) master SQL Server
     * instance, for it will cause ha_type of the master SQL Server instance change.
     */
    forceUpgrade?: pulumi.Input<boolean>;
    /**
     * Indicates the master instance ID of recovery instances.
     */
    masterInstanceId: pulumi.Input<string>;
    /**
     * Memory size (in GB). Allowed value must be larger than `memory` that data source `tencentcloud_sqlserver_specinfos`
     * provides.
     */
    memory: pulumi.Input<number>;
    /**
     * Name of the SQL Server instance.
     */
    name?: pulumi.Input<string>;
    /**
     * Purchase instance period in month. The value does not exceed 48.
     */
    period?: pulumi.Input<number>;
    /**
     * ID of the readonly group that this instance belongs to. When `readonly_group_type` set value `3`, it must be set with
     * valid value.
     */
    readonlyGroupId?: pulumi.Input<string>;
    /**
     * Required when `readonly_group_type`=2, the name of the newly created read-only group.
     */
    readonlyGroupName?: pulumi.Input<string>;
    /**
     * Type of readonly group. Valid values: `1`, `3`. `1` for one auto-assigned readonly instance per one readonly group, `2`
     * for creating new readonly group, `3` for all exist readonly instances stay in the exist readonly group. For now, only
     * `1` and `3` are supported.
     */
    readonlyGroupType: pulumi.Input<number>;
    /**
     * Required when `readonly_group_type`=2, whether the newly created read-only group has delay elimination enabled,
     * 1-enabled, 0-disabled. When the delay between the read-only copy and the primary instance exceeds the threshold, it is
     * automatically removed.
     */
    readonlyGroupsIsOfflineDelay?: pulumi.Input<number>;
    /**
     * Required when `readonly_group_type`=2 and `readonly_groups_is_offline_delay`=1, the threshold for delayed elimination of
     * newly created read-only groups.
     */
    readonlyGroupsMaxDelayTime?: pulumi.Input<number>;
    /**
     * When `readonly_group_type`=2 and `readonly_groups_is_offline_delay`=1, it is required. After the newly created read-only
     * group is delayed and removed, at least the number of read-only copies should be retained.
     */
    readonlyGroupsMinInGroup?: pulumi.Input<number>;
    /**
     * Security group bound to the instance.
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disk size (in GB). Allowed value must be a multiple of 10. The storage must be set with the limit of `storage_min` and
     * `storage_max` which data source `tencentcloud_sqlserver_specinfos` provides.
     */
    storage: pulumi.Input<number>;
    /**
     * ID of subnet.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The tags of the SQL Server.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * An array of voucher IDs, currently only one can be used for a single order.
     */
    voucherIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of VPC.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The way to execute the allocation. Supported values include: 0 - execute immediately, 1 - execute in maintenance window.
     *
     * @deprecated It has been deprecated from version 1.81.2.
     */
    waitSwitch?: pulumi.Input<number>;
}
