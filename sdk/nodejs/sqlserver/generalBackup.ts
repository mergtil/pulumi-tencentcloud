// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class GeneralBackup extends pulumi.CustomResource {
    /**
     * Get an existing GeneralBackup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GeneralBackupState, opts?: pulumi.CustomResourceOptions): GeneralBackup {
        return new GeneralBackup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Sqlserver/generalBackup:GeneralBackup';

    /**
     * Returns true if the given object is an instance of GeneralBackup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GeneralBackup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GeneralBackup.__pulumiType;
    }

    /**
     * Backup name. If this parameter is left empty, a backup name in the format of [Instance ID]_[Backup start timestamp] will
     * be automatically generated.
     */
    public readonly backupName!: pulumi.Output<string>;
    /**
     * List of names of databases to be backed up (required only for multi-database backup).
     */
    public readonly dbNames!: pulumi.Output<string[] | undefined>;
    /**
     * flow id.
     */
    public /*out*/ readonly flowId!: pulumi.Output<string>;
    /**
     * Instance ID in the format of mssql-i1z41iwd.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Backup policy (0: instance backup, 1: multi-database backup).
     */
    public readonly strategy!: pulumi.Output<number>;

    /**
     * Create a GeneralBackup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GeneralBackupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GeneralBackupArgs | GeneralBackupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GeneralBackupState | undefined;
            resourceInputs["backupName"] = state ? state.backupName : undefined;
            resourceInputs["dbNames"] = state ? state.dbNames : undefined;
            resourceInputs["flowId"] = state ? state.flowId : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["strategy"] = state ? state.strategy : undefined;
        } else {
            const args = argsOrState as GeneralBackupArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["backupName"] = args ? args.backupName : undefined;
            resourceInputs["dbNames"] = args ? args.dbNames : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["strategy"] = args ? args.strategy : undefined;
            resourceInputs["flowId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GeneralBackup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GeneralBackup resources.
 */
export interface GeneralBackupState {
    /**
     * Backup name. If this parameter is left empty, a backup name in the format of [Instance ID]_[Backup start timestamp] will
     * be automatically generated.
     */
    backupName?: pulumi.Input<string>;
    /**
     * List of names of databases to be backed up (required only for multi-database backup).
     */
    dbNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * flow id.
     */
    flowId?: pulumi.Input<string>;
    /**
     * Instance ID in the format of mssql-i1z41iwd.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Backup policy (0: instance backup, 1: multi-database backup).
     */
    strategy?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a GeneralBackup resource.
 */
export interface GeneralBackupArgs {
    /**
     * Backup name. If this parameter is left empty, a backup name in the format of [Instance ID]_[Backup start timestamp] will
     * be automatically generated.
     */
    backupName?: pulumi.Input<string>;
    /**
     * List of names of databases to be backed up (required only for multi-database backup).
     */
    dbNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Instance ID in the format of mssql-i1z41iwd.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Backup policy (0: instance backup, 1: multi-database backup).
     */
    strategy?: pulumi.Input<number>;
}
