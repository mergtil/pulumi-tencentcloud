// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class FullBackupMigration extends pulumi.CustomResource {
    /**
     * Get an existing FullBackupMigration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FullBackupMigrationState, opts?: pulumi.CustomResourceOptions): FullBackupMigration {
        return new FullBackupMigration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Sqlserver/fullBackupMigration:FullBackupMigration';

    /**
     * Returns true if the given object is an instance of FullBackupMigration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FullBackupMigration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FullBackupMigration.__pulumiType;
    }

    /**
     * If the UploadType is COS_URL, fill in the URL here. If the UploadType is COS_UPLOAD, fill in the name of the backup file
     * here. Only 1 backup file is supported, but a backup file can involve multiple databases.
     */
    public readonly backupFiles!: pulumi.Output<string[] | undefined>;
    /**
     * Backup import task ID.
     */
    public /*out*/ readonly backupMigrationId!: pulumi.Output<string>;
    /**
     * ID of imported target instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Task name.
     */
    public readonly migrationName!: pulumi.Output<string>;
    /**
     * Migration task restoration type. FULL: full backup restoration, FULL_LOG: full backup and transaction log restoration,
     * FULL_DIFF: full backup and differential backup restoration.
     */
    public readonly recoveryType!: pulumi.Output<string>;
    /**
     * Backup upload type. COS_URL: the backup is stored in users Cloud Object Storage, with URL provided. COS_UPLOAD: the
     * backup is stored in the applications Cloud Object Storage and needs to be uploaded by the user.
     */
    public readonly uploadType!: pulumi.Output<string>;

    /**
     * Create a FullBackupMigration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FullBackupMigrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FullBackupMigrationArgs | FullBackupMigrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FullBackupMigrationState | undefined;
            resourceInputs["backupFiles"] = state ? state.backupFiles : undefined;
            resourceInputs["backupMigrationId"] = state ? state.backupMigrationId : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["migrationName"] = state ? state.migrationName : undefined;
            resourceInputs["recoveryType"] = state ? state.recoveryType : undefined;
            resourceInputs["uploadType"] = state ? state.uploadType : undefined;
        } else {
            const args = argsOrState as FullBackupMigrationArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.migrationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'migrationName'");
            }
            if ((!args || args.recoveryType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recoveryType'");
            }
            if ((!args || args.uploadType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'uploadType'");
            }
            resourceInputs["backupFiles"] = args ? args.backupFiles : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["migrationName"] = args ? args.migrationName : undefined;
            resourceInputs["recoveryType"] = args ? args.recoveryType : undefined;
            resourceInputs["uploadType"] = args ? args.uploadType : undefined;
            resourceInputs["backupMigrationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FullBackupMigration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FullBackupMigration resources.
 */
export interface FullBackupMigrationState {
    /**
     * If the UploadType is COS_URL, fill in the URL here. If the UploadType is COS_UPLOAD, fill in the name of the backup file
     * here. Only 1 backup file is supported, but a backup file can involve multiple databases.
     */
    backupFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Backup import task ID.
     */
    backupMigrationId?: pulumi.Input<string>;
    /**
     * ID of imported target instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Task name.
     */
    migrationName?: pulumi.Input<string>;
    /**
     * Migration task restoration type. FULL: full backup restoration, FULL_LOG: full backup and transaction log restoration,
     * FULL_DIFF: full backup and differential backup restoration.
     */
    recoveryType?: pulumi.Input<string>;
    /**
     * Backup upload type. COS_URL: the backup is stored in users Cloud Object Storage, with URL provided. COS_UPLOAD: the
     * backup is stored in the applications Cloud Object Storage and needs to be uploaded by the user.
     */
    uploadType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FullBackupMigration resource.
 */
export interface FullBackupMigrationArgs {
    /**
     * If the UploadType is COS_URL, fill in the URL here. If the UploadType is COS_UPLOAD, fill in the name of the backup file
     * here. Only 1 backup file is supported, but a backup file can involve multiple databases.
     */
    backupFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of imported target instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Task name.
     */
    migrationName: pulumi.Input<string>;
    /**
     * Migration task restoration type. FULL: full backup restoration, FULL_LOG: full backup and transaction log restoration,
     * FULL_DIFF: full backup and differential backup restoration.
     */
    recoveryType: pulumi.Input<string>;
    /**
     * Backup upload type. COS_URL: the backup is stored in users Cloud Object Storage, with URL provided. COS_UPLOAD: the
     * backup is stored in the applications Cloud Object Storage and needs to be uploaded by the user.
     */
    uploadType: pulumi.Input<string>;
}
