// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Api extends pulumi.CustomResource {
    /**
     * Get an existing Api resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiState, opts?: pulumi.CustomResourceOptions): Api {
        return new Api(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:ApiGateway/api:Api';

    /**
     * Returns true if the given object is an instance of Api.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Api {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Api.__pulumiType;
    }

    /**
     * When `auth_type` is OAUTH, this field is valid, NORMAL: Business API, OAUTH: Authorization API.
     */
    public readonly apiBusinessType!: pulumi.Output<string>;
    /**
     * Custom API description.
     */
    public readonly apiDesc!: pulumi.Output<string | undefined>;
    /**
     * Custom API name.
     */
    public readonly apiName!: pulumi.Output<string>;
    /**
     * API type, supports NORMAL (regular API) and TSF (microservice API), defaults to NORMAL.
     */
    public readonly apiType!: pulumi.Output<string | undefined>;
    /**
     * The unique ID of the associated authorization API takes effect when AuthType is OAUTH and ApiBusinessType is NORMAL. The
     * unique ID of the oauth2.0 authorized API that identifies the business API binding.
     */
    public readonly authRelationApiId!: pulumi.Output<string>;
    /**
     * API authentication type. Support SECRET (Key Pair Authentication), NONE (Authentication Exemption), OAUTH, APP
     * (Application Authentication). The default is NONE.
     */
    public readonly authType!: pulumi.Output<string | undefined>;
    /**
     * Constant parameter.
     */
    public readonly constantParameters!: pulumi.Output<outputs.ApiGateway.ApiConstantParameter[] | undefined>;
    /**
     * Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * EIAM application ID.
     */
    public readonly eiamAppId!: pulumi.Output<string | undefined>;
    /**
     * EIAM application type.
     */
    public readonly eiamAppType!: pulumi.Output<string | undefined>;
    /**
     * The EIAM application authentication type supports AuthenticationOnly, Authentication, and Authorization.
     */
    public readonly eiamAuthType!: pulumi.Output<string | undefined>;
    /**
     * Whether to enable CORS. Default value: `true`.
     */
    public readonly enableCors!: pulumi.Output<boolean | undefined>;
    /**
     * Event bus ID.
     */
    public readonly eventBusId!: pulumi.Output<string | undefined>;
    /**
     * Whether to enable Base64 encoding will only take effect when the backend is scf.
     */
    public readonly isBase64Encoded!: pulumi.Output<boolean>;
    /**
     * Charge after starting debugging. (Cloud Market Reserved Fields).
     */
    public readonly isDebugAfterCharge!: pulumi.Output<boolean>;
    /**
     * Do you want to delete the custom response configuration error code? If it is not passed or False is passed, it will not
     * be deleted. If True is passed, all custom response configuration error codes for this API will be deleted.
     */
    public readonly isDeleteResponseErrorCodes!: pulumi.Output<boolean>;
    /**
     * API bound microservice list.
     */
    public readonly microServices!: pulumi.Output<outputs.ApiGateway.ApiMicroService[] | undefined>;
    /**
     * OAuth configuration. Effective when AuthType is OAUTH.
     */
    public readonly oauthConfig!: pulumi.Output<outputs.ApiGateway.ApiOauthConfig | undefined>;
    /**
     * Owner of resources.
     */
    public readonly owner!: pulumi.Output<string | undefined>;
    /**
     * API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
     */
    public readonly preLimit!: pulumi.Output<number>;
    /**
     * API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
     */
    public readonly releaseLimit!: pulumi.Output<number>;
    /**
     * Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
     */
    public readonly requestConfigMethod!: pulumi.Output<string | undefined>;
    /**
     * Request frontend path configuration. Like `/user/getinfo`.
     */
    public readonly requestConfigPath!: pulumi.Output<string>;
    /**
     * Frontend request parameters.
     */
    public readonly requestParameters!: pulumi.Output<outputs.ApiGateway.ApiRequestParameter[] | undefined>;
    /**
     * Custom error code configuration. Must keep at least one after set.
     */
    public readonly responseErrorCodes!: pulumi.Output<outputs.ApiGateway.ApiResponseErrorCode[] | undefined>;
    /**
     * Response failure sample of custom response configuration.
     */
    public readonly responseFailExample!: pulumi.Output<string>;
    /**
     * Successful response sample of custom response configuration.
     */
    public readonly responseSuccessExample!: pulumi.Output<string>;
    /**
     * Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
     */
    public readonly responseType!: pulumi.Output<string>;
    /**
     * API backend COS configuration. If ServiceType is COS, then this parameter must be passed.Note: This field may return
     * null, indicating that a valid value cannot be obtained.
     */
    public readonly serviceConfigCosConfig!: pulumi.Output<outputs.ApiGateway.ApiServiceConfigCosConfig | undefined>;
    /**
     * API backend service request method, such as `GET`. If `service_config_type` is `HTTP`, this parameter will be required.
     * The frontend `request_config_method` and backend method `service_config_method` can be different.
     */
    public readonly serviceConfigMethod!: pulumi.Output<string | undefined>;
    /**
     * Returned information of API backend mocking. This parameter is required when `service_config_type` is `MOCK`.
     */
    public readonly serviceConfigMockReturnMessage!: pulumi.Output<string | undefined>;
    /**
     * API backend service path, such as /path. If `service_config_type` is `HTTP`, this parameter will be required. The
     * frontend `request_config_path` and backend path `service_config_path` can be different.
     */
    public readonly serviceConfigPath!: pulumi.Output<string | undefined>;
    /**
     * Backend type. Effective when enabling vpc, currently supported types are clb, cvm, and upstream.
     */
    public readonly serviceConfigProduct!: pulumi.Output<string | undefined>;
    /**
     * SCF function name. This parameter takes effect when `service_config_type` is `SCF`.
     */
    public readonly serviceConfigScfFunctionName!: pulumi.Output<string | undefined>;
    /**
     * SCF function namespace. This parameter takes effect when `service_config_type` is `SCF`.
     */
    public readonly serviceConfigScfFunctionNamespace!: pulumi.Output<string | undefined>;
    /**
     * SCF function version. This parameter takes effect when `service_config_type` is `SCF`.
     */
    public readonly serviceConfigScfFunctionQualifier!: pulumi.Output<string | undefined>;
    /**
     * Scf function type. Effective when the backend type is SCF. Support Event Triggering (EVENT) and HTTP Direct Cloud
     * Function (HTTP).
     */
    public readonly serviceConfigScfFunctionType!: pulumi.Output<string | undefined>;
    /**
     * Whether to enable response integration. Effective when the backend type is SCF.
     */
    public readonly serviceConfigScfIsIntegratedResponse!: pulumi.Output<boolean | undefined>;
    /**
     * API backend service timeout period in seconds. Default value: `5`.
     */
    public readonly serviceConfigTimeout!: pulumi.Output<number | undefined>;
    /**
     * The backend service type of the API. Supports HTTP, MOCK, TSF, SCF, WEBSOCKET, COS, TARGET (internal testing).
     */
    public readonly serviceConfigType!: pulumi.Output<string | undefined>;
    /**
     * Only required when binding to VPC channelsNote: This field may return null, indicating that a valid value cannot be
     * obtained.
     */
    public readonly serviceConfigUpstreamId!: pulumi.Output<string | undefined>;
    /**
     * The backend service URL of the API. If the ServiceType is HTTP, this parameter must be passed.
     */
    public readonly serviceConfigUrl!: pulumi.Output<string | undefined>;
    /**
     * Unique VPC ID.
     */
    public readonly serviceConfigVpcId!: pulumi.Output<string | undefined>;
    /**
     * Scf websocket cleaning function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
     */
    public readonly serviceConfigWebsocketCleanupFunctionName!: pulumi.Output<string | undefined>;
    /**
     * Scf websocket cleans up the function namespace. It takes effect when the current end type is WEBSOCKET and the backend
     * type is SCF.
     */
    public readonly serviceConfigWebsocketCleanupFunctionNamespace!: pulumi.Output<string | undefined>;
    /**
     * Scf websocket cleaning function version. It takes effect when the current end type is WEBSOCKET and the backend type is
     * SCF.
     */
    public readonly serviceConfigWebsocketCleanupFunctionQualifier!: pulumi.Output<string | undefined>;
    /**
     * Scf websocket registration function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
     */
    public readonly serviceConfigWebsocketRegisterFunctionName!: pulumi.Output<string | undefined>;
    /**
     * Scf websocket registers function namespaces. It takes effect when the current end type is WEBSOCKET and the backend type
     * is SCF.
     */
    public readonly serviceConfigWebsocketRegisterFunctionNamespace!: pulumi.Output<string | undefined>;
    /**
     * Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is
     * SCF.
     */
    public readonly serviceConfigWebsocketRegisterFunctionQualifier!: pulumi.Output<string | undefined>;
    /**
     * Scf websocket transfer function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
     */
    public readonly serviceConfigWebsocketTransportFunctionName!: pulumi.Output<string | undefined>;
    /**
     * Scf websocket transfer function namespace. It takes effect when the current end type is WEBSOCKET and the backend type
     * is SCF.
     */
    public readonly serviceConfigWebsocketTransportFunctionNamespace!: pulumi.Output<string | undefined>;
    /**
     * Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is
     * SCF.
     */
    public readonly serviceConfigWebsocketTransportFunctionQualifier!: pulumi.Output<string | undefined>;
    /**
     * The unique ID of the service where the API is located. Refer to resource `tencentcloud_api_gateway_service`.
     */
    public readonly serviceId!: pulumi.Output<string>;
    /**
     * The backend service parameters of the API.
     */
    public readonly serviceParameters!: pulumi.Output<outputs.ApiGateway.ApiServiceParameter[] | undefined>;
    /**
     * Health check configuration for microservices.
     */
    public readonly serviceTsfHealthCheckConf!: pulumi.Output<outputs.ApiGateway.ApiServiceTsfHealthCheckConf | undefined>;
    /**
     * Load balancing configuration for microservices.
     */
    public readonly serviceTsfLoadBalanceConf!: pulumi.Output<outputs.ApiGateway.ApiServiceTsfLoadBalanceConf | undefined>;
    /**
     * Tsf serverless namespace ID. (In internal testing).
     */
    public readonly targetNamespaceId!: pulumi.Output<string | undefined>;
    /**
     * Target type backend resource information. (Internal testing stage).
     */
    public readonly targetServices!: pulumi.Output<outputs.ApiGateway.ApiTargetService[] | undefined>;
    /**
     * Target health check configuration. (Internal testing stage).
     */
    public readonly targetServicesHealthCheckConf!: pulumi.Output<outputs.ApiGateway.ApiTargetServicesHealthCheckConf | undefined>;
    /**
     * Target type load balancing configuration. (Internal testing stage).
     */
    public readonly targetServicesLoadBalanceConf!: pulumi.Output<number | undefined>;
    /**
     * API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
     */
    public readonly testLimit!: pulumi.Output<number>;
    /**
     * The effective time of the EIAM application token, measured in seconds, defaults to 7200 seconds.
     */
    public readonly tokenTimeout!: pulumi.Output<number | undefined>;
    /**
     * Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * User type.
     */
    public readonly userType!: pulumi.Output<string | undefined>;

    /**
     * Create a Api resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiArgs | ApiState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiState | undefined;
            resourceInputs["apiBusinessType"] = state ? state.apiBusinessType : undefined;
            resourceInputs["apiDesc"] = state ? state.apiDesc : undefined;
            resourceInputs["apiName"] = state ? state.apiName : undefined;
            resourceInputs["apiType"] = state ? state.apiType : undefined;
            resourceInputs["authRelationApiId"] = state ? state.authRelationApiId : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["constantParameters"] = state ? state.constantParameters : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["eiamAppId"] = state ? state.eiamAppId : undefined;
            resourceInputs["eiamAppType"] = state ? state.eiamAppType : undefined;
            resourceInputs["eiamAuthType"] = state ? state.eiamAuthType : undefined;
            resourceInputs["enableCors"] = state ? state.enableCors : undefined;
            resourceInputs["eventBusId"] = state ? state.eventBusId : undefined;
            resourceInputs["isBase64Encoded"] = state ? state.isBase64Encoded : undefined;
            resourceInputs["isDebugAfterCharge"] = state ? state.isDebugAfterCharge : undefined;
            resourceInputs["isDeleteResponseErrorCodes"] = state ? state.isDeleteResponseErrorCodes : undefined;
            resourceInputs["microServices"] = state ? state.microServices : undefined;
            resourceInputs["oauthConfig"] = state ? state.oauthConfig : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["preLimit"] = state ? state.preLimit : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["releaseLimit"] = state ? state.releaseLimit : undefined;
            resourceInputs["requestConfigMethod"] = state ? state.requestConfigMethod : undefined;
            resourceInputs["requestConfigPath"] = state ? state.requestConfigPath : undefined;
            resourceInputs["requestParameters"] = state ? state.requestParameters : undefined;
            resourceInputs["responseErrorCodes"] = state ? state.responseErrorCodes : undefined;
            resourceInputs["responseFailExample"] = state ? state.responseFailExample : undefined;
            resourceInputs["responseSuccessExample"] = state ? state.responseSuccessExample : undefined;
            resourceInputs["responseType"] = state ? state.responseType : undefined;
            resourceInputs["serviceConfigCosConfig"] = state ? state.serviceConfigCosConfig : undefined;
            resourceInputs["serviceConfigMethod"] = state ? state.serviceConfigMethod : undefined;
            resourceInputs["serviceConfigMockReturnMessage"] = state ? state.serviceConfigMockReturnMessage : undefined;
            resourceInputs["serviceConfigPath"] = state ? state.serviceConfigPath : undefined;
            resourceInputs["serviceConfigProduct"] = state ? state.serviceConfigProduct : undefined;
            resourceInputs["serviceConfigScfFunctionName"] = state ? state.serviceConfigScfFunctionName : undefined;
            resourceInputs["serviceConfigScfFunctionNamespace"] = state ? state.serviceConfigScfFunctionNamespace : undefined;
            resourceInputs["serviceConfigScfFunctionQualifier"] = state ? state.serviceConfigScfFunctionQualifier : undefined;
            resourceInputs["serviceConfigScfFunctionType"] = state ? state.serviceConfigScfFunctionType : undefined;
            resourceInputs["serviceConfigScfIsIntegratedResponse"] = state ? state.serviceConfigScfIsIntegratedResponse : undefined;
            resourceInputs["serviceConfigTimeout"] = state ? state.serviceConfigTimeout : undefined;
            resourceInputs["serviceConfigType"] = state ? state.serviceConfigType : undefined;
            resourceInputs["serviceConfigUpstreamId"] = state ? state.serviceConfigUpstreamId : undefined;
            resourceInputs["serviceConfigUrl"] = state ? state.serviceConfigUrl : undefined;
            resourceInputs["serviceConfigVpcId"] = state ? state.serviceConfigVpcId : undefined;
            resourceInputs["serviceConfigWebsocketCleanupFunctionName"] = state ? state.serviceConfigWebsocketCleanupFunctionName : undefined;
            resourceInputs["serviceConfigWebsocketCleanupFunctionNamespace"] = state ? state.serviceConfigWebsocketCleanupFunctionNamespace : undefined;
            resourceInputs["serviceConfigWebsocketCleanupFunctionQualifier"] = state ? state.serviceConfigWebsocketCleanupFunctionQualifier : undefined;
            resourceInputs["serviceConfigWebsocketRegisterFunctionName"] = state ? state.serviceConfigWebsocketRegisterFunctionName : undefined;
            resourceInputs["serviceConfigWebsocketRegisterFunctionNamespace"] = state ? state.serviceConfigWebsocketRegisterFunctionNamespace : undefined;
            resourceInputs["serviceConfigWebsocketRegisterFunctionQualifier"] = state ? state.serviceConfigWebsocketRegisterFunctionQualifier : undefined;
            resourceInputs["serviceConfigWebsocketTransportFunctionName"] = state ? state.serviceConfigWebsocketTransportFunctionName : undefined;
            resourceInputs["serviceConfigWebsocketTransportFunctionNamespace"] = state ? state.serviceConfigWebsocketTransportFunctionNamespace : undefined;
            resourceInputs["serviceConfigWebsocketTransportFunctionQualifier"] = state ? state.serviceConfigWebsocketTransportFunctionQualifier : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["serviceParameters"] = state ? state.serviceParameters : undefined;
            resourceInputs["serviceTsfHealthCheckConf"] = state ? state.serviceTsfHealthCheckConf : undefined;
            resourceInputs["serviceTsfLoadBalanceConf"] = state ? state.serviceTsfLoadBalanceConf : undefined;
            resourceInputs["targetNamespaceId"] = state ? state.targetNamespaceId : undefined;
            resourceInputs["targetServices"] = state ? state.targetServices : undefined;
            resourceInputs["targetServicesHealthCheckConf"] = state ? state.targetServicesHealthCheckConf : undefined;
            resourceInputs["targetServicesLoadBalanceConf"] = state ? state.targetServicesLoadBalanceConf : undefined;
            resourceInputs["testLimit"] = state ? state.testLimit : undefined;
            resourceInputs["tokenTimeout"] = state ? state.tokenTimeout : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["userType"] = state ? state.userType : undefined;
        } else {
            const args = argsOrState as ApiArgs | undefined;
            if ((!args || args.apiName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiName'");
            }
            if ((!args || args.requestConfigPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'requestConfigPath'");
            }
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            resourceInputs["apiBusinessType"] = args ? args.apiBusinessType : undefined;
            resourceInputs["apiDesc"] = args ? args.apiDesc : undefined;
            resourceInputs["apiName"] = args ? args.apiName : undefined;
            resourceInputs["apiType"] = args ? args.apiType : undefined;
            resourceInputs["authRelationApiId"] = args ? args.authRelationApiId : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["constantParameters"] = args ? args.constantParameters : undefined;
            resourceInputs["eiamAppId"] = args ? args.eiamAppId : undefined;
            resourceInputs["eiamAppType"] = args ? args.eiamAppType : undefined;
            resourceInputs["eiamAuthType"] = args ? args.eiamAuthType : undefined;
            resourceInputs["enableCors"] = args ? args.enableCors : undefined;
            resourceInputs["eventBusId"] = args ? args.eventBusId : undefined;
            resourceInputs["isBase64Encoded"] = args ? args.isBase64Encoded : undefined;
            resourceInputs["isDebugAfterCharge"] = args ? args.isDebugAfterCharge : undefined;
            resourceInputs["isDeleteResponseErrorCodes"] = args ? args.isDeleteResponseErrorCodes : undefined;
            resourceInputs["microServices"] = args ? args.microServices : undefined;
            resourceInputs["oauthConfig"] = args ? args.oauthConfig : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["preLimit"] = args ? args.preLimit : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["releaseLimit"] = args ? args.releaseLimit : undefined;
            resourceInputs["requestConfigMethod"] = args ? args.requestConfigMethod : undefined;
            resourceInputs["requestConfigPath"] = args ? args.requestConfigPath : undefined;
            resourceInputs["requestParameters"] = args ? args.requestParameters : undefined;
            resourceInputs["responseErrorCodes"] = args ? args.responseErrorCodes : undefined;
            resourceInputs["responseFailExample"] = args ? args.responseFailExample : undefined;
            resourceInputs["responseSuccessExample"] = args ? args.responseSuccessExample : undefined;
            resourceInputs["responseType"] = args ? args.responseType : undefined;
            resourceInputs["serviceConfigCosConfig"] = args ? args.serviceConfigCosConfig : undefined;
            resourceInputs["serviceConfigMethod"] = args ? args.serviceConfigMethod : undefined;
            resourceInputs["serviceConfigMockReturnMessage"] = args ? args.serviceConfigMockReturnMessage : undefined;
            resourceInputs["serviceConfigPath"] = args ? args.serviceConfigPath : undefined;
            resourceInputs["serviceConfigProduct"] = args ? args.serviceConfigProduct : undefined;
            resourceInputs["serviceConfigScfFunctionName"] = args ? args.serviceConfigScfFunctionName : undefined;
            resourceInputs["serviceConfigScfFunctionNamespace"] = args ? args.serviceConfigScfFunctionNamespace : undefined;
            resourceInputs["serviceConfigScfFunctionQualifier"] = args ? args.serviceConfigScfFunctionQualifier : undefined;
            resourceInputs["serviceConfigScfFunctionType"] = args ? args.serviceConfigScfFunctionType : undefined;
            resourceInputs["serviceConfigScfIsIntegratedResponse"] = args ? args.serviceConfigScfIsIntegratedResponse : undefined;
            resourceInputs["serviceConfigTimeout"] = args ? args.serviceConfigTimeout : undefined;
            resourceInputs["serviceConfigType"] = args ? args.serviceConfigType : undefined;
            resourceInputs["serviceConfigUpstreamId"] = args ? args.serviceConfigUpstreamId : undefined;
            resourceInputs["serviceConfigUrl"] = args ? args.serviceConfigUrl : undefined;
            resourceInputs["serviceConfigVpcId"] = args ? args.serviceConfigVpcId : undefined;
            resourceInputs["serviceConfigWebsocketCleanupFunctionName"] = args ? args.serviceConfigWebsocketCleanupFunctionName : undefined;
            resourceInputs["serviceConfigWebsocketCleanupFunctionNamespace"] = args ? args.serviceConfigWebsocketCleanupFunctionNamespace : undefined;
            resourceInputs["serviceConfigWebsocketCleanupFunctionQualifier"] = args ? args.serviceConfigWebsocketCleanupFunctionQualifier : undefined;
            resourceInputs["serviceConfigWebsocketRegisterFunctionName"] = args ? args.serviceConfigWebsocketRegisterFunctionName : undefined;
            resourceInputs["serviceConfigWebsocketRegisterFunctionNamespace"] = args ? args.serviceConfigWebsocketRegisterFunctionNamespace : undefined;
            resourceInputs["serviceConfigWebsocketRegisterFunctionQualifier"] = args ? args.serviceConfigWebsocketRegisterFunctionQualifier : undefined;
            resourceInputs["serviceConfigWebsocketTransportFunctionName"] = args ? args.serviceConfigWebsocketTransportFunctionName : undefined;
            resourceInputs["serviceConfigWebsocketTransportFunctionNamespace"] = args ? args.serviceConfigWebsocketTransportFunctionNamespace : undefined;
            resourceInputs["serviceConfigWebsocketTransportFunctionQualifier"] = args ? args.serviceConfigWebsocketTransportFunctionQualifier : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["serviceParameters"] = args ? args.serviceParameters : undefined;
            resourceInputs["serviceTsfHealthCheckConf"] = args ? args.serviceTsfHealthCheckConf : undefined;
            resourceInputs["serviceTsfLoadBalanceConf"] = args ? args.serviceTsfLoadBalanceConf : undefined;
            resourceInputs["targetNamespaceId"] = args ? args.targetNamespaceId : undefined;
            resourceInputs["targetServices"] = args ? args.targetServices : undefined;
            resourceInputs["targetServicesHealthCheckConf"] = args ? args.targetServicesHealthCheckConf : undefined;
            resourceInputs["targetServicesLoadBalanceConf"] = args ? args.targetServicesLoadBalanceConf : undefined;
            resourceInputs["testLimit"] = args ? args.testLimit : undefined;
            resourceInputs["tokenTimeout"] = args ? args.tokenTimeout : undefined;
            resourceInputs["userType"] = args ? args.userType : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Api.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Api resources.
 */
export interface ApiState {
    /**
     * When `auth_type` is OAUTH, this field is valid, NORMAL: Business API, OAUTH: Authorization API.
     */
    apiBusinessType?: pulumi.Input<string>;
    /**
     * Custom API description.
     */
    apiDesc?: pulumi.Input<string>;
    /**
     * Custom API name.
     */
    apiName?: pulumi.Input<string>;
    /**
     * API type, supports NORMAL (regular API) and TSF (microservice API), defaults to NORMAL.
     */
    apiType?: pulumi.Input<string>;
    /**
     * The unique ID of the associated authorization API takes effect when AuthType is OAUTH and ApiBusinessType is NORMAL. The
     * unique ID of the oauth2.0 authorized API that identifies the business API binding.
     */
    authRelationApiId?: pulumi.Input<string>;
    /**
     * API authentication type. Support SECRET (Key Pair Authentication), NONE (Authentication Exemption), OAUTH, APP
     * (Application Authentication). The default is NONE.
     */
    authType?: pulumi.Input<string>;
    /**
     * Constant parameter.
     */
    constantParameters?: pulumi.Input<pulumi.Input<inputs.ApiGateway.ApiConstantParameter>[]>;
    /**
     * Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
     */
    createTime?: pulumi.Input<string>;
    /**
     * EIAM application ID.
     */
    eiamAppId?: pulumi.Input<string>;
    /**
     * EIAM application type.
     */
    eiamAppType?: pulumi.Input<string>;
    /**
     * The EIAM application authentication type supports AuthenticationOnly, Authentication, and Authorization.
     */
    eiamAuthType?: pulumi.Input<string>;
    /**
     * Whether to enable CORS. Default value: `true`.
     */
    enableCors?: pulumi.Input<boolean>;
    /**
     * Event bus ID.
     */
    eventBusId?: pulumi.Input<string>;
    /**
     * Whether to enable Base64 encoding will only take effect when the backend is scf.
     */
    isBase64Encoded?: pulumi.Input<boolean>;
    /**
     * Charge after starting debugging. (Cloud Market Reserved Fields).
     */
    isDebugAfterCharge?: pulumi.Input<boolean>;
    /**
     * Do you want to delete the custom response configuration error code? If it is not passed or False is passed, it will not
     * be deleted. If True is passed, all custom response configuration error codes for this API will be deleted.
     */
    isDeleteResponseErrorCodes?: pulumi.Input<boolean>;
    /**
     * API bound microservice list.
     */
    microServices?: pulumi.Input<pulumi.Input<inputs.ApiGateway.ApiMicroService>[]>;
    /**
     * OAuth configuration. Effective when AuthType is OAUTH.
     */
    oauthConfig?: pulumi.Input<inputs.ApiGateway.ApiOauthConfig>;
    /**
     * Owner of resources.
     */
    owner?: pulumi.Input<string>;
    /**
     * API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
     */
    preLimit?: pulumi.Input<number>;
    /**
     * API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
     */
    releaseLimit?: pulumi.Input<number>;
    /**
     * Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
     */
    requestConfigMethod?: pulumi.Input<string>;
    /**
     * Request frontend path configuration. Like `/user/getinfo`.
     */
    requestConfigPath?: pulumi.Input<string>;
    /**
     * Frontend request parameters.
     */
    requestParameters?: pulumi.Input<pulumi.Input<inputs.ApiGateway.ApiRequestParameter>[]>;
    /**
     * Custom error code configuration. Must keep at least one after set.
     */
    responseErrorCodes?: pulumi.Input<pulumi.Input<inputs.ApiGateway.ApiResponseErrorCode>[]>;
    /**
     * Response failure sample of custom response configuration.
     */
    responseFailExample?: pulumi.Input<string>;
    /**
     * Successful response sample of custom response configuration.
     */
    responseSuccessExample?: pulumi.Input<string>;
    /**
     * Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
     */
    responseType?: pulumi.Input<string>;
    /**
     * API backend COS configuration. If ServiceType is COS, then this parameter must be passed.Note: This field may return
     * null, indicating that a valid value cannot be obtained.
     */
    serviceConfigCosConfig?: pulumi.Input<inputs.ApiGateway.ApiServiceConfigCosConfig>;
    /**
     * API backend service request method, such as `GET`. If `service_config_type` is `HTTP`, this parameter will be required.
     * The frontend `request_config_method` and backend method `service_config_method` can be different.
     */
    serviceConfigMethod?: pulumi.Input<string>;
    /**
     * Returned information of API backend mocking. This parameter is required when `service_config_type` is `MOCK`.
     */
    serviceConfigMockReturnMessage?: pulumi.Input<string>;
    /**
     * API backend service path, such as /path. If `service_config_type` is `HTTP`, this parameter will be required. The
     * frontend `request_config_path` and backend path `service_config_path` can be different.
     */
    serviceConfigPath?: pulumi.Input<string>;
    /**
     * Backend type. Effective when enabling vpc, currently supported types are clb, cvm, and upstream.
     */
    serviceConfigProduct?: pulumi.Input<string>;
    /**
     * SCF function name. This parameter takes effect when `service_config_type` is `SCF`.
     */
    serviceConfigScfFunctionName?: pulumi.Input<string>;
    /**
     * SCF function namespace. This parameter takes effect when `service_config_type` is `SCF`.
     */
    serviceConfigScfFunctionNamespace?: pulumi.Input<string>;
    /**
     * SCF function version. This parameter takes effect when `service_config_type` is `SCF`.
     */
    serviceConfigScfFunctionQualifier?: pulumi.Input<string>;
    /**
     * Scf function type. Effective when the backend type is SCF. Support Event Triggering (EVENT) and HTTP Direct Cloud
     * Function (HTTP).
     */
    serviceConfigScfFunctionType?: pulumi.Input<string>;
    /**
     * Whether to enable response integration. Effective when the backend type is SCF.
     */
    serviceConfigScfIsIntegratedResponse?: pulumi.Input<boolean>;
    /**
     * API backend service timeout period in seconds. Default value: `5`.
     */
    serviceConfigTimeout?: pulumi.Input<number>;
    /**
     * The backend service type of the API. Supports HTTP, MOCK, TSF, SCF, WEBSOCKET, COS, TARGET (internal testing).
     */
    serviceConfigType?: pulumi.Input<string>;
    /**
     * Only required when binding to VPC channelsNote: This field may return null, indicating that a valid value cannot be
     * obtained.
     */
    serviceConfigUpstreamId?: pulumi.Input<string>;
    /**
     * The backend service URL of the API. If the ServiceType is HTTP, this parameter must be passed.
     */
    serviceConfigUrl?: pulumi.Input<string>;
    /**
     * Unique VPC ID.
     */
    serviceConfigVpcId?: pulumi.Input<string>;
    /**
     * Scf websocket cleaning function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
     */
    serviceConfigWebsocketCleanupFunctionName?: pulumi.Input<string>;
    /**
     * Scf websocket cleans up the function namespace. It takes effect when the current end type is WEBSOCKET and the backend
     * type is SCF.
     */
    serviceConfigWebsocketCleanupFunctionNamespace?: pulumi.Input<string>;
    /**
     * Scf websocket cleaning function version. It takes effect when the current end type is WEBSOCKET and the backend type is
     * SCF.
     */
    serviceConfigWebsocketCleanupFunctionQualifier?: pulumi.Input<string>;
    /**
     * Scf websocket registration function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
     */
    serviceConfigWebsocketRegisterFunctionName?: pulumi.Input<string>;
    /**
     * Scf websocket registers function namespaces. It takes effect when the current end type is WEBSOCKET and the backend type
     * is SCF.
     */
    serviceConfigWebsocketRegisterFunctionNamespace?: pulumi.Input<string>;
    /**
     * Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is
     * SCF.
     */
    serviceConfigWebsocketRegisterFunctionQualifier?: pulumi.Input<string>;
    /**
     * Scf websocket transfer function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
     */
    serviceConfigWebsocketTransportFunctionName?: pulumi.Input<string>;
    /**
     * Scf websocket transfer function namespace. It takes effect when the current end type is WEBSOCKET and the backend type
     * is SCF.
     */
    serviceConfigWebsocketTransportFunctionNamespace?: pulumi.Input<string>;
    /**
     * Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is
     * SCF.
     */
    serviceConfigWebsocketTransportFunctionQualifier?: pulumi.Input<string>;
    /**
     * The unique ID of the service where the API is located. Refer to resource `tencentcloud_api_gateway_service`.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * The backend service parameters of the API.
     */
    serviceParameters?: pulumi.Input<pulumi.Input<inputs.ApiGateway.ApiServiceParameter>[]>;
    /**
     * Health check configuration for microservices.
     */
    serviceTsfHealthCheckConf?: pulumi.Input<inputs.ApiGateway.ApiServiceTsfHealthCheckConf>;
    /**
     * Load balancing configuration for microservices.
     */
    serviceTsfLoadBalanceConf?: pulumi.Input<inputs.ApiGateway.ApiServiceTsfLoadBalanceConf>;
    /**
     * Tsf serverless namespace ID. (In internal testing).
     */
    targetNamespaceId?: pulumi.Input<string>;
    /**
     * Target type backend resource information. (Internal testing stage).
     */
    targetServices?: pulumi.Input<pulumi.Input<inputs.ApiGateway.ApiTargetService>[]>;
    /**
     * Target health check configuration. (Internal testing stage).
     */
    targetServicesHealthCheckConf?: pulumi.Input<inputs.ApiGateway.ApiTargetServicesHealthCheckConf>;
    /**
     * Target type load balancing configuration. (Internal testing stage).
     */
    targetServicesLoadBalanceConf?: pulumi.Input<number>;
    /**
     * API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
     */
    testLimit?: pulumi.Input<number>;
    /**
     * The effective time of the EIAM application token, measured in seconds, defaults to 7200 seconds.
     */
    tokenTimeout?: pulumi.Input<number>;
    /**
     * Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * User type.
     */
    userType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Api resource.
 */
export interface ApiArgs {
    /**
     * When `auth_type` is OAUTH, this field is valid, NORMAL: Business API, OAUTH: Authorization API.
     */
    apiBusinessType?: pulumi.Input<string>;
    /**
     * Custom API description.
     */
    apiDesc?: pulumi.Input<string>;
    /**
     * Custom API name.
     */
    apiName: pulumi.Input<string>;
    /**
     * API type, supports NORMAL (regular API) and TSF (microservice API), defaults to NORMAL.
     */
    apiType?: pulumi.Input<string>;
    /**
     * The unique ID of the associated authorization API takes effect when AuthType is OAUTH and ApiBusinessType is NORMAL. The
     * unique ID of the oauth2.0 authorized API that identifies the business API binding.
     */
    authRelationApiId?: pulumi.Input<string>;
    /**
     * API authentication type. Support SECRET (Key Pair Authentication), NONE (Authentication Exemption), OAUTH, APP
     * (Application Authentication). The default is NONE.
     */
    authType?: pulumi.Input<string>;
    /**
     * Constant parameter.
     */
    constantParameters?: pulumi.Input<pulumi.Input<inputs.ApiGateway.ApiConstantParameter>[]>;
    /**
     * EIAM application ID.
     */
    eiamAppId?: pulumi.Input<string>;
    /**
     * EIAM application type.
     */
    eiamAppType?: pulumi.Input<string>;
    /**
     * The EIAM application authentication type supports AuthenticationOnly, Authentication, and Authorization.
     */
    eiamAuthType?: pulumi.Input<string>;
    /**
     * Whether to enable CORS. Default value: `true`.
     */
    enableCors?: pulumi.Input<boolean>;
    /**
     * Event bus ID.
     */
    eventBusId?: pulumi.Input<string>;
    /**
     * Whether to enable Base64 encoding will only take effect when the backend is scf.
     */
    isBase64Encoded?: pulumi.Input<boolean>;
    /**
     * Charge after starting debugging. (Cloud Market Reserved Fields).
     */
    isDebugAfterCharge?: pulumi.Input<boolean>;
    /**
     * Do you want to delete the custom response configuration error code? If it is not passed or False is passed, it will not
     * be deleted. If True is passed, all custom response configuration error codes for this API will be deleted.
     */
    isDeleteResponseErrorCodes?: pulumi.Input<boolean>;
    /**
     * API bound microservice list.
     */
    microServices?: pulumi.Input<pulumi.Input<inputs.ApiGateway.ApiMicroService>[]>;
    /**
     * OAuth configuration. Effective when AuthType is OAUTH.
     */
    oauthConfig?: pulumi.Input<inputs.ApiGateway.ApiOauthConfig>;
    /**
     * Owner of resources.
     */
    owner?: pulumi.Input<string>;
    /**
     * API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
     */
    preLimit?: pulumi.Input<number>;
    /**
     * API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
     */
    releaseLimit?: pulumi.Input<number>;
    /**
     * Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
     */
    requestConfigMethod?: pulumi.Input<string>;
    /**
     * Request frontend path configuration. Like `/user/getinfo`.
     */
    requestConfigPath: pulumi.Input<string>;
    /**
     * Frontend request parameters.
     */
    requestParameters?: pulumi.Input<pulumi.Input<inputs.ApiGateway.ApiRequestParameter>[]>;
    /**
     * Custom error code configuration. Must keep at least one after set.
     */
    responseErrorCodes?: pulumi.Input<pulumi.Input<inputs.ApiGateway.ApiResponseErrorCode>[]>;
    /**
     * Response failure sample of custom response configuration.
     */
    responseFailExample?: pulumi.Input<string>;
    /**
     * Successful response sample of custom response configuration.
     */
    responseSuccessExample?: pulumi.Input<string>;
    /**
     * Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
     */
    responseType?: pulumi.Input<string>;
    /**
     * API backend COS configuration. If ServiceType is COS, then this parameter must be passed.Note: This field may return
     * null, indicating that a valid value cannot be obtained.
     */
    serviceConfigCosConfig?: pulumi.Input<inputs.ApiGateway.ApiServiceConfigCosConfig>;
    /**
     * API backend service request method, such as `GET`. If `service_config_type` is `HTTP`, this parameter will be required.
     * The frontend `request_config_method` and backend method `service_config_method` can be different.
     */
    serviceConfigMethod?: pulumi.Input<string>;
    /**
     * Returned information of API backend mocking. This parameter is required when `service_config_type` is `MOCK`.
     */
    serviceConfigMockReturnMessage?: pulumi.Input<string>;
    /**
     * API backend service path, such as /path. If `service_config_type` is `HTTP`, this parameter will be required. The
     * frontend `request_config_path` and backend path `service_config_path` can be different.
     */
    serviceConfigPath?: pulumi.Input<string>;
    /**
     * Backend type. Effective when enabling vpc, currently supported types are clb, cvm, and upstream.
     */
    serviceConfigProduct?: pulumi.Input<string>;
    /**
     * SCF function name. This parameter takes effect when `service_config_type` is `SCF`.
     */
    serviceConfigScfFunctionName?: pulumi.Input<string>;
    /**
     * SCF function namespace. This parameter takes effect when `service_config_type` is `SCF`.
     */
    serviceConfigScfFunctionNamespace?: pulumi.Input<string>;
    /**
     * SCF function version. This parameter takes effect when `service_config_type` is `SCF`.
     */
    serviceConfigScfFunctionQualifier?: pulumi.Input<string>;
    /**
     * Scf function type. Effective when the backend type is SCF. Support Event Triggering (EVENT) and HTTP Direct Cloud
     * Function (HTTP).
     */
    serviceConfigScfFunctionType?: pulumi.Input<string>;
    /**
     * Whether to enable response integration. Effective when the backend type is SCF.
     */
    serviceConfigScfIsIntegratedResponse?: pulumi.Input<boolean>;
    /**
     * API backend service timeout period in seconds. Default value: `5`.
     */
    serviceConfigTimeout?: pulumi.Input<number>;
    /**
     * The backend service type of the API. Supports HTTP, MOCK, TSF, SCF, WEBSOCKET, COS, TARGET (internal testing).
     */
    serviceConfigType?: pulumi.Input<string>;
    /**
     * Only required when binding to VPC channelsNote: This field may return null, indicating that a valid value cannot be
     * obtained.
     */
    serviceConfigUpstreamId?: pulumi.Input<string>;
    /**
     * The backend service URL of the API. If the ServiceType is HTTP, this parameter must be passed.
     */
    serviceConfigUrl?: pulumi.Input<string>;
    /**
     * Unique VPC ID.
     */
    serviceConfigVpcId?: pulumi.Input<string>;
    /**
     * Scf websocket cleaning function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
     */
    serviceConfigWebsocketCleanupFunctionName?: pulumi.Input<string>;
    /**
     * Scf websocket cleans up the function namespace. It takes effect when the current end type is WEBSOCKET and the backend
     * type is SCF.
     */
    serviceConfigWebsocketCleanupFunctionNamespace?: pulumi.Input<string>;
    /**
     * Scf websocket cleaning function version. It takes effect when the current end type is WEBSOCKET and the backend type is
     * SCF.
     */
    serviceConfigWebsocketCleanupFunctionQualifier?: pulumi.Input<string>;
    /**
     * Scf websocket registration function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
     */
    serviceConfigWebsocketRegisterFunctionName?: pulumi.Input<string>;
    /**
     * Scf websocket registers function namespaces. It takes effect when the current end type is WEBSOCKET and the backend type
     * is SCF.
     */
    serviceConfigWebsocketRegisterFunctionNamespace?: pulumi.Input<string>;
    /**
     * Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is
     * SCF.
     */
    serviceConfigWebsocketRegisterFunctionQualifier?: pulumi.Input<string>;
    /**
     * Scf websocket transfer function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
     */
    serviceConfigWebsocketTransportFunctionName?: pulumi.Input<string>;
    /**
     * Scf websocket transfer function namespace. It takes effect when the current end type is WEBSOCKET and the backend type
     * is SCF.
     */
    serviceConfigWebsocketTransportFunctionNamespace?: pulumi.Input<string>;
    /**
     * Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is
     * SCF.
     */
    serviceConfigWebsocketTransportFunctionQualifier?: pulumi.Input<string>;
    /**
     * The unique ID of the service where the API is located. Refer to resource `tencentcloud_api_gateway_service`.
     */
    serviceId: pulumi.Input<string>;
    /**
     * The backend service parameters of the API.
     */
    serviceParameters?: pulumi.Input<pulumi.Input<inputs.ApiGateway.ApiServiceParameter>[]>;
    /**
     * Health check configuration for microservices.
     */
    serviceTsfHealthCheckConf?: pulumi.Input<inputs.ApiGateway.ApiServiceTsfHealthCheckConf>;
    /**
     * Load balancing configuration for microservices.
     */
    serviceTsfLoadBalanceConf?: pulumi.Input<inputs.ApiGateway.ApiServiceTsfLoadBalanceConf>;
    /**
     * Tsf serverless namespace ID. (In internal testing).
     */
    targetNamespaceId?: pulumi.Input<string>;
    /**
     * Target type backend resource information. (Internal testing stage).
     */
    targetServices?: pulumi.Input<pulumi.Input<inputs.ApiGateway.ApiTargetService>[]>;
    /**
     * Target health check configuration. (Internal testing stage).
     */
    targetServicesHealthCheckConf?: pulumi.Input<inputs.ApiGateway.ApiTargetServicesHealthCheckConf>;
    /**
     * Target type load balancing configuration. (Internal testing stage).
     */
    targetServicesLoadBalanceConf?: pulumi.Input<number>;
    /**
     * API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
     */
    testLimit?: pulumi.Input<number>;
    /**
     * The effective time of the EIAM application token, measured in seconds, defaults to 7200 seconds.
     */
    tokenTimeout?: pulumi.Input<number>;
    /**
     * User type.
     */
    userType?: pulumi.Input<string>;
}
