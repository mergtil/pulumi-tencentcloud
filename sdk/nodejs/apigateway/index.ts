// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApiArgs, ApiState } from "./api";
export type Api = import("./api").Api;
export const Api: typeof import("./api").Api = null as any;
utilities.lazyLoad(exports, ["Api"], () => require("./api"));

export { ApiAppArgs, ApiAppState } from "./apiApp";
export type ApiApp = import("./apiApp").ApiApp;
export const ApiApp: typeof import("./apiApp").ApiApp = null as any;
utilities.lazyLoad(exports, ["ApiApp"], () => require("./apiApp"));

export { ApiAppAttachmentArgs, ApiAppAttachmentState } from "./apiAppAttachment";
export type ApiAppAttachment = import("./apiAppAttachment").ApiAppAttachment;
export const ApiAppAttachment: typeof import("./apiAppAttachment").ApiAppAttachment = null as any;
utilities.lazyLoad(exports, ["ApiAppAttachment"], () => require("./apiAppAttachment"));

export { ApiDocArgs, ApiDocState } from "./apiDoc";
export type ApiDoc = import("./apiDoc").ApiDoc;
export const ApiDoc: typeof import("./apiDoc").ApiDoc = null as any;
utilities.lazyLoad(exports, ["ApiDoc"], () => require("./apiDoc"));

export { ApiKeyArgs, ApiKeyState } from "./apiKey";
export type ApiKey = import("./apiKey").ApiKey;
export const ApiKey: typeof import("./apiKey").ApiKey = null as any;
utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));

export { ApiKeyAttachmentArgs, ApiKeyAttachmentState } from "./apiKeyAttachment";
export type ApiKeyAttachment = import("./apiKeyAttachment").ApiKeyAttachment;
export const ApiKeyAttachment: typeof import("./apiKeyAttachment").ApiKeyAttachment = null as any;
utilities.lazyLoad(exports, ["ApiKeyAttachment"], () => require("./apiKeyAttachment"));

export { CustomDomainArgs, CustomDomainState } from "./customDomain";
export type CustomDomain = import("./customDomain").CustomDomain;
export const CustomDomain: typeof import("./customDomain").CustomDomain = null as any;
utilities.lazyLoad(exports, ["CustomDomain"], () => require("./customDomain"));

export { GetApiAppServiceArgs, GetApiAppServiceResult, GetApiAppServiceOutputArgs } from "./getApiAppService";
export const getApiAppService: typeof import("./getApiAppService").getApiAppService = null as any;
export const getApiAppServiceOutput: typeof import("./getApiAppService").getApiAppServiceOutput = null as any;
utilities.lazyLoad(exports, ["getApiAppService","getApiAppServiceOutput"], () => require("./getApiAppService"));

export { GetApiAppsArgs, GetApiAppsResult, GetApiAppsOutputArgs } from "./getApiApps";
export const getApiApps: typeof import("./getApiApps").getApiApps = null as any;
export const getApiAppsOutput: typeof import("./getApiApps").getApiAppsOutput = null as any;
utilities.lazyLoad(exports, ["getApiApps","getApiAppsOutput"], () => require("./getApiApps"));

export { GetApiDocsArgs, GetApiDocsResult, GetApiDocsOutputArgs } from "./getApiDocs";
export const getApiDocs: typeof import("./getApiDocs").getApiDocs = null as any;
export const getApiDocsOutput: typeof import("./getApiDocs").getApiDocsOutput = null as any;
utilities.lazyLoad(exports, ["getApiDocs","getApiDocsOutput"], () => require("./getApiDocs"));

export { GetApiKeysArgs, GetApiKeysResult, GetApiKeysOutputArgs } from "./getApiKeys";
export const getApiKeys: typeof import("./getApiKeys").getApiKeys = null as any;
export const getApiKeysOutput: typeof import("./getApiKeys").getApiKeysOutput = null as any;
utilities.lazyLoad(exports, ["getApiKeys","getApiKeysOutput"], () => require("./getApiKeys"));

export { GetApiUsagePlansArgs, GetApiUsagePlansResult, GetApiUsagePlansOutputArgs } from "./getApiUsagePlans";
export const getApiUsagePlans: typeof import("./getApiUsagePlans").getApiUsagePlans = null as any;
export const getApiUsagePlansOutput: typeof import("./getApiUsagePlans").getApiUsagePlansOutput = null as any;
utilities.lazyLoad(exports, ["getApiUsagePlans","getApiUsagePlansOutput"], () => require("./getApiUsagePlans"));

export { GetApisArgs, GetApisResult, GetApisOutputArgs } from "./getApis";
export const getApis: typeof import("./getApis").getApis = null as any;
export const getApisOutput: typeof import("./getApis").getApisOutput = null as any;
utilities.lazyLoad(exports, ["getApis","getApisOutput"], () => require("./getApis"));

export { GetCustomerDomainsArgs, GetCustomerDomainsResult, GetCustomerDomainsOutputArgs } from "./getCustomerDomains";
export const getCustomerDomains: typeof import("./getCustomerDomains").getCustomerDomains = null as any;
export const getCustomerDomainsOutput: typeof import("./getCustomerDomains").getCustomerDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getCustomerDomains","getCustomerDomainsOutput"], () => require("./getCustomerDomains"));

export { GetIpStrategiesArgs, GetIpStrategiesResult, GetIpStrategiesOutputArgs } from "./getIpStrategies";
export const getIpStrategies: typeof import("./getIpStrategies").getIpStrategies = null as any;
export const getIpStrategiesOutput: typeof import("./getIpStrategies").getIpStrategiesOutput = null as any;
utilities.lazyLoad(exports, ["getIpStrategies","getIpStrategiesOutput"], () => require("./getIpStrategies"));

export { GetPluginsArgs, GetPluginsResult, GetPluginsOutputArgs } from "./getPlugins";
export const getPlugins: typeof import("./getPlugins").getPlugins = null as any;
export const getPluginsOutput: typeof import("./getPlugins").getPluginsOutput = null as any;
utilities.lazyLoad(exports, ["getPlugins","getPluginsOutput"], () => require("./getPlugins"));

export { GetServicesArgs, GetServicesResult, GetServicesOutputArgs } from "./getServices";
export const getServices: typeof import("./getServices").getServices = null as any;
export const getServicesOutput: typeof import("./getServices").getServicesOutput = null as any;
utilities.lazyLoad(exports, ["getServices","getServicesOutput"], () => require("./getServices"));

export { GetThrottlingApisArgs, GetThrottlingApisResult, GetThrottlingApisOutputArgs } from "./getThrottlingApis";
export const getThrottlingApis: typeof import("./getThrottlingApis").getThrottlingApis = null as any;
export const getThrottlingApisOutput: typeof import("./getThrottlingApis").getThrottlingApisOutput = null as any;
utilities.lazyLoad(exports, ["getThrottlingApis","getThrottlingApisOutput"], () => require("./getThrottlingApis"));

export { GetThrottlingServicesArgs, GetThrottlingServicesResult, GetThrottlingServicesOutputArgs } from "./getThrottlingServices";
export const getThrottlingServices: typeof import("./getThrottlingServices").getThrottlingServices = null as any;
export const getThrottlingServicesOutput: typeof import("./getThrottlingServices").getThrottlingServicesOutput = null as any;
utilities.lazyLoad(exports, ["getThrottlingServices","getThrottlingServicesOutput"], () => require("./getThrottlingServices"));

export { GetUpstreamsArgs, GetUpstreamsResult, GetUpstreamsOutputArgs } from "./getUpstreams";
export const getUpstreams: typeof import("./getUpstreams").getUpstreams = null as any;
export const getUpstreamsOutput: typeof import("./getUpstreams").getUpstreamsOutput = null as any;
utilities.lazyLoad(exports, ["getUpstreams","getUpstreamsOutput"], () => require("./getUpstreams"));

export { GetUsagePlanEnvironmentsArgs, GetUsagePlanEnvironmentsResult, GetUsagePlanEnvironmentsOutputArgs } from "./getUsagePlanEnvironments";
export const getUsagePlanEnvironments: typeof import("./getUsagePlanEnvironments").getUsagePlanEnvironments = null as any;
export const getUsagePlanEnvironmentsOutput: typeof import("./getUsagePlanEnvironments").getUsagePlanEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getUsagePlanEnvironments","getUsagePlanEnvironmentsOutput"], () => require("./getUsagePlanEnvironments"));

export { GetUsagePlansArgs, GetUsagePlansResult, GetUsagePlansOutputArgs } from "./getUsagePlans";
export const getUsagePlans: typeof import("./getUsagePlans").getUsagePlans = null as any;
export const getUsagePlansOutput: typeof import("./getUsagePlans").getUsagePlansOutput = null as any;
utilities.lazyLoad(exports, ["getUsagePlans","getUsagePlansOutput"], () => require("./getUsagePlans"));

export { IpStrategyArgs, IpStrategyState } from "./ipStrategy";
export type IpStrategy = import("./ipStrategy").IpStrategy;
export const IpStrategy: typeof import("./ipStrategy").IpStrategy = null as any;
utilities.lazyLoad(exports, ["IpStrategy"], () => require("./ipStrategy"));

export { PluginArgs, PluginState } from "./plugin";
export type Plugin = import("./plugin").Plugin;
export const Plugin: typeof import("./plugin").Plugin = null as any;
utilities.lazyLoad(exports, ["Plugin"], () => require("./plugin"));

export { PluginAttachmentArgs, PluginAttachmentState } from "./pluginAttachment";
export type PluginAttachment = import("./pluginAttachment").PluginAttachment;
export const PluginAttachment: typeof import("./pluginAttachment").PluginAttachment = null as any;
utilities.lazyLoad(exports, ["PluginAttachment"], () => require("./pluginAttachment"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { ServiceReleaseArgs, ServiceReleaseState } from "./serviceRelease";
export type ServiceRelease = import("./serviceRelease").ServiceRelease;
export const ServiceRelease: typeof import("./serviceRelease").ServiceRelease = null as any;
utilities.lazyLoad(exports, ["ServiceRelease"], () => require("./serviceRelease"));

export { StrategyAttachmentArgs, StrategyAttachmentState } from "./strategyAttachment";
export type StrategyAttachment = import("./strategyAttachment").StrategyAttachment;
export const StrategyAttachment: typeof import("./strategyAttachment").StrategyAttachment = null as any;
utilities.lazyLoad(exports, ["StrategyAttachment"], () => require("./strategyAttachment"));

export { UpstreamArgs, UpstreamState } from "./upstream";
export type Upstream = import("./upstream").Upstream;
export const Upstream: typeof import("./upstream").Upstream = null as any;
utilities.lazyLoad(exports, ["Upstream"], () => require("./upstream"));

export { UsagePlanArgs, UsagePlanState } from "./usagePlan";
export type UsagePlan = import("./usagePlan").UsagePlan;
export const UsagePlan: typeof import("./usagePlan").UsagePlan = null as any;
utilities.lazyLoad(exports, ["UsagePlan"], () => require("./usagePlan"));

export { UsagePlanAttachmentArgs, UsagePlanAttachmentState } from "./usagePlanAttachment";
export type UsagePlanAttachment = import("./usagePlanAttachment").UsagePlanAttachment;
export const UsagePlanAttachment: typeof import("./usagePlanAttachment").UsagePlanAttachment = null as any;
utilities.lazyLoad(exports, ["UsagePlanAttachment"], () => require("./usagePlanAttachment"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tencentcloud:ApiGateway/api:Api":
                return new Api(name, <any>undefined, { urn })
            case "tencentcloud:ApiGateway/apiApp:ApiApp":
                return new ApiApp(name, <any>undefined, { urn })
            case "tencentcloud:ApiGateway/apiAppAttachment:ApiAppAttachment":
                return new ApiAppAttachment(name, <any>undefined, { urn })
            case "tencentcloud:ApiGateway/apiDoc:ApiDoc":
                return new ApiDoc(name, <any>undefined, { urn })
            case "tencentcloud:ApiGateway/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "tencentcloud:ApiGateway/apiKeyAttachment:ApiKeyAttachment":
                return new ApiKeyAttachment(name, <any>undefined, { urn })
            case "tencentcloud:ApiGateway/customDomain:CustomDomain":
                return new CustomDomain(name, <any>undefined, { urn })
            case "tencentcloud:ApiGateway/ipStrategy:IpStrategy":
                return new IpStrategy(name, <any>undefined, { urn })
            case "tencentcloud:ApiGateway/plugin:Plugin":
                return new Plugin(name, <any>undefined, { urn })
            case "tencentcloud:ApiGateway/pluginAttachment:PluginAttachment":
                return new PluginAttachment(name, <any>undefined, { urn })
            case "tencentcloud:ApiGateway/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "tencentcloud:ApiGateway/serviceRelease:ServiceRelease":
                return new ServiceRelease(name, <any>undefined, { urn })
            case "tencentcloud:ApiGateway/strategyAttachment:StrategyAttachment":
                return new StrategyAttachment(name, <any>undefined, { urn })
            case "tencentcloud:ApiGateway/upstream:Upstream":
                return new Upstream(name, <any>undefined, { urn })
            case "tencentcloud:ApiGateway/usagePlan:UsagePlan":
                return new UsagePlan(name, <any>undefined, { urn })
            case "tencentcloud:ApiGateway/usagePlanAttachment:UsagePlanAttachment":
                return new UsagePlanAttachment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tencentcloud", "ApiGateway/api", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "ApiGateway/apiApp", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "ApiGateway/apiAppAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "ApiGateway/apiDoc", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "ApiGateway/apiKey", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "ApiGateway/apiKeyAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "ApiGateway/customDomain", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "ApiGateway/ipStrategy", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "ApiGateway/plugin", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "ApiGateway/pluginAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "ApiGateway/service", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "ApiGateway/serviceRelease", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "ApiGateway/strategyAttachment", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "ApiGateway/upstream", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "ApiGateway/usagePlan", _module)
pulumi.runtime.registerResourceModule("tencentcloud", "ApiGateway/usagePlanAttachment", _module)
