// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class AccountPrivileges extends pulumi.CustomResource {
    /**
     * Get an existing AccountPrivileges resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountPrivilegesState, opts?: pulumi.CustomResourceOptions): AccountPrivileges {
        return new AccountPrivileges(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Mariadb/accountPrivileges:AccountPrivileges';

    /**
     * Returns true if the given object is an instance of AccountPrivileges.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AccountPrivileges {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountPrivileges.__pulumiType;
    }

    /**
     * account information.
     */
    public readonly accounts!: pulumi.Output<outputs.Mariadb.AccountPrivilegesAccounts>;
    /**
     * Column permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `REFERENCES`.Note: if the parameter is
     * left empty, no change will be made to the granted column permissions. To clear the granted column permissions, set
     * `Privileges` to an empty array.
     */
    public readonly columnPrivileges!: pulumi.Output<outputs.Mariadb.AccountPrivilegesColumnPrivilege[] | undefined>;
    /**
     * Database permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`,
     * `REFERENCES`, `INDEX`, `ALTER`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE
     * ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the
     * granted database permissions. To clear the granted database permissions, set `Privileges` to an empty array.
     */
    public readonly databasePrivileges!: pulumi.Output<outputs.Mariadb.AccountPrivilegesDatabasePrivilege[] | undefined>;
    /**
     * Database function permissions. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not
     * passed in, no change will be made to the granted function permissions. To clear the granted function permissions, set
     * `Privileges` to an empty array.
     */
    public readonly functionPrivileges!: pulumi.Output<outputs.Mariadb.AccountPrivilegesFunctionPrivilege[] | undefined>;
    /**
     * Global permission. Valid values of `GlobalPrivileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `PROCESS`,
     * `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `SHOW DATABASES`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE
     * VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no
     * change will be made to the granted global permissions. To clear the granted global permissions, set the parameter to an
     * empty array.
     */
    public readonly globalPrivileges!: pulumi.Output<string[] | undefined>;
    /**
     * instance id.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Database stored procedure permission. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is
     * not passed in, no change will be made to the granted stored procedure permissions. To clear the granted stored procedure
     * permissions, set `Privileges` to an empty array.
     */
    public readonly procedurePrivileges!: pulumi.Output<outputs.Mariadb.AccountPrivilegesProcedurePrivilege[] | undefined>;
    /**
     * `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`,
     * `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted table permissions. To clear the
     * granted table permissions, set `Privileges` to an empty array.
     */
    public readonly tablePrivileges!: pulumi.Output<outputs.Mariadb.AccountPrivilegesTablePrivilege[] | undefined>;
    /**
     * Database view permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`,
     * `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change
     * will be made to the granted view permissions. To clear the granted view permissions, set `Privileges` to an empty array.
     */
    public readonly viewPrivileges!: pulumi.Output<outputs.Mariadb.AccountPrivilegesViewPrivilege[] | undefined>;

    /**
     * Create a AccountPrivileges resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccountPrivilegesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountPrivilegesArgs | AccountPrivilegesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountPrivilegesState | undefined;
            resourceInputs["accounts"] = state ? state.accounts : undefined;
            resourceInputs["columnPrivileges"] = state ? state.columnPrivileges : undefined;
            resourceInputs["databasePrivileges"] = state ? state.databasePrivileges : undefined;
            resourceInputs["functionPrivileges"] = state ? state.functionPrivileges : undefined;
            resourceInputs["globalPrivileges"] = state ? state.globalPrivileges : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["procedurePrivileges"] = state ? state.procedurePrivileges : undefined;
            resourceInputs["tablePrivileges"] = state ? state.tablePrivileges : undefined;
            resourceInputs["viewPrivileges"] = state ? state.viewPrivileges : undefined;
        } else {
            const args = argsOrState as AccountPrivilegesArgs | undefined;
            if ((!args || args.accounts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accounts'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["accounts"] = args ? args.accounts : undefined;
            resourceInputs["columnPrivileges"] = args ? args.columnPrivileges : undefined;
            resourceInputs["databasePrivileges"] = args ? args.databasePrivileges : undefined;
            resourceInputs["functionPrivileges"] = args ? args.functionPrivileges : undefined;
            resourceInputs["globalPrivileges"] = args ? args.globalPrivileges : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["procedurePrivileges"] = args ? args.procedurePrivileges : undefined;
            resourceInputs["tablePrivileges"] = args ? args.tablePrivileges : undefined;
            resourceInputs["viewPrivileges"] = args ? args.viewPrivileges : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountPrivileges.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AccountPrivileges resources.
 */
export interface AccountPrivilegesState {
    /**
     * account information.
     */
    accounts?: pulumi.Input<inputs.Mariadb.AccountPrivilegesAccounts>;
    /**
     * Column permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `REFERENCES`.Note: if the parameter is
     * left empty, no change will be made to the granted column permissions. To clear the granted column permissions, set
     * `Privileges` to an empty array.
     */
    columnPrivileges?: pulumi.Input<pulumi.Input<inputs.Mariadb.AccountPrivilegesColumnPrivilege>[]>;
    /**
     * Database permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`,
     * `REFERENCES`, `INDEX`, `ALTER`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE
     * ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the
     * granted database permissions. To clear the granted database permissions, set `Privileges` to an empty array.
     */
    databasePrivileges?: pulumi.Input<pulumi.Input<inputs.Mariadb.AccountPrivilegesDatabasePrivilege>[]>;
    /**
     * Database function permissions. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not
     * passed in, no change will be made to the granted function permissions. To clear the granted function permissions, set
     * `Privileges` to an empty array.
     */
    functionPrivileges?: pulumi.Input<pulumi.Input<inputs.Mariadb.AccountPrivilegesFunctionPrivilege>[]>;
    /**
     * Global permission. Valid values of `GlobalPrivileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `PROCESS`,
     * `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `SHOW DATABASES`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE
     * VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no
     * change will be made to the granted global permissions. To clear the granted global permissions, set the parameter to an
     * empty array.
     */
    globalPrivileges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * instance id.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Database stored procedure permission. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is
     * not passed in, no change will be made to the granted stored procedure permissions. To clear the granted stored procedure
     * permissions, set `Privileges` to an empty array.
     */
    procedurePrivileges?: pulumi.Input<pulumi.Input<inputs.Mariadb.AccountPrivilegesProcedurePrivilege>[]>;
    /**
     * `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`,
     * `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted table permissions. To clear the
     * granted table permissions, set `Privileges` to an empty array.
     */
    tablePrivileges?: pulumi.Input<pulumi.Input<inputs.Mariadb.AccountPrivilegesTablePrivilege>[]>;
    /**
     * Database view permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`,
     * `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change
     * will be made to the granted view permissions. To clear the granted view permissions, set `Privileges` to an empty array.
     */
    viewPrivileges?: pulumi.Input<pulumi.Input<inputs.Mariadb.AccountPrivilegesViewPrivilege>[]>;
}

/**
 * The set of arguments for constructing a AccountPrivileges resource.
 */
export interface AccountPrivilegesArgs {
    /**
     * account information.
     */
    accounts: pulumi.Input<inputs.Mariadb.AccountPrivilegesAccounts>;
    /**
     * Column permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `REFERENCES`.Note: if the parameter is
     * left empty, no change will be made to the granted column permissions. To clear the granted column permissions, set
     * `Privileges` to an empty array.
     */
    columnPrivileges?: pulumi.Input<pulumi.Input<inputs.Mariadb.AccountPrivilegesColumnPrivilege>[]>;
    /**
     * Database permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`,
     * `REFERENCES`, `INDEX`, `ALTER`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE
     * ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the
     * granted database permissions. To clear the granted database permissions, set `Privileges` to an empty array.
     */
    databasePrivileges?: pulumi.Input<pulumi.Input<inputs.Mariadb.AccountPrivilegesDatabasePrivilege>[]>;
    /**
     * Database function permissions. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not
     * passed in, no change will be made to the granted function permissions. To clear the granted function permissions, set
     * `Privileges` to an empty array.
     */
    functionPrivileges?: pulumi.Input<pulumi.Input<inputs.Mariadb.AccountPrivilegesFunctionPrivilege>[]>;
    /**
     * Global permission. Valid values of `GlobalPrivileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `PROCESS`,
     * `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `SHOW DATABASES`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE
     * VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no
     * change will be made to the granted global permissions. To clear the granted global permissions, set the parameter to an
     * empty array.
     */
    globalPrivileges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * instance id.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Database stored procedure permission. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is
     * not passed in, no change will be made to the granted stored procedure permissions. To clear the granted stored procedure
     * permissions, set `Privileges` to an empty array.
     */
    procedurePrivileges?: pulumi.Input<pulumi.Input<inputs.Mariadb.AccountPrivilegesProcedurePrivilege>[]>;
    /**
     * `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`,
     * `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted table permissions. To clear the
     * granted table permissions, set `Privileges` to an empty array.
     */
    tablePrivileges?: pulumi.Input<pulumi.Input<inputs.Mariadb.AccountPrivilegesTablePrivilege>[]>;
    /**
     * Database view permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`,
     * `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change
     * will be made to the granted view permissions. To clear the granted view permissions, set `Privileges` to an empty array.
     */
    viewPrivileges?: pulumi.Input<pulumi.Input<inputs.Mariadb.AccountPrivilegesViewPrivilege>[]>;
}
