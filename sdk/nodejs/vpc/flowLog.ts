// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class FlowLog extends pulumi.CustomResource {
    /**
     * Get an existing FlowLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlowLogState, opts?: pulumi.CustomResourceOptions): FlowLog {
        return new FlowLog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Vpc/flowLog:FlowLog';

    /**
     * Returns true if the given object is an instance of FlowLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlowLog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlowLog.__pulumiType;
    }

    /**
     * Specify flow log storage id, just set cls topic id.
     */
    public readonly cloudLogId!: pulumi.Output<string | undefined>;
    /**
     * Specify flow log storage region, default using current.
     */
    public readonly cloudLogRegion!: pulumi.Output<string>;
    /**
     * Specify flow Log description.
     */
    public readonly flowLogDescription!: pulumi.Output<string | undefined>;
    /**
     * Specify flow log name.
     */
    public readonly flowLogName!: pulumi.Output<string>;
    /**
     * Specify consumer detail, required while `storage_type` is `ckafka`.
     */
    public readonly flowLogStorage!: pulumi.Output<outputs.Vpc.FlowLogFlowLogStorage>;
    /**
     * Specify resource unique Id of `resource_type` configured.
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * Specify resource type. NOTE: Only support `NETWORKINTERFACE` for now. Values: `VPC`, `SUBNET`, `NETWORKINTERFACE`,
     * `CCN`, `NAT`, `DCG`.
     */
    public readonly resourceType!: pulumi.Output<string>;
    /**
     * Specify consumer type, values: `cls`, `ckafka`.
     */
    public readonly storageType!: pulumi.Output<string | undefined>;
    /**
     * Tag description list.
     */
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Specify log traffic type, values: `ACCEPT`, `REJECT`, `ALL`.
     */
    public readonly trafficType!: pulumi.Output<string>;
    /**
     * Specify vpc Id, ignore while `resource_type` is `CCN` (unsupported) but required while other types.
     */
    public readonly vpcId!: pulumi.Output<string | undefined>;

    /**
     * Create a FlowLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlowLogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlowLogArgs | FlowLogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlowLogState | undefined;
            resourceInputs["cloudLogId"] = state ? state.cloudLogId : undefined;
            resourceInputs["cloudLogRegion"] = state ? state.cloudLogRegion : undefined;
            resourceInputs["flowLogDescription"] = state ? state.flowLogDescription : undefined;
            resourceInputs["flowLogName"] = state ? state.flowLogName : undefined;
            resourceInputs["flowLogStorage"] = state ? state.flowLogStorage : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["trafficType"] = state ? state.trafficType : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as FlowLogArgs | undefined;
            if ((!args || args.flowLogName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flowLogName'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            if ((!args || args.trafficType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficType'");
            }
            resourceInputs["cloudLogId"] = args ? args.cloudLogId : undefined;
            resourceInputs["cloudLogRegion"] = args ? args.cloudLogRegion : undefined;
            resourceInputs["flowLogDescription"] = args ? args.flowLogDescription : undefined;
            resourceInputs["flowLogName"] = args ? args.flowLogName : undefined;
            resourceInputs["flowLogStorage"] = args ? args.flowLogStorage : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["trafficType"] = args ? args.trafficType : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlowLog.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FlowLog resources.
 */
export interface FlowLogState {
    /**
     * Specify flow log storage id, just set cls topic id.
     */
    cloudLogId?: pulumi.Input<string>;
    /**
     * Specify flow log storage region, default using current.
     */
    cloudLogRegion?: pulumi.Input<string>;
    /**
     * Specify flow Log description.
     */
    flowLogDescription?: pulumi.Input<string>;
    /**
     * Specify flow log name.
     */
    flowLogName?: pulumi.Input<string>;
    /**
     * Specify consumer detail, required while `storage_type` is `ckafka`.
     */
    flowLogStorage?: pulumi.Input<inputs.Vpc.FlowLogFlowLogStorage>;
    /**
     * Specify resource unique Id of `resource_type` configured.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * Specify resource type. NOTE: Only support `NETWORKINTERFACE` for now. Values: `VPC`, `SUBNET`, `NETWORKINTERFACE`,
     * `CCN`, `NAT`, `DCG`.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * Specify consumer type, values: `cls`, `ckafka`.
     */
    storageType?: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Specify log traffic type, values: `ACCEPT`, `REJECT`, `ALL`.
     */
    trafficType?: pulumi.Input<string>;
    /**
     * Specify vpc Id, ignore while `resource_type` is `CCN` (unsupported) but required while other types.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FlowLog resource.
 */
export interface FlowLogArgs {
    /**
     * Specify flow log storage id, just set cls topic id.
     */
    cloudLogId?: pulumi.Input<string>;
    /**
     * Specify flow log storage region, default using current.
     */
    cloudLogRegion?: pulumi.Input<string>;
    /**
     * Specify flow Log description.
     */
    flowLogDescription?: pulumi.Input<string>;
    /**
     * Specify flow log name.
     */
    flowLogName: pulumi.Input<string>;
    /**
     * Specify consumer detail, required while `storage_type` is `ckafka`.
     */
    flowLogStorage?: pulumi.Input<inputs.Vpc.FlowLogFlowLogStorage>;
    /**
     * Specify resource unique Id of `resource_type` configured.
     */
    resourceId: pulumi.Input<string>;
    /**
     * Specify resource type. NOTE: Only support `NETWORKINTERFACE` for now. Values: `VPC`, `SUBNET`, `NETWORKINTERFACE`,
     * `CCN`, `NAT`, `DCG`.
     */
    resourceType: pulumi.Input<string>;
    /**
     * Specify consumer type, values: `cls`, `ckafka`.
     */
    storageType?: pulumi.Input<string>;
    /**
     * Tag description list.
     */
    tags?: pulumi.Input<{[key: string]: any}>;
    /**
     * Specify log traffic type, values: `ACCEPT`, `REJECT`, `ALL`.
     */
    trafficType: pulumi.Input<string>;
    /**
     * Specify vpc Id, ignore while `resource_type` is `CCN` (unsupported) but required while other types.
     */
    vpcId?: pulumi.Input<string>;
}
