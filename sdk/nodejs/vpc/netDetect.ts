// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class NetDetect extends pulumi.CustomResource {
    /**
     * Get an existing NetDetect resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetDetectState, opts?: pulumi.CustomResourceOptions): NetDetect {
        return new NetDetect(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tencentcloud:Vpc/netDetect:NetDetect';

    /**
     * Returns true if the given object is an instance of NetDetect.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetDetect {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetDetect.__pulumiType;
    }

    /**
     * An array of probe destination IPv4 addresses. Up to two.
     */
    public readonly detectDestinationIps!: pulumi.Output<string[]>;
    /**
     * Network probe description.
     */
    public readonly netDetectDescription!: pulumi.Output<string | undefined>;
    /**
     * Network probe name, the maximum length cannot exceed 60 bytes.
     */
    public readonly netDetectName!: pulumi.Output<string>;
    /**
     * The destination gateway of the next hop, the value is related to the next hop type. If the next hop type is VPN, and the
     * value is the VPN gateway ID, such as: vpngw-12345678; If the next hop type is DIRECTCONNECT, and the value is the
     * private line gateway ID, such as: dcg-12345678; If the next hop type is PEERCONNECTION, which takes the value of the
     * peer connection ID, such as: pcx-12345678; If the next hop type is NAT, and the value is Nat gateway, such as:
     * nat-12345678; If the next hop type is NORMAL_CVM, which takes the IPv4 address of the cloud server, such as: 10.0.0.12;
     * If the next hop type is CCN, and the value is the cloud network ID, such as: ccn-12345678; If the next hop type is
     * NONEXTHOP, and the specified network probe is a network probe without a next hop.
     */
    public readonly nextHopDestination!: pulumi.Output<string | undefined>;
    /**
     * The next hop type, currently we support the following types: `VPN`: VPN gateway; `DIRECTCONNECT`: private line gateway;
     * `PEERCONNECTION`: peer connection; `NAT`: NAT gateway; `NORMAL_CVM`: normal cloud server; `CCN`: cloud networking
     * gateway; `NONEXTHOP`: no next hop.
     */
    public readonly nextHopType!: pulumi.Output<string | undefined>;
    /**
     * Subnet instance ID. Such as:subnet-12345678.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * `VPC` instance `ID`. Such as:`vpc-12345678`.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a NetDetect resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetDetectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetDetectArgs | NetDetectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetDetectState | undefined;
            resourceInputs["detectDestinationIps"] = state ? state.detectDestinationIps : undefined;
            resourceInputs["netDetectDescription"] = state ? state.netDetectDescription : undefined;
            resourceInputs["netDetectName"] = state ? state.netDetectName : undefined;
            resourceInputs["nextHopDestination"] = state ? state.nextHopDestination : undefined;
            resourceInputs["nextHopType"] = state ? state.nextHopType : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as NetDetectArgs | undefined;
            if ((!args || args.detectDestinationIps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'detectDestinationIps'");
            }
            if ((!args || args.netDetectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'netDetectName'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["detectDestinationIps"] = args ? args.detectDestinationIps : undefined;
            resourceInputs["netDetectDescription"] = args ? args.netDetectDescription : undefined;
            resourceInputs["netDetectName"] = args ? args.netDetectName : undefined;
            resourceInputs["nextHopDestination"] = args ? args.nextHopDestination : undefined;
            resourceInputs["nextHopType"] = args ? args.nextHopType : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetDetect.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetDetect resources.
 */
export interface NetDetectState {
    /**
     * An array of probe destination IPv4 addresses. Up to two.
     */
    detectDestinationIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Network probe description.
     */
    netDetectDescription?: pulumi.Input<string>;
    /**
     * Network probe name, the maximum length cannot exceed 60 bytes.
     */
    netDetectName?: pulumi.Input<string>;
    /**
     * The destination gateway of the next hop, the value is related to the next hop type. If the next hop type is VPN, and the
     * value is the VPN gateway ID, such as: vpngw-12345678; If the next hop type is DIRECTCONNECT, and the value is the
     * private line gateway ID, such as: dcg-12345678; If the next hop type is PEERCONNECTION, which takes the value of the
     * peer connection ID, such as: pcx-12345678; If the next hop type is NAT, and the value is Nat gateway, such as:
     * nat-12345678; If the next hop type is NORMAL_CVM, which takes the IPv4 address of the cloud server, such as: 10.0.0.12;
     * If the next hop type is CCN, and the value is the cloud network ID, such as: ccn-12345678; If the next hop type is
     * NONEXTHOP, and the specified network probe is a network probe without a next hop.
     */
    nextHopDestination?: pulumi.Input<string>;
    /**
     * The next hop type, currently we support the following types: `VPN`: VPN gateway; `DIRECTCONNECT`: private line gateway;
     * `PEERCONNECTION`: peer connection; `NAT`: NAT gateway; `NORMAL_CVM`: normal cloud server; `CCN`: cloud networking
     * gateway; `NONEXTHOP`: no next hop.
     */
    nextHopType?: pulumi.Input<string>;
    /**
     * Subnet instance ID. Such as:subnet-12345678.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * `VPC` instance `ID`. Such as:`vpc-12345678`.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetDetect resource.
 */
export interface NetDetectArgs {
    /**
     * An array of probe destination IPv4 addresses. Up to two.
     */
    detectDestinationIps: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Network probe description.
     */
    netDetectDescription?: pulumi.Input<string>;
    /**
     * Network probe name, the maximum length cannot exceed 60 bytes.
     */
    netDetectName: pulumi.Input<string>;
    /**
     * The destination gateway of the next hop, the value is related to the next hop type. If the next hop type is VPN, and the
     * value is the VPN gateway ID, such as: vpngw-12345678; If the next hop type is DIRECTCONNECT, and the value is the
     * private line gateway ID, such as: dcg-12345678; If the next hop type is PEERCONNECTION, which takes the value of the
     * peer connection ID, such as: pcx-12345678; If the next hop type is NAT, and the value is Nat gateway, such as:
     * nat-12345678; If the next hop type is NORMAL_CVM, which takes the IPv4 address of the cloud server, such as: 10.0.0.12;
     * If the next hop type is CCN, and the value is the cloud network ID, such as: ccn-12345678; If the next hop type is
     * NONEXTHOP, and the specified network probe is a network probe without a next hop.
     */
    nextHopDestination?: pulumi.Input<string>;
    /**
     * The next hop type, currently we support the following types: `VPN`: VPN gateway; `DIRECTCONNECT`: private line gateway;
     * `PEERCONNECTION`: peer connection; `NAT`: NAT gateway; `NORMAL_CVM`: normal cloud server; `CCN`: cloud networking
     * gateway; `NONEXTHOP`: no next hop.
     */
    nextHopType?: pulumi.Input<string>;
    /**
     * Subnet instance ID. Such as:subnet-12345678.
     */
    subnetId: pulumi.Input<string>;
    /**
     * `VPC` instance `ID`. Such as:`vpc-12345678`.
     */
    vpcId: pulumi.Input<string>;
}
