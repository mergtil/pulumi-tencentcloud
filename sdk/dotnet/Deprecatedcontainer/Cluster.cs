// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Deprecatedcontainer
{
    [TencentcloudResourceType("tencentcloud:Deprecatedcontainer/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The network bandwidth of the node.
        /// </summary>
        [Output("bandwidth")]
        public Output<int> Bandwidth { get; private set; } = null!;

        /// <summary>
        /// The network type of the node.
        /// </summary>
        [Output("bandwidthType")]
        public Output<string> BandwidthType { get; private set; } = null!;

        /// <summary>
        /// The CIDR which the cluster is going to use.
        /// </summary>
        [Output("clusterCidr")]
        public Output<string> ClusterCidr { get; private set; } = null!;

        /// <summary>
        /// The description of the cluster.
        /// </summary>
        [Output("clusterDesc")]
        public Output<string?> ClusterDesc { get; private set; } = null!;

        /// <summary>
        /// The name of the cluster.
        /// </summary>
        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        /// <summary>
        /// The kubernetes version of the cluster.
        /// </summary>
        [Output("clusterVersion")]
        public Output<string?> ClusterVersion { get; private set; } = null!;

        /// <summary>
        /// The cpu of the node.
        /// </summary>
        [Output("cpu")]
        public Output<int?> Cpu { get; private set; } = null!;

        /// <summary>
        /// The type of node needed by cvm.
        /// </summary>
        [Output("cvmType")]
        public Output<string?> CvmType { get; private set; } = null!;

        /// <summary>
        /// The docker graph path is going to mounted.
        /// </summary>
        [Output("dockerGraphPath")]
        public Output<string?> DockerGraphPath { get; private set; } = null!;

        /// <summary>
        /// The node number is going to create in the cluster.
        /// </summary>
        [Output("goodsNum")]
        public Output<int> GoodsNum { get; private set; } = null!;

        /// <summary>
        /// The name ot node.
        /// </summary>
        [Output("instanceName")]
        public Output<string?> InstanceName { get; private set; } = null!;

        /// <summary>
        /// The instance type of the node needed by cvm.
        /// </summary>
        [Output("instanceType")]
        public Output<string> InstanceType { get; private set; } = null!;

        /// <summary>
        /// Describe whether the node enable the gateway capability.
        /// </summary>
        [Output("isVpcGateway")]
        public Output<int> IsVpcGateway { get; private set; } = null!;

        /// <summary>
        /// The key_id of each node(if using key pair to access).
        /// </summary>
        [Output("keyId")]
        public Output<string?> KeyId { get; private set; } = null!;

        /// <summary>
        /// The kubernetes version of the cluster.
        /// </summary>
        [Output("kubernetesVersion")]
        public Output<string> KubernetesVersion { get; private set; } = null!;

        /// <summary>
        /// The memory of the node.
        /// </summary>
        [Output("mem")]
        public Output<int?> Mem { get; private set; } = null!;

        /// <summary>
        /// The path which volume is going to be mounted.
        /// </summary>
        [Output("mountTarget")]
        public Output<string?> MountTarget { get; private set; } = null!;

        /// <summary>
        /// The node number of the cluster.
        /// </summary>
        [Output("nodesNum")]
        public Output<int> NodesNum { get; private set; } = null!;

        /// <summary>
        /// The node status of the cluster.
        /// </summary>
        [Output("nodesStatus")]
        public Output<string> NodesStatus { get; private set; } = null!;

        /// <summary>
        /// The system os name of the node.
        /// </summary>
        [Output("osName")]
        public Output<string> OsName { get; private set; } = null!;

        /// <summary>
        /// The password of each node.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The puchase duration of the node needed by cvm.
        /// </summary>
        [Output("period")]
        public Output<int?> Period { get; private set; } = null!;

        /// <summary>
        /// Indicate whether wan ip is needed.
        /// </summary>
        [Output("requireWanIp")]
        public Output<int?> RequireWanIp { get; private set; } = null!;

        /// <summary>
        /// The size of the root volume.
        /// </summary>
        [Output("rootSize")]
        public Output<int> RootSize { get; private set; } = null!;

        /// <summary>
        /// The type of the root volume. see more from CVM.
        /// </summary>
        [Output("rootType")]
        public Output<string?> RootType { get; private set; } = null!;

        /// <summary>
        /// The security group id.
        /// </summary>
        [Output("sgId")]
        public Output<string?> SgId { get; private set; } = null!;

        /// <summary>
        /// The size of the data volume.
        /// </summary>
        [Output("storageSize")]
        public Output<int> StorageSize { get; private set; } = null!;

        /// <summary>
        /// The type of the data volume. see more from CVM.
        /// </summary>
        [Output("storageType")]
        public Output<string?> StorageType { get; private set; } = null!;

        /// <summary>
        /// The subnet id which the node stays in.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// The total cpu of the cluster.
        /// </summary>
        [Output("totalCpu")]
        public Output<int> TotalCpu { get; private set; } = null!;

        /// <summary>
        /// The total memory of the cluster.
        /// </summary>
        [Output("totalMem")]
        public Output<int> TotalMem { get; private set; } = null!;

        /// <summary>
        /// Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
        /// </summary>
        [Output("unschedulable")]
        public Output<int?> Unschedulable { get; private set; } = null!;

        /// <summary>
        /// User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
        /// CCS api documents.
        /// </summary>
        [Output("userScript")]
        public Output<string?> UserScript { get; private set; } = null!;

        /// <summary>
        /// Specify vpc which the node(s) stay in.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// The zone which the node stays in.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Deprecatedcontainer/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Deprecatedcontainer/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The network bandwidth of the node.
        /// </summary>
        [Input("bandwidth", required: true)]
        public Input<int> Bandwidth { get; set; } = null!;

        /// <summary>
        /// The network type of the node.
        /// </summary>
        [Input("bandwidthType", required: true)]
        public Input<string> BandwidthType { get; set; } = null!;

        /// <summary>
        /// The CIDR which the cluster is going to use.
        /// </summary>
        [Input("clusterCidr", required: true)]
        public Input<string> ClusterCidr { get; set; } = null!;

        /// <summary>
        /// The description of the cluster.
        /// </summary>
        [Input("clusterDesc")]
        public Input<string>? ClusterDesc { get; set; }

        /// <summary>
        /// The name of the cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The kubernetes version of the cluster.
        /// </summary>
        [Input("clusterVersion")]
        public Input<string>? ClusterVersion { get; set; }

        /// <summary>
        /// The cpu of the node.
        /// </summary>
        [Input("cpu")]
        public Input<int>? Cpu { get; set; }

        /// <summary>
        /// The type of node needed by cvm.
        /// </summary>
        [Input("cvmType")]
        public Input<string>? CvmType { get; set; }

        /// <summary>
        /// The docker graph path is going to mounted.
        /// </summary>
        [Input("dockerGraphPath")]
        public Input<string>? DockerGraphPath { get; set; }

        /// <summary>
        /// The node number is going to create in the cluster.
        /// </summary>
        [Input("goodsNum", required: true)]
        public Input<int> GoodsNum { get; set; } = null!;

        /// <summary>
        /// The name ot node.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The instance type of the node needed by cvm.
        /// </summary>
        [Input("instanceType", required: true)]
        public Input<string> InstanceType { get; set; } = null!;

        /// <summary>
        /// Describe whether the node enable the gateway capability.
        /// </summary>
        [Input("isVpcGateway", required: true)]
        public Input<int> IsVpcGateway { get; set; } = null!;

        /// <summary>
        /// The key_id of each node(if using key pair to access).
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// The memory of the node.
        /// </summary>
        [Input("mem")]
        public Input<int>? Mem { get; set; }

        /// <summary>
        /// The path which volume is going to be mounted.
        /// </summary>
        [Input("mountTarget")]
        public Input<string>? MountTarget { get; set; }

        /// <summary>
        /// The system os name of the node.
        /// </summary>
        [Input("osName", required: true)]
        public Input<string> OsName { get; set; } = null!;

        /// <summary>
        /// The password of each node.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The puchase duration of the node needed by cvm.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// Indicate whether wan ip is needed.
        /// </summary>
        [Input("requireWanIp")]
        public Input<int>? RequireWanIp { get; set; }

        /// <summary>
        /// The size of the root volume.
        /// </summary>
        [Input("rootSize", required: true)]
        public Input<int> RootSize { get; set; } = null!;

        /// <summary>
        /// The type of the root volume. see more from CVM.
        /// </summary>
        [Input("rootType")]
        public Input<string>? RootType { get; set; }

        /// <summary>
        /// The security group id.
        /// </summary>
        [Input("sgId")]
        public Input<string>? SgId { get; set; }

        /// <summary>
        /// The size of the data volume.
        /// </summary>
        [Input("storageSize", required: true)]
        public Input<int> StorageSize { get; set; } = null!;

        /// <summary>
        /// The type of the data volume. see more from CVM.
        /// </summary>
        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        /// <summary>
        /// The subnet id which the node stays in.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        /// <summary>
        /// Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
        /// </summary>
        [Input("unschedulable")]
        public Input<int>? Unschedulable { get; set; }

        /// <summary>
        /// User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
        /// CCS api documents.
        /// </summary>
        [Input("userScript")]
        public Input<string>? UserScript { get; set; }

        /// <summary>
        /// Specify vpc which the node(s) stay in.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        /// <summary>
        /// The zone which the node stays in.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The network bandwidth of the node.
        /// </summary>
        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        /// <summary>
        /// The network type of the node.
        /// </summary>
        [Input("bandwidthType")]
        public Input<string>? BandwidthType { get; set; }

        /// <summary>
        /// The CIDR which the cluster is going to use.
        /// </summary>
        [Input("clusterCidr")]
        public Input<string>? ClusterCidr { get; set; }

        /// <summary>
        /// The description of the cluster.
        /// </summary>
        [Input("clusterDesc")]
        public Input<string>? ClusterDesc { get; set; }

        /// <summary>
        /// The name of the cluster.
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// The kubernetes version of the cluster.
        /// </summary>
        [Input("clusterVersion")]
        public Input<string>? ClusterVersion { get; set; }

        /// <summary>
        /// The cpu of the node.
        /// </summary>
        [Input("cpu")]
        public Input<int>? Cpu { get; set; }

        /// <summary>
        /// The type of node needed by cvm.
        /// </summary>
        [Input("cvmType")]
        public Input<string>? CvmType { get; set; }

        /// <summary>
        /// The docker graph path is going to mounted.
        /// </summary>
        [Input("dockerGraphPath")]
        public Input<string>? DockerGraphPath { get; set; }

        /// <summary>
        /// The node number is going to create in the cluster.
        /// </summary>
        [Input("goodsNum")]
        public Input<int>? GoodsNum { get; set; }

        /// <summary>
        /// The name ot node.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The instance type of the node needed by cvm.
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// Describe whether the node enable the gateway capability.
        /// </summary>
        [Input("isVpcGateway")]
        public Input<int>? IsVpcGateway { get; set; }

        /// <summary>
        /// The key_id of each node(if using key pair to access).
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// The kubernetes version of the cluster.
        /// </summary>
        [Input("kubernetesVersion")]
        public Input<string>? KubernetesVersion { get; set; }

        /// <summary>
        /// The memory of the node.
        /// </summary>
        [Input("mem")]
        public Input<int>? Mem { get; set; }

        /// <summary>
        /// The path which volume is going to be mounted.
        /// </summary>
        [Input("mountTarget")]
        public Input<string>? MountTarget { get; set; }

        /// <summary>
        /// The node number of the cluster.
        /// </summary>
        [Input("nodesNum")]
        public Input<int>? NodesNum { get; set; }

        /// <summary>
        /// The node status of the cluster.
        /// </summary>
        [Input("nodesStatus")]
        public Input<string>? NodesStatus { get; set; }

        /// <summary>
        /// The system os name of the node.
        /// </summary>
        [Input("osName")]
        public Input<string>? OsName { get; set; }

        /// <summary>
        /// The password of each node.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The puchase duration of the node needed by cvm.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// Indicate whether wan ip is needed.
        /// </summary>
        [Input("requireWanIp")]
        public Input<int>? RequireWanIp { get; set; }

        /// <summary>
        /// The size of the root volume.
        /// </summary>
        [Input("rootSize")]
        public Input<int>? RootSize { get; set; }

        /// <summary>
        /// The type of the root volume. see more from CVM.
        /// </summary>
        [Input("rootType")]
        public Input<string>? RootType { get; set; }

        /// <summary>
        /// The security group id.
        /// </summary>
        [Input("sgId")]
        public Input<string>? SgId { get; set; }

        /// <summary>
        /// The size of the data volume.
        /// </summary>
        [Input("storageSize")]
        public Input<int>? StorageSize { get; set; }

        /// <summary>
        /// The type of the data volume. see more from CVM.
        /// </summary>
        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        /// <summary>
        /// The subnet id which the node stays in.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// The total cpu of the cluster.
        /// </summary>
        [Input("totalCpu")]
        public Input<int>? TotalCpu { get; set; }

        /// <summary>
        /// The total memory of the cluster.
        /// </summary>
        [Input("totalMem")]
        public Input<int>? TotalMem { get; set; }

        /// <summary>
        /// Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
        /// </summary>
        [Input("unschedulable")]
        public Input<int>? Unschedulable { get; set; }

        /// <summary>
        /// User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
        /// CCS api documents.
        /// </summary>
        [Input("userScript")]
        public Input<string>? UserScript { get; set; }

        /// <summary>
        /// Specify vpc which the node(s) stay in.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The zone which the node stays in.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
