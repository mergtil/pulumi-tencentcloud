// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Dbbrain
{
    [TencentcloudResourceType("tencentcloud:Dbbrain/securityAuditLogExportTask:SecurityAuditLogExportTask")]
    public partial class SecurityAuditLogExportTask : global::Pulumi.CustomResource
    {
        /// <summary>
        /// request of async id.
        /// </summary>
        [Output("asyncRequestId")]
        public Output<int> AsyncRequestId { get; private set; } = null!;

        /// <summary>
        /// List of log risk levels, supported values include: 0 no risk; 1 low risk; 2 medium risk; 3 high risk.
        /// </summary>
        [Output("dangerLevels")]
        public Output<ImmutableArray<int>> DangerLevels { get; private set; } = null!;

        /// <summary>
        /// end time.
        /// </summary>
        [Output("endTime")]
        public Output<string> EndTime { get; private set; } = null!;

        /// <summary>
        /// product, optional value is mysql.
        /// </summary>
        [Output("product")]
        public Output<string> Product { get; private set; } = null!;

        /// <summary>
        /// security audit group id.
        /// </summary>
        [Output("secAuditGroupId")]
        public Output<string> SecAuditGroupId { get; private set; } = null!;

        /// <summary>
        /// start time.
        /// </summary>
        [Output("startTime")]
        public Output<string> StartTime { get; private set; } = null!;


        /// <summary>
        /// Create a SecurityAuditLogExportTask resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecurityAuditLogExportTask(string name, SecurityAuditLogExportTaskArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Dbbrain/securityAuditLogExportTask:SecurityAuditLogExportTask", name, args ?? new SecurityAuditLogExportTaskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecurityAuditLogExportTask(string name, Input<string> id, SecurityAuditLogExportTaskState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Dbbrain/securityAuditLogExportTask:SecurityAuditLogExportTask", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecurityAuditLogExportTask resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecurityAuditLogExportTask Get(string name, Input<string> id, SecurityAuditLogExportTaskState? state = null, CustomResourceOptions? options = null)
        {
            return new SecurityAuditLogExportTask(name, id, state, options);
        }
    }

    public sealed class SecurityAuditLogExportTaskArgs : global::Pulumi.ResourceArgs
    {
        [Input("dangerLevels")]
        private InputList<int>? _dangerLevels;

        /// <summary>
        /// List of log risk levels, supported values include: 0 no risk; 1 low risk; 2 medium risk; 3 high risk.
        /// </summary>
        public InputList<int> DangerLevels
        {
            get => _dangerLevels ?? (_dangerLevels = new InputList<int>());
            set => _dangerLevels = value;
        }

        /// <summary>
        /// end time.
        /// </summary>
        [Input("endTime", required: true)]
        public Input<string> EndTime { get; set; } = null!;

        /// <summary>
        /// product, optional value is mysql.
        /// </summary>
        [Input("product", required: true)]
        public Input<string> Product { get; set; } = null!;

        /// <summary>
        /// security audit group id.
        /// </summary>
        [Input("secAuditGroupId", required: true)]
        public Input<string> SecAuditGroupId { get; set; } = null!;

        /// <summary>
        /// start time.
        /// </summary>
        [Input("startTime", required: true)]
        public Input<string> StartTime { get; set; } = null!;

        public SecurityAuditLogExportTaskArgs()
        {
        }
        public static new SecurityAuditLogExportTaskArgs Empty => new SecurityAuditLogExportTaskArgs();
    }

    public sealed class SecurityAuditLogExportTaskState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// request of async id.
        /// </summary>
        [Input("asyncRequestId")]
        public Input<int>? AsyncRequestId { get; set; }

        [Input("dangerLevels")]
        private InputList<int>? _dangerLevels;

        /// <summary>
        /// List of log risk levels, supported values include: 0 no risk; 1 low risk; 2 medium risk; 3 high risk.
        /// </summary>
        public InputList<int> DangerLevels
        {
            get => _dangerLevels ?? (_dangerLevels = new InputList<int>());
            set => _dangerLevels = value;
        }

        /// <summary>
        /// end time.
        /// </summary>
        [Input("endTime")]
        public Input<string>? EndTime { get; set; }

        /// <summary>
        /// product, optional value is mysql.
        /// </summary>
        [Input("product")]
        public Input<string>? Product { get; set; }

        /// <summary>
        /// security audit group id.
        /// </summary>
        [Input("secAuditGroupId")]
        public Input<string>? SecAuditGroupId { get; set; }

        /// <summary>
        /// start time.
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        public SecurityAuditLogExportTaskState()
        {
        }
        public static new SecurityAuditLogExportTaskState Empty => new SecurityAuditLogExportTaskState();
    }
}
