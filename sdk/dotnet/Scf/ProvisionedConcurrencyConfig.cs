// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Scf
{
    [TencentcloudResourceType("tencentcloud:Scf/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig")]
    public partial class ProvisionedConcurrencyConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the function for which to set the provisioned concurrency.
        /// </summary>
        [Output("functionName")]
        public Output<string> FunctionName { get; private set; } = null!;

        /// <summary>
        /// The maximum number of instances.
        /// </summary>
        [Output("maxCapacity")]
        public Output<int?> MaxCapacity { get; private set; } = null!;

        /// <summary>
        /// The minimum number of instances. It can not be smaller than 1.
        /// </summary>
        [Output("minCapacity")]
        public Output<int?> MinCapacity { get; private set; } = null!;

        /// <summary>
        /// Function namespace. Default value: default.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Specifies the provisioned concurrency type. Default: Static provisioned concurrency. ConcurrencyUtilizationTracking:
        /// Scales the concurrency automatically according to the concurrency utilization. If ConcurrencyUtilizationTracking is
        /// passed in, TrackingTarget, MinCapacity and MaxCapacity are required, and VersionProvisionedConcurrencyNum must be 0.
        /// </summary>
        [Output("provisionedType")]
        public Output<string?> ProvisionedType { get; private set; } = null!;

        /// <summary>
        /// Function version number. Note: the $LATEST version does not support provisioned concurrency.
        /// </summary>
        [Output("qualifier")]
        public Output<string> Qualifier { get; private set; } = null!;

        /// <summary>
        /// The target concurrency utilization. Range: (0,1) (two decimal places).
        /// </summary>
        [Output("trackingTarget")]
        public Output<double?> TrackingTarget { get; private set; } = null!;

        /// <summary>
        /// Scheduled provisioned concurrency scaling action.
        /// </summary>
        [Output("triggerActions")]
        public Output<ImmutableArray<Outputs.ProvisionedConcurrencyConfigTriggerAction>> TriggerActions { get; private set; } = null!;

        /// <summary>
        /// Provisioned concurrency amount. Note: there is an upper limit for the sum of provisioned concurrency amounts of all
        /// versions, which currently is the function&amp;amp;#39;s maximum concurrency quota minus 100.
        /// </summary>
        [Output("versionProvisionedConcurrencyNum")]
        public Output<int> VersionProvisionedConcurrencyNum { get; private set; } = null!;


        /// <summary>
        /// Create a ProvisionedConcurrencyConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProvisionedConcurrencyConfig(string name, ProvisionedConcurrencyConfigArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Scf/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig", name, args ?? new ProvisionedConcurrencyConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProvisionedConcurrencyConfig(string name, Input<string> id, ProvisionedConcurrencyConfigState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Scf/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProvisionedConcurrencyConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProvisionedConcurrencyConfig Get(string name, Input<string> id, ProvisionedConcurrencyConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new ProvisionedConcurrencyConfig(name, id, state, options);
        }
    }

    public sealed class ProvisionedConcurrencyConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the function for which to set the provisioned concurrency.
        /// </summary>
        [Input("functionName", required: true)]
        public Input<string> FunctionName { get; set; } = null!;

        /// <summary>
        /// The maximum number of instances.
        /// </summary>
        [Input("maxCapacity")]
        public Input<int>? MaxCapacity { get; set; }

        /// <summary>
        /// The minimum number of instances. It can not be smaller than 1.
        /// </summary>
        [Input("minCapacity")]
        public Input<int>? MinCapacity { get; set; }

        /// <summary>
        /// Function namespace. Default value: default.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Specifies the provisioned concurrency type. Default: Static provisioned concurrency. ConcurrencyUtilizationTracking:
        /// Scales the concurrency automatically according to the concurrency utilization. If ConcurrencyUtilizationTracking is
        /// passed in, TrackingTarget, MinCapacity and MaxCapacity are required, and VersionProvisionedConcurrencyNum must be 0.
        /// </summary>
        [Input("provisionedType")]
        public Input<string>? ProvisionedType { get; set; }

        /// <summary>
        /// Function version number. Note: the $LATEST version does not support provisioned concurrency.
        /// </summary>
        [Input("qualifier", required: true)]
        public Input<string> Qualifier { get; set; } = null!;

        /// <summary>
        /// The target concurrency utilization. Range: (0,1) (two decimal places).
        /// </summary>
        [Input("trackingTarget")]
        public Input<double>? TrackingTarget { get; set; }

        [Input("triggerActions")]
        private InputList<Inputs.ProvisionedConcurrencyConfigTriggerActionArgs>? _triggerActions;

        /// <summary>
        /// Scheduled provisioned concurrency scaling action.
        /// </summary>
        public InputList<Inputs.ProvisionedConcurrencyConfigTriggerActionArgs> TriggerActions
        {
            get => _triggerActions ?? (_triggerActions = new InputList<Inputs.ProvisionedConcurrencyConfigTriggerActionArgs>());
            set => _triggerActions = value;
        }

        /// <summary>
        /// Provisioned concurrency amount. Note: there is an upper limit for the sum of provisioned concurrency amounts of all
        /// versions, which currently is the function&amp;amp;#39;s maximum concurrency quota minus 100.
        /// </summary>
        [Input("versionProvisionedConcurrencyNum", required: true)]
        public Input<int> VersionProvisionedConcurrencyNum { get; set; } = null!;

        public ProvisionedConcurrencyConfigArgs()
        {
        }
        public static new ProvisionedConcurrencyConfigArgs Empty => new ProvisionedConcurrencyConfigArgs();
    }

    public sealed class ProvisionedConcurrencyConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the function for which to set the provisioned concurrency.
        /// </summary>
        [Input("functionName")]
        public Input<string>? FunctionName { get; set; }

        /// <summary>
        /// The maximum number of instances.
        /// </summary>
        [Input("maxCapacity")]
        public Input<int>? MaxCapacity { get; set; }

        /// <summary>
        /// The minimum number of instances. It can not be smaller than 1.
        /// </summary>
        [Input("minCapacity")]
        public Input<int>? MinCapacity { get; set; }

        /// <summary>
        /// Function namespace. Default value: default.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Specifies the provisioned concurrency type. Default: Static provisioned concurrency. ConcurrencyUtilizationTracking:
        /// Scales the concurrency automatically according to the concurrency utilization. If ConcurrencyUtilizationTracking is
        /// passed in, TrackingTarget, MinCapacity and MaxCapacity are required, and VersionProvisionedConcurrencyNum must be 0.
        /// </summary>
        [Input("provisionedType")]
        public Input<string>? ProvisionedType { get; set; }

        /// <summary>
        /// Function version number. Note: the $LATEST version does not support provisioned concurrency.
        /// </summary>
        [Input("qualifier")]
        public Input<string>? Qualifier { get; set; }

        /// <summary>
        /// The target concurrency utilization. Range: (0,1) (two decimal places).
        /// </summary>
        [Input("trackingTarget")]
        public Input<double>? TrackingTarget { get; set; }

        [Input("triggerActions")]
        private InputList<Inputs.ProvisionedConcurrencyConfigTriggerActionGetArgs>? _triggerActions;

        /// <summary>
        /// Scheduled provisioned concurrency scaling action.
        /// </summary>
        public InputList<Inputs.ProvisionedConcurrencyConfigTriggerActionGetArgs> TriggerActions
        {
            get => _triggerActions ?? (_triggerActions = new InputList<Inputs.ProvisionedConcurrencyConfigTriggerActionGetArgs>());
            set => _triggerActions = value;
        }

        /// <summary>
        /// Provisioned concurrency amount. Note: there is an upper limit for the sum of provisioned concurrency amounts of all
        /// versions, which currently is the function&amp;amp;#39;s maximum concurrency quota minus 100.
        /// </summary>
        [Input("versionProvisionedConcurrencyNum")]
        public Input<int>? VersionProvisionedConcurrencyNum { get; set; }

        public ProvisionedConcurrencyConfigState()
        {
        }
        public static new ProvisionedConcurrencyConfigState Empty => new ProvisionedConcurrencyConfigState();
    }
}
