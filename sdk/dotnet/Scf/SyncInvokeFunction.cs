// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Scf
{
    [TencentcloudResourceType("tencentcloud:Scf/syncInvokeFunction:SyncInvokeFunction")]
    public partial class SyncInvokeFunction : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Function running parameter, which is in the JSON format. Maximum parameter size is 6 MB. This field corresponds to event
        /// input parameter.
        /// </summary>
        [Output("event")]
        public Output<string?> Event { get; private set; } = null!;

        /// <summary>
        /// Function name.
        /// </summary>
        [Output("functionName")]
        public Output<string> FunctionName { get; private set; } = null!;

        /// <summary>
        /// Valid value: None (default) or Tail. If the value is Tail, log in the response will contain the corresponding function
        /// execution log (up to 4KB).
        /// </summary>
        [Output("logType")]
        public Output<string?> LogType { get; private set; } = null!;

        /// <summary>
        /// Namespace. default is used if it's left empty.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        /// <summary>
        /// Version or alias of the function. It defaults to $DEFAULT.
        /// </summary>
        [Output("qualifier")]
        public Output<string?> Qualifier { get; private set; } = null!;

        /// <summary>
        /// Traffic routing config in json format, e.g., {k:v}. Please note that both k and v must be strings. Up to 1024 bytes
        /// allowed.
        /// </summary>
        [Output("routingKey")]
        public Output<string?> RoutingKey { get; private set; } = null!;


        /// <summary>
        /// Create a SyncInvokeFunction resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SyncInvokeFunction(string name, SyncInvokeFunctionArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Scf/syncInvokeFunction:SyncInvokeFunction", name, args ?? new SyncInvokeFunctionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SyncInvokeFunction(string name, Input<string> id, SyncInvokeFunctionState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Scf/syncInvokeFunction:SyncInvokeFunction", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SyncInvokeFunction resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SyncInvokeFunction Get(string name, Input<string> id, SyncInvokeFunctionState? state = null, CustomResourceOptions? options = null)
        {
            return new SyncInvokeFunction(name, id, state, options);
        }
    }

    public sealed class SyncInvokeFunctionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Function running parameter, which is in the JSON format. Maximum parameter size is 6 MB. This field corresponds to event
        /// input parameter.
        /// </summary>
        [Input("event")]
        public Input<string>? Event { get; set; }

        /// <summary>
        /// Function name.
        /// </summary>
        [Input("functionName", required: true)]
        public Input<string> FunctionName { get; set; } = null!;

        /// <summary>
        /// Valid value: None (default) or Tail. If the value is Tail, log in the response will contain the corresponding function
        /// execution log (up to 4KB).
        /// </summary>
        [Input("logType")]
        public Input<string>? LogType { get; set; }

        /// <summary>
        /// Namespace. default is used if it's left empty.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Version or alias of the function. It defaults to $DEFAULT.
        /// </summary>
        [Input("qualifier")]
        public Input<string>? Qualifier { get; set; }

        /// <summary>
        /// Traffic routing config in json format, e.g., {k:v}. Please note that both k and v must be strings. Up to 1024 bytes
        /// allowed.
        /// </summary>
        [Input("routingKey")]
        public Input<string>? RoutingKey { get; set; }

        public SyncInvokeFunctionArgs()
        {
        }
        public static new SyncInvokeFunctionArgs Empty => new SyncInvokeFunctionArgs();
    }

    public sealed class SyncInvokeFunctionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Function running parameter, which is in the JSON format. Maximum parameter size is 6 MB. This field corresponds to event
        /// input parameter.
        /// </summary>
        [Input("event")]
        public Input<string>? Event { get; set; }

        /// <summary>
        /// Function name.
        /// </summary>
        [Input("functionName")]
        public Input<string>? FunctionName { get; set; }

        /// <summary>
        /// Valid value: None (default) or Tail. If the value is Tail, log in the response will contain the corresponding function
        /// execution log (up to 4KB).
        /// </summary>
        [Input("logType")]
        public Input<string>? LogType { get; set; }

        /// <summary>
        /// Namespace. default is used if it's left empty.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// Version or alias of the function. It defaults to $DEFAULT.
        /// </summary>
        [Input("qualifier")]
        public Input<string>? Qualifier { get; set; }

        /// <summary>
        /// Traffic routing config in json format, e.g., {k:v}. Please note that both k and v must be strings. Up to 1024 bytes
        /// allowed.
        /// </summary>
        [Input("routingKey")]
        public Input<string>? RoutingKey { get; set; }

        public SyncInvokeFunctionState()
        {
        }
        public static new SyncInvokeFunctionState Empty => new SyncInvokeFunctionState();
    }
}
