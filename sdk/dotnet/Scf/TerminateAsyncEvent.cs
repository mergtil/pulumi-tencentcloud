// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Scf
{
    [TencentcloudResourceType("tencentcloud:Scf/terminateAsyncEvent:TerminateAsyncEvent")]
    public partial class TerminateAsyncEvent : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Function name.
        /// </summary>
        [Output("functionName")]
        public Output<string> FunctionName { get; private set; } = null!;

        /// <summary>
        /// Whether to enable grace shutdown. If it's true, a SIGTERM signal is sent to the specified request. See [Sending
        /// termination
        /// signal](https://www.tencentcloud.com/document/product/583/63969?from_cn_redirect=1#.E5.8F.91.E9.80.81.E7.BB.88.E6.AD.A2.E4.BF.A1.E5.8F.B7].
        /// It's set to false by default.
        /// </summary>
        [Output("graceShutdown")]
        public Output<bool?> GraceShutdown { get; private set; } = null!;

        /// <summary>
        /// Terminated invocation request ID.
        /// </summary>
        [Output("invokeRequestId")]
        public Output<string> InvokeRequestId { get; private set; } = null!;

        /// <summary>
        /// Namespace.
        /// </summary>
        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;


        /// <summary>
        /// Create a TerminateAsyncEvent resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TerminateAsyncEvent(string name, TerminateAsyncEventArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Scf/terminateAsyncEvent:TerminateAsyncEvent", name, args ?? new TerminateAsyncEventArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TerminateAsyncEvent(string name, Input<string> id, TerminateAsyncEventState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Scf/terminateAsyncEvent:TerminateAsyncEvent", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TerminateAsyncEvent resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TerminateAsyncEvent Get(string name, Input<string> id, TerminateAsyncEventState? state = null, CustomResourceOptions? options = null)
        {
            return new TerminateAsyncEvent(name, id, state, options);
        }
    }

    public sealed class TerminateAsyncEventArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Function name.
        /// </summary>
        [Input("functionName", required: true)]
        public Input<string> FunctionName { get; set; } = null!;

        /// <summary>
        /// Whether to enable grace shutdown. If it's true, a SIGTERM signal is sent to the specified request. See [Sending
        /// termination
        /// signal](https://www.tencentcloud.com/document/product/583/63969?from_cn_redirect=1#.E5.8F.91.E9.80.81.E7.BB.88.E6.AD.A2.E4.BF.A1.E5.8F.B7].
        /// It's set to false by default.
        /// </summary>
        [Input("graceShutdown")]
        public Input<bool>? GraceShutdown { get; set; }

        /// <summary>
        /// Terminated invocation request ID.
        /// </summary>
        [Input("invokeRequestId", required: true)]
        public Input<string> InvokeRequestId { get; set; } = null!;

        /// <summary>
        /// Namespace.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        public TerminateAsyncEventArgs()
        {
        }
        public static new TerminateAsyncEventArgs Empty => new TerminateAsyncEventArgs();
    }

    public sealed class TerminateAsyncEventState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Function name.
        /// </summary>
        [Input("functionName")]
        public Input<string>? FunctionName { get; set; }

        /// <summary>
        /// Whether to enable grace shutdown. If it's true, a SIGTERM signal is sent to the specified request. See [Sending
        /// termination
        /// signal](https://www.tencentcloud.com/document/product/583/63969?from_cn_redirect=1#.E5.8F.91.E9.80.81.E7.BB.88.E6.AD.A2.E4.BF.A1.E5.8F.B7].
        /// It's set to false by default.
        /// </summary>
        [Input("graceShutdown")]
        public Input<bool>? GraceShutdown { get; set; }

        /// <summary>
        /// Terminated invocation request ID.
        /// </summary>
        [Input("invokeRequestId")]
        public Input<string>? InvokeRequestId { get; set; }

        /// <summary>
        /// Namespace.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        public TerminateAsyncEventState()
        {
        }
        public static new TerminateAsyncEventState Empty => new TerminateAsyncEventState();
    }
}
