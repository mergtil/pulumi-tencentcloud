// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Css
{
    [TencentcloudResourceType("tencentcloud:Css/watermark:Watermark")]
    public partial class Watermark : global::Pulumi.CustomResource
    {
        /// <summary>
        /// height of the picture.
        /// </summary>
        [Output("height")]
        public Output<int?> Height { get; private set; } = null!;

        /// <summary>
        /// watermark url.
        /// </summary>
        [Output("pictureUrl")]
        public Output<string> PictureUrl { get; private set; } = null!;

        /// <summary>
        /// status. 0: not used, 1: used.
        /// </summary>
        [Output("status")]
        public Output<int> Status { get; private set; } = null!;

        /// <summary>
        /// watermark name.
        /// </summary>
        [Output("watermarkName")]
        public Output<string> WatermarkName { get; private set; } = null!;

        /// <summary>
        /// width of the picture.
        /// </summary>
        [Output("width")]
        public Output<int?> Width { get; private set; } = null!;

        /// <summary>
        /// x position of the picture.
        /// </summary>
        [Output("xPosition")]
        public Output<int?> XPosition { get; private set; } = null!;

        /// <summary>
        /// y position of the picture.
        /// </summary>
        [Output("yPosition")]
        public Output<int?> YPosition { get; private set; } = null!;


        /// <summary>
        /// Create a Watermark resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Watermark(string name, WatermarkArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Css/watermark:Watermark", name, args ?? new WatermarkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Watermark(string name, Input<string> id, WatermarkState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Css/watermark:Watermark", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Watermark resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Watermark Get(string name, Input<string> id, WatermarkState? state = null, CustomResourceOptions? options = null)
        {
            return new Watermark(name, id, state, options);
        }
    }

    public sealed class WatermarkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// height of the picture.
        /// </summary>
        [Input("height")]
        public Input<int>? Height { get; set; }

        /// <summary>
        /// watermark url.
        /// </summary>
        [Input("pictureUrl", required: true)]
        public Input<string> PictureUrl { get; set; } = null!;

        /// <summary>
        /// watermark name.
        /// </summary>
        [Input("watermarkName", required: true)]
        public Input<string> WatermarkName { get; set; } = null!;

        /// <summary>
        /// width of the picture.
        /// </summary>
        [Input("width")]
        public Input<int>? Width { get; set; }

        /// <summary>
        /// x position of the picture.
        /// </summary>
        [Input("xPosition")]
        public Input<int>? XPosition { get; set; }

        /// <summary>
        /// y position of the picture.
        /// </summary>
        [Input("yPosition")]
        public Input<int>? YPosition { get; set; }

        public WatermarkArgs()
        {
        }
        public static new WatermarkArgs Empty => new WatermarkArgs();
    }

    public sealed class WatermarkState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// height of the picture.
        /// </summary>
        [Input("height")]
        public Input<int>? Height { get; set; }

        /// <summary>
        /// watermark url.
        /// </summary>
        [Input("pictureUrl")]
        public Input<string>? PictureUrl { get; set; }

        /// <summary>
        /// status. 0: not used, 1: used.
        /// </summary>
        [Input("status")]
        public Input<int>? Status { get; set; }

        /// <summary>
        /// watermark name.
        /// </summary>
        [Input("watermarkName")]
        public Input<string>? WatermarkName { get; set; }

        /// <summary>
        /// width of the picture.
        /// </summary>
        [Input("width")]
        public Input<int>? Width { get; set; }

        /// <summary>
        /// x position of the picture.
        /// </summary>
        [Input("xPosition")]
        public Input<int>? XPosition { get; set; }

        /// <summary>
        /// y position of the picture.
        /// </summary>
        [Input("yPosition")]
        public Input<int>? YPosition { get; set; }

        public WatermarkState()
        {
        }
        public static new WatermarkState Empty => new WatermarkState();
    }
}
