// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Css
{
    [TencentcloudResourceType("tencentcloud:Css/pullStreamTask:PullStreamTask")]
    public partial class PullStreamTask : global::Pulumi.CustomResource
    {
        /// <summary>
        /// push app name.
        /// </summary>
        [Output("appName")]
        public Output<string> AppName { get; private set; } = null!;

        /// <summary>
        /// backup pull source type.
        /// </summary>
        [Output("backupSourceType")]
        public Output<string?> BackupSourceType { get; private set; } = null!;

        /// <summary>
        /// backup pull source.
        /// </summary>
        [Output("backupSourceUrl")]
        public Output<string?> BackupSourceUrl { get; private set; } = null!;

        /// <summary>
        /// defind the callback event you need, null for all. TaskStart, TaskExit, VodSourceFileStart, VodSourceFileFinish,
        /// ResetTaskConfig, PullFileUnstable, PushStreamUnstable, PullFileFailed, PushStreamFailed, FileEndEarly.
        /// </summary>
        [Output("callbackEvents")]
        public Output<ImmutableArray<string>> CallbackEvents { get; private set; } = null!;

        /// <summary>
        /// task event callback url.
        /// </summary>
        [Output("callbackUrl")]
        public Output<string?> CallbackUrl { get; private set; } = null!;

        /// <summary>
        /// desc for pull task.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// desc who create the task.
        /// </summary>
        [Output("createBy")]
        public Output<string> CreateBy { get; private set; } = null!;

        /// <summary>
        /// create time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// push domain name.
        /// </summary>
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        /// <summary>
        /// task end time.
        /// </summary>
        [Output("endTime")]
        public Output<string> EndTime { get; private set; } = null!;

        /// <summary>
        /// ignore_region for ignore the input region and reblance inside the server.
        /// </summary>
        [Output("extraCmd")]
        public Output<string?> ExtraCmd { get; private set; } = null!;

        /// <summary>
        /// task enable or disable.
        /// </summary>
        [Output("fileIndex")]
        public Output<int?> FileIndex { get; private set; } = null!;

        /// <summary>
        /// task enable or disable.
        /// </summary>
        [Output("offsetTime")]
        public Output<int?> OffsetTime { get; private set; } = null!;

        /// <summary>
        /// desc operator user name.
        /// </summary>
        [Output("operator")]
        public Output<string?> Operator { get; private set; } = null!;

        /// <summary>
        /// other pushing args.
        /// </summary>
        [Output("pushArgs")]
        public Output<string?> PushArgs { get; private set; } = null!;

        /// <summary>
        /// task run region.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// &amp;amp;#39;PullLivePushLive&amp;amp;#39;: SourceUrls live type, &amp;amp;#39;PullVodPushLive&amp;amp;#39;: SourceUrls vod type.
        /// </summary>
        [Output("sourceType")]
        public Output<string> SourceType { get; private set; } = null!;

        /// <summary>
        /// Pull Source media, SourceType=PullLivePushLive only 1 value, SourceType=PullLivePushLive can input multi values.
        /// </summary>
        [Output("sourceUrls")]
        public Output<ImmutableArray<string>> SourceUrls { get; private set; } = null!;

        /// <summary>
        /// task begin time.
        /// </summary>
        [Output("startTime")]
        public Output<string> StartTime { get; private set; } = null!;

        /// <summary>
        /// task enable or disable.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// push stream name.
        /// </summary>
        [Output("streamName")]
        public Output<string> StreamName { get; private set; } = null!;

        /// <summary>
        /// full target push url, DomainName, AppName, StreamName field must be empty.
        /// </summary>
        [Output("toUrl")]
        public Output<string?> ToUrl { get; private set; } = null!;

        /// <summary>
        /// desc who update the task.
        /// </summary>
        [Output("updateBy")]
        public Output<string> UpdateBy { get; private set; } = null!;

        /// <summary>
        /// update time.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// loop time for vod.
        /// </summary>
        [Output("vodLoopTimes")]
        public Output<int> VodLoopTimes { get; private set; } = null!;

        /// <summary>
        /// vod refresh method. &amp;amp;#39;ImmediateNewSource&amp;amp;#39;: switch to new source at once,
        /// &amp;amp;#39;ContinueBreakPoint&amp;amp;#39;: switch to new source while old source finish.
        /// </summary>
        [Output("vodRefreshType")]
        public Output<string> VodRefreshType { get; private set; } = null!;

        /// <summary>
        /// watermark list, max 4 setting.
        /// </summary>
        [Output("watermarkLists")]
        public Output<ImmutableArray<Outputs.PullStreamTaskWatermarkList>> WatermarkLists { get; private set; } = null!;


        /// <summary>
        /// Create a PullStreamTask resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PullStreamTask(string name, PullStreamTaskArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Css/pullStreamTask:PullStreamTask", name, args ?? new PullStreamTaskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PullStreamTask(string name, Input<string> id, PullStreamTaskState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Css/pullStreamTask:PullStreamTask", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PullStreamTask resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PullStreamTask Get(string name, Input<string> id, PullStreamTaskState? state = null, CustomResourceOptions? options = null)
        {
            return new PullStreamTask(name, id, state, options);
        }
    }

    public sealed class PullStreamTaskArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// push app name.
        /// </summary>
        [Input("appName", required: true)]
        public Input<string> AppName { get; set; } = null!;

        /// <summary>
        /// backup pull source type.
        /// </summary>
        [Input("backupSourceType")]
        public Input<string>? BackupSourceType { get; set; }

        /// <summary>
        /// backup pull source.
        /// </summary>
        [Input("backupSourceUrl")]
        public Input<string>? BackupSourceUrl { get; set; }

        [Input("callbackEvents")]
        private InputList<string>? _callbackEvents;

        /// <summary>
        /// defind the callback event you need, null for all. TaskStart, TaskExit, VodSourceFileStart, VodSourceFileFinish,
        /// ResetTaskConfig, PullFileUnstable, PushStreamUnstable, PullFileFailed, PushStreamFailed, FileEndEarly.
        /// </summary>
        public InputList<string> CallbackEvents
        {
            get => _callbackEvents ?? (_callbackEvents = new InputList<string>());
            set => _callbackEvents = value;
        }

        /// <summary>
        /// task event callback url.
        /// </summary>
        [Input("callbackUrl")]
        public Input<string>? CallbackUrl { get; set; }

        /// <summary>
        /// desc for pull task.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// push domain name.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        /// <summary>
        /// task end time.
        /// </summary>
        [Input("endTime", required: true)]
        public Input<string> EndTime { get; set; } = null!;

        /// <summary>
        /// ignore_region for ignore the input region and reblance inside the server.
        /// </summary>
        [Input("extraCmd")]
        public Input<string>? ExtraCmd { get; set; }

        /// <summary>
        /// task enable or disable.
        /// </summary>
        [Input("fileIndex")]
        public Input<int>? FileIndex { get; set; }

        /// <summary>
        /// task enable or disable.
        /// </summary>
        [Input("offsetTime")]
        public Input<int>? OffsetTime { get; set; }

        /// <summary>
        /// desc operator user name.
        /// </summary>
        [Input("operator")]
        public Input<string>? Operator { get; set; }

        /// <summary>
        /// other pushing args.
        /// </summary>
        [Input("pushArgs")]
        public Input<string>? PushArgs { get; set; }

        /// <summary>
        /// &amp;amp;#39;PullLivePushLive&amp;amp;#39;: SourceUrls live type, &amp;amp;#39;PullVodPushLive&amp;amp;#39;: SourceUrls vod type.
        /// </summary>
        [Input("sourceType", required: true)]
        public Input<string> SourceType { get; set; } = null!;

        [Input("sourceUrls", required: true)]
        private InputList<string>? _sourceUrls;

        /// <summary>
        /// Pull Source media, SourceType=PullLivePushLive only 1 value, SourceType=PullLivePushLive can input multi values.
        /// </summary>
        public InputList<string> SourceUrls
        {
            get => _sourceUrls ?? (_sourceUrls = new InputList<string>());
            set => _sourceUrls = value;
        }

        /// <summary>
        /// task begin time.
        /// </summary>
        [Input("startTime", required: true)]
        public Input<string> StartTime { get; set; } = null!;

        /// <summary>
        /// task enable or disable.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// push stream name.
        /// </summary>
        [Input("streamName", required: true)]
        public Input<string> StreamName { get; set; } = null!;

        /// <summary>
        /// full target push url, DomainName, AppName, StreamName field must be empty.
        /// </summary>
        [Input("toUrl")]
        public Input<string>? ToUrl { get; set; }

        /// <summary>
        /// loop time for vod.
        /// </summary>
        [Input("vodLoopTimes")]
        public Input<int>? VodLoopTimes { get; set; }

        /// <summary>
        /// vod refresh method. &amp;amp;#39;ImmediateNewSource&amp;amp;#39;: switch to new source at once,
        /// &amp;amp;#39;ContinueBreakPoint&amp;amp;#39;: switch to new source while old source finish.
        /// </summary>
        [Input("vodRefreshType")]
        public Input<string>? VodRefreshType { get; set; }

        [Input("watermarkLists")]
        private InputList<Inputs.PullStreamTaskWatermarkListArgs>? _watermarkLists;

        /// <summary>
        /// watermark list, max 4 setting.
        /// </summary>
        public InputList<Inputs.PullStreamTaskWatermarkListArgs> WatermarkLists
        {
            get => _watermarkLists ?? (_watermarkLists = new InputList<Inputs.PullStreamTaskWatermarkListArgs>());
            set => _watermarkLists = value;
        }

        public PullStreamTaskArgs()
        {
        }
        public static new PullStreamTaskArgs Empty => new PullStreamTaskArgs();
    }

    public sealed class PullStreamTaskState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// push app name.
        /// </summary>
        [Input("appName")]
        public Input<string>? AppName { get; set; }

        /// <summary>
        /// backup pull source type.
        /// </summary>
        [Input("backupSourceType")]
        public Input<string>? BackupSourceType { get; set; }

        /// <summary>
        /// backup pull source.
        /// </summary>
        [Input("backupSourceUrl")]
        public Input<string>? BackupSourceUrl { get; set; }

        [Input("callbackEvents")]
        private InputList<string>? _callbackEvents;

        /// <summary>
        /// defind the callback event you need, null for all. TaskStart, TaskExit, VodSourceFileStart, VodSourceFileFinish,
        /// ResetTaskConfig, PullFileUnstable, PushStreamUnstable, PullFileFailed, PushStreamFailed, FileEndEarly.
        /// </summary>
        public InputList<string> CallbackEvents
        {
            get => _callbackEvents ?? (_callbackEvents = new InputList<string>());
            set => _callbackEvents = value;
        }

        /// <summary>
        /// task event callback url.
        /// </summary>
        [Input("callbackUrl")]
        public Input<string>? CallbackUrl { get; set; }

        /// <summary>
        /// desc for pull task.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// desc who create the task.
        /// </summary>
        [Input("createBy")]
        public Input<string>? CreateBy { get; set; }

        /// <summary>
        /// create time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// push domain name.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// task end time.
        /// </summary>
        [Input("endTime")]
        public Input<string>? EndTime { get; set; }

        /// <summary>
        /// ignore_region for ignore the input region and reblance inside the server.
        /// </summary>
        [Input("extraCmd")]
        public Input<string>? ExtraCmd { get; set; }

        /// <summary>
        /// task enable or disable.
        /// </summary>
        [Input("fileIndex")]
        public Input<int>? FileIndex { get; set; }

        /// <summary>
        /// task enable or disable.
        /// </summary>
        [Input("offsetTime")]
        public Input<int>? OffsetTime { get; set; }

        /// <summary>
        /// desc operator user name.
        /// </summary>
        [Input("operator")]
        public Input<string>? Operator { get; set; }

        /// <summary>
        /// other pushing args.
        /// </summary>
        [Input("pushArgs")]
        public Input<string>? PushArgs { get; set; }

        /// <summary>
        /// task run region.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// &amp;amp;#39;PullLivePushLive&amp;amp;#39;: SourceUrls live type, &amp;amp;#39;PullVodPushLive&amp;amp;#39;: SourceUrls vod type.
        /// </summary>
        [Input("sourceType")]
        public Input<string>? SourceType { get; set; }

        [Input("sourceUrls")]
        private InputList<string>? _sourceUrls;

        /// <summary>
        /// Pull Source media, SourceType=PullLivePushLive only 1 value, SourceType=PullLivePushLive can input multi values.
        /// </summary>
        public InputList<string> SourceUrls
        {
            get => _sourceUrls ?? (_sourceUrls = new InputList<string>());
            set => _sourceUrls = value;
        }

        /// <summary>
        /// task begin time.
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        /// <summary>
        /// task enable or disable.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// push stream name.
        /// </summary>
        [Input("streamName")]
        public Input<string>? StreamName { get; set; }

        /// <summary>
        /// full target push url, DomainName, AppName, StreamName field must be empty.
        /// </summary>
        [Input("toUrl")]
        public Input<string>? ToUrl { get; set; }

        /// <summary>
        /// desc who update the task.
        /// </summary>
        [Input("updateBy")]
        public Input<string>? UpdateBy { get; set; }

        /// <summary>
        /// update time.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// loop time for vod.
        /// </summary>
        [Input("vodLoopTimes")]
        public Input<int>? VodLoopTimes { get; set; }

        /// <summary>
        /// vod refresh method. &amp;amp;#39;ImmediateNewSource&amp;amp;#39;: switch to new source at once,
        /// &amp;amp;#39;ContinueBreakPoint&amp;amp;#39;: switch to new source while old source finish.
        /// </summary>
        [Input("vodRefreshType")]
        public Input<string>? VodRefreshType { get; set; }

        [Input("watermarkLists")]
        private InputList<Inputs.PullStreamTaskWatermarkListGetArgs>? _watermarkLists;

        /// <summary>
        /// watermark list, max 4 setting.
        /// </summary>
        public InputList<Inputs.PullStreamTaskWatermarkListGetArgs> WatermarkLists
        {
            get => _watermarkLists ?? (_watermarkLists = new InputList<Inputs.PullStreamTaskWatermarkListGetArgs>());
            set => _watermarkLists = value;
        }

        public PullStreamTaskState()
        {
        }
        public static new PullStreamTaskState Empty => new PullStreamTaskState();
    }
}
