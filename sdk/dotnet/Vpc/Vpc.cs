// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Vpc
{
    [TencentcloudResourceType("tencentcloud:Vpc/vpc:Vpc")]
    public partial class Vpc : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of Assistant CIDR, NOTE: Only `NORMAL` typed CIDRs included, check the Docker CIDR by readonly
        /// `assistant_docker_cidrs`.
        /// </summary>
        [Output("assistantCidrs")]
        public Output<ImmutableArray<string>> AssistantCidrs { get; private set; } = null!;

        /// <summary>
        /// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and
        /// 192.168.0.0/16).
        /// </summary>
        [Output("cidrBlock")]
        public Output<string> CidrBlock { get; private set; } = null!;

        /// <summary>
        /// Creation time of VPC.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Default route table id, which created automatically after VPC create.
        /// </summary>
        [Output("defaultRouteTableId")]
        public Output<string> DefaultRouteTableId { get; private set; } = null!;

        /// <summary>
        /// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
        /// </summary>
        [Output("dnsServers")]
        public Output<ImmutableArray<string>> DnsServers { get; private set; } = null!;

        /// <summary>
        /// List of Docker Assistant CIDR.
        /// </summary>
        [Output("dockerAssistantCidrs")]
        public Output<ImmutableArray<string>> DockerAssistantCidrs { get; private set; } = null!;

        /// <summary>
        /// Indicates whether it is the default VPC for this region.
        /// </summary>
        [Output("isDefault")]
        public Output<bool> IsDefault { get; private set; } = null!;

        /// <summary>
        /// Indicates whether VPC multicast is enabled. The default value is 'true'.
        /// </summary>
        [Output("isMulticast")]
        public Output<bool?> IsMulticast { get; private set; } = null!;

        /// <summary>
        /// The name of the VPC.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Tags of the VPC.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Vpc resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Vpc(string name, VpcArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Vpc/vpc:Vpc", name, args ?? new VpcArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Vpc(string name, Input<string> id, VpcState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Vpc/vpc:Vpc", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Vpc resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Vpc Get(string name, Input<string> id, VpcState? state = null, CustomResourceOptions? options = null)
        {
            return new Vpc(name, id, state, options);
        }
    }

    public sealed class VpcArgs : global::Pulumi.ResourceArgs
    {
        [Input("assistantCidrs")]
        private InputList<string>? _assistantCidrs;

        /// <summary>
        /// List of Assistant CIDR, NOTE: Only `NORMAL` typed CIDRs included, check the Docker CIDR by readonly
        /// `assistant_docker_cidrs`.
        /// </summary>
        public InputList<string> AssistantCidrs
        {
            get => _assistantCidrs ?? (_assistantCidrs = new InputList<string>());
            set => _assistantCidrs = value;
        }

        /// <summary>
        /// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and
        /// 192.168.0.0/16).
        /// </summary>
        [Input("cidrBlock", required: true)]
        public Input<string> CidrBlock { get; set; } = null!;

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// Indicates whether VPC multicast is enabled. The default value is 'true'.
        /// </summary>
        [Input("isMulticast")]
        public Input<bool>? IsMulticast { get; set; }

        /// <summary>
        /// The name of the VPC.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// Tags of the VPC.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        public VpcArgs()
        {
        }
        public static new VpcArgs Empty => new VpcArgs();
    }

    public sealed class VpcState : global::Pulumi.ResourceArgs
    {
        [Input("assistantCidrs")]
        private InputList<string>? _assistantCidrs;

        /// <summary>
        /// List of Assistant CIDR, NOTE: Only `NORMAL` typed CIDRs included, check the Docker CIDR by readonly
        /// `assistant_docker_cidrs`.
        /// </summary>
        public InputList<string> AssistantCidrs
        {
            get => _assistantCidrs ?? (_assistantCidrs = new InputList<string>());
            set => _assistantCidrs = value;
        }

        /// <summary>
        /// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and
        /// 192.168.0.0/16).
        /// </summary>
        [Input("cidrBlock")]
        public Input<string>? CidrBlock { get; set; }

        /// <summary>
        /// Creation time of VPC.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Default route table id, which created automatically after VPC create.
        /// </summary>
        [Input("defaultRouteTableId")]
        public Input<string>? DefaultRouteTableId { get; set; }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        [Input("dockerAssistantCidrs")]
        private InputList<string>? _dockerAssistantCidrs;

        /// <summary>
        /// List of Docker Assistant CIDR.
        /// </summary>
        public InputList<string> DockerAssistantCidrs
        {
            get => _dockerAssistantCidrs ?? (_dockerAssistantCidrs = new InputList<string>());
            set => _dockerAssistantCidrs = value;
        }

        /// <summary>
        /// Indicates whether it is the default VPC for this region.
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        /// <summary>
        /// Indicates whether VPC multicast is enabled. The default value is 'true'.
        /// </summary>
        [Input("isMulticast")]
        public Input<bool>? IsMulticast { get; set; }

        /// <summary>
        /// The name of the VPC.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// Tags of the VPC.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        public VpcState()
        {
        }
        public static new VpcState Empty => new VpcState();
    }
}
