// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Sms
{
    [TencentcloudResourceType("tencentcloud:Sms/sign:Sign")]
    public partial class Sign : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Power of attorney, which should be submitted if SignPurpose is for use by others. You should Base64-encode the image
        /// first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this
        /// parameter. Note: this field will take effect only when SignPurpose is 1 (for user by others).
        /// </summary>
        [Output("commissionImage")]
        public Output<string?> CommissionImage { get; private set; } = null!;

        /// <summary>
        /// DocumentType is used for enterprise authentication, or website, app authentication, etc. DocumentType: 0, 1, 2, 3, 4, 5,
        /// 6, 7, 8.
        /// </summary>
        [Output("documentType")]
        public Output<int> DocumentType { get; private set; } = null!;

        /// <summary>
        /// Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
        /// </summary>
        [Output("international")]
        public Output<int> International { get; private set; } = null!;

        /// <summary>
        /// You should Base64-encode the image of the identity certificate corresponding to the signature first, remove the prefix
        /// data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter.
        /// </summary>
        [Output("proofImage")]
        public Output<string> ProofImage { get; private set; } = null!;

        /// <summary>
        /// Signature application remarks.
        /// </summary>
        [Output("remark")]
        public Output<string?> Remark { get; private set; } = null!;

        /// <summary>
        /// Sms sign name, unique.
        /// </summary>
        [Output("signName")]
        public Output<string> SignName { get; private set; } = null!;

        /// <summary>
        /// Signature purpose: 0: for personal use; 1: for others.
        /// </summary>
        [Output("signPurpose")]
        public Output<int> SignPurpose { get; private set; } = null!;

        /// <summary>
        /// Sms sign type: 0, 1, 2, 3, 4, 5, 6.
        /// </summary>
        [Output("signType")]
        public Output<int> SignType { get; private set; } = null!;


        /// <summary>
        /// Create a Sign resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Sign(string name, SignArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Sms/sign:Sign", name, args ?? new SignArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Sign(string name, Input<string> id, SignState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Sms/sign:Sign", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Sign resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Sign Get(string name, Input<string> id, SignState? state = null, CustomResourceOptions? options = null)
        {
            return new Sign(name, id, state, options);
        }
    }

    public sealed class SignArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Power of attorney, which should be submitted if SignPurpose is for use by others. You should Base64-encode the image
        /// first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this
        /// parameter. Note: this field will take effect only when SignPurpose is 1 (for user by others).
        /// </summary>
        [Input("commissionImage")]
        public Input<string>? CommissionImage { get; set; }

        /// <summary>
        /// DocumentType is used for enterprise authentication, or website, app authentication, etc. DocumentType: 0, 1, 2, 3, 4, 5,
        /// 6, 7, 8.
        /// </summary>
        [Input("documentType", required: true)]
        public Input<int> DocumentType { get; set; } = null!;

        /// <summary>
        /// Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
        /// </summary>
        [Input("international", required: true)]
        public Input<int> International { get; set; } = null!;

        /// <summary>
        /// You should Base64-encode the image of the identity certificate corresponding to the signature first, remove the prefix
        /// data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter.
        /// </summary>
        [Input("proofImage", required: true)]
        public Input<string> ProofImage { get; set; } = null!;

        /// <summary>
        /// Signature application remarks.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        /// <summary>
        /// Sms sign name, unique.
        /// </summary>
        [Input("signName", required: true)]
        public Input<string> SignName { get; set; } = null!;

        /// <summary>
        /// Signature purpose: 0: for personal use; 1: for others.
        /// </summary>
        [Input("signPurpose", required: true)]
        public Input<int> SignPurpose { get; set; } = null!;

        /// <summary>
        /// Sms sign type: 0, 1, 2, 3, 4, 5, 6.
        /// </summary>
        [Input("signType", required: true)]
        public Input<int> SignType { get; set; } = null!;

        public SignArgs()
        {
        }
        public static new SignArgs Empty => new SignArgs();
    }

    public sealed class SignState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Power of attorney, which should be submitted if SignPurpose is for use by others. You should Base64-encode the image
        /// first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this
        /// parameter. Note: this field will take effect only when SignPurpose is 1 (for user by others).
        /// </summary>
        [Input("commissionImage")]
        public Input<string>? CommissionImage { get; set; }

        /// <summary>
        /// DocumentType is used for enterprise authentication, or website, app authentication, etc. DocumentType: 0, 1, 2, 3, 4, 5,
        /// 6, 7, 8.
        /// </summary>
        [Input("documentType")]
        public Input<int>? DocumentType { get; set; }

        /// <summary>
        /// Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
        /// </summary>
        [Input("international")]
        public Input<int>? International { get; set; }

        /// <summary>
        /// You should Base64-encode the image of the identity certificate corresponding to the signature first, remove the prefix
        /// data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter.
        /// </summary>
        [Input("proofImage")]
        public Input<string>? ProofImage { get; set; }

        /// <summary>
        /// Signature application remarks.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        /// <summary>
        /// Sms sign name, unique.
        /// </summary>
        [Input("signName")]
        public Input<string>? SignName { get; set; }

        /// <summary>
        /// Signature purpose: 0: for personal use; 1: for others.
        /// </summary>
        [Input("signPurpose")]
        public Input<int>? SignPurpose { get; set; }

        /// <summary>
        /// Sms sign type: 0, 1, 2, 3, 4, 5, 6.
        /// </summary>
        [Input("signType")]
        public Input<int>? SignType { get; set; }

        public SignState()
        {
        }
        public static new SignState Empty => new SignState();
    }
}
