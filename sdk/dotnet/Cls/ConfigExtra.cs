// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Cls
{
    [TencentcloudResourceType("tencentcloud:Cls/configExtra:ConfigExtra")]
    public partial class ConfigExtra : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Collection configuration flag.
        /// </summary>
        [Output("configFlag")]
        public Output<string> ConfigFlag { get; private set; } = null!;

        /// <summary>
        /// Container file path info.
        /// </summary>
        [Output("containerFile")]
        public Output<Outputs.ConfigExtraContainerFile?> ContainerFile { get; private set; } = null!;

        /// <summary>
        /// Container stdout info.
        /// </summary>
        [Output("containerStdout")]
        public Output<Outputs.ConfigExtraContainerStdout> ContainerStdout { get; private set; } = null!;

        /// <summary>
        /// Collection path blocklist.
        /// </summary>
        [Output("excludePaths")]
        public Output<ImmutableArray<Outputs.ConfigExtraExcludePath>> ExcludePaths { get; private set; } = null!;

        /// <summary>
        /// Extraction rule. If ExtractRule is set, LogType must be set.
        /// </summary>
        [Output("extractRule")]
        public Output<Outputs.ConfigExtraExtractRule> ExtractRule { get; private set; } = null!;

        /// <summary>
        /// Binding group id.
        /// </summary>
        [Output("groupId")]
        public Output<string?> GroupId { get; private set; } = null!;

        /// <summary>
        /// Binding group ids.
        /// </summary>
        [Output("groupIds")]
        public Output<ImmutableArray<string>> GroupIds { get; private set; } = null!;

        /// <summary>
        /// Node file config info.
        /// </summary>
        [Output("hostFile")]
        public Output<Outputs.ConfigExtraHostFile> HostFile { get; private set; } = null!;

        /// <summary>
        /// Log format.
        /// </summary>
        [Output("logFormat")]
        public Output<string?> LogFormat { get; private set; } = null!;

        /// <summary>
        /// Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format;
        /// minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format.
        /// Default value: minimalist_log.
        /// </summary>
        [Output("logType")]
        public Output<string> LogType { get; private set; } = null!;

        /// <summary>
        /// Logset Id.
        /// </summary>
        [Output("logsetId")]
        public Output<string> LogsetId { get; private set; } = null!;

        /// <summary>
        /// Logset Name.
        /// </summary>
        [Output("logsetName")]
        public Output<string> LogsetName { get; private set; } = null!;

        /// <summary>
        /// Collection configuration name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Log topic ID (TopicId) of collection configuration.
        /// </summary>
        [Output("topicId")]
        public Output<string> TopicId { get; private set; } = null!;

        /// <summary>
        /// Topic Name.
        /// </summary>
        [Output("topicName")]
        public Output<string> TopicName { get; private set; } = null!;

        /// <summary>
        /// Type. Valid values: container_stdout; container_file; host_file.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Custom collection rule, which is a serialized JSON string.
        /// </summary>
        [Output("userDefineRule")]
        public Output<string?> UserDefineRule { get; private set; } = null!;


        /// <summary>
        /// Create a ConfigExtra resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConfigExtra(string name, ConfigExtraArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Cls/configExtra:ConfigExtra", name, args ?? new ConfigExtraArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConfigExtra(string name, Input<string> id, ConfigExtraState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Cls/configExtra:ConfigExtra", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConfigExtra resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConfigExtra Get(string name, Input<string> id, ConfigExtraState? state = null, CustomResourceOptions? options = null)
        {
            return new ConfigExtra(name, id, state, options);
        }
    }

    public sealed class ConfigExtraArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Collection configuration flag.
        /// </summary>
        [Input("configFlag", required: true)]
        public Input<string> ConfigFlag { get; set; } = null!;

        /// <summary>
        /// Container file path info.
        /// </summary>
        [Input("containerFile")]
        public Input<Inputs.ConfigExtraContainerFileArgs>? ContainerFile { get; set; }

        /// <summary>
        /// Container stdout info.
        /// </summary>
        [Input("containerStdout")]
        public Input<Inputs.ConfigExtraContainerStdoutArgs>? ContainerStdout { get; set; }

        [Input("excludePaths")]
        private InputList<Inputs.ConfigExtraExcludePathArgs>? _excludePaths;

        /// <summary>
        /// Collection path blocklist.
        /// </summary>
        public InputList<Inputs.ConfigExtraExcludePathArgs> ExcludePaths
        {
            get => _excludePaths ?? (_excludePaths = new InputList<Inputs.ConfigExtraExcludePathArgs>());
            set => _excludePaths = value;
        }

        /// <summary>
        /// Extraction rule. If ExtractRule is set, LogType must be set.
        /// </summary>
        [Input("extractRule")]
        public Input<Inputs.ConfigExtraExtractRuleArgs>? ExtractRule { get; set; }

        /// <summary>
        /// Binding group id.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        [Input("groupIds")]
        private InputList<string>? _groupIds;

        /// <summary>
        /// Binding group ids.
        /// </summary>
        public InputList<string> GroupIds
        {
            get => _groupIds ?? (_groupIds = new InputList<string>());
            set => _groupIds = value;
        }

        /// <summary>
        /// Node file config info.
        /// </summary>
        [Input("hostFile")]
        public Input<Inputs.ConfigExtraHostFileArgs>? HostFile { get; set; }

        /// <summary>
        /// Log format.
        /// </summary>
        [Input("logFormat")]
        public Input<string>? LogFormat { get; set; }

        /// <summary>
        /// Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format;
        /// minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format.
        /// Default value: minimalist_log.
        /// </summary>
        [Input("logType", required: true)]
        public Input<string> LogType { get; set; } = null!;

        /// <summary>
        /// Logset Id.
        /// </summary>
        [Input("logsetId", required: true)]
        public Input<string> LogsetId { get; set; } = null!;

        /// <summary>
        /// Logset Name.
        /// </summary>
        [Input("logsetName", required: true)]
        public Input<string> LogsetName { get; set; } = null!;

        /// <summary>
        /// Collection configuration name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Log topic ID (TopicId) of collection configuration.
        /// </summary>
        [Input("topicId", required: true)]
        public Input<string> TopicId { get; set; } = null!;

        /// <summary>
        /// Topic Name.
        /// </summary>
        [Input("topicName", required: true)]
        public Input<string> TopicName { get; set; } = null!;

        /// <summary>
        /// Type. Valid values: container_stdout; container_file; host_file.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Custom collection rule, which is a serialized JSON string.
        /// </summary>
        [Input("userDefineRule")]
        public Input<string>? UserDefineRule { get; set; }

        public ConfigExtraArgs()
        {
        }
        public static new ConfigExtraArgs Empty => new ConfigExtraArgs();
    }

    public sealed class ConfigExtraState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Collection configuration flag.
        /// </summary>
        [Input("configFlag")]
        public Input<string>? ConfigFlag { get; set; }

        /// <summary>
        /// Container file path info.
        /// </summary>
        [Input("containerFile")]
        public Input<Inputs.ConfigExtraContainerFileGetArgs>? ContainerFile { get; set; }

        /// <summary>
        /// Container stdout info.
        /// </summary>
        [Input("containerStdout")]
        public Input<Inputs.ConfigExtraContainerStdoutGetArgs>? ContainerStdout { get; set; }

        [Input("excludePaths")]
        private InputList<Inputs.ConfigExtraExcludePathGetArgs>? _excludePaths;

        /// <summary>
        /// Collection path blocklist.
        /// </summary>
        public InputList<Inputs.ConfigExtraExcludePathGetArgs> ExcludePaths
        {
            get => _excludePaths ?? (_excludePaths = new InputList<Inputs.ConfigExtraExcludePathGetArgs>());
            set => _excludePaths = value;
        }

        /// <summary>
        /// Extraction rule. If ExtractRule is set, LogType must be set.
        /// </summary>
        [Input("extractRule")]
        public Input<Inputs.ConfigExtraExtractRuleGetArgs>? ExtractRule { get; set; }

        /// <summary>
        /// Binding group id.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        [Input("groupIds")]
        private InputList<string>? _groupIds;

        /// <summary>
        /// Binding group ids.
        /// </summary>
        public InputList<string> GroupIds
        {
            get => _groupIds ?? (_groupIds = new InputList<string>());
            set => _groupIds = value;
        }

        /// <summary>
        /// Node file config info.
        /// </summary>
        [Input("hostFile")]
        public Input<Inputs.ConfigExtraHostFileGetArgs>? HostFile { get; set; }

        /// <summary>
        /// Log format.
        /// </summary>
        [Input("logFormat")]
        public Input<string>? LogFormat { get; set; }

        /// <summary>
        /// Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format;
        /// minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format.
        /// Default value: minimalist_log.
        /// </summary>
        [Input("logType")]
        public Input<string>? LogType { get; set; }

        /// <summary>
        /// Logset Id.
        /// </summary>
        [Input("logsetId")]
        public Input<string>? LogsetId { get; set; }

        /// <summary>
        /// Logset Name.
        /// </summary>
        [Input("logsetName")]
        public Input<string>? LogsetName { get; set; }

        /// <summary>
        /// Collection configuration name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Log topic ID (TopicId) of collection configuration.
        /// </summary>
        [Input("topicId")]
        public Input<string>? TopicId { get; set; }

        /// <summary>
        /// Topic Name.
        /// </summary>
        [Input("topicName")]
        public Input<string>? TopicName { get; set; }

        /// <summary>
        /// Type. Valid values: container_stdout; container_file; host_file.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Custom collection rule, which is a serialized JSON string.
        /// </summary>
        [Input("userDefineRule")]
        public Input<string>? UserDefineRule { get; set; }

        public ConfigExtraState()
        {
        }
        public static new ConfigExtraState Empty => new ConfigExtraState();
    }
}
