// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Mps
{
    [TencentcloudResourceType("tencentcloud:Mps/aiAnalysisTemplate:AiAnalysisTemplate")]
    public partial class AiAnalysisTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Ai classification task control parameters.
        /// </summary>
        [Output("classificationConfigure")]
        public Output<Outputs.AiAnalysisTemplateClassificationConfigure?> ClassificationConfigure { get; private set; } = null!;

        /// <summary>
        /// Ai analysis template description information, length limit: 256 characters.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// Ai cover task control parameters.
        /// </summary>
        [Output("coverConfigure")]
        public Output<Outputs.AiAnalysisTemplateCoverConfigure?> CoverConfigure { get; private set; } = null!;

        /// <summary>
        /// Ai frame tag task control parameters.
        /// </summary>
        [Output("frameTagConfigure")]
        public Output<Outputs.AiAnalysisTemplateFrameTagConfigure?> FrameTagConfigure { get; private set; } = null!;

        /// <summary>
        /// Ai analysis template name, length limit: 64 characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Ai tag task control parameters.
        /// </summary>
        [Output("tagConfigure")]
        public Output<Outputs.AiAnalysisTemplateTagConfigure?> TagConfigure { get; private set; } = null!;


        /// <summary>
        /// Create a AiAnalysisTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AiAnalysisTemplate(string name, AiAnalysisTemplateArgs? args = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Mps/aiAnalysisTemplate:AiAnalysisTemplate", name, args ?? new AiAnalysisTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AiAnalysisTemplate(string name, Input<string> id, AiAnalysisTemplateState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Mps/aiAnalysisTemplate:AiAnalysisTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AiAnalysisTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AiAnalysisTemplate Get(string name, Input<string> id, AiAnalysisTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new AiAnalysisTemplate(name, id, state, options);
        }
    }

    public sealed class AiAnalysisTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Ai classification task control parameters.
        /// </summary>
        [Input("classificationConfigure")]
        public Input<Inputs.AiAnalysisTemplateClassificationConfigureArgs>? ClassificationConfigure { get; set; }

        /// <summary>
        /// Ai analysis template description information, length limit: 256 characters.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Ai cover task control parameters.
        /// </summary>
        [Input("coverConfigure")]
        public Input<Inputs.AiAnalysisTemplateCoverConfigureArgs>? CoverConfigure { get; set; }

        /// <summary>
        /// Ai frame tag task control parameters.
        /// </summary>
        [Input("frameTagConfigure")]
        public Input<Inputs.AiAnalysisTemplateFrameTagConfigureArgs>? FrameTagConfigure { get; set; }

        /// <summary>
        /// Ai analysis template name, length limit: 64 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Ai tag task control parameters.
        /// </summary>
        [Input("tagConfigure")]
        public Input<Inputs.AiAnalysisTemplateTagConfigureArgs>? TagConfigure { get; set; }

        public AiAnalysisTemplateArgs()
        {
        }
        public static new AiAnalysisTemplateArgs Empty => new AiAnalysisTemplateArgs();
    }

    public sealed class AiAnalysisTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Ai classification task control parameters.
        /// </summary>
        [Input("classificationConfigure")]
        public Input<Inputs.AiAnalysisTemplateClassificationConfigureGetArgs>? ClassificationConfigure { get; set; }

        /// <summary>
        /// Ai analysis template description information, length limit: 256 characters.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Ai cover task control parameters.
        /// </summary>
        [Input("coverConfigure")]
        public Input<Inputs.AiAnalysisTemplateCoverConfigureGetArgs>? CoverConfigure { get; set; }

        /// <summary>
        /// Ai frame tag task control parameters.
        /// </summary>
        [Input("frameTagConfigure")]
        public Input<Inputs.AiAnalysisTemplateFrameTagConfigureGetArgs>? FrameTagConfigure { get; set; }

        /// <summary>
        /// Ai analysis template name, length limit: 64 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Ai tag task control parameters.
        /// </summary>
        [Input("tagConfigure")]
        public Input<Inputs.AiAnalysisTemplateTagConfigureGetArgs>? TagConfigure { get; set; }

        public AiAnalysisTemplateState()
        {
        }
        public static new AiAnalysisTemplateState Empty => new AiAnalysisTemplateState();
    }
}
