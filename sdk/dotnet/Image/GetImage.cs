// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Image
{
    public static class GetImage
    {
        public static Task<GetImageResult> InvokeAsync(GetImageArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImageResult>("tencentcloud:Image/getImage:getImage", args ?? new GetImageArgs(), options.WithDefaults());

        public static Output<GetImageResult> Invoke(GetImageInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageResult>("tencentcloud:Image/getImage:getImage", args ?? new GetImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetImageFilterArgs>? _filters;
        public List<Inputs.GetImageFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetImageFilterArgs>());
            set => _filters = value;
        }

        [Input("imageNameRegex")]
        public string? ImageNameRegex { get; set; }

        [Input("osName")]
        public string? OsName { get; set; }

        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetImageArgs()
        {
        }
        public static new GetImageArgs Empty => new GetImageArgs();
    }

    public sealed class GetImageInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetImageFilterInputArgs>? _filters;
        public InputList<Inputs.GetImageFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetImageFilterInputArgs>());
            set => _filters = value;
        }

        [Input("imageNameRegex")]
        public Input<string>? ImageNameRegex { get; set; }

        [Input("osName")]
        public Input<string>? OsName { get; set; }

        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetImageInvokeArgs()
        {
        }
        public static new GetImageInvokeArgs Empty => new GetImageInvokeArgs();
    }


    [OutputType]
    public sealed class GetImageResult
    {
        public readonly ImmutableArray<Outputs.GetImageFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ImageId;
        public readonly string ImageName;
        public readonly string? ImageNameRegex;
        public readonly string? OsName;
        public readonly string? ResultOutputFile;

        [OutputConstructor]
        private GetImageResult(
            ImmutableArray<Outputs.GetImageFilterResult> filters,

            string id,

            string imageId,

            string imageName,

            string? imageNameRegex,

            string? osName,

            string? resultOutputFile)
        {
            Filters = filters;
            Id = id;
            ImageId = imageId;
            ImageName = imageName;
            ImageNameRegex = imageNameRegex;
            OsName = osName;
            ResultOutputFile = resultOutputFile;
        }
    }
}
