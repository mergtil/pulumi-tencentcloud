// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Clickhouse
{
    [TencentcloudResourceType("tencentcloud:Clickhouse/instance:Instance")]
    public partial class Instance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Billing type: `PREPAID` prepaid, `POSTPAID_BY_HOUR` postpaid.
        /// </summary>
        [Output("chargeType")]
        public Output<string> ChargeType { get; private set; } = null!;

        /// <summary>
        /// CLS log set id.
        /// </summary>
        [Output("clsLogSetId")]
        public Output<string> ClsLogSetId { get; private set; } = null!;

        /// <summary>
        /// ZK node.
        /// </summary>
        [Output("commonSpec")]
        public Output<Outputs.InstanceCommonSpec> CommonSpec { get; private set; } = null!;

        /// <summary>
        /// COS bucket name.
        /// </summary>
        [Output("cosBucketName")]
        public Output<string> CosBucketName { get; private set; } = null!;

        /// <summary>
        /// Data spec.
        /// </summary>
        [Output("dataSpec")]
        public Output<Outputs.InstanceDataSpec> DataSpec { get; private set; } = null!;

        /// <summary>
        /// Expire time.
        /// </summary>
        [Output("expireTime")]
        public Output<string> ExpireTime { get; private set; } = null!;

        /// <summary>
        /// Whether it is highly available.
        /// </summary>
        [Output("haFlag")]
        public Output<bool> HaFlag { get; private set; } = null!;

        /// <summary>
        /// Whether ZK is highly available.
        /// </summary>
        [Output("haZk")]
        public Output<bool> HaZk { get; private set; } = null!;

        /// <summary>
        /// Instance name.
        /// </summary>
        [Output("instanceName")]
        public Output<string> InstanceName { get; private set; } = null!;

        /// <summary>
        /// Whether it is mounted on a bare disk.
        /// </summary>
        [Output("mountDiskType")]
        public Output<int> MountDiskType { get; private set; } = null!;

        /// <summary>
        /// Product version.
        /// </summary>
        [Output("productVersion")]
        public Output<string> ProductVersion { get; private set; } = null!;

        /// <summary>
        /// PREPAID needs to be passed. Whether to renew automatically. 1 means auto renewal is enabled.
        /// </summary>
        [Output("renewFlag")]
        public Output<int> RenewFlag { get; private set; } = null!;

        /// <summary>
        /// Subnet.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// Tag description list.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>> Tags { get; private set; } = null!;

        /// <summary>
        /// Prepaid needs to be delivered, billing time length, how many months.
        /// </summary>
        [Output("timeSpan")]
        public Output<int?> TimeSpan { get; private set; } = null!;

        /// <summary>
        /// Private network.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// Availability zone.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Clickhouse/instance:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Clickhouse/instance:Instance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, state, options);
        }
    }

    public sealed class InstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Billing type: `PREPAID` prepaid, `POSTPAID_BY_HOUR` postpaid.
        /// </summary>
        [Input("chargeType", required: true)]
        public Input<string> ChargeType { get; set; } = null!;

        /// <summary>
        /// CLS log set id.
        /// </summary>
        [Input("clsLogSetId")]
        public Input<string>? ClsLogSetId { get; set; }

        /// <summary>
        /// ZK node.
        /// </summary>
        [Input("commonSpec")]
        public Input<Inputs.InstanceCommonSpecArgs>? CommonSpec { get; set; }

        /// <summary>
        /// COS bucket name.
        /// </summary>
        [Input("cosBucketName")]
        public Input<string>? CosBucketName { get; set; }

        /// <summary>
        /// Data spec.
        /// </summary>
        [Input("dataSpec", required: true)]
        public Input<Inputs.InstanceDataSpecArgs> DataSpec { get; set; } = null!;

        /// <summary>
        /// Whether it is highly available.
        /// </summary>
        [Input("haFlag", required: true)]
        public Input<bool> HaFlag { get; set; } = null!;

        /// <summary>
        /// Whether ZK is highly available.
        /// </summary>
        [Input("haZk")]
        public Input<bool>? HaZk { get; set; }

        /// <summary>
        /// Instance name.
        /// </summary>
        [Input("instanceName", required: true)]
        public Input<string> InstanceName { get; set; } = null!;

        /// <summary>
        /// Whether it is mounted on a bare disk.
        /// </summary>
        [Input("mountDiskType")]
        public Input<int>? MountDiskType { get; set; }

        /// <summary>
        /// Product version.
        /// </summary>
        [Input("productVersion", required: true)]
        public Input<string> ProductVersion { get; set; } = null!;

        /// <summary>
        /// PREPAID needs to be passed. Whether to renew automatically. 1 means auto renewal is enabled.
        /// </summary>
        [Input("renewFlag")]
        public Input<int>? RenewFlag { get; set; }

        /// <summary>
        /// Subnet.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// Tag description list.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// Prepaid needs to be delivered, billing time length, how many months.
        /// </summary>
        [Input("timeSpan")]
        public Input<int>? TimeSpan { get; set; }

        /// <summary>
        /// Private network.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        /// <summary>
        /// Availability zone.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public InstanceArgs()
        {
        }
        public static new InstanceArgs Empty => new InstanceArgs();
    }

    public sealed class InstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Billing type: `PREPAID` prepaid, `POSTPAID_BY_HOUR` postpaid.
        /// </summary>
        [Input("chargeType")]
        public Input<string>? ChargeType { get; set; }

        /// <summary>
        /// CLS log set id.
        /// </summary>
        [Input("clsLogSetId")]
        public Input<string>? ClsLogSetId { get; set; }

        /// <summary>
        /// ZK node.
        /// </summary>
        [Input("commonSpec")]
        public Input<Inputs.InstanceCommonSpecGetArgs>? CommonSpec { get; set; }

        /// <summary>
        /// COS bucket name.
        /// </summary>
        [Input("cosBucketName")]
        public Input<string>? CosBucketName { get; set; }

        /// <summary>
        /// Data spec.
        /// </summary>
        [Input("dataSpec")]
        public Input<Inputs.InstanceDataSpecGetArgs>? DataSpec { get; set; }

        /// <summary>
        /// Expire time.
        /// </summary>
        [Input("expireTime")]
        public Input<string>? ExpireTime { get; set; }

        /// <summary>
        /// Whether it is highly available.
        /// </summary>
        [Input("haFlag")]
        public Input<bool>? HaFlag { get; set; }

        /// <summary>
        /// Whether ZK is highly available.
        /// </summary>
        [Input("haZk")]
        public Input<bool>? HaZk { get; set; }

        /// <summary>
        /// Instance name.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// Whether it is mounted on a bare disk.
        /// </summary>
        [Input("mountDiskType")]
        public Input<int>? MountDiskType { get; set; }

        /// <summary>
        /// Product version.
        /// </summary>
        [Input("productVersion")]
        public Input<string>? ProductVersion { get; set; }

        /// <summary>
        /// PREPAID needs to be passed. Whether to renew automatically. 1 means auto renewal is enabled.
        /// </summary>
        [Input("renewFlag")]
        public Input<int>? RenewFlag { get; set; }

        /// <summary>
        /// Subnet.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// Tag description list.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// Prepaid needs to be delivered, billing time length, how many months.
        /// </summary>
        [Input("timeSpan")]
        public Input<int>? TimeSpan { get; set; }

        /// <summary>
        /// Private network.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// Availability zone.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public InstanceState()
        {
        }
        public static new InstanceState Empty => new InstanceState();
    }
}
