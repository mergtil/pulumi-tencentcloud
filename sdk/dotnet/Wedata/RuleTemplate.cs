// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Wedata
{
    [TencentcloudResourceType("tencentcloud:Wedata/ruleTemplate:RuleTemplate")]
    public partial class RuleTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of Template.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether to associate other library tables.
        /// </summary>
        [Output("multiSourceFlag")]
        public Output<bool?> MultiSourceFlag { get; private set; } = null!;

        /// <summary>
        /// Template name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Project ID.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Quality inspection dimensions. `1`: Accuracy, `2`: Uniqueness, `3`: Completeness, `4`: Consistency, `5`: Timeliness,
        /// `6`: Effectiveness.
        /// </summary>
        [Output("qualityDim")]
        public Output<int?> QualityDim { get; private set; } = null!;

        /// <summary>
        /// The engine type corresponding to the source. `2`: hive,`4`: spark, `16`: dlc.
        /// </summary>
        [Output("sourceEngineTypes")]
        public Output<ImmutableArray<int>> SourceEngineTypes { get; private set; } = null!;

        /// <summary>
        /// Source data object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
        /// </summary>
        [Output("sourceObjectType")]
        public Output<int?> SourceObjectType { get; private set; } = null!;

        /// <summary>
        /// SQL Expression.
        /// </summary>
        [Output("sqlExpression")]
        public Output<string?> SqlExpression { get; private set; } = null!;

        /// <summary>
        /// Template type. `1` means System template, `2` means Custom template.
        /// </summary>
        [Output("type")]
        public Output<int?> Type { get; private set; } = null!;

        /// <summary>
        /// If add where.
        /// </summary>
        [Output("whereFlag")]
        public Output<bool?> WhereFlag { get; private set; } = null!;


        /// <summary>
        /// Create a RuleTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RuleTemplate(string name, RuleTemplateArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Wedata/ruleTemplate:RuleTemplate", name, args ?? new RuleTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RuleTemplate(string name, Input<string> id, RuleTemplateState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Wedata/ruleTemplate:RuleTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RuleTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RuleTemplate Get(string name, Input<string> id, RuleTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new RuleTemplate(name, id, state, options);
        }
    }

    public sealed class RuleTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of Template.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether to associate other library tables.
        /// </summary>
        [Input("multiSourceFlag")]
        public Input<bool>? MultiSourceFlag { get; set; }

        /// <summary>
        /// Template name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Project ID.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Quality inspection dimensions. `1`: Accuracy, `2`: Uniqueness, `3`: Completeness, `4`: Consistency, `5`: Timeliness,
        /// `6`: Effectiveness.
        /// </summary>
        [Input("qualityDim")]
        public Input<int>? QualityDim { get; set; }

        [Input("sourceEngineTypes")]
        private InputList<int>? _sourceEngineTypes;

        /// <summary>
        /// The engine type corresponding to the source. `2`: hive,`4`: spark, `16`: dlc.
        /// </summary>
        public InputList<int> SourceEngineTypes
        {
            get => _sourceEngineTypes ?? (_sourceEngineTypes = new InputList<int>());
            set => _sourceEngineTypes = value;
        }

        /// <summary>
        /// Source data object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
        /// </summary>
        [Input("sourceObjectType")]
        public Input<int>? SourceObjectType { get; set; }

        /// <summary>
        /// SQL Expression.
        /// </summary>
        [Input("sqlExpression")]
        public Input<string>? SqlExpression { get; set; }

        /// <summary>
        /// Template type. `1` means System template, `2` means Custom template.
        /// </summary>
        [Input("type")]
        public Input<int>? Type { get; set; }

        /// <summary>
        /// If add where.
        /// </summary>
        [Input("whereFlag")]
        public Input<bool>? WhereFlag { get; set; }

        public RuleTemplateArgs()
        {
        }
        public static new RuleTemplateArgs Empty => new RuleTemplateArgs();
    }

    public sealed class RuleTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of Template.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether to associate other library tables.
        /// </summary>
        [Input("multiSourceFlag")]
        public Input<bool>? MultiSourceFlag { get; set; }

        /// <summary>
        /// Template name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Project ID.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Quality inspection dimensions. `1`: Accuracy, `2`: Uniqueness, `3`: Completeness, `4`: Consistency, `5`: Timeliness,
        /// `6`: Effectiveness.
        /// </summary>
        [Input("qualityDim")]
        public Input<int>? QualityDim { get; set; }

        [Input("sourceEngineTypes")]
        private InputList<int>? _sourceEngineTypes;

        /// <summary>
        /// The engine type corresponding to the source. `2`: hive,`4`: spark, `16`: dlc.
        /// </summary>
        public InputList<int> SourceEngineTypes
        {
            get => _sourceEngineTypes ?? (_sourceEngineTypes = new InputList<int>());
            set => _sourceEngineTypes = value;
        }

        /// <summary>
        /// Source data object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
        /// </summary>
        [Input("sourceObjectType")]
        public Input<int>? SourceObjectType { get; set; }

        /// <summary>
        /// SQL Expression.
        /// </summary>
        [Input("sqlExpression")]
        public Input<string>? SqlExpression { get; set; }

        /// <summary>
        /// Template type. `1` means System template, `2` means Custom template.
        /// </summary>
        [Input("type")]
        public Input<int>? Type { get; set; }

        /// <summary>
        /// If add where.
        /// </summary>
        [Input("whereFlag")]
        public Input<bool>? WhereFlag { get; set; }

        public RuleTemplateState()
        {
        }
        public static new RuleTemplateState Empty => new RuleTemplateState();
    }
}
