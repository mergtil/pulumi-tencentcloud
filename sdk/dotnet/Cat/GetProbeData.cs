// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Cat
{
    public static class GetProbeData
    {
        public static Task<GetProbeDataResult> InvokeAsync(GetProbeDataArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProbeDataResult>("tencentcloud:Cat/getProbeData:getProbeData", args ?? new GetProbeDataArgs(), options.WithDefaults());

        public static Output<GetProbeDataResult> Invoke(GetProbeDataInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProbeDataResult>("tencentcloud:Cat/getProbeData:getProbeData", args ?? new GetProbeDataInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProbeDataArgs : global::Pulumi.InvokeArgs
    {
        [Input("ascending", required: true)]
        public bool Ascending { get; set; }

        [Input("beginTime", required: true)]
        public int BeginTime { get; set; }

        [Input("cities")]
        private List<string>? _cities;
        public List<string> Cities
        {
            get => _cities ?? (_cities = new List<string>());
            set => _cities = value;
        }

        [Input("codes")]
        private List<string>? _codes;
        public List<string> Codes
        {
            get => _codes ?? (_codes = new List<string>());
            set => _codes = value;
        }

        [Input("districts")]
        private List<string>? _districts;
        public List<string> Districts
        {
            get => _districts ?? (_districts = new List<string>());
            set => _districts = value;
        }

        [Input("endTime", required: true)]
        public int EndTime { get; set; }

        [Input("errorTypes")]
        private List<string>? _errorTypes;
        public List<string> ErrorTypes
        {
            get => _errorTypes ?? (_errorTypes = new List<string>());
            set => _errorTypes = value;
        }

        [Input("limit", required: true)]
        public int Limit { get; set; }

        [Input("offset", required: true)]
        public int Offset { get; set; }

        [Input("operators")]
        private List<string>? _operators;
        public List<string> Operators
        {
            get => _operators ?? (_operators = new List<string>());
            set => _operators = value;
        }

        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        [Input("selectedFields", required: true)]
        private List<string>? _selectedFields;
        public List<string> SelectedFields
        {
            get => _selectedFields ?? (_selectedFields = new List<string>());
            set => _selectedFields = value;
        }

        [Input("sortField", required: true)]
        public string SortField { get; set; } = null!;

        [Input("taskIds")]
        private List<string>? _taskIds;
        public List<string> TaskIds
        {
            get => _taskIds ?? (_taskIds = new List<string>());
            set => _taskIds = value;
        }

        [Input("taskType", required: true)]
        public string TaskType { get; set; } = null!;

        public GetProbeDataArgs()
        {
        }
        public static new GetProbeDataArgs Empty => new GetProbeDataArgs();
    }

    public sealed class GetProbeDataInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ascending", required: true)]
        public Input<bool> Ascending { get; set; } = null!;

        [Input("beginTime", required: true)]
        public Input<int> BeginTime { get; set; } = null!;

        [Input("cities")]
        private InputList<string>? _cities;
        public InputList<string> Cities
        {
            get => _cities ?? (_cities = new InputList<string>());
            set => _cities = value;
        }

        [Input("codes")]
        private InputList<string>? _codes;
        public InputList<string> Codes
        {
            get => _codes ?? (_codes = new InputList<string>());
            set => _codes = value;
        }

        [Input("districts")]
        private InputList<string>? _districts;
        public InputList<string> Districts
        {
            get => _districts ?? (_districts = new InputList<string>());
            set => _districts = value;
        }

        [Input("endTime", required: true)]
        public Input<int> EndTime { get; set; } = null!;

        [Input("errorTypes")]
        private InputList<string>? _errorTypes;
        public InputList<string> ErrorTypes
        {
            get => _errorTypes ?? (_errorTypes = new InputList<string>());
            set => _errorTypes = value;
        }

        [Input("limit", required: true)]
        public Input<int> Limit { get; set; } = null!;

        [Input("offset", required: true)]
        public Input<int> Offset { get; set; } = null!;

        [Input("operators")]
        private InputList<string>? _operators;
        public InputList<string> Operators
        {
            get => _operators ?? (_operators = new InputList<string>());
            set => _operators = value;
        }

        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        [Input("selectedFields", required: true)]
        private InputList<string>? _selectedFields;
        public InputList<string> SelectedFields
        {
            get => _selectedFields ?? (_selectedFields = new InputList<string>());
            set => _selectedFields = value;
        }

        [Input("sortField", required: true)]
        public Input<string> SortField { get; set; } = null!;

        [Input("taskIds")]
        private InputList<string>? _taskIds;
        public InputList<string> TaskIds
        {
            get => _taskIds ?? (_taskIds = new InputList<string>());
            set => _taskIds = value;
        }

        [Input("taskType", required: true)]
        public Input<string> TaskType { get; set; } = null!;

        public GetProbeDataInvokeArgs()
        {
        }
        public static new GetProbeDataInvokeArgs Empty => new GetProbeDataInvokeArgs();
    }


    [OutputType]
    public sealed class GetProbeDataResult
    {
        public readonly bool Ascending;
        public readonly int BeginTime;
        public readonly ImmutableArray<string> Cities;
        public readonly ImmutableArray<string> Codes;
        public readonly ImmutableArray<Outputs.GetProbeDataDetailedSingleDataDefineResult> DetailedSingleDataDefines;
        public readonly ImmutableArray<string> Districts;
        public readonly int EndTime;
        public readonly ImmutableArray<string> ErrorTypes;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int Limit;
        public readonly int Offset;
        public readonly ImmutableArray<string> Operators;
        public readonly string? ResultOutputFile;
        public readonly ImmutableArray<string> SelectedFields;
        public readonly string SortField;
        public readonly ImmutableArray<string> TaskIds;
        public readonly string TaskType;

        [OutputConstructor]
        private GetProbeDataResult(
            bool ascending,

            int beginTime,

            ImmutableArray<string> cities,

            ImmutableArray<string> codes,

            ImmutableArray<Outputs.GetProbeDataDetailedSingleDataDefineResult> detailedSingleDataDefines,

            ImmutableArray<string> districts,

            int endTime,

            ImmutableArray<string> errorTypes,

            string id,

            int limit,

            int offset,

            ImmutableArray<string> operators,

            string? resultOutputFile,

            ImmutableArray<string> selectedFields,

            string sortField,

            ImmutableArray<string> taskIds,

            string taskType)
        {
            Ascending = ascending;
            BeginTime = beginTime;
            Cities = cities;
            Codes = codes;
            DetailedSingleDataDefines = detailedSingleDataDefines;
            Districts = districts;
            EndTime = endTime;
            ErrorTypes = errorTypes;
            Id = id;
            Limit = limit;
            Offset = offset;
            Operators = operators;
            ResultOutputFile = resultOutputFile;
            SelectedFields = selectedFields;
            SortField = sortField;
            TaskIds = taskIds;
            TaskType = taskType;
        }
    }
}
