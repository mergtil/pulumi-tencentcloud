// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Ckafka
{
    [TencentcloudResourceType("tencentcloud:Ckafka/route:Route")]
    public partial class Route : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Access type. Valid values: - 0: PLAINTEXT (in clear text, supported by both the old version and the community version
        /// without user information) - 1: SASL_PLAINTEXT (in clear text, but at the beginning of the data, authentication will be
        /// logged in through SASL, which is only supported by the community version) - 2: SSL (SSL encrypted communication without
        /// user information, supported by both older and community versions) - 3: SASL_SSL (SSL encrypted communication. When the
        /// data starts, authentication will be logged in through SASL. Only the community version supports it).
        /// </summary>
        [Output("accessType")]
        public Output<int> AccessType { get; private set; } = null!;

        /// <summary>
        /// Auth flag.
        /// </summary>
        [Output("authFlag")]
        public Output<int?> AuthFlag { get; private set; } = null!;

        /// <summary>
        /// Virtual IP list (1 to 1 broker nodes).
        /// </summary>
        [Output("brokerVipLists")]
        public Output<ImmutableArray<Outputs.RouteBrokerVipList>> BrokerVipLists { get; private set; } = null!;

        /// <summary>
        /// Caller appid.
        /// </summary>
        [Output("callerAppid")]
        public Output<int?> CallerAppid { get; private set; } = null!;

        /// <summary>
        /// Instance id.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Ip.
        /// </summary>
        [Output("ip")]
        public Output<string> Ip { get; private set; } = null!;

        /// <summary>
        /// Public network.
        /// </summary>
        [Output("publicNetwork")]
        public Output<int?> PublicNetwork { get; private set; } = null!;

        /// <summary>
        /// Subnet id.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// Virtual IP list.
        /// </summary>
        [Output("vipLists")]
        public Output<ImmutableArray<Outputs.RouteVipList>> VipLists { get; private set; } = null!;

        /// <summary>
        /// Routing network type (3:vpc routing; 4: standard support routing; 7: professional support routing).
        /// </summary>
        [Output("vipType")]
        public Output<int> VipType { get; private set; } = null!;

        /// <summary>
        /// Vpc id.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a Route resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Route(string name, RouteArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Ckafka/route:Route", name, args ?? new RouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Route(string name, Input<string> id, RouteState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Ckafka/route:Route", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Route resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Route Get(string name, Input<string> id, RouteState? state = null, CustomResourceOptions? options = null)
        {
            return new Route(name, id, state, options);
        }
    }

    public sealed class RouteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access type. Valid values: - 0: PLAINTEXT (in clear text, supported by both the old version and the community version
        /// without user information) - 1: SASL_PLAINTEXT (in clear text, but at the beginning of the data, authentication will be
        /// logged in through SASL, which is only supported by the community version) - 2: SSL (SSL encrypted communication without
        /// user information, supported by both older and community versions) - 3: SASL_SSL (SSL encrypted communication. When the
        /// data starts, authentication will be logged in through SASL. Only the community version supports it).
        /// </summary>
        [Input("accessType")]
        public Input<int>? AccessType { get; set; }

        /// <summary>
        /// Auth flag.
        /// </summary>
        [Input("authFlag")]
        public Input<int>? AuthFlag { get; set; }

        /// <summary>
        /// Caller appid.
        /// </summary>
        [Input("callerAppid")]
        public Input<int>? CallerAppid { get; set; }

        /// <summary>
        /// Instance id.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Ip.
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// Public network.
        /// </summary>
        [Input("publicNetwork")]
        public Input<int>? PublicNetwork { get; set; }

        /// <summary>
        /// Subnet id.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// Routing network type (3:vpc routing; 4: standard support routing; 7: professional support routing).
        /// </summary>
        [Input("vipType", required: true)]
        public Input<int> VipType { get; set; } = null!;

        /// <summary>
        /// Vpc id.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public RouteArgs()
        {
        }
        public static new RouteArgs Empty => new RouteArgs();
    }

    public sealed class RouteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access type. Valid values: - 0: PLAINTEXT (in clear text, supported by both the old version and the community version
        /// without user information) - 1: SASL_PLAINTEXT (in clear text, but at the beginning of the data, authentication will be
        /// logged in through SASL, which is only supported by the community version) - 2: SSL (SSL encrypted communication without
        /// user information, supported by both older and community versions) - 3: SASL_SSL (SSL encrypted communication. When the
        /// data starts, authentication will be logged in through SASL. Only the community version supports it).
        /// </summary>
        [Input("accessType")]
        public Input<int>? AccessType { get; set; }

        /// <summary>
        /// Auth flag.
        /// </summary>
        [Input("authFlag")]
        public Input<int>? AuthFlag { get; set; }

        [Input("brokerVipLists")]
        private InputList<Inputs.RouteBrokerVipListGetArgs>? _brokerVipLists;

        /// <summary>
        /// Virtual IP list (1 to 1 broker nodes).
        /// </summary>
        public InputList<Inputs.RouteBrokerVipListGetArgs> BrokerVipLists
        {
            get => _brokerVipLists ?? (_brokerVipLists = new InputList<Inputs.RouteBrokerVipListGetArgs>());
            set => _brokerVipLists = value;
        }

        /// <summary>
        /// Caller appid.
        /// </summary>
        [Input("callerAppid")]
        public Input<int>? CallerAppid { get; set; }

        /// <summary>
        /// Instance id.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Ip.
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// Public network.
        /// </summary>
        [Input("publicNetwork")]
        public Input<int>? PublicNetwork { get; set; }

        /// <summary>
        /// Subnet id.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("vipLists")]
        private InputList<Inputs.RouteVipListGetArgs>? _vipLists;

        /// <summary>
        /// Virtual IP list.
        /// </summary>
        public InputList<Inputs.RouteVipListGetArgs> VipLists
        {
            get => _vipLists ?? (_vipLists = new InputList<Inputs.RouteVipListGetArgs>());
            set => _vipLists = value;
        }

        /// <summary>
        /// Routing network type (3:vpc routing; 4: standard support routing; 7: professional support routing).
        /// </summary>
        [Input("vipType")]
        public Input<int>? VipType { get; set; }

        /// <summary>
        /// Vpc id.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public RouteState()
        {
        }
        public static new RouteState Empty => new RouteState();
    }
}
