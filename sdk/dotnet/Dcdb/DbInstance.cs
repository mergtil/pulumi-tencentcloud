// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Dcdb
{
    [TencentcloudResourceType("tencentcloud:Dcdb/dbInstance:DbInstance")]
    public partial class DbInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Automatic renewal flag, 0 means the default state (the user has not set it, that is, the initial state is manual
        /// renewal, and the user has activated the prepaid non-stop privilege and will also perform automatic renewal). 1 means
        /// automatic renewal, 2 means no automatic renewal (user setting). if the business has no concept of renewal or automatic
        /// renewal is not required, it needs to be set to 0.
        /// </summary>
        [Output("autoRenewFlag")]
        public Output<int?> AutoRenewFlag { get; private set; } = null!;

        /// <summary>
        /// Whether to automatically use vouchers for payment, not used by default.
        /// </summary>
        [Output("autoVoucher")]
        public Output<bool?> AutoVoucher { get; private set; } = null!;

        /// <summary>
        /// Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. 8.0.18 - MySQL 8.0.18; 10.1.9 - Mariadb 10.1.9;
        /// 5.7.17 - Percona 5.7.17 If not filled, the default is 5.7.17, which means Percona 5.7.17.
        /// </summary>
        [Output("dbVersionId")]
        public Output<string?> DbVersionId { get; private set; } = null!;

        /// <summary>
        /// DCN source instance ID.
        /// </summary>
        [Output("dcnInstanceId")]
        public Output<string?> DcnInstanceId { get; private set; } = null!;

        /// <summary>
        /// DCN source region.
        /// </summary>
        [Output("dcnRegion")]
        public Output<string?> DcnRegion { get; private set; } = null!;

        /// <summary>
        /// Whether to open the extranet access.
        /// </summary>
        [Output("extranetAccess")]
        public Output<bool?> ExtranetAccess { get; private set; } = null!;

        /// <summary>
        /// parameter list. The optional values of this interface are: character_set_server (character set, must be passed),
        /// lower_case_table_names (table name is case sensitive, must be passed, 0 - sensitive; 1 - insensitive), innodb_page_size
        /// (innodb data page, default 16K), sync_mode ( Synchronous mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong
        /// synchronous degenerate. The default is strong synchronous degenerate) .
        /// </summary>
        [Output("initParams")]
        public Output<ImmutableArray<Outputs.DbInstanceInitParam>> InitParams { get; private set; } = null!;

        /// <summary>
        /// Instance name, you can set the name of the instance independently through this field.
        /// </summary>
        [Output("instanceName")]
        public Output<string?> InstanceName { get; private set; } = null!;

        /// <summary>
        /// Whether to support IPv6.
        /// </summary>
        [Output("ipv6Flag")]
        public Output<int?> Ipv6Flag { get; private set; } = null!;

        /// <summary>
        /// The length of time you want to buy, unit: month.
        /// </summary>
        [Output("period")]
        public Output<int> Period { get; private set; } = null!;

        /// <summary>
        /// Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default
        /// project.
        /// </summary>
        [Output("projectId")]
        public Output<int?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Array of tag key-value pairs.
        /// </summary>
        [Output("resourceTags")]
        public Output<ImmutableArray<Outputs.DbInstanceResourceTag>> ResourceTags { get; private set; } = null!;

        /// <summary>
        /// Security group ids, the security group can be passed in the form of an array, compatible with the previous
        /// SecurityGroupId parameter.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// The number of instance fragments, the optional range is 2-8, and new fragments can be added to a maximum of 64 fragments
        /// by upgrading the instance.
        /// </summary>
        [Output("shardCount")]
        public Output<int> ShardCount { get; private set; } = null!;

        /// <summary>
        /// Shard memory size, unit: GB, can pass DescribeShardSpec Query the instance specification to obtain.
        /// </summary>
        [Output("shardMemory")]
        public Output<int> ShardMemory { get; private set; } = null!;

        /// <summary>
        /// Number of single shard nodes, can pass DescribeShardSpec Query the instance specification to obtain.
        /// </summary>
        [Output("shardNodeCount")]
        public Output<int> ShardNodeCount { get; private set; } = null!;

        /// <summary>
        /// Shard storage size, unit: GB, can pass DescribeShardSpec Query the instance specification to obtain.
        /// </summary>
        [Output("shardStorage")]
        public Output<int> ShardStorage { get; private set; } = null!;

        /// <summary>
        /// Virtual private network subnet ID, required when VpcId is not empty.
        /// </summary>
        [Output("subnetId")]
        public Output<string?> SubnetId { get; private set; } = null!;

        /// <summary>
        /// The field is required to specify VIP.
        /// </summary>
        [Output("vip")]
        public Output<string> Vip { get; private set; } = null!;

        /// <summary>
        /// The field is required to specify VIPv6.
        /// </summary>
        [Output("vipv6")]
        public Output<string> Vipv6 { get; private set; } = null!;

        /// <summary>
        /// Voucher ID list, currently only supports specifying one voucher.
        /// </summary>
        [Output("voucherIds")]
        public Output<ImmutableArray<string>> VoucherIds { get; private set; } = null!;

        /// <summary>
        /// Virtual private network ID, if not passed or passed empty, it means that it is created as a basic network.
        /// </summary>
        [Output("vpcId")]
        public Output<string?> VpcId { get; private set; } = null!;

        /// <summary>
        /// Intranet port.
        /// </summary>
        [Output("vport")]
        public Output<int> Vport { get; private set; } = null!;

        /// <summary>
        /// The availability zone distribution of shard nodes can be filled with up to two availability zones. When the shard
        /// specification is one master and two slaves, two of the nodes are in the first availability zone.Note that the current
        /// availability zone that can be sold needs to be pulled through the DescribeDCDBSaleInfo interface.
        /// </summary>
        [Output("zones")]
        public Output<ImmutableArray<string>> Zones { get; private set; } = null!;


        /// <summary>
        /// Create a DbInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DbInstance(string name, DbInstanceArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Dcdb/dbInstance:DbInstance", name, args ?? new DbInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DbInstance(string name, Input<string> id, DbInstanceState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Dcdb/dbInstance:DbInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DbInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DbInstance Get(string name, Input<string> id, DbInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new DbInstance(name, id, state, options);
        }
    }

    public sealed class DbInstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Automatic renewal flag, 0 means the default state (the user has not set it, that is, the initial state is manual
        /// renewal, and the user has activated the prepaid non-stop privilege and will also perform automatic renewal). 1 means
        /// automatic renewal, 2 means no automatic renewal (user setting). if the business has no concept of renewal or automatic
        /// renewal is not required, it needs to be set to 0.
        /// </summary>
        [Input("autoRenewFlag")]
        public Input<int>? AutoRenewFlag { get; set; }

        /// <summary>
        /// Whether to automatically use vouchers for payment, not used by default.
        /// </summary>
        [Input("autoVoucher")]
        public Input<bool>? AutoVoucher { get; set; }

        /// <summary>
        /// Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. 8.0.18 - MySQL 8.0.18; 10.1.9 - Mariadb 10.1.9;
        /// 5.7.17 - Percona 5.7.17 If not filled, the default is 5.7.17, which means Percona 5.7.17.
        /// </summary>
        [Input("dbVersionId")]
        public Input<string>? DbVersionId { get; set; }

        /// <summary>
        /// DCN source instance ID.
        /// </summary>
        [Input("dcnInstanceId")]
        public Input<string>? DcnInstanceId { get; set; }

        /// <summary>
        /// DCN source region.
        /// </summary>
        [Input("dcnRegion")]
        public Input<string>? DcnRegion { get; set; }

        /// <summary>
        /// Whether to open the extranet access.
        /// </summary>
        [Input("extranetAccess")]
        public Input<bool>? ExtranetAccess { get; set; }

        [Input("initParams")]
        private InputList<Inputs.DbInstanceInitParamArgs>? _initParams;

        /// <summary>
        /// parameter list. The optional values of this interface are: character_set_server (character set, must be passed),
        /// lower_case_table_names (table name is case sensitive, must be passed, 0 - sensitive; 1 - insensitive), innodb_page_size
        /// (innodb data page, default 16K), sync_mode ( Synchronous mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong
        /// synchronous degenerate. The default is strong synchronous degenerate) .
        /// </summary>
        public InputList<Inputs.DbInstanceInitParamArgs> InitParams
        {
            get => _initParams ?? (_initParams = new InputList<Inputs.DbInstanceInitParamArgs>());
            set => _initParams = value;
        }

        /// <summary>
        /// Instance name, you can set the name of the instance independently through this field.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// Whether to support IPv6.
        /// </summary>
        [Input("ipv6Flag")]
        public Input<int>? Ipv6Flag { get; set; }

        /// <summary>
        /// The length of time you want to buy, unit: month.
        /// </summary>
        [Input("period", required: true)]
        public Input<int> Period { get; set; } = null!;

        /// <summary>
        /// Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default
        /// project.
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        [Input("resourceTags")]
        private InputList<Inputs.DbInstanceResourceTagArgs>? _resourceTags;

        /// <summary>
        /// Array of tag key-value pairs.
        /// </summary>
        public InputList<Inputs.DbInstanceResourceTagArgs> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new InputList<Inputs.DbInstanceResourceTagArgs>());
            set => _resourceTags = value;
        }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// Security group ids, the security group can be passed in the form of an array, compatible with the previous
        /// SecurityGroupId parameter.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// The number of instance fragments, the optional range is 2-8, and new fragments can be added to a maximum of 64 fragments
        /// by upgrading the instance.
        /// </summary>
        [Input("shardCount", required: true)]
        public Input<int> ShardCount { get; set; } = null!;

        /// <summary>
        /// Shard memory size, unit: GB, can pass DescribeShardSpec Query the instance specification to obtain.
        /// </summary>
        [Input("shardMemory", required: true)]
        public Input<int> ShardMemory { get; set; } = null!;

        /// <summary>
        /// Number of single shard nodes, can pass DescribeShardSpec Query the instance specification to obtain.
        /// </summary>
        [Input("shardNodeCount", required: true)]
        public Input<int> ShardNodeCount { get; set; } = null!;

        /// <summary>
        /// Shard storage size, unit: GB, can pass DescribeShardSpec Query the instance specification to obtain.
        /// </summary>
        [Input("shardStorage", required: true)]
        public Input<int> ShardStorage { get; set; } = null!;

        /// <summary>
        /// Virtual private network subnet ID, required when VpcId is not empty.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// The field is required to specify VIP.
        /// </summary>
        [Input("vip")]
        public Input<string>? Vip { get; set; }

        /// <summary>
        /// The field is required to specify VIPv6.
        /// </summary>
        [Input("vipv6")]
        public Input<string>? Vipv6 { get; set; }

        [Input("voucherIds")]
        private InputList<string>? _voucherIds;

        /// <summary>
        /// Voucher ID list, currently only supports specifying one voucher.
        /// </summary>
        public InputList<string> VoucherIds
        {
            get => _voucherIds ?? (_voucherIds = new InputList<string>());
            set => _voucherIds = value;
        }

        /// <summary>
        /// Virtual private network ID, if not passed or passed empty, it means that it is created as a basic network.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        [Input("zones", required: true)]
        private InputList<string>? _zones;

        /// <summary>
        /// The availability zone distribution of shard nodes can be filled with up to two availability zones. When the shard
        /// specification is one master and two slaves, two of the nodes are in the first availability zone.Note that the current
        /// availability zone that can be sold needs to be pulled through the DescribeDCDBSaleInfo interface.
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public DbInstanceArgs()
        {
        }
        public static new DbInstanceArgs Empty => new DbInstanceArgs();
    }

    public sealed class DbInstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Automatic renewal flag, 0 means the default state (the user has not set it, that is, the initial state is manual
        /// renewal, and the user has activated the prepaid non-stop privilege and will also perform automatic renewal). 1 means
        /// automatic renewal, 2 means no automatic renewal (user setting). if the business has no concept of renewal or automatic
        /// renewal is not required, it needs to be set to 0.
        /// </summary>
        [Input("autoRenewFlag")]
        public Input<int>? AutoRenewFlag { get; set; }

        /// <summary>
        /// Whether to automatically use vouchers for payment, not used by default.
        /// </summary>
        [Input("autoVoucher")]
        public Input<bool>? AutoVoucher { get; set; }

        /// <summary>
        /// Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. 8.0.18 - MySQL 8.0.18; 10.1.9 - Mariadb 10.1.9;
        /// 5.7.17 - Percona 5.7.17 If not filled, the default is 5.7.17, which means Percona 5.7.17.
        /// </summary>
        [Input("dbVersionId")]
        public Input<string>? DbVersionId { get; set; }

        /// <summary>
        /// DCN source instance ID.
        /// </summary>
        [Input("dcnInstanceId")]
        public Input<string>? DcnInstanceId { get; set; }

        /// <summary>
        /// DCN source region.
        /// </summary>
        [Input("dcnRegion")]
        public Input<string>? DcnRegion { get; set; }

        /// <summary>
        /// Whether to open the extranet access.
        /// </summary>
        [Input("extranetAccess")]
        public Input<bool>? ExtranetAccess { get; set; }

        [Input("initParams")]
        private InputList<Inputs.DbInstanceInitParamGetArgs>? _initParams;

        /// <summary>
        /// parameter list. The optional values of this interface are: character_set_server (character set, must be passed),
        /// lower_case_table_names (table name is case sensitive, must be passed, 0 - sensitive; 1 - insensitive), innodb_page_size
        /// (innodb data page, default 16K), sync_mode ( Synchronous mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong
        /// synchronous degenerate. The default is strong synchronous degenerate) .
        /// </summary>
        public InputList<Inputs.DbInstanceInitParamGetArgs> InitParams
        {
            get => _initParams ?? (_initParams = new InputList<Inputs.DbInstanceInitParamGetArgs>());
            set => _initParams = value;
        }

        /// <summary>
        /// Instance name, you can set the name of the instance independently through this field.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// Whether to support IPv6.
        /// </summary>
        [Input("ipv6Flag")]
        public Input<int>? Ipv6Flag { get; set; }

        /// <summary>
        /// The length of time you want to buy, unit: month.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default
        /// project.
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        [Input("resourceTags")]
        private InputList<Inputs.DbInstanceResourceTagGetArgs>? _resourceTags;

        /// <summary>
        /// Array of tag key-value pairs.
        /// </summary>
        public InputList<Inputs.DbInstanceResourceTagGetArgs> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new InputList<Inputs.DbInstanceResourceTagGetArgs>());
            set => _resourceTags = value;
        }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// Security group ids, the security group can be passed in the form of an array, compatible with the previous
        /// SecurityGroupId parameter.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// The number of instance fragments, the optional range is 2-8, and new fragments can be added to a maximum of 64 fragments
        /// by upgrading the instance.
        /// </summary>
        [Input("shardCount")]
        public Input<int>? ShardCount { get; set; }

        /// <summary>
        /// Shard memory size, unit: GB, can pass DescribeShardSpec Query the instance specification to obtain.
        /// </summary>
        [Input("shardMemory")]
        public Input<int>? ShardMemory { get; set; }

        /// <summary>
        /// Number of single shard nodes, can pass DescribeShardSpec Query the instance specification to obtain.
        /// </summary>
        [Input("shardNodeCount")]
        public Input<int>? ShardNodeCount { get; set; }

        /// <summary>
        /// Shard storage size, unit: GB, can pass DescribeShardSpec Query the instance specification to obtain.
        /// </summary>
        [Input("shardStorage")]
        public Input<int>? ShardStorage { get; set; }

        /// <summary>
        /// Virtual private network subnet ID, required when VpcId is not empty.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// The field is required to specify VIP.
        /// </summary>
        [Input("vip")]
        public Input<string>? Vip { get; set; }

        /// <summary>
        /// The field is required to specify VIPv6.
        /// </summary>
        [Input("vipv6")]
        public Input<string>? Vipv6 { get; set; }

        [Input("voucherIds")]
        private InputList<string>? _voucherIds;

        /// <summary>
        /// Voucher ID list, currently only supports specifying one voucher.
        /// </summary>
        public InputList<string> VoucherIds
        {
            get => _voucherIds ?? (_voucherIds = new InputList<string>());
            set => _voucherIds = value;
        }

        /// <summary>
        /// Virtual private network ID, if not passed or passed empty, it means that it is created as a basic network.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// Intranet port.
        /// </summary>
        [Input("vport")]
        public Input<int>? Vport { get; set; }

        [Input("zones")]
        private InputList<string>? _zones;

        /// <summary>
        /// The availability zone distribution of shard nodes can be filled with up to two availability zones. When the shard
        /// specification is one master and two slaves, two of the nodes are in the first availability zone.Note that the current
        /// availability zone that can be sold needs to be pulled through the DescribeDCDBSaleInfo interface.
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public DbInstanceState()
        {
        }
        public static new DbInstanceState Empty => new DbInstanceState();
    }
}
