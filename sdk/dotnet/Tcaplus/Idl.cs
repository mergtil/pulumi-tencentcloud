// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Tcaplus
{
    [TencentcloudResourceType("tencentcloud:Tcaplus/idl:Idl")]
    public partial class Idl : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the TcaplusDB cluster to which the table group belongs.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// IDL file content of the TcaplusDB table.
        /// </summary>
        [Output("fileContent")]
        public Output<string> FileContent { get; private set; } = null!;

        /// <summary>
        /// File ext type of the IDL file. If `file_type` is `PROTO`, `file_ext_type` must be 'proto'; If `file_type` is `TDR`,
        /// `file_ext_type` must be 'xml'.
        /// </summary>
        [Output("fileExtType")]
        public Output<string> FileExtType { get; private set; } = null!;

        /// <summary>
        /// Name of the IDL file.
        /// </summary>
        [Output("fileName")]
        public Output<string> FileName { get; private set; } = null!;

        /// <summary>
        /// Type of the IDL file. Valid values are PROTO and TDR.
        /// </summary>
        [Output("fileType")]
        public Output<string> FileType { get; private set; } = null!;

        /// <summary>
        /// Table info of the IDL.
        /// </summary>
        [Output("tableInfos")]
        public Output<ImmutableArray<Outputs.IdlTableInfo>> TableInfos { get; private set; } = null!;

        /// <summary>
        /// ID of the table group to which the IDL file belongs.
        /// </summary>
        [Output("tablegroupId")]
        public Output<string> TablegroupId { get; private set; } = null!;


        /// <summary>
        /// Create a Idl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Idl(string name, IdlArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Tcaplus/idl:Idl", name, args ?? new IdlArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Idl(string name, Input<string> id, IdlState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Tcaplus/idl:Idl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Idl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Idl Get(string name, Input<string> id, IdlState? state = null, CustomResourceOptions? options = null)
        {
            return new Idl(name, id, state, options);
        }
    }

    public sealed class IdlArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the TcaplusDB cluster to which the table group belongs.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// IDL file content of the TcaplusDB table.
        /// </summary>
        [Input("fileContent", required: true)]
        public Input<string> FileContent { get; set; } = null!;

        /// <summary>
        /// File ext type of the IDL file. If `file_type` is `PROTO`, `file_ext_type` must be 'proto'; If `file_type` is `TDR`,
        /// `file_ext_type` must be 'xml'.
        /// </summary>
        [Input("fileExtType", required: true)]
        public Input<string> FileExtType { get; set; } = null!;

        /// <summary>
        /// Name of the IDL file.
        /// </summary>
        [Input("fileName", required: true)]
        public Input<string> FileName { get; set; } = null!;

        /// <summary>
        /// Type of the IDL file. Valid values are PROTO and TDR.
        /// </summary>
        [Input("fileType", required: true)]
        public Input<string> FileType { get; set; } = null!;

        /// <summary>
        /// ID of the table group to which the IDL file belongs.
        /// </summary>
        [Input("tablegroupId", required: true)]
        public Input<string> TablegroupId { get; set; } = null!;

        public IdlArgs()
        {
        }
        public static new IdlArgs Empty => new IdlArgs();
    }

    public sealed class IdlState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the TcaplusDB cluster to which the table group belongs.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// IDL file content of the TcaplusDB table.
        /// </summary>
        [Input("fileContent")]
        public Input<string>? FileContent { get; set; }

        /// <summary>
        /// File ext type of the IDL file. If `file_type` is `PROTO`, `file_ext_type` must be 'proto'; If `file_type` is `TDR`,
        /// `file_ext_type` must be 'xml'.
        /// </summary>
        [Input("fileExtType")]
        public Input<string>? FileExtType { get; set; }

        /// <summary>
        /// Name of the IDL file.
        /// </summary>
        [Input("fileName")]
        public Input<string>? FileName { get; set; }

        /// <summary>
        /// Type of the IDL file. Valid values are PROTO and TDR.
        /// </summary>
        [Input("fileType")]
        public Input<string>? FileType { get; set; }

        [Input("tableInfos")]
        private InputList<Inputs.IdlTableInfoGetArgs>? _tableInfos;

        /// <summary>
        /// Table info of the IDL.
        /// </summary>
        public InputList<Inputs.IdlTableInfoGetArgs> TableInfos
        {
            get => _tableInfos ?? (_tableInfos = new InputList<Inputs.IdlTableInfoGetArgs>());
            set => _tableInfos = value;
        }

        /// <summary>
        /// ID of the table group to which the IDL file belongs.
        /// </summary>
        [Input("tablegroupId")]
        public Input<string>? TablegroupId { get; set; }

        public IdlState()
        {
        }
        public static new IdlState Empty => new IdlState();
    }
}
