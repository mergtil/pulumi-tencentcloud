// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Mariadb
{
    [TencentcloudResourceType("tencentcloud:Mariadb/accountPrivileges:AccountPrivileges")]
    public partial class AccountPrivileges : global::Pulumi.CustomResource
    {
        /// <summary>
        /// account information.
        /// </summary>
        [Output("accounts")]
        public Output<Outputs.AccountPrivilegesAccounts> Accounts { get; private set; } = null!;

        /// <summary>
        /// Column permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `REFERENCES`.Note: if the parameter is
        /// left empty, no change will be made to the granted column permissions. To clear the granted column permissions, set
        /// `Privileges` to an empty array.
        /// </summary>
        [Output("columnPrivileges")]
        public Output<ImmutableArray<Outputs.AccountPrivilegesColumnPrivilege>> ColumnPrivileges { get; private set; } = null!;

        /// <summary>
        /// Database permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`,
        /// `REFERENCES`, `INDEX`, `ALTER`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE
        /// ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the
        /// granted database permissions. To clear the granted database permissions, set `Privileges` to an empty array.
        /// </summary>
        [Output("databasePrivileges")]
        public Output<ImmutableArray<Outputs.AccountPrivilegesDatabasePrivilege>> DatabasePrivileges { get; private set; } = null!;

        /// <summary>
        /// Database function permissions. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not
        /// passed in, no change will be made to the granted function permissions. To clear the granted function permissions, set
        /// `Privileges` to an empty array.
        /// </summary>
        [Output("functionPrivileges")]
        public Output<ImmutableArray<Outputs.AccountPrivilegesFunctionPrivilege>> FunctionPrivileges { get; private set; } = null!;

        /// <summary>
        /// Global permission. Valid values of `GlobalPrivileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `PROCESS`,
        /// `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `SHOW DATABASES`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE
        /// VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no
        /// change will be made to the granted global permissions. To clear the granted global permissions, set the parameter to an
        /// empty array.
        /// </summary>
        [Output("globalPrivileges")]
        public Output<ImmutableArray<string>> GlobalPrivileges { get; private set; } = null!;

        /// <summary>
        /// instance id.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Database stored procedure permission. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is
        /// not passed in, no change will be made to the granted stored procedure permissions. To clear the granted stored procedure
        /// permissions, set `Privileges` to an empty array.
        /// </summary>
        [Output("procedurePrivileges")]
        public Output<ImmutableArray<Outputs.AccountPrivilegesProcedurePrivilege>> ProcedurePrivileges { get; private set; } = null!;

        /// <summary>
        /// `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`,
        /// `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted table permissions. To clear the
        /// granted table permissions, set `Privileges` to an empty array.
        /// </summary>
        [Output("tablePrivileges")]
        public Output<ImmutableArray<Outputs.AccountPrivilegesTablePrivilege>> TablePrivileges { get; private set; } = null!;

        /// <summary>
        /// Database view permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`,
        /// `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change
        /// will be made to the granted view permissions. To clear the granted view permissions, set `Privileges` to an empty array.
        /// </summary>
        [Output("viewPrivileges")]
        public Output<ImmutableArray<Outputs.AccountPrivilegesViewPrivilege>> ViewPrivileges { get; private set; } = null!;


        /// <summary>
        /// Create a AccountPrivileges resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccountPrivileges(string name, AccountPrivilegesArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Mariadb/accountPrivileges:AccountPrivileges", name, args ?? new AccountPrivilegesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccountPrivileges(string name, Input<string> id, AccountPrivilegesState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Mariadb/accountPrivileges:AccountPrivileges", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccountPrivileges resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccountPrivileges Get(string name, Input<string> id, AccountPrivilegesState? state = null, CustomResourceOptions? options = null)
        {
            return new AccountPrivileges(name, id, state, options);
        }
    }

    public sealed class AccountPrivilegesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// account information.
        /// </summary>
        [Input("accounts", required: true)]
        public Input<Inputs.AccountPrivilegesAccountsArgs> Accounts { get; set; } = null!;

        [Input("columnPrivileges")]
        private InputList<Inputs.AccountPrivilegesColumnPrivilegeArgs>? _columnPrivileges;

        /// <summary>
        /// Column permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `REFERENCES`.Note: if the parameter is
        /// left empty, no change will be made to the granted column permissions. To clear the granted column permissions, set
        /// `Privileges` to an empty array.
        /// </summary>
        public InputList<Inputs.AccountPrivilegesColumnPrivilegeArgs> ColumnPrivileges
        {
            get => _columnPrivileges ?? (_columnPrivileges = new InputList<Inputs.AccountPrivilegesColumnPrivilegeArgs>());
            set => _columnPrivileges = value;
        }

        [Input("databasePrivileges")]
        private InputList<Inputs.AccountPrivilegesDatabasePrivilegeArgs>? _databasePrivileges;

        /// <summary>
        /// Database permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`,
        /// `REFERENCES`, `INDEX`, `ALTER`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE
        /// ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the
        /// granted database permissions. To clear the granted database permissions, set `Privileges` to an empty array.
        /// </summary>
        public InputList<Inputs.AccountPrivilegesDatabasePrivilegeArgs> DatabasePrivileges
        {
            get => _databasePrivileges ?? (_databasePrivileges = new InputList<Inputs.AccountPrivilegesDatabasePrivilegeArgs>());
            set => _databasePrivileges = value;
        }

        [Input("functionPrivileges")]
        private InputList<Inputs.AccountPrivilegesFunctionPrivilegeArgs>? _functionPrivileges;

        /// <summary>
        /// Database function permissions. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not
        /// passed in, no change will be made to the granted function permissions. To clear the granted function permissions, set
        /// `Privileges` to an empty array.
        /// </summary>
        public InputList<Inputs.AccountPrivilegesFunctionPrivilegeArgs> FunctionPrivileges
        {
            get => _functionPrivileges ?? (_functionPrivileges = new InputList<Inputs.AccountPrivilegesFunctionPrivilegeArgs>());
            set => _functionPrivileges = value;
        }

        [Input("globalPrivileges")]
        private InputList<string>? _globalPrivileges;

        /// <summary>
        /// Global permission. Valid values of `GlobalPrivileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `PROCESS`,
        /// `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `SHOW DATABASES`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE
        /// VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no
        /// change will be made to the granted global permissions. To clear the granted global permissions, set the parameter to an
        /// empty array.
        /// </summary>
        public InputList<string> GlobalPrivileges
        {
            get => _globalPrivileges ?? (_globalPrivileges = new InputList<string>());
            set => _globalPrivileges = value;
        }

        /// <summary>
        /// instance id.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("procedurePrivileges")]
        private InputList<Inputs.AccountPrivilegesProcedurePrivilegeArgs>? _procedurePrivileges;

        /// <summary>
        /// Database stored procedure permission. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is
        /// not passed in, no change will be made to the granted stored procedure permissions. To clear the granted stored procedure
        /// permissions, set `Privileges` to an empty array.
        /// </summary>
        public InputList<Inputs.AccountPrivilegesProcedurePrivilegeArgs> ProcedurePrivileges
        {
            get => _procedurePrivileges ?? (_procedurePrivileges = new InputList<Inputs.AccountPrivilegesProcedurePrivilegeArgs>());
            set => _procedurePrivileges = value;
        }

        [Input("tablePrivileges")]
        private InputList<Inputs.AccountPrivilegesTablePrivilegeArgs>? _tablePrivileges;

        /// <summary>
        /// `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`,
        /// `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted table permissions. To clear the
        /// granted table permissions, set `Privileges` to an empty array.
        /// </summary>
        public InputList<Inputs.AccountPrivilegesTablePrivilegeArgs> TablePrivileges
        {
            get => _tablePrivileges ?? (_tablePrivileges = new InputList<Inputs.AccountPrivilegesTablePrivilegeArgs>());
            set => _tablePrivileges = value;
        }

        [Input("viewPrivileges")]
        private InputList<Inputs.AccountPrivilegesViewPrivilegeArgs>? _viewPrivileges;

        /// <summary>
        /// Database view permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`,
        /// `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change
        /// will be made to the granted view permissions. To clear the granted view permissions, set `Privileges` to an empty array.
        /// </summary>
        public InputList<Inputs.AccountPrivilegesViewPrivilegeArgs> ViewPrivileges
        {
            get => _viewPrivileges ?? (_viewPrivileges = new InputList<Inputs.AccountPrivilegesViewPrivilegeArgs>());
            set => _viewPrivileges = value;
        }

        public AccountPrivilegesArgs()
        {
        }
        public static new AccountPrivilegesArgs Empty => new AccountPrivilegesArgs();
    }

    public sealed class AccountPrivilegesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// account information.
        /// </summary>
        [Input("accounts")]
        public Input<Inputs.AccountPrivilegesAccountsGetArgs>? Accounts { get; set; }

        [Input("columnPrivileges")]
        private InputList<Inputs.AccountPrivilegesColumnPrivilegeGetArgs>? _columnPrivileges;

        /// <summary>
        /// Column permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `REFERENCES`.Note: if the parameter is
        /// left empty, no change will be made to the granted column permissions. To clear the granted column permissions, set
        /// `Privileges` to an empty array.
        /// </summary>
        public InputList<Inputs.AccountPrivilegesColumnPrivilegeGetArgs> ColumnPrivileges
        {
            get => _columnPrivileges ?? (_columnPrivileges = new InputList<Inputs.AccountPrivilegesColumnPrivilegeGetArgs>());
            set => _columnPrivileges = value;
        }

        [Input("databasePrivileges")]
        private InputList<Inputs.AccountPrivilegesDatabasePrivilegeGetArgs>? _databasePrivileges;

        /// <summary>
        /// Database permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`,
        /// `REFERENCES`, `INDEX`, `ALTER`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE
        /// ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the
        /// granted database permissions. To clear the granted database permissions, set `Privileges` to an empty array.
        /// </summary>
        public InputList<Inputs.AccountPrivilegesDatabasePrivilegeGetArgs> DatabasePrivileges
        {
            get => _databasePrivileges ?? (_databasePrivileges = new InputList<Inputs.AccountPrivilegesDatabasePrivilegeGetArgs>());
            set => _databasePrivileges = value;
        }

        [Input("functionPrivileges")]
        private InputList<Inputs.AccountPrivilegesFunctionPrivilegeGetArgs>? _functionPrivileges;

        /// <summary>
        /// Database function permissions. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not
        /// passed in, no change will be made to the granted function permissions. To clear the granted function permissions, set
        /// `Privileges` to an empty array.
        /// </summary>
        public InputList<Inputs.AccountPrivilegesFunctionPrivilegeGetArgs> FunctionPrivileges
        {
            get => _functionPrivileges ?? (_functionPrivileges = new InputList<Inputs.AccountPrivilegesFunctionPrivilegeGetArgs>());
            set => _functionPrivileges = value;
        }

        [Input("globalPrivileges")]
        private InputList<string>? _globalPrivileges;

        /// <summary>
        /// Global permission. Valid values of `GlobalPrivileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `PROCESS`,
        /// `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `SHOW DATABASES`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE
        /// VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no
        /// change will be made to the granted global permissions. To clear the granted global permissions, set the parameter to an
        /// empty array.
        /// </summary>
        public InputList<string> GlobalPrivileges
        {
            get => _globalPrivileges ?? (_globalPrivileges = new InputList<string>());
            set => _globalPrivileges = value;
        }

        /// <summary>
        /// instance id.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        [Input("procedurePrivileges")]
        private InputList<Inputs.AccountPrivilegesProcedurePrivilegeGetArgs>? _procedurePrivileges;

        /// <summary>
        /// Database stored procedure permission. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is
        /// not passed in, no change will be made to the granted stored procedure permissions. To clear the granted stored procedure
        /// permissions, set `Privileges` to an empty array.
        /// </summary>
        public InputList<Inputs.AccountPrivilegesProcedurePrivilegeGetArgs> ProcedurePrivileges
        {
            get => _procedurePrivileges ?? (_procedurePrivileges = new InputList<Inputs.AccountPrivilegesProcedurePrivilegeGetArgs>());
            set => _procedurePrivileges = value;
        }

        [Input("tablePrivileges")]
        private InputList<Inputs.AccountPrivilegesTablePrivilegeGetArgs>? _tablePrivileges;

        /// <summary>
        /// `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`,
        /// `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted table permissions. To clear the
        /// granted table permissions, set `Privileges` to an empty array.
        /// </summary>
        public InputList<Inputs.AccountPrivilegesTablePrivilegeGetArgs> TablePrivileges
        {
            get => _tablePrivileges ?? (_tablePrivileges = new InputList<Inputs.AccountPrivilegesTablePrivilegeGetArgs>());
            set => _tablePrivileges = value;
        }

        [Input("viewPrivileges")]
        private InputList<Inputs.AccountPrivilegesViewPrivilegeGetArgs>? _viewPrivileges;

        /// <summary>
        /// Database view permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`,
        /// `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change
        /// will be made to the granted view permissions. To clear the granted view permissions, set `Privileges` to an empty array.
        /// </summary>
        public InputList<Inputs.AccountPrivilegesViewPrivilegeGetArgs> ViewPrivileges
        {
            get => _viewPrivileges ?? (_viewPrivileges = new InputList<Inputs.AccountPrivilegesViewPrivilegeGetArgs>());
            set => _viewPrivileges = value;
        }

        public AccountPrivilegesState()
        {
        }
        public static new AccountPrivilegesState Empty => new AccountPrivilegesState();
    }
}
