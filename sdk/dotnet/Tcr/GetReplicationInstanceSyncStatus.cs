// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Tcr
{
    public static class GetReplicationInstanceSyncStatus
    {
        public static Task<GetReplicationInstanceSyncStatusResult> InvokeAsync(GetReplicationInstanceSyncStatusArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetReplicationInstanceSyncStatusResult>("tencentcloud:Tcr/getReplicationInstanceSyncStatus:getReplicationInstanceSyncStatus", args ?? new GetReplicationInstanceSyncStatusArgs(), options.WithDefaults());

        public static Output<GetReplicationInstanceSyncStatusResult> Invoke(GetReplicationInstanceSyncStatusInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetReplicationInstanceSyncStatusResult>("tencentcloud:Tcr/getReplicationInstanceSyncStatus:getReplicationInstanceSyncStatus", args ?? new GetReplicationInstanceSyncStatusInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReplicationInstanceSyncStatusArgs : global::Pulumi.InvokeArgs
    {
        [Input("registryId", required: true)]
        public string RegistryId { get; set; } = null!;

        [Input("replicationRegionId")]
        public int? ReplicationRegionId { get; set; }

        [Input("replicationRegistryId", required: true)]
        public string ReplicationRegistryId { get; set; } = null!;

        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        [Input("showReplicationLog")]
        public bool? ShowReplicationLog { get; set; }

        public GetReplicationInstanceSyncStatusArgs()
        {
        }
        public static new GetReplicationInstanceSyncStatusArgs Empty => new GetReplicationInstanceSyncStatusArgs();
    }

    public sealed class GetReplicationInstanceSyncStatusInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("registryId", required: true)]
        public Input<string> RegistryId { get; set; } = null!;

        [Input("replicationRegionId")]
        public Input<int>? ReplicationRegionId { get; set; }

        [Input("replicationRegistryId", required: true)]
        public Input<string> ReplicationRegistryId { get; set; } = null!;

        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        [Input("showReplicationLog")]
        public Input<bool>? ShowReplicationLog { get; set; }

        public GetReplicationInstanceSyncStatusInvokeArgs()
        {
        }
        public static new GetReplicationInstanceSyncStatusInvokeArgs Empty => new GetReplicationInstanceSyncStatusInvokeArgs();
    }


    [OutputType]
    public sealed class GetReplicationInstanceSyncStatusResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string RegistryId;
        public readonly ImmutableArray<Outputs.GetReplicationInstanceSyncStatusReplicationLogResult> ReplicationLogs;
        public readonly int? ReplicationRegionId;
        public readonly string ReplicationRegistryId;
        public readonly string ReplicationStatus;
        public readonly string ReplicationTime;
        public readonly string? ResultOutputFile;
        public readonly bool? ShowReplicationLog;

        [OutputConstructor]
        private GetReplicationInstanceSyncStatusResult(
            string id,

            string registryId,

            ImmutableArray<Outputs.GetReplicationInstanceSyncStatusReplicationLogResult> replicationLogs,

            int? replicationRegionId,

            string replicationRegistryId,

            string replicationStatus,

            string replicationTime,

            string? resultOutputFile,

            bool? showReplicationLog)
        {
            Id = id;
            RegistryId = registryId;
            ReplicationLogs = replicationLogs;
            ReplicationRegionId = replicationRegionId;
            ReplicationRegistryId = replicationRegistryId;
            ReplicationStatus = replicationStatus;
            ReplicationTime = replicationTime;
            ResultOutputFile = resultOutputFile;
            ShowReplicationLog = showReplicationLog;
        }
    }
}
