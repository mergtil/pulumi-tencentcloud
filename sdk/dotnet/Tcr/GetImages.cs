// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Tcr
{
    public static class GetImages
    {
        public static Task<GetImagesResult> InvokeAsync(GetImagesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImagesResult>("tencentcloud:Tcr/getImages:getImages", args ?? new GetImagesArgs(), options.WithDefaults());

        public static Output<GetImagesResult> Invoke(GetImagesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImagesResult>("tencentcloud:Tcr/getImages:getImages", args ?? new GetImagesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImagesArgs : global::Pulumi.InvokeArgs
    {
        [Input("digest")]
        public string? Digest { get; set; }

        [Input("exactMatch")]
        public bool? ExactMatch { get; set; }

        [Input("imageVersion")]
        public string? ImageVersion { get; set; }

        [Input("namespaceName", required: true)]
        public string NamespaceName { get; set; } = null!;

        [Input("registryId", required: true)]
        public string RegistryId { get; set; } = null!;

        [Input("repositoryName", required: true)]
        public string RepositoryName { get; set; } = null!;

        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetImagesArgs()
        {
        }
        public static new GetImagesArgs Empty => new GetImagesArgs();
    }

    public sealed class GetImagesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("digest")]
        public Input<string>? Digest { get; set; }

        [Input("exactMatch")]
        public Input<bool>? ExactMatch { get; set; }

        [Input("imageVersion")]
        public Input<string>? ImageVersion { get; set; }

        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        [Input("registryId", required: true)]
        public Input<string> RegistryId { get; set; } = null!;

        [Input("repositoryName", required: true)]
        public Input<string> RepositoryName { get; set; } = null!;

        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetImagesInvokeArgs()
        {
        }
        public static new GetImagesInvokeArgs Empty => new GetImagesInvokeArgs();
    }


    [OutputType]
    public sealed class GetImagesResult
    {
        public readonly string? Digest;
        public readonly bool? ExactMatch;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetImagesImageInfoListResult> ImageInfoLists;
        public readonly string? ImageVersion;
        public readonly string NamespaceName;
        public readonly string RegistryId;
        public readonly string RepositoryName;
        public readonly string? ResultOutputFile;

        [OutputConstructor]
        private GetImagesResult(
            string? digest,

            bool? exactMatch,

            string id,

            ImmutableArray<Outputs.GetImagesImageInfoListResult> imageInfoLists,

            string? imageVersion,

            string namespaceName,

            string registryId,

            string repositoryName,

            string? resultOutputFile)
        {
            Digest = digest;
            ExactMatch = exactMatch;
            Id = id;
            ImageInfoLists = imageInfoLists;
            ImageVersion = imageVersion;
            NamespaceName = namespaceName;
            RegistryId = registryId;
            RepositoryName = repositoryName;
            ResultOutputFile = resultOutputFile;
        }
    }
}
