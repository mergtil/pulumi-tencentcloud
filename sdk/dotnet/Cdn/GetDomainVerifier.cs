// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Cdn
{
    public static class GetDomainVerifier
    {
        public static Task<GetDomainVerifierResult> InvokeAsync(GetDomainVerifierArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDomainVerifierResult>("tencentcloud:Cdn/getDomainVerifier:getDomainVerifier", args ?? new GetDomainVerifierArgs(), options.WithDefaults());

        public static Output<GetDomainVerifierResult> Invoke(GetDomainVerifierInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDomainVerifierResult>("tencentcloud:Cdn/getDomainVerifier:getDomainVerifier", args ?? new GetDomainVerifierInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainVerifierArgs : global::Pulumi.InvokeArgs
    {
        [Input("autoVerify")]
        public bool? AutoVerify { get; set; }

        [Input("domain", required: true)]
        public string Domain { get; set; } = null!;

        [Input("failedReason")]
        public string? FailedReason { get; set; }

        [Input("freezeRecord")]
        public bool? FreezeRecord { get; set; }

        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        [Input("verifyType")]
        public string? VerifyType { get; set; }

        public GetDomainVerifierArgs()
        {
        }
        public static new GetDomainVerifierArgs Empty => new GetDomainVerifierArgs();
    }

    public sealed class GetDomainVerifierInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("autoVerify")]
        public Input<bool>? AutoVerify { get; set; }

        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        [Input("failedReason")]
        public Input<string>? FailedReason { get; set; }

        [Input("freezeRecord")]
        public Input<bool>? FreezeRecord { get; set; }

        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        [Input("verifyType")]
        public Input<string>? VerifyType { get; set; }

        public GetDomainVerifierInvokeArgs()
        {
        }
        public static new GetDomainVerifierInvokeArgs Empty => new GetDomainVerifierInvokeArgs();
    }


    [OutputType]
    public sealed class GetDomainVerifierResult
    {
        public readonly bool? AutoVerify;
        public readonly string Domain;
        public readonly string? FailedReason;
        public readonly ImmutableArray<string> FileVerifyDomains;
        public readonly string FileVerifyName;
        public readonly string FileVerifyUrl;
        public readonly bool? FreezeRecord;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Record;
        public readonly string RecordType;
        public readonly string? ResultOutputFile;
        public readonly string SubDomain;
        public readonly bool VerifyResult;
        public readonly string? VerifyType;

        [OutputConstructor]
        private GetDomainVerifierResult(
            bool? autoVerify,

            string domain,

            string? failedReason,

            ImmutableArray<string> fileVerifyDomains,

            string fileVerifyName,

            string fileVerifyUrl,

            bool? freezeRecord,

            string id,

            string record,

            string recordType,

            string? resultOutputFile,

            string subDomain,

            bool verifyResult,

            string? verifyType)
        {
            AutoVerify = autoVerify;
            Domain = domain;
            FailedReason = failedReason;
            FileVerifyDomains = fileVerifyDomains;
            FileVerifyName = fileVerifyName;
            FileVerifyUrl = fileVerifyUrl;
            FreezeRecord = freezeRecord;
            Id = id;
            Record = record;
            RecordType = recordType;
            ResultOutputFile = resultOutputFile;
            SubDomain = subDomain;
            VerifyResult = verifyResult;
            VerifyType = verifyType;
        }
    }
}
