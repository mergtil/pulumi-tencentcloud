// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Dnspod
{
    public static class GetRecords
    {
        public static Task<GetRecordsResult> InvokeAsync(GetRecordsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRecordsResult>("tencentcloud:Dnspod/getRecords:getRecords", args ?? new GetRecordsArgs(), options.WithDefaults());

        public static Output<GetRecordsResult> Invoke(GetRecordsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRecordsResult>("tencentcloud:Dnspod/getRecords:getRecords", args ?? new GetRecordsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRecordsArgs : global::Pulumi.InvokeArgs
    {
        [Input("domain")]
        public string? Domain { get; set; }

        [Input("domainId")]
        public string? DomainId { get; set; }

        [Input("groupId")]
        public string? GroupId { get; set; }

        [Input("keyword")]
        public string? Keyword { get; set; }

        [Input("limit")]
        public int? Limit { get; set; }

        [Input("offset")]
        public int? Offset { get; set; }

        [Input("recordLine")]
        public string? RecordLine { get; set; }

        [Input("recordLineId")]
        public string? RecordLineId { get; set; }

        [Input("recordType")]
        public string? RecordType { get; set; }

        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        [Input("sortField")]
        public string? SortField { get; set; }

        [Input("sortType")]
        public string? SortType { get; set; }

        [Input("subdomain")]
        public string? Subdomain { get; set; }

        public GetRecordsArgs()
        {
        }
        public static new GetRecordsArgs Empty => new GetRecordsArgs();
    }

    public sealed class GetRecordsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("domainId")]
        public Input<string>? DomainId { get; set; }

        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        [Input("keyword")]
        public Input<string>? Keyword { get; set; }

        [Input("limit")]
        public Input<int>? Limit { get; set; }

        [Input("offset")]
        public Input<int>? Offset { get; set; }

        [Input("recordLine")]
        public Input<string>? RecordLine { get; set; }

        [Input("recordLineId")]
        public Input<string>? RecordLineId { get; set; }

        [Input("recordType")]
        public Input<string>? RecordType { get; set; }

        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        [Input("sortField")]
        public Input<string>? SortField { get; set; }

        [Input("sortType")]
        public Input<string>? SortType { get; set; }

        [Input("subdomain")]
        public Input<string>? Subdomain { get; set; }

        public GetRecordsInvokeArgs()
        {
        }
        public static new GetRecordsInvokeArgs Empty => new GetRecordsInvokeArgs();
    }


    [OutputType]
    public sealed class GetRecordsResult
    {
        public readonly string? Domain;
        public readonly string? DomainId;
        public readonly string? GroupId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Keyword;
        public readonly int? Limit;
        public readonly int? Offset;
        public readonly ImmutableArray<Outputs.GetRecordsRecordCountInfoResult> RecordCountInfos;
        public readonly string? RecordLine;
        public readonly string? RecordLineId;
        public readonly string? RecordType;
        public readonly string? ResultOutputFile;
        public readonly ImmutableArray<Outputs.GetRecordsResultResult> Results;
        public readonly string? SortField;
        public readonly string? SortType;
        public readonly string? Subdomain;

        [OutputConstructor]
        private GetRecordsResult(
            string? domain,

            string? domainId,

            string? groupId,

            string id,

            string? keyword,

            int? limit,

            int? offset,

            ImmutableArray<Outputs.GetRecordsRecordCountInfoResult> recordCountInfos,

            string? recordLine,

            string? recordLineId,

            string? recordType,

            string? resultOutputFile,

            ImmutableArray<Outputs.GetRecordsResultResult> results,

            string? sortField,

            string? sortType,

            string? subdomain)
        {
            Domain = domain;
            DomainId = domainId;
            GroupId = groupId;
            Id = id;
            Keyword = keyword;
            Limit = limit;
            Offset = offset;
            RecordCountInfos = recordCountInfos;
            RecordLine = recordLine;
            RecordLineId = recordLineId;
            RecordType = recordType;
            ResultOutputFile = resultOutputFile;
            Results = results;
            SortField = sortField;
            SortType = sortType;
            Subdomain = subdomain;
        }
    }
}
