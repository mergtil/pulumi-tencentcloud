// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Tsf
{
    [TencentcloudResourceType("tencentcloud:Tsf/namespace:Namespace")]
    public partial class Namespace : global::Pulumi.CustomResource
    {
        /// <summary>
        /// cluster ID.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// creation time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Delete ID.
        /// </summary>
        [Output("deleteFlag")]
        public Output<bool> DeleteFlag { get; private set; } = null!;

        /// <summary>
        /// default namespace.
        /// </summary>
        [Output("isDefault")]
        public Output<string> IsDefault { get; private set; } = null!;

        /// <summary>
        /// whether to enable high availability.
        /// </summary>
        [Output("isHaEnable")]
        public Output<string> IsHaEnable { get; private set; } = null!;

        /// <summary>
        /// KubeInjectEnable value.
        /// </summary>
        [Output("kubeInjectEnable")]
        public Output<bool> KubeInjectEnable { get; private set; } = null!;

        /// <summary>
        /// Namespace encoding.
        /// </summary>
        [Output("namespaceCode")]
        public Output<string> NamespaceCode { get; private set; } = null!;

        /// <summary>
        /// namespace description.
        /// </summary>
        [Output("namespaceDesc")]
        public Output<string> NamespaceDesc { get; private set; } = null!;

        /// <summary>
        /// Namespace ID.
        /// </summary>
        [Output("namespaceId")]
        public Output<string> NamespaceId { get; private set; } = null!;

        /// <summary>
        /// namespace name.
        /// </summary>
        [Output("namespaceName")]
        public Output<string> NamespaceName { get; private set; } = null!;

        /// <summary>
        /// namespace resource type (default is DEF).
        /// </summary>
        [Output("namespaceResourceType")]
        public Output<string> NamespaceResourceType { get; private set; } = null!;

        /// <summary>
        /// namespace status.
        /// </summary>
        [Output("namespaceStatus")]
        public Output<string> NamespaceStatus { get; private set; } = null!;

        /// <summary>
        /// Whether it is a global namespace (the default is DEF, which means a common namespace; GLOBAL means a global namespace).
        /// </summary>
        [Output("namespaceType")]
        public Output<string> NamespaceType { get; private set; } = null!;

        /// <summary>
        /// ID of the dataset to be bound.
        /// </summary>
        [Output("programId")]
        public Output<string?> ProgramId { get; private set; } = null!;

        /// <summary>
        /// Program id list.
        /// </summary>
        [Output("programIdLists")]
        public Output<ImmutableArray<string>> ProgramIdLists { get; private set; } = null!;

        /// <summary>
        /// update time.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a Namespace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Namespace(string name, NamespaceArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Tsf/namespace:Namespace", name, args ?? new NamespaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Namespace(string name, Input<string> id, NamespaceState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Tsf/namespace:Namespace", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Namespace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Namespace Get(string name, Input<string> id, NamespaceState? state = null, CustomResourceOptions? options = null)
        {
            return new Namespace(name, id, state, options);
        }
    }

    public sealed class NamespaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// cluster ID.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// whether to enable high availability.
        /// </summary>
        [Input("isHaEnable")]
        public Input<string>? IsHaEnable { get; set; }

        /// <summary>
        /// namespace description.
        /// </summary>
        [Input("namespaceDesc")]
        public Input<string>? NamespaceDesc { get; set; }

        /// <summary>
        /// Namespace ID.
        /// </summary>
        [Input("namespaceId")]
        public Input<string>? NamespaceId { get; set; }

        /// <summary>
        /// namespace name.
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// namespace resource type (default is DEF).
        /// </summary>
        [Input("namespaceResourceType")]
        public Input<string>? NamespaceResourceType { get; set; }

        /// <summary>
        /// Whether it is a global namespace (the default is DEF, which means a common namespace; GLOBAL means a global namespace).
        /// </summary>
        [Input("namespaceType")]
        public Input<string>? NamespaceType { get; set; }

        /// <summary>
        /// ID of the dataset to be bound.
        /// </summary>
        [Input("programId")]
        public Input<string>? ProgramId { get; set; }

        [Input("programIdLists")]
        private InputList<string>? _programIdLists;

        /// <summary>
        /// Program id list.
        /// </summary>
        public InputList<string> ProgramIdLists
        {
            get => _programIdLists ?? (_programIdLists = new InputList<string>());
            set => _programIdLists = value;
        }

        public NamespaceArgs()
        {
        }
        public static new NamespaceArgs Empty => new NamespaceArgs();
    }

    public sealed class NamespaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// cluster ID.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// creation time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Delete ID.
        /// </summary>
        [Input("deleteFlag")]
        public Input<bool>? DeleteFlag { get; set; }

        /// <summary>
        /// default namespace.
        /// </summary>
        [Input("isDefault")]
        public Input<string>? IsDefault { get; set; }

        /// <summary>
        /// whether to enable high availability.
        /// </summary>
        [Input("isHaEnable")]
        public Input<string>? IsHaEnable { get; set; }

        /// <summary>
        /// KubeInjectEnable value.
        /// </summary>
        [Input("kubeInjectEnable")]
        public Input<bool>? KubeInjectEnable { get; set; }

        /// <summary>
        /// Namespace encoding.
        /// </summary>
        [Input("namespaceCode")]
        public Input<string>? NamespaceCode { get; set; }

        /// <summary>
        /// namespace description.
        /// </summary>
        [Input("namespaceDesc")]
        public Input<string>? NamespaceDesc { get; set; }

        /// <summary>
        /// Namespace ID.
        /// </summary>
        [Input("namespaceId")]
        public Input<string>? NamespaceId { get; set; }

        /// <summary>
        /// namespace name.
        /// </summary>
        [Input("namespaceName")]
        public Input<string>? NamespaceName { get; set; }

        /// <summary>
        /// namespace resource type (default is DEF).
        /// </summary>
        [Input("namespaceResourceType")]
        public Input<string>? NamespaceResourceType { get; set; }

        /// <summary>
        /// namespace status.
        /// </summary>
        [Input("namespaceStatus")]
        public Input<string>? NamespaceStatus { get; set; }

        /// <summary>
        /// Whether it is a global namespace (the default is DEF, which means a common namespace; GLOBAL means a global namespace).
        /// </summary>
        [Input("namespaceType")]
        public Input<string>? NamespaceType { get; set; }

        /// <summary>
        /// ID of the dataset to be bound.
        /// </summary>
        [Input("programId")]
        public Input<string>? ProgramId { get; set; }

        [Input("programIdLists")]
        private InputList<string>? _programIdLists;

        /// <summary>
        /// Program id list.
        /// </summary>
        public InputList<string> ProgramIdLists
        {
            get => _programIdLists ?? (_programIdLists = new InputList<string>());
            set => _programIdLists = value;
        }

        /// <summary>
        /// update time.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public NamespaceState()
        {
        }
        public static new NamespaceState Empty => new NamespaceState();
    }
}
