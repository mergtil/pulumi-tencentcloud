// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Tsf
{
    [TencentcloudResourceType("tencentcloud:Tsf/apiGroup:ApiGroup")]
    public partial class ApiGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Access group ACL type.
        /// </summary>
        [Output("aclMode")]
        public Output<string> AclMode { get; private set; } = null!;

        /// <summary>
        /// number of APIs.
        /// </summary>
        [Output("apiCount")]
        public Output<int> ApiCount { get; private set; } = null!;

        /// <summary>
        /// authentication type. secret: key authentication; none: no authentication.
        /// </summary>
        [Output("authType")]
        public Output<string> AuthType { get; private set; } = null!;

        /// <summary>
        /// api group bound gateway deployment group.
        /// </summary>
        [Output("bindedGatewayDeployGroups")]
        public Output<ImmutableArray<Outputs.ApiGroupBindedGatewayDeployGroup>> BindedGatewayDeployGroups { get; private set; } = null!;

        /// <summary>
        /// Group creation time such as: 2019-06-20 15:51:28.
        /// </summary>
        [Output("createdTime")]
        public Output<string> CreatedTime { get; private set; } = null!;

        /// <summary>
        /// remarks.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// gateway entity ID.
        /// </summary>
        [Output("gatewayInstanceId")]
        public Output<string> GatewayInstanceId { get; private set; } = null!;

        /// <summary>
        /// Type of gateway instance.
        /// </summary>
        [Output("gatewayInstanceType")]
        public Output<string> GatewayInstanceType { get; private set; } = null!;

        /// <summary>
        /// grouping context.
        /// </summary>
        [Output("groupContext")]
        public Output<string> GroupContext { get; private set; } = null!;

        /// <summary>
        /// Api Group Id.
        /// </summary>
        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        /// <summary>
        /// group name, cannot contain Chinese.
        /// </summary>
        [Output("groupName")]
        public Output<string> GroupName { get; private set; } = null!;

        /// <summary>
        /// grouping type, default ms. ms: microservice grouping; external: external Api grouping.
        /// </summary>
        [Output("groupType")]
        public Output<string> GroupType { get; private set; } = null!;

        /// <summary>
        /// namespace parameter key value.
        /// </summary>
        [Output("namespaceNameKey")]
        public Output<string> NamespaceNameKey { get; private set; } = null!;

        /// <summary>
        /// namespace parameter position, path, header or query, the default is path.
        /// </summary>
        [Output("namespaceNameKeyPosition")]
        public Output<string> NamespaceNameKeyPosition { get; private set; } = null!;

        /// <summary>
        /// microservice name parameter key value.
        /// </summary>
        [Output("serviceNameKey")]
        public Output<string> ServiceNameKey { get; private set; } = null!;

        /// <summary>
        /// microservice name parameter position, path, header or query, the default is path.
        /// </summary>
        [Output("serviceNameKeyPosition")]
        public Output<string> ServiceNameKeyPosition { get; private set; } = null!;

        /// <summary>
        /// Release status, drafted: Not published. released: released.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Group update time such as: 2019-06-20 15:51:28.
        /// </summary>
        [Output("updatedTime")]
        public Output<string> UpdatedTime { get; private set; } = null!;


        /// <summary>
        /// Create a ApiGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApiGroup(string name, ApiGroupArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Tsf/apiGroup:ApiGroup", name, args ?? new ApiGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApiGroup(string name, Input<string> id, ApiGroupState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Tsf/apiGroup:ApiGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApiGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApiGroup Get(string name, Input<string> id, ApiGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new ApiGroup(name, id, state, options);
        }
    }

    public sealed class ApiGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// authentication type. secret: key authentication; none: no authentication.
        /// </summary>
        [Input("authType")]
        public Input<string>? AuthType { get; set; }

        /// <summary>
        /// remarks.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// gateway entity ID.
        /// </summary>
        [Input("gatewayInstanceId")]
        public Input<string>? GatewayInstanceId { get; set; }

        /// <summary>
        /// grouping context.
        /// </summary>
        [Input("groupContext", required: true)]
        public Input<string> GroupContext { get; set; } = null!;

        /// <summary>
        /// group name, cannot contain Chinese.
        /// </summary>
        [Input("groupName", required: true)]
        public Input<string> GroupName { get; set; } = null!;

        /// <summary>
        /// grouping type, default ms. ms: microservice grouping; external: external Api grouping.
        /// </summary>
        [Input("groupType")]
        public Input<string>? GroupType { get; set; }

        /// <summary>
        /// namespace parameter key value.
        /// </summary>
        [Input("namespaceNameKey")]
        public Input<string>? NamespaceNameKey { get; set; }

        /// <summary>
        /// namespace parameter position, path, header or query, the default is path.
        /// </summary>
        [Input("namespaceNameKeyPosition")]
        public Input<string>? NamespaceNameKeyPosition { get; set; }

        /// <summary>
        /// microservice name parameter key value.
        /// </summary>
        [Input("serviceNameKey")]
        public Input<string>? ServiceNameKey { get; set; }

        /// <summary>
        /// microservice name parameter position, path, header or query, the default is path.
        /// </summary>
        [Input("serviceNameKeyPosition")]
        public Input<string>? ServiceNameKeyPosition { get; set; }

        public ApiGroupArgs()
        {
        }
        public static new ApiGroupArgs Empty => new ApiGroupArgs();
    }

    public sealed class ApiGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Access group ACL type.
        /// </summary>
        [Input("aclMode")]
        public Input<string>? AclMode { get; set; }

        /// <summary>
        /// number of APIs.
        /// </summary>
        [Input("apiCount")]
        public Input<int>? ApiCount { get; set; }

        /// <summary>
        /// authentication type. secret: key authentication; none: no authentication.
        /// </summary>
        [Input("authType")]
        public Input<string>? AuthType { get; set; }

        [Input("bindedGatewayDeployGroups")]
        private InputList<Inputs.ApiGroupBindedGatewayDeployGroupGetArgs>? _bindedGatewayDeployGroups;

        /// <summary>
        /// api group bound gateway deployment group.
        /// </summary>
        public InputList<Inputs.ApiGroupBindedGatewayDeployGroupGetArgs> BindedGatewayDeployGroups
        {
            get => _bindedGatewayDeployGroups ?? (_bindedGatewayDeployGroups = new InputList<Inputs.ApiGroupBindedGatewayDeployGroupGetArgs>());
            set => _bindedGatewayDeployGroups = value;
        }

        /// <summary>
        /// Group creation time such as: 2019-06-20 15:51:28.
        /// </summary>
        [Input("createdTime")]
        public Input<string>? CreatedTime { get; set; }

        /// <summary>
        /// remarks.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// gateway entity ID.
        /// </summary>
        [Input("gatewayInstanceId")]
        public Input<string>? GatewayInstanceId { get; set; }

        /// <summary>
        /// Type of gateway instance.
        /// </summary>
        [Input("gatewayInstanceType")]
        public Input<string>? GatewayInstanceType { get; set; }

        /// <summary>
        /// grouping context.
        /// </summary>
        [Input("groupContext")]
        public Input<string>? GroupContext { get; set; }

        /// <summary>
        /// Api Group Id.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// group name, cannot contain Chinese.
        /// </summary>
        [Input("groupName")]
        public Input<string>? GroupName { get; set; }

        /// <summary>
        /// grouping type, default ms. ms: microservice grouping; external: external Api grouping.
        /// </summary>
        [Input("groupType")]
        public Input<string>? GroupType { get; set; }

        /// <summary>
        /// namespace parameter key value.
        /// </summary>
        [Input("namespaceNameKey")]
        public Input<string>? NamespaceNameKey { get; set; }

        /// <summary>
        /// namespace parameter position, path, header or query, the default is path.
        /// </summary>
        [Input("namespaceNameKeyPosition")]
        public Input<string>? NamespaceNameKeyPosition { get; set; }

        /// <summary>
        /// microservice name parameter key value.
        /// </summary>
        [Input("serviceNameKey")]
        public Input<string>? ServiceNameKey { get; set; }

        /// <summary>
        /// microservice name parameter position, path, header or query, the default is path.
        /// </summary>
        [Input("serviceNameKeyPosition")]
        public Input<string>? ServiceNameKeyPosition { get; set; }

        /// <summary>
        /// Release status, drafted: Not published. released: released.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Group update time such as: 2019-06-20 15:51:28.
        /// </summary>
        [Input("updatedTime")]
        public Input<string>? UpdatedTime { get; set; }

        public ApiGroupState()
        {
        }
        public static new ApiGroupState Empty => new ApiGroupState();
    }
}
