// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Postgresql
{
    public static class GetLogBackups
    {
        public static Task<GetLogBackupsResult> InvokeAsync(GetLogBackupsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLogBackupsResult>("tencentcloud:Postgresql/getLogBackups:getLogBackups", args ?? new GetLogBackupsArgs(), options.WithDefaults());

        public static Output<GetLogBackupsResult> Invoke(GetLogBackupsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLogBackupsResult>("tencentcloud:Postgresql/getLogBackups:getLogBackups", args ?? new GetLogBackupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLogBackupsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetLogBackupsFilterArgs>? _filters;
        public List<Inputs.GetLogBackupsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetLogBackupsFilterArgs>());
            set => _filters = value;
        }

        [Input("maxFinishTime")]
        public string? MaxFinishTime { get; set; }

        [Input("minFinishTime")]
        public string? MinFinishTime { get; set; }

        [Input("orderBy")]
        public string? OrderBy { get; set; }

        [Input("orderByType")]
        public string? OrderByType { get; set; }

        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetLogBackupsArgs()
        {
        }
        public static new GetLogBackupsArgs Empty => new GetLogBackupsArgs();
    }

    public sealed class GetLogBackupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetLogBackupsFilterInputArgs>? _filters;
        public InputList<Inputs.GetLogBackupsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetLogBackupsFilterInputArgs>());
            set => _filters = value;
        }

        [Input("maxFinishTime")]
        public Input<string>? MaxFinishTime { get; set; }

        [Input("minFinishTime")]
        public Input<string>? MinFinishTime { get; set; }

        [Input("orderBy")]
        public Input<string>? OrderBy { get; set; }

        [Input("orderByType")]
        public Input<string>? OrderByType { get; set; }

        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetLogBackupsInvokeArgs()
        {
        }
        public static new GetLogBackupsInvokeArgs Empty => new GetLogBackupsInvokeArgs();
    }


    [OutputType]
    public sealed class GetLogBackupsResult
    {
        public readonly ImmutableArray<Outputs.GetLogBackupsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetLogBackupsLogBackupSetResult> LogBackupSets;
        public readonly string? MaxFinishTime;
        public readonly string? MinFinishTime;
        public readonly string? OrderBy;
        public readonly string? OrderByType;
        public readonly string? ResultOutputFile;

        [OutputConstructor]
        private GetLogBackupsResult(
            ImmutableArray<Outputs.GetLogBackupsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetLogBackupsLogBackupSetResult> logBackupSets,

            string? maxFinishTime,

            string? minFinishTime,

            string? orderBy,

            string? orderByType,

            string? resultOutputFile)
        {
            Filters = filters;
            Id = id;
            LogBackupSets = logBackupSets;
            MaxFinishTime = maxFinishTime;
            MinFinishTime = minFinishTime;
            OrderBy = orderBy;
            OrderByType = orderByType;
            ResultOutputFile = resultOutputFile;
        }
    }
}
