// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Tem
{
    [TencentcloudResourceType("tencentcloud:Tem/logConfig:LogConfig")]
    public partial class LogConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// application ID.
        /// </summary>
        [Output("applicationId")]
        public Output<string> ApplicationId { get; private set; } = null!;

        /// <summary>
        /// regex pattern.
        /// </summary>
        [Output("beginningRegex")]
        public Output<string?> BeginningRegex { get; private set; } = null!;

        /// <summary>
        /// environment ID.
        /// </summary>
        [Output("environmentId")]
        public Output<string> EnvironmentId { get; private set; } = null!;

        /// <summary>
        /// file name pattern if container_file.
        /// </summary>
        [Output("filePattern")]
        public Output<string?> FilePattern { get; private set; } = null!;

        /// <summary>
        /// container_stdout or container_file.
        /// </summary>
        [Output("inputType")]
        public Output<string> InputType { get; private set; } = null!;

        /// <summary>
        /// directory if container_file.
        /// </summary>
        [Output("logPath")]
        public Output<string?> LogPath { get; private set; } = null!;

        /// <summary>
        /// minimalist_log or multiline_log.
        /// </summary>
        [Output("logType")]
        public Output<string> LogType { get; private set; } = null!;

        /// <summary>
        /// logset.
        /// </summary>
        [Output("logsetId")]
        public Output<string> LogsetId { get; private set; } = null!;

        /// <summary>
        /// appConfig name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// topic.
        /// </summary>
        [Output("topicId")]
        public Output<string> TopicId { get; private set; } = null!;

        /// <summary>
        /// application ID, which is combined by environment ID and application ID, like `en-o5edaepv#app-3j29aa2p`.
        /// </summary>
        [Output("workloadId")]
        public Output<string> WorkloadId { get; private set; } = null!;


        /// <summary>
        /// Create a LogConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogConfig(string name, LogConfigArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Tem/logConfig:LogConfig", name, args ?? new LogConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogConfig(string name, Input<string> id, LogConfigState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Tem/logConfig:LogConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogConfig Get(string name, Input<string> id, LogConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new LogConfig(name, id, state, options);
        }
    }

    public sealed class LogConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// application ID.
        /// </summary>
        [Input("applicationId", required: true)]
        public Input<string> ApplicationId { get; set; } = null!;

        /// <summary>
        /// regex pattern.
        /// </summary>
        [Input("beginningRegex")]
        public Input<string>? BeginningRegex { get; set; }

        /// <summary>
        /// environment ID.
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<string> EnvironmentId { get; set; } = null!;

        /// <summary>
        /// file name pattern if container_file.
        /// </summary>
        [Input("filePattern")]
        public Input<string>? FilePattern { get; set; }

        /// <summary>
        /// container_stdout or container_file.
        /// </summary>
        [Input("inputType", required: true)]
        public Input<string> InputType { get; set; } = null!;

        /// <summary>
        /// directory if container_file.
        /// </summary>
        [Input("logPath")]
        public Input<string>? LogPath { get; set; }

        /// <summary>
        /// minimalist_log or multiline_log.
        /// </summary>
        [Input("logType", required: true)]
        public Input<string> LogType { get; set; } = null!;

        /// <summary>
        /// logset.
        /// </summary>
        [Input("logsetId", required: true)]
        public Input<string> LogsetId { get; set; } = null!;

        /// <summary>
        /// appConfig name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// topic.
        /// </summary>
        [Input("topicId", required: true)]
        public Input<string> TopicId { get; set; } = null!;

        /// <summary>
        /// application ID, which is combined by environment ID and application ID, like `en-o5edaepv#app-3j29aa2p`.
        /// </summary>
        [Input("workloadId", required: true)]
        public Input<string> WorkloadId { get; set; } = null!;

        public LogConfigArgs()
        {
        }
        public static new LogConfigArgs Empty => new LogConfigArgs();
    }

    public sealed class LogConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// application ID.
        /// </summary>
        [Input("applicationId")]
        public Input<string>? ApplicationId { get; set; }

        /// <summary>
        /// regex pattern.
        /// </summary>
        [Input("beginningRegex")]
        public Input<string>? BeginningRegex { get; set; }

        /// <summary>
        /// environment ID.
        /// </summary>
        [Input("environmentId")]
        public Input<string>? EnvironmentId { get; set; }

        /// <summary>
        /// file name pattern if container_file.
        /// </summary>
        [Input("filePattern")]
        public Input<string>? FilePattern { get; set; }

        /// <summary>
        /// container_stdout or container_file.
        /// </summary>
        [Input("inputType")]
        public Input<string>? InputType { get; set; }

        /// <summary>
        /// directory if container_file.
        /// </summary>
        [Input("logPath")]
        public Input<string>? LogPath { get; set; }

        /// <summary>
        /// minimalist_log or multiline_log.
        /// </summary>
        [Input("logType")]
        public Input<string>? LogType { get; set; }

        /// <summary>
        /// logset.
        /// </summary>
        [Input("logsetId")]
        public Input<string>? LogsetId { get; set; }

        /// <summary>
        /// appConfig name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// topic.
        /// </summary>
        [Input("topicId")]
        public Input<string>? TopicId { get; set; }

        /// <summary>
        /// application ID, which is combined by environment ID and application ID, like `en-o5edaepv#app-3j29aa2p`.
        /// </summary>
        [Input("workloadId")]
        public Input<string>? WorkloadId { get; set; }

        public LogConfigState()
        {
        }
        public static new LogConfigState Empty => new LogConfigState();
    }
}
