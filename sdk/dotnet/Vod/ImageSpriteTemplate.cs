// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Vod
{
    [TencentcloudResourceType("tencentcloud:Vod/imageSpriteTemplate:ImageSpriteTemplate")]
    public partial class ImageSpriteTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Subimage column count of an image sprite.
        /// </summary>
        [Output("columnCount")]
        public Output<int> ColumnCount { get; private set; } = null!;

        /// <summary>
        /// Template description. Length limit: 256 characters.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// Creation time of template in ISO date format.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The
        /// following fill types are supported: `stretch`: stretch. The screenshot will be stretched frame by frame to match the
        /// aspect ratio of the source video, which may make the screenshot shorter or longer; `black`: fill with black. This option
        /// retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks.
        /// Default value: `black`.
        /// </summary>
        [Output("fillType")]
        public Output<string?> FillType { get; private set; } = null!;

        /// <summary>
        /// Maximum value of the `height` (or short side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width`
        /// and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is
        /// not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be
        /// proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
        /// </summary>
        [Output("height")]
        public Output<int?> Height { get; private set; } = null!;

        /// <summary>
        /// Name of a time point screen capturing template. Length limit: 64 characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Resolution adaption. Valid values: `true`,`false`. `true`: enabled. In this case, `width` represents the long side of a
        /// video, while `height` the short side; `false`: disabled. In this case, `width` represents the width of a video, while
        /// `height` the height. Default value: `true`.
        /// </summary>
        [Output("resolutionAdaptive")]
        public Output<bool?> ResolutionAdaptive { get; private set; } = null!;

        /// <summary>
        /// Subimage row count of an image sprite.
        /// </summary>
        [Output("rowCount")]
        public Output<int> RowCount { get; private set; } = null!;

        /// <summary>
        /// Sampling interval. If `sample_type` is `Percent`, sampling will be performed at an interval of the specified percentage.
        /// If `sample_type` is `Time`, sampling will be performed at the specified time interval in seconds.
        /// </summary>
        [Output("sampleInterval")]
        public Output<int> SampleInterval { get; private set; } = null!;

        /// <summary>
        /// Sampling type. Valid values: `Percent`, `Time`. `Percent`: by percent. `Time`: by time interval.
        /// </summary>
        [Output("sampleType")]
        public Output<string> SampleType { get; private set; } = null!;

        /// <summary>
        /// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this
        /// field; otherwise, leave it empty.
        /// </summary>
        [Output("subAppId")]
        public Output<int?> SubAppId { get; private set; } = null!;

        /// <summary>
        /// Last modified time of template in ISO date format.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// Maximum value of the `width` (or long side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and
        /// `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not
        /// `0`, width will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally
        /// scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
        /// </summary>
        [Output("width")]
        public Output<int?> Width { get; private set; } = null!;


        /// <summary>
        /// Create a ImageSpriteTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ImageSpriteTemplate(string name, ImageSpriteTemplateArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Vod/imageSpriteTemplate:ImageSpriteTemplate", name, args ?? new ImageSpriteTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ImageSpriteTemplate(string name, Input<string> id, ImageSpriteTemplateState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Vod/imageSpriteTemplate:ImageSpriteTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ImageSpriteTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ImageSpriteTemplate Get(string name, Input<string> id, ImageSpriteTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new ImageSpriteTemplate(name, id, state, options);
        }
    }

    public sealed class ImageSpriteTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Subimage column count of an image sprite.
        /// </summary>
        [Input("columnCount", required: true)]
        public Input<int> ColumnCount { get; set; } = null!;

        /// <summary>
        /// Template description. Length limit: 256 characters.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The
        /// following fill types are supported: `stretch`: stretch. The screenshot will be stretched frame by frame to match the
        /// aspect ratio of the source video, which may make the screenshot shorter or longer; `black`: fill with black. This option
        /// retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks.
        /// Default value: `black`.
        /// </summary>
        [Input("fillType")]
        public Input<string>? FillType { get; set; }

        /// <summary>
        /// Maximum value of the `height` (or short side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width`
        /// and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is
        /// not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be
        /// proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
        /// </summary>
        [Input("height")]
        public Input<int>? Height { get; set; }

        /// <summary>
        /// Name of a time point screen capturing template. Length limit: 64 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Resolution adaption. Valid values: `true`,`false`. `true`: enabled. In this case, `width` represents the long side of a
        /// video, while `height` the short side; `false`: disabled. In this case, `width` represents the width of a video, while
        /// `height` the height. Default value: `true`.
        /// </summary>
        [Input("resolutionAdaptive")]
        public Input<bool>? ResolutionAdaptive { get; set; }

        /// <summary>
        /// Subimage row count of an image sprite.
        /// </summary>
        [Input("rowCount", required: true)]
        public Input<int> RowCount { get; set; } = null!;

        /// <summary>
        /// Sampling interval. If `sample_type` is `Percent`, sampling will be performed at an interval of the specified percentage.
        /// If `sample_type` is `Time`, sampling will be performed at the specified time interval in seconds.
        /// </summary>
        [Input("sampleInterval", required: true)]
        public Input<int> SampleInterval { get; set; } = null!;

        /// <summary>
        /// Sampling type. Valid values: `Percent`, `Time`. `Percent`: by percent. `Time`: by time interval.
        /// </summary>
        [Input("sampleType", required: true)]
        public Input<string> SampleType { get; set; } = null!;

        /// <summary>
        /// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this
        /// field; otherwise, leave it empty.
        /// </summary>
        [Input("subAppId")]
        public Input<int>? SubAppId { get; set; }

        /// <summary>
        /// Maximum value of the `width` (or long side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and
        /// `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not
        /// `0`, width will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally
        /// scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
        /// </summary>
        [Input("width")]
        public Input<int>? Width { get; set; }

        public ImageSpriteTemplateArgs()
        {
        }
        public static new ImageSpriteTemplateArgs Empty => new ImageSpriteTemplateArgs();
    }

    public sealed class ImageSpriteTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Subimage column count of an image sprite.
        /// </summary>
        [Input("columnCount")]
        public Input<int>? ColumnCount { get; set; }

        /// <summary>
        /// Template description. Length limit: 256 characters.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Creation time of template in ISO date format.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The
        /// following fill types are supported: `stretch`: stretch. The screenshot will be stretched frame by frame to match the
        /// aspect ratio of the source video, which may make the screenshot shorter or longer; `black`: fill with black. This option
        /// retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks.
        /// Default value: `black`.
        /// </summary>
        [Input("fillType")]
        public Input<string>? FillType { get; set; }

        /// <summary>
        /// Maximum value of the `height` (or short side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width`
        /// and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is
        /// not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be
        /// proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
        /// </summary>
        [Input("height")]
        public Input<int>? Height { get; set; }

        /// <summary>
        /// Name of a time point screen capturing template. Length limit: 64 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Resolution adaption. Valid values: `true`,`false`. `true`: enabled. In this case, `width` represents the long side of a
        /// video, while `height` the short side; `false`: disabled. In this case, `width` represents the width of a video, while
        /// `height` the height. Default value: `true`.
        /// </summary>
        [Input("resolutionAdaptive")]
        public Input<bool>? ResolutionAdaptive { get; set; }

        /// <summary>
        /// Subimage row count of an image sprite.
        /// </summary>
        [Input("rowCount")]
        public Input<int>? RowCount { get; set; }

        /// <summary>
        /// Sampling interval. If `sample_type` is `Percent`, sampling will be performed at an interval of the specified percentage.
        /// If `sample_type` is `Time`, sampling will be performed at the specified time interval in seconds.
        /// </summary>
        [Input("sampleInterval")]
        public Input<int>? SampleInterval { get; set; }

        /// <summary>
        /// Sampling type. Valid values: `Percent`, `Time`. `Percent`: by percent. `Time`: by time interval.
        /// </summary>
        [Input("sampleType")]
        public Input<string>? SampleType { get; set; }

        /// <summary>
        /// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this
        /// field; otherwise, leave it empty.
        /// </summary>
        [Input("subAppId")]
        public Input<int>? SubAppId { get; set; }

        /// <summary>
        /// Last modified time of template in ISO date format.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// Maximum value of the `width` (or long side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and
        /// `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not
        /// `0`, width will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally
        /// scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
        /// </summary>
        [Input("width")]
        public Input<int>? Width { get; set; }

        public ImageSpriteTemplateState()
        {
        }
        public static new ImageSpriteTemplateState Empty => new ImageSpriteTemplateState();
    }
}
