// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Emr
{
    public static class GetNodes
    {
        public static Task<GetNodesResult> InvokeAsync(GetNodesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodesResult>("tencentcloud:Emr/getNodes:getNodes", args ?? new GetNodesArgs(), options.WithDefaults());

        public static Output<GetNodesResult> Invoke(GetNodesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodesResult>("tencentcloud:Emr/getNodes:getNodes", args ?? new GetNodesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodesArgs : global::Pulumi.InvokeArgs
    {
        [Input("hardwareResourceType")]
        public string? HardwareResourceType { get; set; }

        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        [Input("limit")]
        public int? Limit { get; set; }

        [Input("nodeFlag", required: true)]
        public string NodeFlag { get; set; } = null!;

        [Input("offset")]
        public int? Offset { get; set; }

        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetNodesArgs()
        {
        }
        public static new GetNodesArgs Empty => new GetNodesArgs();
    }

    public sealed class GetNodesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("hardwareResourceType")]
        public Input<string>? HardwareResourceType { get; set; }

        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("limit")]
        public Input<int>? Limit { get; set; }

        [Input("nodeFlag", required: true)]
        public Input<string> NodeFlag { get; set; } = null!;

        [Input("offset")]
        public Input<int>? Offset { get; set; }

        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetNodesInvokeArgs()
        {
        }
        public static new GetNodesInvokeArgs Empty => new GetNodesInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodesResult
    {
        public readonly string? HardwareResourceType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceId;
        public readonly int? Limit;
        public readonly string NodeFlag;
        public readonly ImmutableArray<Outputs.GetNodesNodeResult> EmrNodes;
        public readonly int? Offset;
        public readonly string? ResultOutputFile;

        [OutputConstructor]
        private GetNodesResult(
            string? hardwareResourceType,

            string id,

            string instanceId,

            int? limit,

            string nodeFlag,

            ImmutableArray<Outputs.GetNodesNodeResult> nodes,

            int? offset,

            string? resultOutputFile)
        {
            HardwareResourceType = hardwareResourceType;
            Id = id;
            InstanceId = instanceId;
            Limit = limit;
            NodeFlag = nodeFlag;
            EmrNodes = nodes;
            Offset = offset;
            ResultOutputFile = resultOutputFile;
        }
    }
}
