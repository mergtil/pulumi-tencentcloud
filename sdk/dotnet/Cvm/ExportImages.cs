// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Cvm
{
    [TencentcloudResourceType("tencentcloud:Cvm/exportImages:ExportImages")]
    public partial class ExportImages : global::Pulumi.CustomResource
    {
        /// <summary>
        /// COS bucket name.
        /// </summary>
        [Output("bucketName")]
        public Output<string> BucketName { get; private set; } = null!;

        /// <summary>
        /// Check whether the image can be exported.
        /// </summary>
        [Output("dryRun")]
        public Output<bool?> DryRun { get; private set; } = null!;

        /// <summary>
        /// Format of the exported image file. Valid values: RAW, QCOW2, VHD and VMDK. Default value: RAW.
        /// </summary>
        [Output("exportFormat")]
        public Output<string?> ExportFormat { get; private set; } = null!;

        /// <summary>
        /// Prefix of exported file.
        /// </summary>
        [Output("fileNamePrefix")]
        public Output<string> FileNamePrefix { get; private set; } = null!;

        /// <summary>
        /// Image ID.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// Whether to export only the system disk.
        /// </summary>
        [Output("onlyExportRootDisk")]
        public Output<bool?> OnlyExportRootDisk { get; private set; } = null!;

        /// <summary>
        /// Role name (Default: CVM_QcsRole). Before exporting the images, make sure the role exists, and it has write permission to
        /// COS.
        /// </summary>
        [Output("roleName")]
        public Output<string?> RoleName { get; private set; } = null!;


        /// <summary>
        /// Create a ExportImages resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ExportImages(string name, ExportImagesArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Cvm/exportImages:ExportImages", name, args ?? new ExportImagesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ExportImages(string name, Input<string> id, ExportImagesState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Cvm/exportImages:ExportImages", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ExportImages resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ExportImages Get(string name, Input<string> id, ExportImagesState? state = null, CustomResourceOptions? options = null)
        {
            return new ExportImages(name, id, state, options);
        }
    }

    public sealed class ExportImagesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// COS bucket name.
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// Check whether the image can be exported.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// Format of the exported image file. Valid values: RAW, QCOW2, VHD and VMDK. Default value: RAW.
        /// </summary>
        [Input("exportFormat")]
        public Input<string>? ExportFormat { get; set; }

        /// <summary>
        /// Prefix of exported file.
        /// </summary>
        [Input("fileNamePrefix", required: true)]
        public Input<string> FileNamePrefix { get; set; } = null!;

        /// <summary>
        /// Image ID.
        /// </summary>
        [Input("imageId", required: true)]
        public Input<string> ImageId { get; set; } = null!;

        /// <summary>
        /// Whether to export only the system disk.
        /// </summary>
        [Input("onlyExportRootDisk")]
        public Input<bool>? OnlyExportRootDisk { get; set; }

        /// <summary>
        /// Role name (Default: CVM_QcsRole). Before exporting the images, make sure the role exists, and it has write permission to
        /// COS.
        /// </summary>
        [Input("roleName")]
        public Input<string>? RoleName { get; set; }

        public ExportImagesArgs()
        {
        }
        public static new ExportImagesArgs Empty => new ExportImagesArgs();
    }

    public sealed class ExportImagesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// COS bucket name.
        /// </summary>
        [Input("bucketName")]
        public Input<string>? BucketName { get; set; }

        /// <summary>
        /// Check whether the image can be exported.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// Format of the exported image file. Valid values: RAW, QCOW2, VHD and VMDK. Default value: RAW.
        /// </summary>
        [Input("exportFormat")]
        public Input<string>? ExportFormat { get; set; }

        /// <summary>
        /// Prefix of exported file.
        /// </summary>
        [Input("fileNamePrefix")]
        public Input<string>? FileNamePrefix { get; set; }

        /// <summary>
        /// Image ID.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// Whether to export only the system disk.
        /// </summary>
        [Input("onlyExportRootDisk")]
        public Input<bool>? OnlyExportRootDisk { get; set; }

        /// <summary>
        /// Role name (Default: CVM_QcsRole). Before exporting the images, make sure the role exists, and it has write permission to
        /// COS.
        /// </summary>
        [Input("roleName")]
        public Input<string>? RoleName { get; set; }

        public ExportImagesState()
        {
        }
        public static new ExportImagesState Empty => new ExportImagesState();
    }
}
