// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Cvm
{
    [TencentcloudResourceType("tencentcloud:Cvm/chcConfig:ChcConfig")]
    public partial class ChcConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Out-of-band network security group list.
        /// </summary>
        [Output("bmcSecurityGroupIds")]
        public Output<ImmutableArray<string>> BmcSecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// Valid characters: Letters, numbers, hyphens and underscores. Only set when update password.
        /// </summary>
        [Output("bmcUser")]
        public Output<string?> BmcUser { get; private set; } = null!;

        /// <summary>
        /// Out-of-band network information.
        /// </summary>
        [Output("bmcVirtualPrivateCloud")]
        public Output<Outputs.ChcConfigBmcVirtualPrivateCloud> BmcVirtualPrivateCloud { get; private set; } = null!;

        /// <summary>
        /// CHC host ID.
        /// </summary>
        [Output("chcId")]
        public Output<string> ChcId { get; private set; } = null!;

        /// <summary>
        /// Deployment network security group list.
        /// </summary>
        [Output("deploySecurityGroupIds")]
        public Output<ImmutableArray<string>> DeploySecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// Deployment network information.
        /// </summary>
        [Output("deployVirtualPrivateCloud")]
        public Output<Outputs.ChcConfigDeployVirtualPrivateCloud> DeployVirtualPrivateCloud { get; private set; } = null!;

        /// <summary>
        /// Server type.
        /// </summary>
        [Output("deviceType")]
        public Output<string> DeviceType { get; private set; } = null!;

        /// <summary>
        /// CHC host name.
        /// </summary>
        [Output("instanceName")]
        public Output<string> InstanceName { get; private set; } = null!;

        /// <summary>
        /// The password can contain 8 to 16 characters, including letters, numbers and special symbols
        /// (()`~!@#$%^&amp;amp;amp;*-+=_|{}).
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;


        /// <summary>
        /// Create a ChcConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ChcConfig(string name, ChcConfigArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Cvm/chcConfig:ChcConfig", name, args ?? new ChcConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ChcConfig(string name, Input<string> id, ChcConfigState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Cvm/chcConfig:ChcConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ChcConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ChcConfig Get(string name, Input<string> id, ChcConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new ChcConfig(name, id, state, options);
        }
    }

    public sealed class ChcConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("bmcSecurityGroupIds")]
        private InputList<string>? _bmcSecurityGroupIds;

        /// <summary>
        /// Out-of-band network security group list.
        /// </summary>
        public InputList<string> BmcSecurityGroupIds
        {
            get => _bmcSecurityGroupIds ?? (_bmcSecurityGroupIds = new InputList<string>());
            set => _bmcSecurityGroupIds = value;
        }

        /// <summary>
        /// Valid characters: Letters, numbers, hyphens and underscores. Only set when update password.
        /// </summary>
        [Input("bmcUser")]
        public Input<string>? BmcUser { get; set; }

        /// <summary>
        /// Out-of-band network information.
        /// </summary>
        [Input("bmcVirtualPrivateCloud")]
        public Input<Inputs.ChcConfigBmcVirtualPrivateCloudArgs>? BmcVirtualPrivateCloud { get; set; }

        /// <summary>
        /// CHC host ID.
        /// </summary>
        [Input("chcId", required: true)]
        public Input<string> ChcId { get; set; } = null!;

        [Input("deploySecurityGroupIds")]
        private InputList<string>? _deploySecurityGroupIds;

        /// <summary>
        /// Deployment network security group list.
        /// </summary>
        public InputList<string> DeploySecurityGroupIds
        {
            get => _deploySecurityGroupIds ?? (_deploySecurityGroupIds = new InputList<string>());
            set => _deploySecurityGroupIds = value;
        }

        /// <summary>
        /// Deployment network information.
        /// </summary>
        [Input("deployVirtualPrivateCloud")]
        public Input<Inputs.ChcConfigDeployVirtualPrivateCloudArgs>? DeployVirtualPrivateCloud { get; set; }

        /// <summary>
        /// Server type.
        /// </summary>
        [Input("deviceType")]
        public Input<string>? DeviceType { get; set; }

        /// <summary>
        /// CHC host name.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password can contain 8 to 16 characters, including letters, numbers and special symbols
        /// (()`~!@#$%^&amp;amp;amp;*-+=_|{}).
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ChcConfigArgs()
        {
        }
        public static new ChcConfigArgs Empty => new ChcConfigArgs();
    }

    public sealed class ChcConfigState : global::Pulumi.ResourceArgs
    {
        [Input("bmcSecurityGroupIds")]
        private InputList<string>? _bmcSecurityGroupIds;

        /// <summary>
        /// Out-of-band network security group list.
        /// </summary>
        public InputList<string> BmcSecurityGroupIds
        {
            get => _bmcSecurityGroupIds ?? (_bmcSecurityGroupIds = new InputList<string>());
            set => _bmcSecurityGroupIds = value;
        }

        /// <summary>
        /// Valid characters: Letters, numbers, hyphens and underscores. Only set when update password.
        /// </summary>
        [Input("bmcUser")]
        public Input<string>? BmcUser { get; set; }

        /// <summary>
        /// Out-of-band network information.
        /// </summary>
        [Input("bmcVirtualPrivateCloud")]
        public Input<Inputs.ChcConfigBmcVirtualPrivateCloudGetArgs>? BmcVirtualPrivateCloud { get; set; }

        /// <summary>
        /// CHC host ID.
        /// </summary>
        [Input("chcId")]
        public Input<string>? ChcId { get; set; }

        [Input("deploySecurityGroupIds")]
        private InputList<string>? _deploySecurityGroupIds;

        /// <summary>
        /// Deployment network security group list.
        /// </summary>
        public InputList<string> DeploySecurityGroupIds
        {
            get => _deploySecurityGroupIds ?? (_deploySecurityGroupIds = new InputList<string>());
            set => _deploySecurityGroupIds = value;
        }

        /// <summary>
        /// Deployment network information.
        /// </summary>
        [Input("deployVirtualPrivateCloud")]
        public Input<Inputs.ChcConfigDeployVirtualPrivateCloudGetArgs>? DeployVirtualPrivateCloud { get; set; }

        /// <summary>
        /// Server type.
        /// </summary>
        [Input("deviceType")]
        public Input<string>? DeviceType { get; set; }

        /// <summary>
        /// CHC host name.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password can contain 8 to 16 characters, including letters, numbers and special symbols
        /// (()`~!@#$%^&amp;amp;amp;*-+=_|{}).
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ChcConfigState()
        {
        }
        public static new ChcConfigState Empty => new ChcConfigState();
    }
}
