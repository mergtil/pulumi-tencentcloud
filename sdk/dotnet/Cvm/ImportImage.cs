// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Cvm
{
    [TencentcloudResourceType("tencentcloud:Cvm/importImage:ImportImage")]
    public partial class ImportImage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// OS architecture of the image to be imported, `x86_64` or `i386`.
        /// </summary>
        [Output("architecture")]
        public Output<string> Architecture { get; private set; } = null!;

        /// <summary>
        /// Boot mode.
        /// </summary>
        [Output("bootMode")]
        public Output<string?> BootMode { get; private set; } = null!;

        /// <summary>
        /// Dry run to check the parameters without performing the operation.
        /// </summary>
        [Output("dryRun")]
        public Output<bool?> DryRun { get; private set; } = null!;

        /// <summary>
        /// Whether to force import the image.
        /// </summary>
        [Output("force")]
        public Output<bool?> Force { get; private set; } = null!;

        /// <summary>
        /// Image description.
        /// </summary>
        [Output("imageDescription")]
        public Output<string?> ImageDescription { get; private set; } = null!;

        /// <summary>
        /// Image name.
        /// </summary>
        [Output("imageName")]
        public Output<string> ImageName { get; private set; } = null!;

        /// <summary>
        /// Address on COS where the image to be imported is stored.
        /// </summary>
        [Output("imageUrl")]
        public Output<string> ImageUrl { get; private set; } = null!;

        /// <summary>
        /// The license type used to activate the OS after importing an image. Valid values: TencentCloud: Tencent Cloud official
        /// license BYOL: Bring Your Own License.
        /// </summary>
        [Output("licenseType")]
        public Output<string?> LicenseType { get; private set; } = null!;

        /// <summary>
        /// OS type of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
        /// systems.
        /// </summary>
        [Output("osType")]
        public Output<string> OsType { get; private set; } = null!;

        /// <summary>
        /// OS version of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
        /// systems.
        /// </summary>
        [Output("osVersion")]
        public Output<string> OsVersion { get; private set; } = null!;

        /// <summary>
        /// Tag description list. This parameter is used to bind a tag to a custom image.
        /// </summary>
        [Output("tagSpecifications")]
        public Output<ImmutableArray<Outputs.ImportImageTagSpecification>> TagSpecifications { get; private set; } = null!;


        /// <summary>
        /// Create a ImportImage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ImportImage(string name, ImportImageArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Cvm/importImage:ImportImage", name, args ?? new ImportImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ImportImage(string name, Input<string> id, ImportImageState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Cvm/importImage:ImportImage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ImportImage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ImportImage Get(string name, Input<string> id, ImportImageState? state = null, CustomResourceOptions? options = null)
        {
            return new ImportImage(name, id, state, options);
        }
    }

    public sealed class ImportImageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// OS architecture of the image to be imported, `x86_64` or `i386`.
        /// </summary>
        [Input("architecture", required: true)]
        public Input<string> Architecture { get; set; } = null!;

        /// <summary>
        /// Boot mode.
        /// </summary>
        [Input("bootMode")]
        public Input<string>? BootMode { get; set; }

        /// <summary>
        /// Dry run to check the parameters without performing the operation.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// Whether to force import the image.
        /// </summary>
        [Input("force")]
        public Input<bool>? Force { get; set; }

        /// <summary>
        /// Image description.
        /// </summary>
        [Input("imageDescription")]
        public Input<string>? ImageDescription { get; set; }

        /// <summary>
        /// Image name.
        /// </summary>
        [Input("imageName", required: true)]
        public Input<string> ImageName { get; set; } = null!;

        /// <summary>
        /// Address on COS where the image to be imported is stored.
        /// </summary>
        [Input("imageUrl", required: true)]
        public Input<string> ImageUrl { get; set; } = null!;

        /// <summary>
        /// The license type used to activate the OS after importing an image. Valid values: TencentCloud: Tencent Cloud official
        /// license BYOL: Bring Your Own License.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// OS type of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
        /// systems.
        /// </summary>
        [Input("osType", required: true)]
        public Input<string> OsType { get; set; } = null!;

        /// <summary>
        /// OS version of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
        /// systems.
        /// </summary>
        [Input("osVersion", required: true)]
        public Input<string> OsVersion { get; set; } = null!;

        [Input("tagSpecifications")]
        private InputList<Inputs.ImportImageTagSpecificationArgs>? _tagSpecifications;

        /// <summary>
        /// Tag description list. This parameter is used to bind a tag to a custom image.
        /// </summary>
        public InputList<Inputs.ImportImageTagSpecificationArgs> TagSpecifications
        {
            get => _tagSpecifications ?? (_tagSpecifications = new InputList<Inputs.ImportImageTagSpecificationArgs>());
            set => _tagSpecifications = value;
        }

        public ImportImageArgs()
        {
        }
        public static new ImportImageArgs Empty => new ImportImageArgs();
    }

    public sealed class ImportImageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// OS architecture of the image to be imported, `x86_64` or `i386`.
        /// </summary>
        [Input("architecture")]
        public Input<string>? Architecture { get; set; }

        /// <summary>
        /// Boot mode.
        /// </summary>
        [Input("bootMode")]
        public Input<string>? BootMode { get; set; }

        /// <summary>
        /// Dry run to check the parameters without performing the operation.
        /// </summary>
        [Input("dryRun")]
        public Input<bool>? DryRun { get; set; }

        /// <summary>
        /// Whether to force import the image.
        /// </summary>
        [Input("force")]
        public Input<bool>? Force { get; set; }

        /// <summary>
        /// Image description.
        /// </summary>
        [Input("imageDescription")]
        public Input<string>? ImageDescription { get; set; }

        /// <summary>
        /// Image name.
        /// </summary>
        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        /// <summary>
        /// Address on COS where the image to be imported is stored.
        /// </summary>
        [Input("imageUrl")]
        public Input<string>? ImageUrl { get; set; }

        /// <summary>
        /// The license type used to activate the OS after importing an image. Valid values: TencentCloud: Tencent Cloud official
        /// license BYOL: Bring Your Own License.
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// OS type of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
        /// systems.
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        /// <summary>
        /// OS version of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
        /// systems.
        /// </summary>
        [Input("osVersion")]
        public Input<string>? OsVersion { get; set; }

        [Input("tagSpecifications")]
        private InputList<Inputs.ImportImageTagSpecificationGetArgs>? _tagSpecifications;

        /// <summary>
        /// Tag description list. This parameter is used to bind a tag to a custom image.
        /// </summary>
        public InputList<Inputs.ImportImageTagSpecificationGetArgs> TagSpecifications
        {
            get => _tagSpecifications ?? (_tagSpecifications = new InputList<Inputs.ImportImageTagSpecificationGetArgs>());
            set => _tagSpecifications = value;
        }

        public ImportImageState()
        {
        }
        public static new ImportImageState Empty => new ImportImageState();
    }
}
