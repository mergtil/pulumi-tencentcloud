// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Mysql
{
    [TencentcloudResourceType("tencentcloud:Mysql/remoteBackupConfig:RemoteBackupConfig")]
    public partial class RemoteBackupConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Remote backup retention time, in days.
        /// </summary>
        [Output("expireDays")]
        public Output<int> ExpireDays { get; private set; } = null!;

        /// <summary>
        /// Instance ID, in the format: cdb-c1nl9rpv. Same instance ID as displayed in the ApsaraDB for Console page.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Remote data backup switch, off - disable remote backup, on - enable remote backup.
        /// </summary>
        [Output("remoteBackupSave")]
        public Output<string> RemoteBackupSave { get; private set; } = null!;

        /// <summary>
        /// Off-site log backup switch, off - off off-site backup, on-on off-site backup, only when the parameter RemoteBackupSave
        /// is on, the RemoteBinlogSave parameter can be set to on.
        /// </summary>
        [Output("remoteBinlogSave")]
        public Output<string> RemoteBinlogSave { get; private set; } = null!;

        /// <summary>
        /// User settings off-site backup region list.
        /// </summary>
        [Output("remoteRegions")]
        public Output<ImmutableArray<string>> RemoteRegions { get; private set; } = null!;


        /// <summary>
        /// Create a RemoteBackupConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RemoteBackupConfig(string name, RemoteBackupConfigArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Mysql/remoteBackupConfig:RemoteBackupConfig", name, args ?? new RemoteBackupConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RemoteBackupConfig(string name, Input<string> id, RemoteBackupConfigState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Mysql/remoteBackupConfig:RemoteBackupConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RemoteBackupConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RemoteBackupConfig Get(string name, Input<string> id, RemoteBackupConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new RemoteBackupConfig(name, id, state, options);
        }
    }

    public sealed class RemoteBackupConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Remote backup retention time, in days.
        /// </summary>
        [Input("expireDays", required: true)]
        public Input<int> ExpireDays { get; set; } = null!;

        /// <summary>
        /// Instance ID, in the format: cdb-c1nl9rpv. Same instance ID as displayed in the ApsaraDB for Console page.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Remote data backup switch, off - disable remote backup, on - enable remote backup.
        /// </summary>
        [Input("remoteBackupSave", required: true)]
        public Input<string> RemoteBackupSave { get; set; } = null!;

        /// <summary>
        /// Off-site log backup switch, off - off off-site backup, on-on off-site backup, only when the parameter RemoteBackupSave
        /// is on, the RemoteBinlogSave parameter can be set to on.
        /// </summary>
        [Input("remoteBinlogSave", required: true)]
        public Input<string> RemoteBinlogSave { get; set; } = null!;

        [Input("remoteRegions", required: true)]
        private InputList<string>? _remoteRegions;

        /// <summary>
        /// User settings off-site backup region list.
        /// </summary>
        public InputList<string> RemoteRegions
        {
            get => _remoteRegions ?? (_remoteRegions = new InputList<string>());
            set => _remoteRegions = value;
        }

        public RemoteBackupConfigArgs()
        {
        }
        public static new RemoteBackupConfigArgs Empty => new RemoteBackupConfigArgs();
    }

    public sealed class RemoteBackupConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Remote backup retention time, in days.
        /// </summary>
        [Input("expireDays")]
        public Input<int>? ExpireDays { get; set; }

        /// <summary>
        /// Instance ID, in the format: cdb-c1nl9rpv. Same instance ID as displayed in the ApsaraDB for Console page.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Remote data backup switch, off - disable remote backup, on - enable remote backup.
        /// </summary>
        [Input("remoteBackupSave")]
        public Input<string>? RemoteBackupSave { get; set; }

        /// <summary>
        /// Off-site log backup switch, off - off off-site backup, on-on off-site backup, only when the parameter RemoteBackupSave
        /// is on, the RemoteBinlogSave parameter can be set to on.
        /// </summary>
        [Input("remoteBinlogSave")]
        public Input<string>? RemoteBinlogSave { get; set; }

        [Input("remoteRegions")]
        private InputList<string>? _remoteRegions;

        /// <summary>
        /// User settings off-site backup region list.
        /// </summary>
        public InputList<string> RemoteRegions
        {
            get => _remoteRegions ?? (_remoteRegions = new InputList<string>());
            set => _remoteRegions = value;
        }

        public RemoteBackupConfigState()
        {
        }
        public static new RemoteBackupConfigState Empty => new RemoteBackupConfigState();
    }
}
