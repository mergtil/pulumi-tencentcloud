// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Mysql
{
    [TencentcloudResourceType("tencentcloud:Mysql/rollback:Rollback")]
    public partial class Rollback : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The database information to be archived, indicating that the entire database is archived.
        /// </summary>
        [Output("databases")]
        public Output<ImmutableArray<Outputs.RollbackDatabase>> Databases { get; private set; } = null!;

        /// <summary>
        /// Cloud database instance ID.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Database rollback time, the time format is: yyyy-mm-dd hh:mm:ss.
        /// </summary>
        [Output("rollbackTime")]
        public Output<string> RollbackTime { get; private set; } = null!;

        /// <summary>
        /// Rollback strategy. Available values are: table, db, full; the default value is full. table- Extremely fast rollback
        /// mode, only import the backup and binlog of the selected table level, if there is a cross-table operation, and the
        /// associated table is not selected at the same time, the rollback will fail. In this mode, the parameter Databases must be
        /// empty; db- Quick mode, only import the backup and binlog of the selected library level, if there is a cross-database
        /// operation, and the associated library is not selected at the same time, the rollback will fail; full- normal rollback
        /// mode, the backup and binlog of the entire instance will be imported, at a slower rate.
        /// </summary>
        [Output("strategy")]
        public Output<string> Strategy { get; private set; } = null!;

        /// <summary>
        /// The database table information to be rolled back, indicating that the file is rolled back by table.
        /// </summary>
        [Output("tables")]
        public Output<ImmutableArray<Outputs.RollbackTable>> Tables { get; private set; } = null!;


        /// <summary>
        /// Create a Rollback resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Rollback(string name, RollbackArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Mysql/rollback:Rollback", name, args ?? new RollbackArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Rollback(string name, Input<string> id, RollbackState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Mysql/rollback:Rollback", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Rollback resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Rollback Get(string name, Input<string> id, RollbackState? state = null, CustomResourceOptions? options = null)
        {
            return new Rollback(name, id, state, options);
        }
    }

    public sealed class RollbackArgs : global::Pulumi.ResourceArgs
    {
        [Input("databases")]
        private InputList<Inputs.RollbackDatabaseArgs>? _databases;

        /// <summary>
        /// The database information to be archived, indicating that the entire database is archived.
        /// </summary>
        public InputList<Inputs.RollbackDatabaseArgs> Databases
        {
            get => _databases ?? (_databases = new InputList<Inputs.RollbackDatabaseArgs>());
            set => _databases = value;
        }

        /// <summary>
        /// Cloud database instance ID.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Database rollback time, the time format is: yyyy-mm-dd hh:mm:ss.
        /// </summary>
        [Input("rollbackTime", required: true)]
        public Input<string> RollbackTime { get; set; } = null!;

        /// <summary>
        /// Rollback strategy. Available values are: table, db, full; the default value is full. table- Extremely fast rollback
        /// mode, only import the backup and binlog of the selected table level, if there is a cross-table operation, and the
        /// associated table is not selected at the same time, the rollback will fail. In this mode, the parameter Databases must be
        /// empty; db- Quick mode, only import the backup and binlog of the selected library level, if there is a cross-database
        /// operation, and the associated library is not selected at the same time, the rollback will fail; full- normal rollback
        /// mode, the backup and binlog of the entire instance will be imported, at a slower rate.
        /// </summary>
        [Input("strategy", required: true)]
        public Input<string> Strategy { get; set; } = null!;

        [Input("tables")]
        private InputList<Inputs.RollbackTableArgs>? _tables;

        /// <summary>
        /// The database table information to be rolled back, indicating that the file is rolled back by table.
        /// </summary>
        public InputList<Inputs.RollbackTableArgs> Tables
        {
            get => _tables ?? (_tables = new InputList<Inputs.RollbackTableArgs>());
            set => _tables = value;
        }

        public RollbackArgs()
        {
        }
        public static new RollbackArgs Empty => new RollbackArgs();
    }

    public sealed class RollbackState : global::Pulumi.ResourceArgs
    {
        [Input("databases")]
        private InputList<Inputs.RollbackDatabaseGetArgs>? _databases;

        /// <summary>
        /// The database information to be archived, indicating that the entire database is archived.
        /// </summary>
        public InputList<Inputs.RollbackDatabaseGetArgs> Databases
        {
            get => _databases ?? (_databases = new InputList<Inputs.RollbackDatabaseGetArgs>());
            set => _databases = value;
        }

        /// <summary>
        /// Cloud database instance ID.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Database rollback time, the time format is: yyyy-mm-dd hh:mm:ss.
        /// </summary>
        [Input("rollbackTime")]
        public Input<string>? RollbackTime { get; set; }

        /// <summary>
        /// Rollback strategy. Available values are: table, db, full; the default value is full. table- Extremely fast rollback
        /// mode, only import the backup and binlog of the selected table level, if there is a cross-table operation, and the
        /// associated table is not selected at the same time, the rollback will fail. In this mode, the parameter Databases must be
        /// empty; db- Quick mode, only import the backup and binlog of the selected library level, if there is a cross-database
        /// operation, and the associated library is not selected at the same time, the rollback will fail; full- normal rollback
        /// mode, the backup and binlog of the entire instance will be imported, at a slower rate.
        /// </summary>
        [Input("strategy")]
        public Input<string>? Strategy { get; set; }

        [Input("tables")]
        private InputList<Inputs.RollbackTableGetArgs>? _tables;

        /// <summary>
        /// The database table information to be rolled back, indicating that the file is rolled back by table.
        /// </summary>
        public InputList<Inputs.RollbackTableGetArgs> Tables
        {
            get => _tables ?? (_tables = new InputList<Inputs.RollbackTableGetArgs>());
            set => _tables = value;
        }

        public RollbackState()
        {
        }
        public static new RollbackState Empty => new RollbackState();
    }
}
