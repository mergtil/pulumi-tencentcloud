// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Mysql
{
    [TencentcloudResourceType("tencentcloud:Mysql/paramTemplate:ParamTemplate")]
    public partial class ParamTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of parameter template.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The engine type of instance, optional value is InnoDB or RocksDB, default to InnoDB.
        /// </summary>
        [Output("engineType")]
        public Output<string?> EngineType { get; private set; } = null!;

        /// <summary>
        /// The version of MySQL.
        /// </summary>
        [Output("engineVersion")]
        public Output<string?> EngineVersion { get; private set; } = null!;

        /// <summary>
        /// The name of parameter template.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// parameter list.
        /// </summary>
        [Output("paramLists")]
        public Output<ImmutableArray<Outputs.ParamTemplateParamList>> ParamLists { get; private set; } = null!;

        /// <summary>
        /// The ID of source parameter template.
        /// </summary>
        [Output("templateId")]
        public Output<int> TemplateId { get; private set; } = null!;

        /// <summary>
        /// The default type of parameter template, supported value is HIGH_STABILITY or HIGH_PERFORMANCE.
        /// </summary>
        [Output("templateType")]
        public Output<string?> TemplateType { get; private set; } = null!;


        /// <summary>
        /// Create a ParamTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ParamTemplate(string name, ParamTemplateArgs? args = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Mysql/paramTemplate:ParamTemplate", name, args ?? new ParamTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ParamTemplate(string name, Input<string> id, ParamTemplateState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Mysql/paramTemplate:ParamTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ParamTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ParamTemplate Get(string name, Input<string> id, ParamTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new ParamTemplate(name, id, state, options);
        }
    }

    public sealed class ParamTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of parameter template.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The engine type of instance, optional value is InnoDB or RocksDB, default to InnoDB.
        /// </summary>
        [Input("engineType")]
        public Input<string>? EngineType { get; set; }

        /// <summary>
        /// The version of MySQL.
        /// </summary>
        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        /// <summary>
        /// The name of parameter template.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("paramLists")]
        private InputList<Inputs.ParamTemplateParamListArgs>? _paramLists;

        /// <summary>
        /// parameter list.
        /// </summary>
        public InputList<Inputs.ParamTemplateParamListArgs> ParamLists
        {
            get => _paramLists ?? (_paramLists = new InputList<Inputs.ParamTemplateParamListArgs>());
            set => _paramLists = value;
        }

        /// <summary>
        /// The ID of source parameter template.
        /// </summary>
        [Input("templateId")]
        public Input<int>? TemplateId { get; set; }

        /// <summary>
        /// The default type of parameter template, supported value is HIGH_STABILITY or HIGH_PERFORMANCE.
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        public ParamTemplateArgs()
        {
        }
        public static new ParamTemplateArgs Empty => new ParamTemplateArgs();
    }

    public sealed class ParamTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of parameter template.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The engine type of instance, optional value is InnoDB or RocksDB, default to InnoDB.
        /// </summary>
        [Input("engineType")]
        public Input<string>? EngineType { get; set; }

        /// <summary>
        /// The version of MySQL.
        /// </summary>
        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        /// <summary>
        /// The name of parameter template.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("paramLists")]
        private InputList<Inputs.ParamTemplateParamListGetArgs>? _paramLists;

        /// <summary>
        /// parameter list.
        /// </summary>
        public InputList<Inputs.ParamTemplateParamListGetArgs> ParamLists
        {
            get => _paramLists ?? (_paramLists = new InputList<Inputs.ParamTemplateParamListGetArgs>());
            set => _paramLists = value;
        }

        /// <summary>
        /// The ID of source parameter template.
        /// </summary>
        [Input("templateId")]
        public Input<int>? TemplateId { get; set; }

        /// <summary>
        /// The default type of parameter template, supported value is HIGH_STABILITY or HIGH_PERFORMANCE.
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        public ParamTemplateState()
        {
        }
        public static new ParamTemplateState Empty => new ParamTemplateState();
    }
}
