// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Mysql
{
    public static class GetDataBackupOverview
    {
        public static Task<GetDataBackupOverviewResult> InvokeAsync(GetDataBackupOverviewArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDataBackupOverviewResult>("tencentcloud:Mysql/getDataBackupOverview:getDataBackupOverview", args ?? new GetDataBackupOverviewArgs(), options.WithDefaults());

        public static Output<GetDataBackupOverviewResult> Invoke(GetDataBackupOverviewInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDataBackupOverviewResult>("tencentcloud:Mysql/getDataBackupOverview:getDataBackupOverview", args ?? new GetDataBackupOverviewInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDataBackupOverviewArgs : global::Pulumi.InvokeArgs
    {
        [Input("product", required: true)]
        public string Product { get; set; } = null!;

        [Input("resultOutputFile")]
        public string? ResultOutputFile { get; set; }

        public GetDataBackupOverviewArgs()
        {
        }
        public static new GetDataBackupOverviewArgs Empty => new GetDataBackupOverviewArgs();
    }

    public sealed class GetDataBackupOverviewInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("product", required: true)]
        public Input<string> Product { get; set; } = null!;

        [Input("resultOutputFile")]
        public Input<string>? ResultOutputFile { get; set; }

        public GetDataBackupOverviewInvokeArgs()
        {
        }
        public static new GetDataBackupOverviewInvokeArgs Empty => new GetDataBackupOverviewInvokeArgs();
    }


    [OutputType]
    public sealed class GetDataBackupOverviewResult
    {
        public readonly int AutoBackupCount;
        public readonly int AutoBackupVolume;
        public readonly int DataBackupArchiveCount;
        public readonly int DataBackupArchiveVolume;
        public readonly int DataBackupCount;
        public readonly int DataBackupStandbyCount;
        public readonly int DataBackupStandbyVolume;
        public readonly int DataBackupVolume;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int ManualBackupCount;
        public readonly int ManualBackupVolume;
        public readonly string Product;
        public readonly int RemoteBackupCount;
        public readonly int RemoteBackupVolume;
        public readonly string? ResultOutputFile;

        [OutputConstructor]
        private GetDataBackupOverviewResult(
            int autoBackupCount,

            int autoBackupVolume,

            int dataBackupArchiveCount,

            int dataBackupArchiveVolume,

            int dataBackupCount,

            int dataBackupStandbyCount,

            int dataBackupStandbyVolume,

            int dataBackupVolume,

            string id,

            int manualBackupCount,

            int manualBackupVolume,

            string product,

            int remoteBackupCount,

            int remoteBackupVolume,

            string? resultOutputFile)
        {
            AutoBackupCount = autoBackupCount;
            AutoBackupVolume = autoBackupVolume;
            DataBackupArchiveCount = dataBackupArchiveCount;
            DataBackupArchiveVolume = dataBackupArchiveVolume;
            DataBackupCount = dataBackupCount;
            DataBackupStandbyCount = dataBackupStandbyCount;
            DataBackupStandbyVolume = dataBackupStandbyVolume;
            DataBackupVolume = dataBackupVolume;
            Id = id;
            ManualBackupCount = manualBackupCount;
            ManualBackupVolume = manualBackupVolume;
            Product = product;
            RemoteBackupCount = remoteBackupCount;
            RemoteBackupVolume = remoteBackupVolume;
            ResultOutputFile = resultOutputFile;
        }
    }
}
