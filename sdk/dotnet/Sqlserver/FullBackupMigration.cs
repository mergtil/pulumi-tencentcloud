// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Sqlserver
{
    [TencentcloudResourceType("tencentcloud:Sqlserver/fullBackupMigration:FullBackupMigration")]
    public partial class FullBackupMigration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If the UploadType is COS_URL, fill in the URL here. If the UploadType is COS_UPLOAD, fill in the name of the backup file
        /// here. Only 1 backup file is supported, but a backup file can involve multiple databases.
        /// </summary>
        [Output("backupFiles")]
        public Output<ImmutableArray<string>> BackupFiles { get; private set; } = null!;

        /// <summary>
        /// Backup import task ID.
        /// </summary>
        [Output("backupMigrationId")]
        public Output<string> BackupMigrationId { get; private set; } = null!;

        /// <summary>
        /// ID of imported target instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Task name.
        /// </summary>
        [Output("migrationName")]
        public Output<string> MigrationName { get; private set; } = null!;

        /// <summary>
        /// Migration task restoration type. FULL: full backup restoration, FULL_LOG: full backup and transaction log restoration,
        /// FULL_DIFF: full backup and differential backup restoration.
        /// </summary>
        [Output("recoveryType")]
        public Output<string> RecoveryType { get; private set; } = null!;

        /// <summary>
        /// Backup upload type. COS_URL: the backup is stored in users Cloud Object Storage, with URL provided. COS_UPLOAD: the
        /// backup is stored in the applications Cloud Object Storage and needs to be uploaded by the user.
        /// </summary>
        [Output("uploadType")]
        public Output<string> UploadType { get; private set; } = null!;


        /// <summary>
        /// Create a FullBackupMigration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FullBackupMigration(string name, FullBackupMigrationArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Sqlserver/fullBackupMigration:FullBackupMigration", name, args ?? new FullBackupMigrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FullBackupMigration(string name, Input<string> id, FullBackupMigrationState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Sqlserver/fullBackupMigration:FullBackupMigration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FullBackupMigration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FullBackupMigration Get(string name, Input<string> id, FullBackupMigrationState? state = null, CustomResourceOptions? options = null)
        {
            return new FullBackupMigration(name, id, state, options);
        }
    }

    public sealed class FullBackupMigrationArgs : global::Pulumi.ResourceArgs
    {
        [Input("backupFiles")]
        private InputList<string>? _backupFiles;

        /// <summary>
        /// If the UploadType is COS_URL, fill in the URL here. If the UploadType is COS_UPLOAD, fill in the name of the backup file
        /// here. Only 1 backup file is supported, but a backup file can involve multiple databases.
        /// </summary>
        public InputList<string> BackupFiles
        {
            get => _backupFiles ?? (_backupFiles = new InputList<string>());
            set => _backupFiles = value;
        }

        /// <summary>
        /// ID of imported target instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Task name.
        /// </summary>
        [Input("migrationName", required: true)]
        public Input<string> MigrationName { get; set; } = null!;

        /// <summary>
        /// Migration task restoration type. FULL: full backup restoration, FULL_LOG: full backup and transaction log restoration,
        /// FULL_DIFF: full backup and differential backup restoration.
        /// </summary>
        [Input("recoveryType", required: true)]
        public Input<string> RecoveryType { get; set; } = null!;

        /// <summary>
        /// Backup upload type. COS_URL: the backup is stored in users Cloud Object Storage, with URL provided. COS_UPLOAD: the
        /// backup is stored in the applications Cloud Object Storage and needs to be uploaded by the user.
        /// </summary>
        [Input("uploadType", required: true)]
        public Input<string> UploadType { get; set; } = null!;

        public FullBackupMigrationArgs()
        {
        }
        public static new FullBackupMigrationArgs Empty => new FullBackupMigrationArgs();
    }

    public sealed class FullBackupMigrationState : global::Pulumi.ResourceArgs
    {
        [Input("backupFiles")]
        private InputList<string>? _backupFiles;

        /// <summary>
        /// If the UploadType is COS_URL, fill in the URL here. If the UploadType is COS_UPLOAD, fill in the name of the backup file
        /// here. Only 1 backup file is supported, but a backup file can involve multiple databases.
        /// </summary>
        public InputList<string> BackupFiles
        {
            get => _backupFiles ?? (_backupFiles = new InputList<string>());
            set => _backupFiles = value;
        }

        /// <summary>
        /// Backup import task ID.
        /// </summary>
        [Input("backupMigrationId")]
        public Input<string>? BackupMigrationId { get; set; }

        /// <summary>
        /// ID of imported target instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Task name.
        /// </summary>
        [Input("migrationName")]
        public Input<string>? MigrationName { get; set; }

        /// <summary>
        /// Migration task restoration type. FULL: full backup restoration, FULL_LOG: full backup and transaction log restoration,
        /// FULL_DIFF: full backup and differential backup restoration.
        /// </summary>
        [Input("recoveryType")]
        public Input<string>? RecoveryType { get; set; }

        /// <summary>
        /// Backup upload type. COS_URL: the backup is stored in users Cloud Object Storage, with URL provided. COS_UPLOAD: the
        /// backup is stored in the applications Cloud Object Storage and needs to be uploaded by the user.
        /// </summary>
        [Input("uploadType")]
        public Input<string>? UploadType { get; set; }

        public FullBackupMigrationState()
        {
        }
        public static new FullBackupMigrationState Empty => new FullBackupMigrationState();
    }
}
