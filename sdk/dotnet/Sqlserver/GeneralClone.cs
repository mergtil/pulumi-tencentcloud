// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Sqlserver
{
    [TencentcloudResourceType("tencentcloud:Sqlserver/generalClone:GeneralClone")]
    public partial class GeneralClone : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Instance ID.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// New database name. In offline migration, OldName will be used if NewName is left empty (OldName and NewName cannot be
        /// both empty). In database cloning, OldName and NewName must be both specified and cannot have the same value.
        /// </summary>
        [Output("newName")]
        public Output<string> NewName { get; private set; } = null!;

        /// <summary>
        /// Database name. If the OldName database does not exist, a failure will be returned. It can be left empty in offline
        /// migration tasks.
        /// </summary>
        [Output("oldName")]
        public Output<string> OldName { get; private set; } = null!;


        /// <summary>
        /// Create a GeneralClone resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GeneralClone(string name, GeneralCloneArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Sqlserver/generalClone:GeneralClone", name, args ?? new GeneralCloneArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GeneralClone(string name, Input<string> id, GeneralCloneState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Sqlserver/generalClone:GeneralClone", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GeneralClone resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GeneralClone Get(string name, Input<string> id, GeneralCloneState? state = null, CustomResourceOptions? options = null)
        {
            return new GeneralClone(name, id, state, options);
        }
    }

    public sealed class GeneralCloneArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Instance ID.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// New database name. In offline migration, OldName will be used if NewName is left empty (OldName and NewName cannot be
        /// both empty). In database cloning, OldName and NewName must be both specified and cannot have the same value.
        /// </summary>
        [Input("newName", required: true)]
        public Input<string> NewName { get; set; } = null!;

        /// <summary>
        /// Database name. If the OldName database does not exist, a failure will be returned. It can be left empty in offline
        /// migration tasks.
        /// </summary>
        [Input("oldName", required: true)]
        public Input<string> OldName { get; set; } = null!;

        public GeneralCloneArgs()
        {
        }
        public static new GeneralCloneArgs Empty => new GeneralCloneArgs();
    }

    public sealed class GeneralCloneState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Instance ID.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// New database name. In offline migration, OldName will be used if NewName is left empty (OldName and NewName cannot be
        /// both empty). In database cloning, OldName and NewName must be both specified and cannot have the same value.
        /// </summary>
        [Input("newName")]
        public Input<string>? NewName { get; set; }

        /// <summary>
        /// Database name. If the OldName database does not exist, a failure will be returned. It can be left empty in offline
        /// migration tasks.
        /// </summary>
        [Input("oldName")]
        public Input<string>? OldName { get; set; }

        public GeneralCloneState()
        {
        }
        public static new GeneralCloneState Empty => new GeneralCloneState();
    }
}
