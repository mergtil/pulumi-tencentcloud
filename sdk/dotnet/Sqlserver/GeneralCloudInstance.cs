// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Sqlserver
{
    [TencentcloudResourceType("tencentcloud:Sqlserver/generalCloudInstance:GeneralCloudInstance")]
    public partial class GeneralCloudInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Automatic renewal flag: 0-normal renewal 1-automatic renewal, the default is 1 automatic renewal. Valid only when
        /// purchasing a prepaid instance. Valid only when the 'instance_charge_type' parameter value is 'PREPAID'.
        /// </summary>
        [Output("autoRenewFlag")]
        public Output<int?> AutoRenewFlag { get; private set; } = null!;

        /// <summary>
        /// System character set collation, default: Chinese_PRC_CI_AS.
        /// </summary>
        [Output("collation")]
        public Output<string?> Collation { get; private set; } = null!;

        /// <summary>
        /// Cpu, unit: CORE.
        /// </summary>
        [Output("cpu")]
        public Output<int> Cpu { get; private set; } = null!;

        /// <summary>
        /// sqlserver version, currently all supported versions are: 2008R2 (SQL Server 2008 R2 Enterprise), 2012SP3 (SQL Server
        /// 2012 Enterprise), 201202 (SQL Server 2012 Standard), 2014SP2 (SQL Server 2014 Enterprise), 201402 (SQL Server 2014
        /// Standard), 2016SP1 (SQL Server 2016 Enterprise), 201602 (SQL Server 2016 Standard), 2017 (SQL Server 2017 Enterprise),
        /// 201702 (SQL Server 2017 Standard), 2019 (SQL Server 2019 Enterprise), 201902 (SQL Server 2019 Standard). Each region
        /// supports different versions for sale, and the version information that can be sold in each region can be pulled through
        /// the DescribeProductConfig interface. If left blank, the default version is 2008R2.
        /// </summary>
        [Output("dbVersion")]
        public Output<string?> DbVersion { get; private set; } = null!;

        /// <summary>
        /// Upgrade the high-availability architecture of sqlserver, upgrade from mirror disaster recovery to always on cluster
        /// disaster recovery, only support 2017 and above and support always on high-availability instances, do not support
        /// downgrading to mirror disaster recovery, CLUSTER-upgrade to always on capacity Disaster, if not filled, the
        /// high-availability architecture will not be modified.
        /// </summary>
        [Output("haType")]
        public Output<string?> HaType { get; private set; } = null!;

        /// <summary>
        /// Payment mode, the value supports PREPAID (prepaid), POSTPAID (postpaid).
        /// </summary>
        [Output("instanceChargeType")]
        public Output<string?> InstanceChargeType { get; private set; } = null!;

        /// <summary>
        /// The host disk type of the purchased instance, CLOUD_HSSD-enhanced SSD cloud disk for virtual machines,
        /// CLOUD_TSSD-extremely fast SSD cloud disk for virtual machines, CLOUD_BSSD-universal SSD cloud disk for virtual machines.
        /// </summary>
        [Output("machineType")]
        public Output<string> MachineType { get; private set; } = null!;

        /// <summary>
        /// Memory, unit: GB.
        /// </summary>
        [Output("memory")]
        public Output<int> Memory { get; private set; } = null!;

        /// <summary>
        /// Name of the SQL Server instance.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Purchase instance period, the default value is 1, which means one month. The value cannot exceed 48. Valid only when the
        /// 'instance_charge_type' parameter value is 'PREPAID'.
        /// </summary>
        [Output("period")]
        public Output<int?> Period { get; private set; } = null!;

        /// <summary>
        /// project ID.
        /// </summary>
        [Output("projectId")]
        public Output<int?> ProjectId { get; private set; } = null!;

        /// <summary>
        /// A collection of tags bound to the new instance.
        /// </summary>
        [Output("resourceTags")]
        public Output<ImmutableArray<Outputs.GeneralCloudInstanceResourceTag>> ResourceTags { get; private set; } = null!;

        /// <summary>
        /// Security group list, fill in the security group ID in the form of sg-xxx.
        /// </summary>
        [Output("securityGroupLists")]
        public Output<ImmutableArray<string>> SecurityGroupLists { get; private set; } = null!;

        /// <summary>
        /// Maintainable time window configuration, duration, unit: hour.
        /// </summary>
        [Output("span")]
        public Output<int?> Span { get; private set; } = null!;

        /// <summary>
        /// Maintainable time window configuration, daily maintainable start time.
        /// </summary>
        [Output("startTime")]
        public Output<string?> StartTime { get; private set; } = null!;

        /// <summary>
        /// instance disk storage, unit: GB.
        /// </summary>
        [Output("storage")]
        public Output<int> Storage { get; private set; } = null!;

        /// <summary>
        /// VPC subnet ID, in the form of subnet-bdoe83fa; SubnetId and VpcId need to be set at the same time or not set at the same
        /// time.
        /// </summary>
        [Output("subnetId")]
        public Output<string?> SubnetId { get; private set; } = null!;

        /// <summary>
        /// System time zone, default: China Standard Time.
        /// </summary>
        [Output("timeZone")]
        public Output<string?> TimeZone { get; private set; } = null!;

        /// <summary>
        /// VPC network ID, in the form of vpc-dsp338hz; SubnetId and VpcId need to be set at the same time or not set at the same
        /// time.
        /// </summary>
        [Output("vpcId")]
        public Output<string?> VpcId { get; private set; } = null!;

        /// <summary>
        /// Maintainable time window configuration, in weeks, indicates the days of the week that allow maintenance, 1-7 represent
        /// Monday to weekend respectively.
        /// </summary>
        [Output("weeklies")]
        public Output<ImmutableArray<int>> Weeklies { get; private set; } = null!;

        /// <summary>
        /// Instance AZ, such as ap-guangzhou-1 (Guangzhou Zone 1). Purchasable AZs for an instance can be obtained through the
        /// DescribeZones API.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a GeneralCloudInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GeneralCloudInstance(string name, GeneralCloudInstanceArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Sqlserver/generalCloudInstance:GeneralCloudInstance", name, args ?? new GeneralCloudInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GeneralCloudInstance(string name, Input<string> id, GeneralCloudInstanceState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Sqlserver/generalCloudInstance:GeneralCloudInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GeneralCloudInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GeneralCloudInstance Get(string name, Input<string> id, GeneralCloudInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new GeneralCloudInstance(name, id, state, options);
        }
    }

    public sealed class GeneralCloudInstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Automatic renewal flag: 0-normal renewal 1-automatic renewal, the default is 1 automatic renewal. Valid only when
        /// purchasing a prepaid instance. Valid only when the 'instance_charge_type' parameter value is 'PREPAID'.
        /// </summary>
        [Input("autoRenewFlag")]
        public Input<int>? AutoRenewFlag { get; set; }

        /// <summary>
        /// System character set collation, default: Chinese_PRC_CI_AS.
        /// </summary>
        [Input("collation")]
        public Input<string>? Collation { get; set; }

        /// <summary>
        /// Cpu, unit: CORE.
        /// </summary>
        [Input("cpu", required: true)]
        public Input<int> Cpu { get; set; } = null!;

        /// <summary>
        /// sqlserver version, currently all supported versions are: 2008R2 (SQL Server 2008 R2 Enterprise), 2012SP3 (SQL Server
        /// 2012 Enterprise), 201202 (SQL Server 2012 Standard), 2014SP2 (SQL Server 2014 Enterprise), 201402 (SQL Server 2014
        /// Standard), 2016SP1 (SQL Server 2016 Enterprise), 201602 (SQL Server 2016 Standard), 2017 (SQL Server 2017 Enterprise),
        /// 201702 (SQL Server 2017 Standard), 2019 (SQL Server 2019 Enterprise), 201902 (SQL Server 2019 Standard). Each region
        /// supports different versions for sale, and the version information that can be sold in each region can be pulled through
        /// the DescribeProductConfig interface. If left blank, the default version is 2008R2.
        /// </summary>
        [Input("dbVersion")]
        public Input<string>? DbVersion { get; set; }

        /// <summary>
        /// Upgrade the high-availability architecture of sqlserver, upgrade from mirror disaster recovery to always on cluster
        /// disaster recovery, only support 2017 and above and support always on high-availability instances, do not support
        /// downgrading to mirror disaster recovery, CLUSTER-upgrade to always on capacity Disaster, if not filled, the
        /// high-availability architecture will not be modified.
        /// </summary>
        [Input("haType")]
        public Input<string>? HaType { get; set; }

        /// <summary>
        /// Payment mode, the value supports PREPAID (prepaid), POSTPAID (postpaid).
        /// </summary>
        [Input("instanceChargeType")]
        public Input<string>? InstanceChargeType { get; set; }

        /// <summary>
        /// The host disk type of the purchased instance, CLOUD_HSSD-enhanced SSD cloud disk for virtual machines,
        /// CLOUD_TSSD-extremely fast SSD cloud disk for virtual machines, CLOUD_BSSD-universal SSD cloud disk for virtual machines.
        /// </summary>
        [Input("machineType", required: true)]
        public Input<string> MachineType { get; set; } = null!;

        /// <summary>
        /// Memory, unit: GB.
        /// </summary>
        [Input("memory", required: true)]
        public Input<int> Memory { get; set; } = null!;

        /// <summary>
        /// Name of the SQL Server instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Purchase instance period, the default value is 1, which means one month. The value cannot exceed 48. Valid only when the
        /// 'instance_charge_type' parameter value is 'PREPAID'.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// project ID.
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        [Input("resourceTags")]
        private InputList<Inputs.GeneralCloudInstanceResourceTagArgs>? _resourceTags;

        /// <summary>
        /// A collection of tags bound to the new instance.
        /// </summary>
        public InputList<Inputs.GeneralCloudInstanceResourceTagArgs> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new InputList<Inputs.GeneralCloudInstanceResourceTagArgs>());
            set => _resourceTags = value;
        }

        [Input("securityGroupLists")]
        private InputList<string>? _securityGroupLists;

        /// <summary>
        /// Security group list, fill in the security group ID in the form of sg-xxx.
        /// </summary>
        public InputList<string> SecurityGroupLists
        {
            get => _securityGroupLists ?? (_securityGroupLists = new InputList<string>());
            set => _securityGroupLists = value;
        }

        /// <summary>
        /// Maintainable time window configuration, duration, unit: hour.
        /// </summary>
        [Input("span")]
        public Input<int>? Span { get; set; }

        /// <summary>
        /// Maintainable time window configuration, daily maintainable start time.
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        /// <summary>
        /// instance disk storage, unit: GB.
        /// </summary>
        [Input("storage", required: true)]
        public Input<int> Storage { get; set; } = null!;

        /// <summary>
        /// VPC subnet ID, in the form of subnet-bdoe83fa; SubnetId and VpcId need to be set at the same time or not set at the same
        /// time.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// System time zone, default: China Standard Time.
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        /// <summary>
        /// VPC network ID, in the form of vpc-dsp338hz; SubnetId and VpcId need to be set at the same time or not set at the same
        /// time.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        [Input("weeklies")]
        private InputList<int>? _weeklies;

        /// <summary>
        /// Maintainable time window configuration, in weeks, indicates the days of the week that allow maintenance, 1-7 represent
        /// Monday to weekend respectively.
        /// </summary>
        public InputList<int> Weeklies
        {
            get => _weeklies ?? (_weeklies = new InputList<int>());
            set => _weeklies = value;
        }

        /// <summary>
        /// Instance AZ, such as ap-guangzhou-1 (Guangzhou Zone 1). Purchasable AZs for an instance can be obtained through the
        /// DescribeZones API.
        /// </summary>
        [Input("zone", required: true)]
        public Input<string> Zone { get; set; } = null!;

        public GeneralCloudInstanceArgs()
        {
        }
        public static new GeneralCloudInstanceArgs Empty => new GeneralCloudInstanceArgs();
    }

    public sealed class GeneralCloudInstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Automatic renewal flag: 0-normal renewal 1-automatic renewal, the default is 1 automatic renewal. Valid only when
        /// purchasing a prepaid instance. Valid only when the 'instance_charge_type' parameter value is 'PREPAID'.
        /// </summary>
        [Input("autoRenewFlag")]
        public Input<int>? AutoRenewFlag { get; set; }

        /// <summary>
        /// System character set collation, default: Chinese_PRC_CI_AS.
        /// </summary>
        [Input("collation")]
        public Input<string>? Collation { get; set; }

        /// <summary>
        /// Cpu, unit: CORE.
        /// </summary>
        [Input("cpu")]
        public Input<int>? Cpu { get; set; }

        /// <summary>
        /// sqlserver version, currently all supported versions are: 2008R2 (SQL Server 2008 R2 Enterprise), 2012SP3 (SQL Server
        /// 2012 Enterprise), 201202 (SQL Server 2012 Standard), 2014SP2 (SQL Server 2014 Enterprise), 201402 (SQL Server 2014
        /// Standard), 2016SP1 (SQL Server 2016 Enterprise), 201602 (SQL Server 2016 Standard), 2017 (SQL Server 2017 Enterprise),
        /// 201702 (SQL Server 2017 Standard), 2019 (SQL Server 2019 Enterprise), 201902 (SQL Server 2019 Standard). Each region
        /// supports different versions for sale, and the version information that can be sold in each region can be pulled through
        /// the DescribeProductConfig interface. If left blank, the default version is 2008R2.
        /// </summary>
        [Input("dbVersion")]
        public Input<string>? DbVersion { get; set; }

        /// <summary>
        /// Upgrade the high-availability architecture of sqlserver, upgrade from mirror disaster recovery to always on cluster
        /// disaster recovery, only support 2017 and above and support always on high-availability instances, do not support
        /// downgrading to mirror disaster recovery, CLUSTER-upgrade to always on capacity Disaster, if not filled, the
        /// high-availability architecture will not be modified.
        /// </summary>
        [Input("haType")]
        public Input<string>? HaType { get; set; }

        /// <summary>
        /// Payment mode, the value supports PREPAID (prepaid), POSTPAID (postpaid).
        /// </summary>
        [Input("instanceChargeType")]
        public Input<string>? InstanceChargeType { get; set; }

        /// <summary>
        /// The host disk type of the purchased instance, CLOUD_HSSD-enhanced SSD cloud disk for virtual machines,
        /// CLOUD_TSSD-extremely fast SSD cloud disk for virtual machines, CLOUD_BSSD-universal SSD cloud disk for virtual machines.
        /// </summary>
        [Input("machineType")]
        public Input<string>? MachineType { get; set; }

        /// <summary>
        /// Memory, unit: GB.
        /// </summary>
        [Input("memory")]
        public Input<int>? Memory { get; set; }

        /// <summary>
        /// Name of the SQL Server instance.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Purchase instance period, the default value is 1, which means one month. The value cannot exceed 48. Valid only when the
        /// 'instance_charge_type' parameter value is 'PREPAID'.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// project ID.
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        [Input("resourceTags")]
        private InputList<Inputs.GeneralCloudInstanceResourceTagGetArgs>? _resourceTags;

        /// <summary>
        /// A collection of tags bound to the new instance.
        /// </summary>
        public InputList<Inputs.GeneralCloudInstanceResourceTagGetArgs> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new InputList<Inputs.GeneralCloudInstanceResourceTagGetArgs>());
            set => _resourceTags = value;
        }

        [Input("securityGroupLists")]
        private InputList<string>? _securityGroupLists;

        /// <summary>
        /// Security group list, fill in the security group ID in the form of sg-xxx.
        /// </summary>
        public InputList<string> SecurityGroupLists
        {
            get => _securityGroupLists ?? (_securityGroupLists = new InputList<string>());
            set => _securityGroupLists = value;
        }

        /// <summary>
        /// Maintainable time window configuration, duration, unit: hour.
        /// </summary>
        [Input("span")]
        public Input<int>? Span { get; set; }

        /// <summary>
        /// Maintainable time window configuration, daily maintainable start time.
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        /// <summary>
        /// instance disk storage, unit: GB.
        /// </summary>
        [Input("storage")]
        public Input<int>? Storage { get; set; }

        /// <summary>
        /// VPC subnet ID, in the form of subnet-bdoe83fa; SubnetId and VpcId need to be set at the same time or not set at the same
        /// time.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// System time zone, default: China Standard Time.
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        /// <summary>
        /// VPC network ID, in the form of vpc-dsp338hz; SubnetId and VpcId need to be set at the same time or not set at the same
        /// time.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        [Input("weeklies")]
        private InputList<int>? _weeklies;

        /// <summary>
        /// Maintainable time window configuration, in weeks, indicates the days of the week that allow maintenance, 1-7 represent
        /// Monday to weekend respectively.
        /// </summary>
        public InputList<int> Weeklies
        {
            get => _weeklies ?? (_weeklies = new InputList<int>());
            set => _weeklies = value;
        }

        /// <summary>
        /// Instance AZ, such as ap-guangzhou-1 (Guangzhou Zone 1). Purchasable AZs for an instance can be obtained through the
        /// DescribeZones API.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public GeneralCloudInstanceState()
        {
        }
        public static new GeneralCloudInstanceState Empty => new GeneralCloudInstanceState();
    }
}
