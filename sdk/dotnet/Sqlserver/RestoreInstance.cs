// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Sqlserver
{
    [TencentcloudResourceType("tencentcloud:Sqlserver/restoreInstance:RestoreInstance")]
    public partial class RestoreInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Backup file ID, which can be obtained through the Id field in the returned value of the DescribeBackups API.
        /// </summary>
        [Output("backupId")]
        public Output<int> BackupId { get; private set; } = null!;

        /// <summary>
        /// TDE encryption, `enable` encrypted, `disable` unencrypted.
        /// </summary>
        [Output("encryptions")]
        public Output<ImmutableArray<Outputs.RestoreInstanceEncryption>> Encryptions { get; private set; } = null!;

        /// <summary>
        /// Instance ID.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Restore the databases listed in ReNameRestoreDatabase and rename them after restoration. If this parameter is left
        /// empty, all databases will be restored and renamed in the default format.
        /// </summary>
        [Output("renameRestores")]
        public Output<ImmutableArray<Outputs.RestoreInstanceRenameRestore>> RenameRestores { get; private set; } = null!;


        /// <summary>
        /// Create a RestoreInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RestoreInstance(string name, RestoreInstanceArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Sqlserver/restoreInstance:RestoreInstance", name, args ?? new RestoreInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RestoreInstance(string name, Input<string> id, RestoreInstanceState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Sqlserver/restoreInstance:RestoreInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RestoreInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RestoreInstance Get(string name, Input<string> id, RestoreInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new RestoreInstance(name, id, state, options);
        }
    }

    public sealed class RestoreInstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Backup file ID, which can be obtained through the Id field in the returned value of the DescribeBackups API.
        /// </summary>
        [Input("backupId", required: true)]
        public Input<int> BackupId { get; set; } = null!;

        /// <summary>
        /// Instance ID.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("renameRestores", required: true)]
        private InputList<Inputs.RestoreInstanceRenameRestoreArgs>? _renameRestores;

        /// <summary>
        /// Restore the databases listed in ReNameRestoreDatabase and rename them after restoration. If this parameter is left
        /// empty, all databases will be restored and renamed in the default format.
        /// </summary>
        public InputList<Inputs.RestoreInstanceRenameRestoreArgs> RenameRestores
        {
            get => _renameRestores ?? (_renameRestores = new InputList<Inputs.RestoreInstanceRenameRestoreArgs>());
            set => _renameRestores = value;
        }

        public RestoreInstanceArgs()
        {
        }
        public static new RestoreInstanceArgs Empty => new RestoreInstanceArgs();
    }

    public sealed class RestoreInstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Backup file ID, which can be obtained through the Id field in the returned value of the DescribeBackups API.
        /// </summary>
        [Input("backupId")]
        public Input<int>? BackupId { get; set; }

        [Input("encryptions")]
        private InputList<Inputs.RestoreInstanceEncryptionGetArgs>? _encryptions;

        /// <summary>
        /// TDE encryption, `enable` encrypted, `disable` unencrypted.
        /// </summary>
        public InputList<Inputs.RestoreInstanceEncryptionGetArgs> Encryptions
        {
            get => _encryptions ?? (_encryptions = new InputList<Inputs.RestoreInstanceEncryptionGetArgs>());
            set => _encryptions = value;
        }

        /// <summary>
        /// Instance ID.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        [Input("renameRestores")]
        private InputList<Inputs.RestoreInstanceRenameRestoreGetArgs>? _renameRestores;

        /// <summary>
        /// Restore the databases listed in ReNameRestoreDatabase and rename them after restoration. If this parameter is left
        /// empty, all databases will be restored and renamed in the default format.
        /// </summary>
        public InputList<Inputs.RestoreInstanceRenameRestoreGetArgs> RenameRestores
        {
            get => _renameRestores ?? (_renameRestores = new InputList<Inputs.RestoreInstanceRenameRestoreGetArgs>());
            set => _renameRestores = value;
        }

        public RestoreInstanceState()
        {
        }
        public static new RestoreInstanceState Empty => new RestoreInstanceState();
    }
}
