// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Tencentcloud.Teo
{
    [TencentcloudResourceType("tencentcloud:Teo/zone:Zone")]
    public partial class Zone : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Acceleration area of the zone. Valid values: `mainland`, `overseas`.
        /// </summary>
        [Output("area")]
        public Output<string> Area { get; private set; } = null!;

        /// <summary>
        /// Specifies whether CNAME acceleration is enabled. Valid values: `enabled`, `disabled`.
        /// </summary>
        [Output("cnameSpeedUp")]
        public Output<string> CnameSpeedUp { get; private set; } = null!;

        /// <summary>
        /// Ownership verification status of the site when it accesses via CNAME.- `finished`: The site is verified.- `pending`: The
        /// site is waiting for verification.
        /// </summary>
        [Output("cnameStatus")]
        public Output<string> CnameStatus { get; private set; } = null!;

        /// <summary>
        /// Site creation date.
        /// </summary>
        [Output("createdOn")]
        public Output<string> CreatedOn { get; private set; } = null!;

        /// <summary>
        /// Site modification date.
        /// </summary>
        [Output("modifiedOn")]
        public Output<string> ModifiedOn { get; private set; } = null!;

        /// <summary>
        /// List of name servers assigned by Tencent Cloud.
        /// </summary>
        [Output("nameServers")]
        public Output<ImmutableArray<string>> NameServers { get; private set; } = null!;

        /// <summary>
        /// Name server used by the site.
        /// </summary>
        [Output("originalNameServers")]
        public Output<ImmutableArray<string>> OriginalNameServers { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the site is disabled.
        /// </summary>
        [Output("paused")]
        public Output<bool> Paused { get; private set; } = null!;

        /// <summary>
        /// Plan type of the zone. See details in data source `zone_available_plans`.
        /// </summary>
        [Output("planType")]
        public Output<string> PlanType { get; private set; } = null!;

        /// <summary>
        /// Billing resources of the zone.
        /// </summary>
        [Output("resources")]
        public Output<ImmutableArray<Outputs.ZoneResource>> Resources { get; private set; } = null!;

        /// <summary>
        /// Site status. Valid values:- `active`: NS is switched.- `pending`: NS is not switched.- `moved`: NS is moved.-
        /// `deactivated`: this site is blocked.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Tag description list.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies how the site is connected to EdgeOne.- `full`: The site is connected via NS.- `partial`: The site is connected
        /// via CNAME.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// User-defined name server information. Note: This field may return null, indicating that no valid value can be obtained.
        /// </summary>
        [Output("vanityNameServers")]
        public Output<Outputs.ZoneVanityNameServers?> VanityNameServers { get; private set; } = null!;

        /// <summary>
        /// User-defined name server IP information. Note: This field may return null, indicating that no valid value can be
        /// obtained.
        /// </summary>
        [Output("vanityNameServersIps")]
        public Output<ImmutableArray<Outputs.ZoneVanityNameServersIp>> VanityNameServersIps { get; private set; } = null!;

        /// <summary>
        /// Site ID.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;

        /// <summary>
        /// Site name.
        /// </summary>
        [Output("zoneName")]
        public Output<string> ZoneName { get; private set; } = null!;


        /// <summary>
        /// Create a Zone resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Zone(string name, ZoneArgs args, CustomResourceOptions? options = null)
            : base("tencentcloud:Teo/zone:Zone", name, args ?? new ZoneArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Zone(string name, Input<string> id, ZoneState? state = null, CustomResourceOptions? options = null)
            : base("tencentcloud:Teo/zone:Zone", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Zone resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Zone Get(string name, Input<string> id, ZoneState? state = null, CustomResourceOptions? options = null)
        {
            return new Zone(name, id, state, options);
        }
    }

    public sealed class ZoneArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether CNAME acceleration is enabled. Valid values: `enabled`, `disabled`.
        /// </summary>
        [Input("cnameSpeedUp")]
        public Input<string>? CnameSpeedUp { get; set; }

        /// <summary>
        /// Indicates whether the site is disabled.
        /// </summary>
        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// Plan type of the zone. See details in data source `zone_available_plans`.
        /// </summary>
        [Input("planType", required: true)]
        public Input<string> PlanType { get; set; } = null!;

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// Tag description list.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies how the site is connected to EdgeOne.- `full`: The site is connected via NS.- `partial`: The site is connected
        /// via CNAME.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// User-defined name server information. Note: This field may return null, indicating that no valid value can be obtained.
        /// </summary>
        [Input("vanityNameServers")]
        public Input<Inputs.ZoneVanityNameServersArgs>? VanityNameServers { get; set; }

        /// <summary>
        /// Site name.
        /// </summary>
        [Input("zoneName", required: true)]
        public Input<string> ZoneName { get; set; } = null!;

        public ZoneArgs()
        {
        }
        public static new ZoneArgs Empty => new ZoneArgs();
    }

    public sealed class ZoneState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Acceleration area of the zone. Valid values: `mainland`, `overseas`.
        /// </summary>
        [Input("area")]
        public Input<string>? Area { get; set; }

        /// <summary>
        /// Specifies whether CNAME acceleration is enabled. Valid values: `enabled`, `disabled`.
        /// </summary>
        [Input("cnameSpeedUp")]
        public Input<string>? CnameSpeedUp { get; set; }

        /// <summary>
        /// Ownership verification status of the site when it accesses via CNAME.- `finished`: The site is verified.- `pending`: The
        /// site is waiting for verification.
        /// </summary>
        [Input("cnameStatus")]
        public Input<string>? CnameStatus { get; set; }

        /// <summary>
        /// Site creation date.
        /// </summary>
        [Input("createdOn")]
        public Input<string>? CreatedOn { get; set; }

        /// <summary>
        /// Site modification date.
        /// </summary>
        [Input("modifiedOn")]
        public Input<string>? ModifiedOn { get; set; }

        [Input("nameServers")]
        private InputList<string>? _nameServers;

        /// <summary>
        /// List of name servers assigned by Tencent Cloud.
        /// </summary>
        public InputList<string> NameServers
        {
            get => _nameServers ?? (_nameServers = new InputList<string>());
            set => _nameServers = value;
        }

        [Input("originalNameServers")]
        private InputList<string>? _originalNameServers;

        /// <summary>
        /// Name server used by the site.
        /// </summary>
        public InputList<string> OriginalNameServers
        {
            get => _originalNameServers ?? (_originalNameServers = new InputList<string>());
            set => _originalNameServers = value;
        }

        /// <summary>
        /// Indicates whether the site is disabled.
        /// </summary>
        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// Plan type of the zone. See details in data source `zone_available_plans`.
        /// </summary>
        [Input("planType")]
        public Input<string>? PlanType { get; set; }

        [Input("resources")]
        private InputList<Inputs.ZoneResourceGetArgs>? _resources;

        /// <summary>
        /// Billing resources of the zone.
        /// </summary>
        public InputList<Inputs.ZoneResourceGetArgs> Resources
        {
            get => _resources ?? (_resources = new InputList<Inputs.ZoneResourceGetArgs>());
            set => _resources = value;
        }

        /// <summary>
        /// Site status. Valid values:- `active`: NS is switched.- `pending`: NS is not switched.- `moved`: NS is moved.-
        /// `deactivated`: this site is blocked.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// Tag description list.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies how the site is connected to EdgeOne.- `full`: The site is connected via NS.- `partial`: The site is connected
        /// via CNAME.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// User-defined name server information. Note: This field may return null, indicating that no valid value can be obtained.
        /// </summary>
        [Input("vanityNameServers")]
        public Input<Inputs.ZoneVanityNameServersGetArgs>? VanityNameServers { get; set; }

        [Input("vanityNameServersIps")]
        private InputList<Inputs.ZoneVanityNameServersIpGetArgs>? _vanityNameServersIps;

        /// <summary>
        /// User-defined name server IP information. Note: This field may return null, indicating that no valid value can be
        /// obtained.
        /// </summary>
        public InputList<Inputs.ZoneVanityNameServersIpGetArgs> VanityNameServersIps
        {
            get => _vanityNameServersIps ?? (_vanityNameServersIps = new InputList<Inputs.ZoneVanityNameServersIpGetArgs>());
            set => _vanityNameServersIps = value;
        }

        /// <summary>
        /// Site ID.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        /// <summary>
        /// Site name.
        /// </summary>
        [Input("zoneName")]
        public Input<string>? ZoneName { get; set; }

        public ZoneState()
        {
        }
        public static new ZoneState Empty => new ZoneState();
    }
}
