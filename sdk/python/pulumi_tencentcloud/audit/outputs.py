# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'TrackStorage',
    'GetCosRegionsAuditCosRegionListResult',
    'GetKeyAliasAuditKeyAliasListResult',
]

@pulumi.output_type
class TrackStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageName":
            suggest = "storage_name"
        elif key == "storagePrefix":
            suggest = "storage_prefix"
        elif key == "storageRegion":
            suggest = "storage_region"
        elif key == "storageType":
            suggest = "storage_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrackStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrackStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrackStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_name: str,
                 storage_prefix: str,
                 storage_region: str,
                 storage_type: str):
        pulumi.set(__self__, "storage_name", storage_name)
        pulumi.set(__self__, "storage_prefix", storage_prefix)
        pulumi.set(__self__, "storage_region", storage_region)
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter(name="storageName")
    def storage_name(self) -> str:
        return pulumi.get(self, "storage_name")

    @property
    @pulumi.getter(name="storagePrefix")
    def storage_prefix(self) -> str:
        return pulumi.get(self, "storage_prefix")

    @property
    @pulumi.getter(name="storageRegion")
    def storage_region(self) -> str:
        return pulumi.get(self, "storage_region")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        return pulumi.get(self, "storage_type")


@pulumi.output_type
class GetCosRegionsAuditCosRegionListResult(dict):
    def __init__(__self__, *,
                 cos_region: str,
                 cos_region_name: str):
        pulumi.set(__self__, "cos_region", cos_region)
        pulumi.set(__self__, "cos_region_name", cos_region_name)

    @property
    @pulumi.getter(name="cosRegion")
    def cos_region(self) -> str:
        return pulumi.get(self, "cos_region")

    @property
    @pulumi.getter(name="cosRegionName")
    def cos_region_name(self) -> str:
        return pulumi.get(self, "cos_region_name")


@pulumi.output_type
class GetKeyAliasAuditKeyAliasListResult(dict):
    def __init__(__self__, *,
                 key_alias: str,
                 key_id: str):
        pulumi.set(__self__, "key_alias", key_alias)
        pulumi.set(__self__, "key_id", key_id)

    @property
    @pulumi.getter(name="keyAlias")
    def key_alias(self) -> str:
        return pulumi.get(self, "key_alias")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> str:
        return pulumi.get(self, "key_id")


