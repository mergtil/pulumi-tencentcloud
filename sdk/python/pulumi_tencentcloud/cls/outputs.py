# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AlarmAlarmTarget',
    'AlarmAnalysis',
    'AlarmAnalysisConfigInfo',
    'AlarmCallBack',
    'AlarmMonitorTime',
    'AlarmNoticeNoticeReceiver',
    'AlarmNoticeWebCallback',
    'CkafkaConsumerCkafka',
    'CkafkaConsumerContent',
    'ConfigExcludePath',
    'ConfigExtraContainerFile',
    'ConfigExtraContainerFileWorkload',
    'ConfigExtraContainerStdout',
    'ConfigExtraContainerStdoutWorkload',
    'ConfigExtraExcludePath',
    'ConfigExtraExtractRule',
    'ConfigExtraExtractRuleFilterKeyRegex',
    'ConfigExtraHostFile',
    'ConfigExtractRule',
    'ConfigExtractRuleFilterKeyRegex',
    'ConfigExtractRuleMetaTag',
    'CosRechargeExtractRuleInfo',
    'CosRechargeExtractRuleInfoFilterKeyRegex',
    'CosRechargeExtractRuleInfoMetaTag',
    'CosShipperCompress',
    'CosShipperContent',
    'CosShipperContentCsv',
    'CosShipperContentJson',
    'CosShipperFilterRule',
    'DataTransformDstResource',
    'IndexRule',
    'IndexRuleFullText',
    'IndexRuleKeyValue',
    'IndexRuleKeyValueKeyValue',
    'IndexRuleKeyValueKeyValueValue',
    'IndexRuleTag',
    'IndexRuleTagKeyValue',
    'IndexRuleTagKeyValueValue',
    'KafkaRechargeLogRechargeRule',
    'KafkaRechargeProtocol',
    'MachineGroupMachineGroupType',
    'ScheduledSqlDstResource',
    'GetMachineGroupConfigsConfigResult',
    'GetMachineGroupConfigsConfigExcludePathResult',
    'GetMachineGroupConfigsConfigExtractRuleResult',
    'GetMachineGroupConfigsConfigExtractRuleFilterKeyRegexResult',
    'GetMachineGroupConfigsConfigExtractRuleMetaTagResult',
    'GetMachinesMachineResult',
    'GetShipperTasksTaskResult',
]

@pulumi.output_type
class AlarmAlarmTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "logsetId":
            suggest = "logset_id"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "topicId":
            suggest = "topic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmAlarmTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmAlarmTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmAlarmTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time_offset: int,
                 logset_id: str,
                 number: int,
                 query: str,
                 start_time_offset: int,
                 topic_id: str):
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "logset_id", logset_id)
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> int:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="logsetId")
    def logset_id(self) -> str:
        return pulumi.get(self, "logset_id")

    @property
    @pulumi.getter
    def number(self) -> int:
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> int:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class AlarmAnalysis(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configInfos":
            suggest = "config_infos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmAnalysis. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmAnalysis.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmAnalysis.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 name: str,
                 type: str,
                 config_infos: Optional[Sequence['outputs.AlarmAnalysisConfigInfo']] = None):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if config_infos is not None:
            pulumi.set(__self__, "config_infos", config_infos)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="configInfos")
    def config_infos(self) -> Optional[Sequence['outputs.AlarmAnalysisConfigInfo']]:
        return pulumi.get(self, "config_infos")


@pulumi.output_type
class AlarmAnalysisConfigInfo(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class AlarmCallBack(dict):
    def __init__(__self__, *,
                 body: str,
                 headers: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter
    def body(self) -> str:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "headers")


@pulumi.output_type
class AlarmMonitorTime(dict):
    def __init__(__self__, *,
                 time: int,
                 type: str):
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def time(self) -> int:
        return pulumi.get(self, "time")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class AlarmNoticeNoticeReceiver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "receiverChannels":
            suggest = "receiver_channels"
        elif key == "receiverIds":
            suggest = "receiver_ids"
        elif key == "receiverType":
            suggest = "receiver_type"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmNoticeNoticeReceiver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmNoticeNoticeReceiver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmNoticeNoticeReceiver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 receiver_channels: Sequence[str],
                 receiver_ids: Sequence[int],
                 receiver_type: str,
                 end_time: Optional[str] = None,
                 index: Optional[int] = None,
                 start_time: Optional[str] = None):
        pulumi.set(__self__, "receiver_channels", receiver_channels)
        pulumi.set(__self__, "receiver_ids", receiver_ids)
        pulumi.set(__self__, "receiver_type", receiver_type)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="receiverChannels")
    def receiver_channels(self) -> Sequence[str]:
        return pulumi.get(self, "receiver_channels")

    @property
    @pulumi.getter(name="receiverIds")
    def receiver_ids(self) -> Sequence[int]:
        return pulumi.get(self, "receiver_ids")

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> str:
        return pulumi.get(self, "receiver_type")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")


@pulumi.output_type
class AlarmNoticeWebCallback(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "callbackType":
            suggest = "callback_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmNoticeWebCallback. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmNoticeWebCallback.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmNoticeWebCallback.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 callback_type: str,
                 url: str,
                 body: Optional[str] = None,
                 headers: Optional[Sequence[str]] = None,
                 index: Optional[int] = None,
                 method: Optional[str] = None):
        pulumi.set(__self__, "callback_type", callback_type)
        pulumi.set(__self__, "url", url)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if method is not None:
            pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter(name="callbackType")
    def callback_type(self) -> str:
        return pulumi.get(self, "callback_type")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")


@pulumi.output_type
class CkafkaConsumerCkafka(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "instanceName":
            suggest = "instance_name"
        elif key == "topicId":
            suggest = "topic_id"
        elif key == "topicName":
            suggest = "topic_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CkafkaConsumerCkafka. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CkafkaConsumerCkafka.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CkafkaConsumerCkafka.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: str,
                 instance_name: str,
                 topic_id: str,
                 topic_name: str,
                 vip: str,
                 vport: str):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "topic_id", topic_id)
        pulumi.set(__self__, "topic_name", topic_name)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "vport", vport)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        return pulumi.get(self, "topic_id")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> str:
        return pulumi.get(self, "topic_name")

    @property
    @pulumi.getter
    def vip(self) -> str:
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter
    def vport(self) -> str:
        return pulumi.get(self, "vport")


@pulumi.output_type
class CkafkaConsumerContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableTag":
            suggest = "enable_tag"
        elif key == "metaFields":
            suggest = "meta_fields"
        elif key == "tagJsonNotTiled":
            suggest = "tag_json_not_tiled"
        elif key == "timestampAccuracy":
            suggest = "timestamp_accuracy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CkafkaConsumerContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CkafkaConsumerContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CkafkaConsumerContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_tag: bool,
                 meta_fields: Sequence[str],
                 tag_json_not_tiled: Optional[bool] = None,
                 timestamp_accuracy: Optional[int] = None):
        pulumi.set(__self__, "enable_tag", enable_tag)
        pulumi.set(__self__, "meta_fields", meta_fields)
        if tag_json_not_tiled is not None:
            pulumi.set(__self__, "tag_json_not_tiled", tag_json_not_tiled)
        if timestamp_accuracy is not None:
            pulumi.set(__self__, "timestamp_accuracy", timestamp_accuracy)

    @property
    @pulumi.getter(name="enableTag")
    def enable_tag(self) -> bool:
        return pulumi.get(self, "enable_tag")

    @property
    @pulumi.getter(name="metaFields")
    def meta_fields(self) -> Sequence[str]:
        return pulumi.get(self, "meta_fields")

    @property
    @pulumi.getter(name="tagJsonNotTiled")
    def tag_json_not_tiled(self) -> Optional[bool]:
        return pulumi.get(self, "tag_json_not_tiled")

    @property
    @pulumi.getter(name="timestampAccuracy")
    def timestamp_accuracy(self) -> Optional[int]:
        return pulumi.get(self, "timestamp_accuracy")


@pulumi.output_type
class ConfigExcludePath(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ConfigExtraContainerFile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filePattern":
            suggest = "file_pattern"
        elif key == "logPath":
            suggest = "log_path"
        elif key == "excludeLabels":
            suggest = "exclude_labels"
        elif key == "excludeNamespace":
            suggest = "exclude_namespace"
        elif key == "includeLabels":
            suggest = "include_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigExtraContainerFile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigExtraContainerFile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigExtraContainerFile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container: str,
                 file_pattern: str,
                 log_path: str,
                 namespace: str,
                 exclude_labels: Optional[Sequence[str]] = None,
                 exclude_namespace: Optional[str] = None,
                 include_labels: Optional[Sequence[str]] = None,
                 workload: Optional['outputs.ConfigExtraContainerFileWorkload'] = None):
        pulumi.set(__self__, "container", container)
        pulumi.set(__self__, "file_pattern", file_pattern)
        pulumi.set(__self__, "log_path", log_path)
        pulumi.set(__self__, "namespace", namespace)
        if exclude_labels is not None:
            pulumi.set(__self__, "exclude_labels", exclude_labels)
        if exclude_namespace is not None:
            pulumi.set(__self__, "exclude_namespace", exclude_namespace)
        if include_labels is not None:
            pulumi.set(__self__, "include_labels", include_labels)
        if workload is not None:
            pulumi.set(__self__, "workload", workload)

    @property
    @pulumi.getter
    def container(self) -> str:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="filePattern")
    def file_pattern(self) -> str:
        return pulumi.get(self, "file_pattern")

    @property
    @pulumi.getter(name="logPath")
    def log_path(self) -> str:
        return pulumi.get(self, "log_path")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="excludeLabels")
    def exclude_labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclude_labels")

    @property
    @pulumi.getter(name="excludeNamespace")
    def exclude_namespace(self) -> Optional[str]:
        return pulumi.get(self, "exclude_namespace")

    @property
    @pulumi.getter(name="includeLabels")
    def include_labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "include_labels")

    @property
    @pulumi.getter
    def workload(self) -> Optional['outputs.ConfigExtraContainerFileWorkload']:
        return pulumi.get(self, "workload")


@pulumi.output_type
class ConfigExtraContainerFileWorkload(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 container: Optional[str] = None,
                 namespace: Optional[str] = None):
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def container(self) -> Optional[str]:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ConfigExtraContainerStdout(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allContainers":
            suggest = "all_containers"
        elif key == "excludeLabels":
            suggest = "exclude_labels"
        elif key == "excludeNamespace":
            suggest = "exclude_namespace"
        elif key == "includeLabels":
            suggest = "include_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigExtraContainerStdout. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigExtraContainerStdout.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigExtraContainerStdout.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all_containers: bool,
                 exclude_labels: Optional[Sequence[str]] = None,
                 exclude_namespace: Optional[str] = None,
                 include_labels: Optional[Sequence[str]] = None,
                 namespace: Optional[str] = None,
                 workloads: Optional[Sequence['outputs.ConfigExtraContainerStdoutWorkload']] = None):
        pulumi.set(__self__, "all_containers", all_containers)
        if exclude_labels is not None:
            pulumi.set(__self__, "exclude_labels", exclude_labels)
        if exclude_namespace is not None:
            pulumi.set(__self__, "exclude_namespace", exclude_namespace)
        if include_labels is not None:
            pulumi.set(__self__, "include_labels", include_labels)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if workloads is not None:
            pulumi.set(__self__, "workloads", workloads)

    @property
    @pulumi.getter(name="allContainers")
    def all_containers(self) -> bool:
        return pulumi.get(self, "all_containers")

    @property
    @pulumi.getter(name="excludeLabels")
    def exclude_labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exclude_labels")

    @property
    @pulumi.getter(name="excludeNamespace")
    def exclude_namespace(self) -> Optional[str]:
        return pulumi.get(self, "exclude_namespace")

    @property
    @pulumi.getter(name="includeLabels")
    def include_labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "include_labels")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def workloads(self) -> Optional[Sequence['outputs.ConfigExtraContainerStdoutWorkload']]:
        return pulumi.get(self, "workloads")


@pulumi.output_type
class ConfigExtraContainerStdoutWorkload(dict):
    def __init__(__self__, *,
                 kind: str,
                 name: str,
                 container: Optional[str] = None,
                 namespace: Optional[str] = None):
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def container(self) -> Optional[str]:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class ConfigExtraExcludePath(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None,
                 value: Optional[str] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ConfigExtraExtractRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "beginRegex":
            suggest = "begin_regex"
        elif key == "filterKeyRegexes":
            suggest = "filter_key_regexes"
        elif key == "logRegex":
            suggest = "log_regex"
        elif key == "timeFormat":
            suggest = "time_format"
        elif key == "timeKey":
            suggest = "time_key"
        elif key == "unMatchLogKey":
            suggest = "un_match_log_key"
        elif key == "unMatchUpLoadSwitch":
            suggest = "un_match_up_load_switch"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigExtraExtractRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigExtraExtractRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigExtraExtractRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backtracking: Optional[int] = None,
                 begin_regex: Optional[str] = None,
                 delimiter: Optional[str] = None,
                 filter_key_regexes: Optional[Sequence['outputs.ConfigExtraExtractRuleFilterKeyRegex']] = None,
                 keys: Optional[Sequence[str]] = None,
                 log_regex: Optional[str] = None,
                 time_format: Optional[str] = None,
                 time_key: Optional[str] = None,
                 un_match_log_key: Optional[str] = None,
                 un_match_up_load_switch: Optional[bool] = None):
        if backtracking is not None:
            pulumi.set(__self__, "backtracking", backtracking)
        if begin_regex is not None:
            pulumi.set(__self__, "begin_regex", begin_regex)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if filter_key_regexes is not None:
            pulumi.set(__self__, "filter_key_regexes", filter_key_regexes)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if log_regex is not None:
            pulumi.set(__self__, "log_regex", log_regex)
        if time_format is not None:
            pulumi.set(__self__, "time_format", time_format)
        if time_key is not None:
            pulumi.set(__self__, "time_key", time_key)
        if un_match_log_key is not None:
            pulumi.set(__self__, "un_match_log_key", un_match_log_key)
        if un_match_up_load_switch is not None:
            pulumi.set(__self__, "un_match_up_load_switch", un_match_up_load_switch)

    @property
    @pulumi.getter
    def backtracking(self) -> Optional[int]:
        return pulumi.get(self, "backtracking")

    @property
    @pulumi.getter(name="beginRegex")
    def begin_regex(self) -> Optional[str]:
        return pulumi.get(self, "begin_regex")

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[str]:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="filterKeyRegexes")
    def filter_key_regexes(self) -> Optional[Sequence['outputs.ConfigExtraExtractRuleFilterKeyRegex']]:
        return pulumi.get(self, "filter_key_regexes")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="logRegex")
    def log_regex(self) -> Optional[str]:
        return pulumi.get(self, "log_regex")

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> Optional[str]:
        return pulumi.get(self, "time_format")

    @property
    @pulumi.getter(name="timeKey")
    def time_key(self) -> Optional[str]:
        return pulumi.get(self, "time_key")

    @property
    @pulumi.getter(name="unMatchLogKey")
    def un_match_log_key(self) -> Optional[str]:
        return pulumi.get(self, "un_match_log_key")

    @property
    @pulumi.getter(name="unMatchUpLoadSwitch")
    def un_match_up_load_switch(self) -> Optional[bool]:
        return pulumi.get(self, "un_match_up_load_switch")


@pulumi.output_type
class ConfigExtraExtractRuleFilterKeyRegex(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 regex: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class ConfigExtraHostFile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filePattern":
            suggest = "file_pattern"
        elif key == "logPath":
            suggest = "log_path"
        elif key == "customLabels":
            suggest = "custom_labels"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigExtraHostFile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigExtraHostFile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigExtraHostFile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_pattern: str,
                 log_path: str,
                 custom_labels: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "file_pattern", file_pattern)
        pulumi.set(__self__, "log_path", log_path)
        if custom_labels is not None:
            pulumi.set(__self__, "custom_labels", custom_labels)

    @property
    @pulumi.getter(name="filePattern")
    def file_pattern(self) -> str:
        return pulumi.get(self, "file_pattern")

    @property
    @pulumi.getter(name="logPath")
    def log_path(self) -> str:
        return pulumi.get(self, "log_path")

    @property
    @pulumi.getter(name="customLabels")
    def custom_labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_labels")


@pulumi.output_type
class ConfigExtractRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "beginRegex":
            suggest = "begin_regex"
        elif key == "filterKeyRegexes":
            suggest = "filter_key_regexes"
        elif key == "isGbk":
            suggest = "is_gbk"
        elif key == "jsonStandard":
            suggest = "json_standard"
        elif key == "logRegex":
            suggest = "log_regex"
        elif key == "metaTags":
            suggest = "meta_tags"
        elif key == "metadataType":
            suggest = "metadata_type"
        elif key == "parseProtocol":
            suggest = "parse_protocol"
        elif key == "pathRegex":
            suggest = "path_regex"
        elif key == "timeFormat":
            suggest = "time_format"
        elif key == "timeKey":
            suggest = "time_key"
        elif key == "unMatchLogKey":
            suggest = "un_match_log_key"
        elif key == "unMatchUpLoadSwitch":
            suggest = "un_match_up_load_switch"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigExtractRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigExtractRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigExtractRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 backtracking: Optional[int] = None,
                 begin_regex: Optional[str] = None,
                 delimiter: Optional[str] = None,
                 filter_key_regexes: Optional[Sequence['outputs.ConfigExtractRuleFilterKeyRegex']] = None,
                 is_gbk: Optional[int] = None,
                 json_standard: Optional[int] = None,
                 keys: Optional[Sequence[str]] = None,
                 log_regex: Optional[str] = None,
                 meta_tags: Optional[Sequence['outputs.ConfigExtractRuleMetaTag']] = None,
                 metadata_type: Optional[int] = None,
                 parse_protocol: Optional[str] = None,
                 path_regex: Optional[str] = None,
                 protocol: Optional[str] = None,
                 time_format: Optional[str] = None,
                 time_key: Optional[str] = None,
                 un_match_log_key: Optional[str] = None,
                 un_match_up_load_switch: Optional[bool] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if backtracking is not None:
            pulumi.set(__self__, "backtracking", backtracking)
        if begin_regex is not None:
            pulumi.set(__self__, "begin_regex", begin_regex)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if filter_key_regexes is not None:
            pulumi.set(__self__, "filter_key_regexes", filter_key_regexes)
        if is_gbk is not None:
            pulumi.set(__self__, "is_gbk", is_gbk)
        if json_standard is not None:
            pulumi.set(__self__, "json_standard", json_standard)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if log_regex is not None:
            pulumi.set(__self__, "log_regex", log_regex)
        if meta_tags is not None:
            pulumi.set(__self__, "meta_tags", meta_tags)
        if metadata_type is not None:
            pulumi.set(__self__, "metadata_type", metadata_type)
        if parse_protocol is not None:
            pulumi.set(__self__, "parse_protocol", parse_protocol)
        if path_regex is not None:
            pulumi.set(__self__, "path_regex", path_regex)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if time_format is not None:
            pulumi.set(__self__, "time_format", time_format)
        if time_key is not None:
            pulumi.set(__self__, "time_key", time_key)
        if un_match_log_key is not None:
            pulumi.set(__self__, "un_match_log_key", un_match_log_key)
        if un_match_up_load_switch is not None:
            pulumi.set(__self__, "un_match_up_load_switch", un_match_up_load_switch)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def backtracking(self) -> Optional[int]:
        return pulumi.get(self, "backtracking")

    @property
    @pulumi.getter(name="beginRegex")
    def begin_regex(self) -> Optional[str]:
        return pulumi.get(self, "begin_regex")

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[str]:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="filterKeyRegexes")
    def filter_key_regexes(self) -> Optional[Sequence['outputs.ConfigExtractRuleFilterKeyRegex']]:
        return pulumi.get(self, "filter_key_regexes")

    @property
    @pulumi.getter(name="isGbk")
    def is_gbk(self) -> Optional[int]:
        return pulumi.get(self, "is_gbk")

    @property
    @pulumi.getter(name="jsonStandard")
    def json_standard(self) -> Optional[int]:
        return pulumi.get(self, "json_standard")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="logRegex")
    def log_regex(self) -> Optional[str]:
        return pulumi.get(self, "log_regex")

    @property
    @pulumi.getter(name="metaTags")
    def meta_tags(self) -> Optional[Sequence['outputs.ConfigExtractRuleMetaTag']]:
        return pulumi.get(self, "meta_tags")

    @property
    @pulumi.getter(name="metadataType")
    def metadata_type(self) -> Optional[int]:
        return pulumi.get(self, "metadata_type")

    @property
    @pulumi.getter(name="parseProtocol")
    def parse_protocol(self) -> Optional[str]:
        return pulumi.get(self, "parse_protocol")

    @property
    @pulumi.getter(name="pathRegex")
    def path_regex(self) -> Optional[str]:
        return pulumi.get(self, "path_regex")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> Optional[str]:
        return pulumi.get(self, "time_format")

    @property
    @pulumi.getter(name="timeKey")
    def time_key(self) -> Optional[str]:
        return pulumi.get(self, "time_key")

    @property
    @pulumi.getter(name="unMatchLogKey")
    def un_match_log_key(self) -> Optional[str]:
        return pulumi.get(self, "un_match_log_key")

    @property
    @pulumi.getter(name="unMatchUpLoadSwitch")
    def un_match_up_load_switch(self) -> Optional[bool]:
        return pulumi.get(self, "un_match_up_load_switch")


@pulumi.output_type
class ConfigExtractRuleFilterKeyRegex(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 regex: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class ConfigExtractRuleMetaTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class CosRechargeExtractRuleInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "beginRegex":
            suggest = "begin_regex"
        elif key == "filterKeyRegexes":
            suggest = "filter_key_regexes"
        elif key == "isGbk":
            suggest = "is_gbk"
        elif key == "jsonStandard":
            suggest = "json_standard"
        elif key == "logRegex":
            suggest = "log_regex"
        elif key == "metaTags":
            suggest = "meta_tags"
        elif key == "metadataType":
            suggest = "metadata_type"
        elif key == "parseProtocol":
            suggest = "parse_protocol"
        elif key == "pathRegex":
            suggest = "path_regex"
        elif key == "timeFormat":
            suggest = "time_format"
        elif key == "timeKey":
            suggest = "time_key"
        elif key == "unMatchLogKey":
            suggest = "un_match_log_key"
        elif key == "unMatchUpLoadSwitch":
            suggest = "un_match_up_load_switch"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CosRechargeExtractRuleInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CosRechargeExtractRuleInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CosRechargeExtractRuleInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 backtracking: Optional[int] = None,
                 begin_regex: Optional[str] = None,
                 delimiter: Optional[str] = None,
                 filter_key_regexes: Optional[Sequence['outputs.CosRechargeExtractRuleInfoFilterKeyRegex']] = None,
                 is_gbk: Optional[int] = None,
                 json_standard: Optional[int] = None,
                 keys: Optional[Sequence[str]] = None,
                 log_regex: Optional[str] = None,
                 meta_tags: Optional[Sequence['outputs.CosRechargeExtractRuleInfoMetaTag']] = None,
                 metadata_type: Optional[int] = None,
                 parse_protocol: Optional[str] = None,
                 path_regex: Optional[str] = None,
                 protocol: Optional[str] = None,
                 time_format: Optional[str] = None,
                 time_key: Optional[str] = None,
                 un_match_log_key: Optional[str] = None,
                 un_match_up_load_switch: Optional[bool] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if backtracking is not None:
            pulumi.set(__self__, "backtracking", backtracking)
        if begin_regex is not None:
            pulumi.set(__self__, "begin_regex", begin_regex)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if filter_key_regexes is not None:
            pulumi.set(__self__, "filter_key_regexes", filter_key_regexes)
        if is_gbk is not None:
            pulumi.set(__self__, "is_gbk", is_gbk)
        if json_standard is not None:
            pulumi.set(__self__, "json_standard", json_standard)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if log_regex is not None:
            pulumi.set(__self__, "log_regex", log_regex)
        if meta_tags is not None:
            pulumi.set(__self__, "meta_tags", meta_tags)
        if metadata_type is not None:
            pulumi.set(__self__, "metadata_type", metadata_type)
        if parse_protocol is not None:
            pulumi.set(__self__, "parse_protocol", parse_protocol)
        if path_regex is not None:
            pulumi.set(__self__, "path_regex", path_regex)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if time_format is not None:
            pulumi.set(__self__, "time_format", time_format)
        if time_key is not None:
            pulumi.set(__self__, "time_key", time_key)
        if un_match_log_key is not None:
            pulumi.set(__self__, "un_match_log_key", un_match_log_key)
        if un_match_up_load_switch is not None:
            pulumi.set(__self__, "un_match_up_load_switch", un_match_up_load_switch)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def backtracking(self) -> Optional[int]:
        return pulumi.get(self, "backtracking")

    @property
    @pulumi.getter(name="beginRegex")
    def begin_regex(self) -> Optional[str]:
        return pulumi.get(self, "begin_regex")

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[str]:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="filterKeyRegexes")
    def filter_key_regexes(self) -> Optional[Sequence['outputs.CosRechargeExtractRuleInfoFilterKeyRegex']]:
        return pulumi.get(self, "filter_key_regexes")

    @property
    @pulumi.getter(name="isGbk")
    def is_gbk(self) -> Optional[int]:
        return pulumi.get(self, "is_gbk")

    @property
    @pulumi.getter(name="jsonStandard")
    def json_standard(self) -> Optional[int]:
        return pulumi.get(self, "json_standard")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="logRegex")
    def log_regex(self) -> Optional[str]:
        return pulumi.get(self, "log_regex")

    @property
    @pulumi.getter(name="metaTags")
    def meta_tags(self) -> Optional[Sequence['outputs.CosRechargeExtractRuleInfoMetaTag']]:
        return pulumi.get(self, "meta_tags")

    @property
    @pulumi.getter(name="metadataType")
    def metadata_type(self) -> Optional[int]:
        return pulumi.get(self, "metadata_type")

    @property
    @pulumi.getter(name="parseProtocol")
    def parse_protocol(self) -> Optional[str]:
        return pulumi.get(self, "parse_protocol")

    @property
    @pulumi.getter(name="pathRegex")
    def path_regex(self) -> Optional[str]:
        return pulumi.get(self, "path_regex")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> Optional[str]:
        return pulumi.get(self, "time_format")

    @property
    @pulumi.getter(name="timeKey")
    def time_key(self) -> Optional[str]:
        return pulumi.get(self, "time_key")

    @property
    @pulumi.getter(name="unMatchLogKey")
    def un_match_log_key(self) -> Optional[str]:
        return pulumi.get(self, "un_match_log_key")

    @property
    @pulumi.getter(name="unMatchUpLoadSwitch")
    def un_match_up_load_switch(self) -> Optional[bool]:
        return pulumi.get(self, "un_match_up_load_switch")


@pulumi.output_type
class CosRechargeExtractRuleInfoFilterKeyRegex(dict):
    def __init__(__self__, *,
                 key: str,
                 regex: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def regex(self) -> str:
        return pulumi.get(self, "regex")


@pulumi.output_type
class CosRechargeExtractRuleInfoMetaTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class CosShipperCompress(dict):
    def __init__(__self__, *,
                 format: str):
        pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")


@pulumi.output_type
class CosShipperContent(dict):
    def __init__(__self__, *,
                 format: str,
                 csv: Optional['outputs.CosShipperContentCsv'] = None,
                 json: Optional['outputs.CosShipperContentJson'] = None):
        pulumi.set(__self__, "format", format)
        if csv is not None:
            pulumi.set(__self__, "csv", csv)
        if json is not None:
            pulumi.set(__self__, "json", json)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def csv(self) -> Optional['outputs.CosShipperContentCsv']:
        return pulumi.get(self, "csv")

    @property
    @pulumi.getter
    def json(self) -> Optional['outputs.CosShipperContentJson']:
        return pulumi.get(self, "json")


@pulumi.output_type
class CosShipperContentCsv(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "escapeChar":
            suggest = "escape_char"
        elif key == "nonExistingField":
            suggest = "non_existing_field"
        elif key == "printKey":
            suggest = "print_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CosShipperContentCsv. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CosShipperContentCsv.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CosShipperContentCsv.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delimiter: str,
                 escape_char: str,
                 keys: Sequence[str],
                 non_existing_field: str,
                 print_key: bool):
        pulumi.set(__self__, "delimiter", delimiter)
        pulumi.set(__self__, "escape_char", escape_char)
        pulumi.set(__self__, "keys", keys)
        pulumi.set(__self__, "non_existing_field", non_existing_field)
        pulumi.set(__self__, "print_key", print_key)

    @property
    @pulumi.getter
    def delimiter(self) -> str:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="escapeChar")
    def escape_char(self) -> str:
        return pulumi.get(self, "escape_char")

    @property
    @pulumi.getter
    def keys(self) -> Sequence[str]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="nonExistingField")
    def non_existing_field(self) -> str:
        return pulumi.get(self, "non_existing_field")

    @property
    @pulumi.getter(name="printKey")
    def print_key(self) -> bool:
        return pulumi.get(self, "print_key")


@pulumi.output_type
class CosShipperContentJson(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableTag":
            suggest = "enable_tag"
        elif key == "metaFields":
            suggest = "meta_fields"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CosShipperContentJson. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CosShipperContentJson.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CosShipperContentJson.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_tag: bool,
                 meta_fields: Sequence[str]):
        pulumi.set(__self__, "enable_tag", enable_tag)
        pulumi.set(__self__, "meta_fields", meta_fields)

    @property
    @pulumi.getter(name="enableTag")
    def enable_tag(self) -> bool:
        return pulumi.get(self, "enable_tag")

    @property
    @pulumi.getter(name="metaFields")
    def meta_fields(self) -> Sequence[str]:
        return pulumi.get(self, "meta_fields")


@pulumi.output_type
class CosShipperFilterRule(dict):
    def __init__(__self__, *,
                 key: str,
                 regex: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "regex", regex)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def regex(self) -> str:
        return pulumi.get(self, "regex")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DataTransformDstResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topicId":
            suggest = "topic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataTransformDstResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataTransformDstResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataTransformDstResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alias: str,
                 topic_id: str):
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def alias(self) -> str:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        return pulumi.get(self, "topic_id")


@pulumi.output_type
class IndexRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fullText":
            suggest = "full_text"
        elif key == "keyValue":
            suggest = "key_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IndexRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IndexRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IndexRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 full_text: Optional['outputs.IndexRuleFullText'] = None,
                 key_value: Optional['outputs.IndexRuleKeyValue'] = None,
                 tag: Optional['outputs.IndexRuleTag'] = None):
        if full_text is not None:
            pulumi.set(__self__, "full_text", full_text)
        if key_value is not None:
            pulumi.set(__self__, "key_value", key_value)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="fullText")
    def full_text(self) -> Optional['outputs.IndexRuleFullText']:
        return pulumi.get(self, "full_text")

    @property
    @pulumi.getter(name="keyValue")
    def key_value(self) -> Optional['outputs.IndexRuleKeyValue']:
        return pulumi.get(self, "key_value")

    @property
    @pulumi.getter
    def tag(self) -> Optional['outputs.IndexRuleTag']:
        return pulumi.get(self, "tag")


@pulumi.output_type
class IndexRuleFullText(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caseSensitive":
            suggest = "case_sensitive"
        elif key == "containZH":
            suggest = "contain_zh"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IndexRuleFullText. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IndexRuleFullText.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IndexRuleFullText.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 case_sensitive: bool,
                 contain_zh: bool,
                 tokenizer: str):
        pulumi.set(__self__, "case_sensitive", case_sensitive)
        pulumi.set(__self__, "contain_zh", contain_zh)
        pulumi.set(__self__, "tokenizer", tokenizer)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> bool:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="containZH")
    def contain_zh(self) -> bool:
        return pulumi.get(self, "contain_zh")

    @property
    @pulumi.getter
    def tokenizer(self) -> str:
        return pulumi.get(self, "tokenizer")


@pulumi.output_type
class IndexRuleKeyValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caseSensitive":
            suggest = "case_sensitive"
        elif key == "keyValues":
            suggest = "key_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IndexRuleKeyValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IndexRuleKeyValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IndexRuleKeyValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 case_sensitive: bool,
                 key_values: Optional[Sequence['outputs.IndexRuleKeyValueKeyValue']] = None):
        pulumi.set(__self__, "case_sensitive", case_sensitive)
        if key_values is not None:
            pulumi.set(__self__, "key_values", key_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> bool:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="keyValues")
    def key_values(self) -> Optional[Sequence['outputs.IndexRuleKeyValueKeyValue']]:
        return pulumi.get(self, "key_values")


@pulumi.output_type
class IndexRuleKeyValueKeyValue(dict):
    def __init__(__self__, *,
                 key: str,
                 value: Optional['outputs.IndexRuleKeyValueKeyValueValue'] = None):
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.IndexRuleKeyValueKeyValueValue']:
        return pulumi.get(self, "value")


@pulumi.output_type
class IndexRuleKeyValueKeyValueValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containZH":
            suggest = "contain_zh"
        elif key == "sqlFlag":
            suggest = "sql_flag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IndexRuleKeyValueKeyValueValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IndexRuleKeyValueKeyValueValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IndexRuleKeyValueKeyValueValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 contain_zh: Optional[bool] = None,
                 sql_flag: Optional[bool] = None,
                 tokenizer: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if contain_zh is not None:
            pulumi.set(__self__, "contain_zh", contain_zh)
        if sql_flag is not None:
            pulumi.set(__self__, "sql_flag", sql_flag)
        if tokenizer is not None:
            pulumi.set(__self__, "tokenizer", tokenizer)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="containZH")
    def contain_zh(self) -> Optional[bool]:
        return pulumi.get(self, "contain_zh")

    @property
    @pulumi.getter(name="sqlFlag")
    def sql_flag(self) -> Optional[bool]:
        return pulumi.get(self, "sql_flag")

    @property
    @pulumi.getter
    def tokenizer(self) -> Optional[str]:
        return pulumi.get(self, "tokenizer")


@pulumi.output_type
class IndexRuleTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caseSensitive":
            suggest = "case_sensitive"
        elif key == "keyValues":
            suggest = "key_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IndexRuleTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IndexRuleTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IndexRuleTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 case_sensitive: bool,
                 key_values: Optional[Sequence['outputs.IndexRuleTagKeyValue']] = None):
        pulumi.set(__self__, "case_sensitive", case_sensitive)
        if key_values is not None:
            pulumi.set(__self__, "key_values", key_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> bool:
        return pulumi.get(self, "case_sensitive")

    @property
    @pulumi.getter(name="keyValues")
    def key_values(self) -> Optional[Sequence['outputs.IndexRuleTagKeyValue']]:
        return pulumi.get(self, "key_values")


@pulumi.output_type
class IndexRuleTagKeyValue(dict):
    def __init__(__self__, *,
                 key: str,
                 value: Optional['outputs.IndexRuleTagKeyValueValue'] = None):
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.IndexRuleTagKeyValueValue']:
        return pulumi.get(self, "value")


@pulumi.output_type
class IndexRuleTagKeyValueValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containZH":
            suggest = "contain_zh"
        elif key == "sqlFlag":
            suggest = "sql_flag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IndexRuleTagKeyValueValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IndexRuleTagKeyValueValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IndexRuleTagKeyValueValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 contain_zh: Optional[bool] = None,
                 sql_flag: Optional[bool] = None,
                 tokenizer: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if contain_zh is not None:
            pulumi.set(__self__, "contain_zh", contain_zh)
        if sql_flag is not None:
            pulumi.set(__self__, "sql_flag", sql_flag)
        if tokenizer is not None:
            pulumi.set(__self__, "tokenizer", tokenizer)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="containZH")
    def contain_zh(self) -> Optional[bool]:
        return pulumi.get(self, "contain_zh")

    @property
    @pulumi.getter(name="sqlFlag")
    def sql_flag(self) -> Optional[bool]:
        return pulumi.get(self, "sql_flag")

    @property
    @pulumi.getter
    def tokenizer(self) -> Optional[str]:
        return pulumi.get(self, "tokenizer")


@pulumi.output_type
class KafkaRechargeLogRechargeRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultTimeSwitch":
            suggest = "default_time_switch"
        elif key == "encodingFormat":
            suggest = "encoding_format"
        elif key == "rechargeType":
            suggest = "recharge_type"
        elif key == "defaultTimeSrc":
            suggest = "default_time_src"
        elif key == "logRegex":
            suggest = "log_regex"
        elif key == "timeFormat":
            suggest = "time_format"
        elif key == "timeKey":
            suggest = "time_key"
        elif key == "timeRegex":
            suggest = "time_regex"
        elif key == "timeZone":
            suggest = "time_zone"
        elif key == "unMatchLogKey":
            suggest = "un_match_log_key"
        elif key == "unMatchLogSwitch":
            suggest = "un_match_log_switch"
        elif key == "unMatchLogTimeSrc":
            suggest = "un_match_log_time_src"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KafkaRechargeLogRechargeRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KafkaRechargeLogRechargeRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KafkaRechargeLogRechargeRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_time_switch: bool,
                 encoding_format: int,
                 recharge_type: str,
                 default_time_src: Optional[int] = None,
                 keys: Optional[Sequence[str]] = None,
                 log_regex: Optional[str] = None,
                 metadatas: Optional[Sequence[str]] = None,
                 time_format: Optional[str] = None,
                 time_key: Optional[str] = None,
                 time_regex: Optional[str] = None,
                 time_zone: Optional[str] = None,
                 un_match_log_key: Optional[str] = None,
                 un_match_log_switch: Optional[bool] = None,
                 un_match_log_time_src: Optional[int] = None):
        pulumi.set(__self__, "default_time_switch", default_time_switch)
        pulumi.set(__self__, "encoding_format", encoding_format)
        pulumi.set(__self__, "recharge_type", recharge_type)
        if default_time_src is not None:
            pulumi.set(__self__, "default_time_src", default_time_src)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if log_regex is not None:
            pulumi.set(__self__, "log_regex", log_regex)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if time_format is not None:
            pulumi.set(__self__, "time_format", time_format)
        if time_key is not None:
            pulumi.set(__self__, "time_key", time_key)
        if time_regex is not None:
            pulumi.set(__self__, "time_regex", time_regex)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if un_match_log_key is not None:
            pulumi.set(__self__, "un_match_log_key", un_match_log_key)
        if un_match_log_switch is not None:
            pulumi.set(__self__, "un_match_log_switch", un_match_log_switch)
        if un_match_log_time_src is not None:
            pulumi.set(__self__, "un_match_log_time_src", un_match_log_time_src)

    @property
    @pulumi.getter(name="defaultTimeSwitch")
    def default_time_switch(self) -> bool:
        return pulumi.get(self, "default_time_switch")

    @property
    @pulumi.getter(name="encodingFormat")
    def encoding_format(self) -> int:
        return pulumi.get(self, "encoding_format")

    @property
    @pulumi.getter(name="rechargeType")
    def recharge_type(self) -> str:
        return pulumi.get(self, "recharge_type")

    @property
    @pulumi.getter(name="defaultTimeSrc")
    def default_time_src(self) -> Optional[int]:
        return pulumi.get(self, "default_time_src")

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="logRegex")
    def log_regex(self) -> Optional[str]:
        return pulumi.get(self, "log_regex")

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "metadatas")

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> Optional[str]:
        return pulumi.get(self, "time_format")

    @property
    @pulumi.getter(name="timeKey")
    def time_key(self) -> Optional[str]:
        return pulumi.get(self, "time_key")

    @property
    @pulumi.getter(name="timeRegex")
    def time_regex(self) -> Optional[str]:
        return pulumi.get(self, "time_regex")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="unMatchLogKey")
    def un_match_log_key(self) -> Optional[str]:
        return pulumi.get(self, "un_match_log_key")

    @property
    @pulumi.getter(name="unMatchLogSwitch")
    def un_match_log_switch(self) -> Optional[bool]:
        return pulumi.get(self, "un_match_log_switch")

    @property
    @pulumi.getter(name="unMatchLogTimeSrc")
    def un_match_log_time_src(self) -> Optional[int]:
        return pulumi.get(self, "un_match_log_time_src")


@pulumi.output_type
class KafkaRechargeProtocol(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KafkaRechargeProtocol. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KafkaRechargeProtocol.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KafkaRechargeProtocol.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mechanism: Optional[str] = None,
                 password: Optional[str] = None,
                 protocol: Optional[str] = None,
                 user_name: Optional[str] = None):
        if mechanism is not None:
            pulumi.set(__self__, "mechanism", mechanism)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def mechanism(self) -> Optional[str]:
        return pulumi.get(self, "mechanism")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class MachineGroupMachineGroupType(dict):
    def __init__(__self__, *,
                 type: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ScheduledSqlDstResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topicId":
            suggest = "topic_id"
        elif key == "bizType":
            suggest = "biz_type"
        elif key == "metricName":
            suggest = "metric_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScheduledSqlDstResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScheduledSqlDstResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScheduledSqlDstResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topic_id: str,
                 biz_type: Optional[int] = None,
                 metric_name: Optional[str] = None,
                 region: Optional[str] = None):
        pulumi.set(__self__, "topic_id", topic_id)
        if biz_type is not None:
            pulumi.set(__self__, "biz_type", biz_type)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        return pulumi.get(self, "topic_id")

    @property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> Optional[int]:
        return pulumi.get(self, "biz_type")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetMachineGroupConfigsConfigResult(dict):
    def __init__(__self__, *,
                 config_id: str,
                 create_time: str,
                 exclude_paths: Sequence['outputs.GetMachineGroupConfigsConfigExcludePathResult'],
                 extract_rules: Sequence['outputs.GetMachineGroupConfigsConfigExtractRuleResult'],
                 log_format: str,
                 log_type: str,
                 name: str,
                 output: str,
                 path: str,
                 update_time: str,
                 user_define_rule: str):
        pulumi.set(__self__, "config_id", config_id)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "exclude_paths", exclude_paths)
        pulumi.set(__self__, "extract_rules", extract_rules)
        pulumi.set(__self__, "log_format", log_format)
        pulumi.set(__self__, "log_type", log_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "user_define_rule", user_define_rule)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> str:
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="excludePaths")
    def exclude_paths(self) -> Sequence['outputs.GetMachineGroupConfigsConfigExcludePathResult']:
        return pulumi.get(self, "exclude_paths")

    @property
    @pulumi.getter(name="extractRules")
    def extract_rules(self) -> Sequence['outputs.GetMachineGroupConfigsConfigExtractRuleResult']:
        return pulumi.get(self, "extract_rules")

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> str:
        return pulumi.get(self, "log_format")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> str:
        return pulumi.get(self, "log_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def output(self) -> str:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="userDefineRule")
    def user_define_rule(self) -> str:
        return pulumi.get(self, "user_define_rule")


@pulumi.output_type
class GetMachineGroupConfigsConfigExcludePathResult(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMachineGroupConfigsConfigExtractRuleResult(dict):
    def __init__(__self__, *,
                 address: str,
                 backtracking: int,
                 begin_regex: str,
                 delimiter: str,
                 filter_key_regexes: Sequence['outputs.GetMachineGroupConfigsConfigExtractRuleFilterKeyRegexResult'],
                 is_gbk: int,
                 json_standard: int,
                 keys: Sequence[str],
                 log_regex: str,
                 meta_tags: Sequence['outputs.GetMachineGroupConfigsConfigExtractRuleMetaTagResult'],
                 metadata_type: int,
                 parse_protocol: str,
                 path_regex: str,
                 protocol: str,
                 time_format: str,
                 time_key: str,
                 un_match_log_key: str,
                 un_match_up_load_switch: bool):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "backtracking", backtracking)
        pulumi.set(__self__, "begin_regex", begin_regex)
        pulumi.set(__self__, "delimiter", delimiter)
        pulumi.set(__self__, "filter_key_regexes", filter_key_regexes)
        pulumi.set(__self__, "is_gbk", is_gbk)
        pulumi.set(__self__, "json_standard", json_standard)
        pulumi.set(__self__, "keys", keys)
        pulumi.set(__self__, "log_regex", log_regex)
        pulumi.set(__self__, "meta_tags", meta_tags)
        pulumi.set(__self__, "metadata_type", metadata_type)
        pulumi.set(__self__, "parse_protocol", parse_protocol)
        pulumi.set(__self__, "path_regex", path_regex)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "time_format", time_format)
        pulumi.set(__self__, "time_key", time_key)
        pulumi.set(__self__, "un_match_log_key", un_match_log_key)
        pulumi.set(__self__, "un_match_up_load_switch", un_match_up_load_switch)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def backtracking(self) -> int:
        return pulumi.get(self, "backtracking")

    @property
    @pulumi.getter(name="beginRegex")
    def begin_regex(self) -> str:
        return pulumi.get(self, "begin_regex")

    @property
    @pulumi.getter
    def delimiter(self) -> str:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="filterKeyRegexes")
    def filter_key_regexes(self) -> Sequence['outputs.GetMachineGroupConfigsConfigExtractRuleFilterKeyRegexResult']:
        return pulumi.get(self, "filter_key_regexes")

    @property
    @pulumi.getter(name="isGbk")
    def is_gbk(self) -> int:
        return pulumi.get(self, "is_gbk")

    @property
    @pulumi.getter(name="jsonStandard")
    def json_standard(self) -> int:
        return pulumi.get(self, "json_standard")

    @property
    @pulumi.getter
    def keys(self) -> Sequence[str]:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="logRegex")
    def log_regex(self) -> str:
        return pulumi.get(self, "log_regex")

    @property
    @pulumi.getter(name="metaTags")
    def meta_tags(self) -> Sequence['outputs.GetMachineGroupConfigsConfigExtractRuleMetaTagResult']:
        return pulumi.get(self, "meta_tags")

    @property
    @pulumi.getter(name="metadataType")
    def metadata_type(self) -> int:
        return pulumi.get(self, "metadata_type")

    @property
    @pulumi.getter(name="parseProtocol")
    def parse_protocol(self) -> str:
        return pulumi.get(self, "parse_protocol")

    @property
    @pulumi.getter(name="pathRegex")
    def path_regex(self) -> str:
        return pulumi.get(self, "path_regex")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> str:
        return pulumi.get(self, "time_format")

    @property
    @pulumi.getter(name="timeKey")
    def time_key(self) -> str:
        return pulumi.get(self, "time_key")

    @property
    @pulumi.getter(name="unMatchLogKey")
    def un_match_log_key(self) -> str:
        return pulumi.get(self, "un_match_log_key")

    @property
    @pulumi.getter(name="unMatchUpLoadSwitch")
    def un_match_up_load_switch(self) -> bool:
        return pulumi.get(self, "un_match_up_load_switch")


@pulumi.output_type
class GetMachineGroupConfigsConfigExtractRuleFilterKeyRegexResult(dict):
    def __init__(__self__, *,
                 key: str,
                 regex: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def regex(self) -> str:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetMachineGroupConfigsConfigExtractRuleMetaTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMachinesMachineResult(dict):
    def __init__(__self__, *,
                 auto_update: int,
                 err_code: int,
                 err_msg: str,
                 ip: str,
                 offline_time: str,
                 status: int,
                 update_status: int,
                 version: str):
        pulumi.set(__self__, "auto_update", auto_update)
        pulumi.set(__self__, "err_code", err_code)
        pulumi.set(__self__, "err_msg", err_msg)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "offline_time", offline_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "update_status", update_status)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="autoUpdate")
    def auto_update(self) -> int:
        return pulumi.get(self, "auto_update")

    @property
    @pulumi.getter(name="errCode")
    def err_code(self) -> int:
        return pulumi.get(self, "err_code")

    @property
    @pulumi.getter(name="errMsg")
    def err_msg(self) -> str:
        return pulumi.get(self, "err_msg")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="offlineTime")
    def offline_time(self) -> str:
        return pulumi.get(self, "offline_time")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateStatus")
    def update_status(self) -> int:
        return pulumi.get(self, "update_status")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetShipperTasksTaskResult(dict):
    def __init__(__self__, *,
                 end_time: int,
                 message: str,
                 range_end: int,
                 range_start: int,
                 shipper_id: str,
                 start_time: int,
                 status: str,
                 task_id: str,
                 topic_id: str):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "range_end", range_end)
        pulumi.set(__self__, "range_start", range_start)
        pulumi.set(__self__, "shipper_id", shipper_id)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "task_id", task_id)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="rangeEnd")
    def range_end(self) -> int:
        return pulumi.get(self, "range_end")

    @property
    @pulumi.getter(name="rangeStart")
    def range_start(self) -> int:
        return pulumi.get(self, "range_start")

    @property
    @pulumi.getter(name="shipperId")
    def shipper_id(self) -> str:
        return pulumi.get(self, "shipper_id")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> str:
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        return pulumi.get(self, "topic_id")


