# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AlarmAlarmTargetArgs',
    'AlarmAnalysisArgs',
    'AlarmAnalysisConfigInfoArgs',
    'AlarmCallBackArgs',
    'AlarmMonitorTimeArgs',
    'AlarmNoticeNoticeReceiverArgs',
    'AlarmNoticeWebCallbackArgs',
    'CkafkaConsumerCkafkaArgs',
    'CkafkaConsumerContentArgs',
    'ConfigExcludePathArgs',
    'ConfigExtraContainerFileArgs',
    'ConfigExtraContainerFileWorkloadArgs',
    'ConfigExtraContainerStdoutArgs',
    'ConfigExtraContainerStdoutWorkloadArgs',
    'ConfigExtraExcludePathArgs',
    'ConfigExtraExtractRuleArgs',
    'ConfigExtraExtractRuleFilterKeyRegexArgs',
    'ConfigExtraHostFileArgs',
    'ConfigExtractRuleArgs',
    'ConfigExtractRuleFilterKeyRegexArgs',
    'ConfigExtractRuleMetaTagArgs',
    'CosRechargeExtractRuleInfoArgs',
    'CosRechargeExtractRuleInfoFilterKeyRegexArgs',
    'CosRechargeExtractRuleInfoMetaTagArgs',
    'CosShipperCompressArgs',
    'CosShipperContentArgs',
    'CosShipperContentCsvArgs',
    'CosShipperContentJsonArgs',
    'CosShipperFilterRuleArgs',
    'DataTransformDstResourceArgs',
    'IndexRuleArgs',
    'IndexRuleFullTextArgs',
    'IndexRuleKeyValueArgs',
    'IndexRuleKeyValueKeyValueArgs',
    'IndexRuleKeyValueKeyValueValueArgs',
    'IndexRuleTagArgs',
    'IndexRuleTagKeyValueArgs',
    'IndexRuleTagKeyValueValueArgs',
    'KafkaRechargeLogRechargeRuleArgs',
    'KafkaRechargeProtocolArgs',
    'MachineGroupMachineGroupTypeArgs',
    'ScheduledSqlDstResourceArgs',
]

@pulumi.input_type
class AlarmAlarmTargetArgs:
    def __init__(__self__, *,
                 end_time_offset: pulumi.Input[int],
                 logset_id: pulumi.Input[str],
                 number: pulumi.Input[int],
                 query: pulumi.Input[str],
                 start_time_offset: pulumi.Input[int],
                 topic_id: pulumi.Input[str]):
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "logset_id", logset_id)
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> pulumi.Input[int]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: pulumi.Input[int]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="logsetId")
    def logset_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "logset_id")

    @logset_id.setter
    def logset_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "logset_id", value)

    @property
    @pulumi.getter
    def number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: pulumi.Input[int]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> pulumi.Input[int]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: pulumi.Input[int]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)


@pulumi.input_type
class AlarmAnalysisArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 config_infos: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmAnalysisConfigInfoArgs']]]] = None):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if config_infos is not None:
            pulumi.set(__self__, "config_infos", config_infos)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="configInfos")
    def config_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmAnalysisConfigInfoArgs']]]]:
        return pulumi.get(self, "config_infos")

    @config_infos.setter
    def config_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmAnalysisConfigInfoArgs']]]]):
        pulumi.set(self, "config_infos", value)


@pulumi.input_type
class AlarmAnalysisConfigInfoArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AlarmCallBackArgs:
    def __init__(__self__, *,
                 body: pulumi.Input[str],
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Input[str]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: pulumi.Input[str]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)


@pulumi.input_type
class AlarmMonitorTimeArgs:
    def __init__(__self__, *,
                 time: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def time(self) -> pulumi.Input[int]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: pulumi.Input[int]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class AlarmNoticeNoticeReceiverArgs:
    def __init__(__self__, *,
                 receiver_channels: pulumi.Input[Sequence[pulumi.Input[str]]],
                 receiver_ids: pulumi.Input[Sequence[pulumi.Input[int]]],
                 receiver_type: pulumi.Input[str],
                 end_time: Optional[pulumi.Input[str]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "receiver_channels", receiver_channels)
        pulumi.set(__self__, "receiver_ids", receiver_ids)
        pulumi.set(__self__, "receiver_type", receiver_type)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="receiverChannels")
    def receiver_channels(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "receiver_channels")

    @receiver_channels.setter
    def receiver_channels(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "receiver_channels", value)

    @property
    @pulumi.getter(name="receiverIds")
    def receiver_ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        return pulumi.get(self, "receiver_ids")

    @receiver_ids.setter
    def receiver_ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "receiver_ids", value)

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "receiver_type")

    @receiver_type.setter
    def receiver_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "receiver_type", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class AlarmNoticeWebCallbackArgs:
    def __init__(__self__, *,
                 callback_type: pulumi.Input[str],
                 url: pulumi.Input[str],
                 body: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 index: Optional[pulumi.Input[int]] = None,
                 method: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "callback_type", callback_type)
        pulumi.set(__self__, "url", url)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if method is not None:
            pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter(name="callbackType")
    def callback_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "callback_type")

    @callback_type.setter
    def callback_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "callback_type", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class CkafkaConsumerCkafkaArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 instance_name: pulumi.Input[str],
                 topic_id: pulumi.Input[str],
                 topic_name: pulumi.Input[str],
                 vip: pulumi.Input[str],
                 vport: pulumi.Input[str]):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "topic_id", topic_id)
        pulumi.set(__self__, "topic_name", topic_name)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "vport", vport)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_name", value)

    @property
    @pulumi.getter
    def vip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: pulumi.Input[str]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter
    def vport(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vport")

    @vport.setter
    def vport(self, value: pulumi.Input[str]):
        pulumi.set(self, "vport", value)


@pulumi.input_type
class CkafkaConsumerContentArgs:
    def __init__(__self__, *,
                 enable_tag: pulumi.Input[bool],
                 meta_fields: pulumi.Input[Sequence[pulumi.Input[str]]],
                 tag_json_not_tiled: Optional[pulumi.Input[bool]] = None,
                 timestamp_accuracy: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "enable_tag", enable_tag)
        pulumi.set(__self__, "meta_fields", meta_fields)
        if tag_json_not_tiled is not None:
            pulumi.set(__self__, "tag_json_not_tiled", tag_json_not_tiled)
        if timestamp_accuracy is not None:
            pulumi.set(__self__, "timestamp_accuracy", timestamp_accuracy)

    @property
    @pulumi.getter(name="enableTag")
    def enable_tag(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_tag")

    @enable_tag.setter
    def enable_tag(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_tag", value)

    @property
    @pulumi.getter(name="metaFields")
    def meta_fields(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "meta_fields")

    @meta_fields.setter
    def meta_fields(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "meta_fields", value)

    @property
    @pulumi.getter(name="tagJsonNotTiled")
    def tag_json_not_tiled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tag_json_not_tiled")

    @tag_json_not_tiled.setter
    def tag_json_not_tiled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tag_json_not_tiled", value)

    @property
    @pulumi.getter(name="timestampAccuracy")
    def timestamp_accuracy(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timestamp_accuracy")

    @timestamp_accuracy.setter
    def timestamp_accuracy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timestamp_accuracy", value)


@pulumi.input_type
class ConfigExcludePathArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ConfigExtraContainerFileArgs:
    def __init__(__self__, *,
                 container: pulumi.Input[str],
                 file_pattern: pulumi.Input[str],
                 log_path: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 exclude_labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exclude_namespace: Optional[pulumi.Input[str]] = None,
                 include_labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 workload: Optional[pulumi.Input['ConfigExtraContainerFileWorkloadArgs']] = None):
        pulumi.set(__self__, "container", container)
        pulumi.set(__self__, "file_pattern", file_pattern)
        pulumi.set(__self__, "log_path", log_path)
        pulumi.set(__self__, "namespace", namespace)
        if exclude_labels is not None:
            pulumi.set(__self__, "exclude_labels", exclude_labels)
        if exclude_namespace is not None:
            pulumi.set(__self__, "exclude_namespace", exclude_namespace)
        if include_labels is not None:
            pulumi.set(__self__, "include_labels", include_labels)
        if workload is not None:
            pulumi.set(__self__, "workload", workload)

    @property
    @pulumi.getter
    def container(self) -> pulumi.Input[str]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: pulumi.Input[str]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter(name="filePattern")
    def file_pattern(self) -> pulumi.Input[str]:
        return pulumi.get(self, "file_pattern")

    @file_pattern.setter
    def file_pattern(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_pattern", value)

    @property
    @pulumi.getter(name="logPath")
    def log_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "log_path")

    @log_path.setter
    def log_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_path", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="excludeLabels")
    def exclude_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exclude_labels")

    @exclude_labels.setter
    def exclude_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_labels", value)

    @property
    @pulumi.getter(name="excludeNamespace")
    def exclude_namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclude_namespace")

    @exclude_namespace.setter
    def exclude_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_namespace", value)

    @property
    @pulumi.getter(name="includeLabels")
    def include_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "include_labels")

    @include_labels.setter
    def include_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "include_labels", value)

    @property
    @pulumi.getter
    def workload(self) -> Optional[pulumi.Input['ConfigExtraContainerFileWorkloadArgs']]:
        return pulumi.get(self, "workload")

    @workload.setter
    def workload(self, value: Optional[pulumi.Input['ConfigExtraContainerFileWorkloadArgs']]):
        pulumi.set(self, "workload", value)


@pulumi.input_type
class ConfigExtraContainerFileWorkloadArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 container: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ConfigExtraContainerStdoutArgs:
    def __init__(__self__, *,
                 all_containers: pulumi.Input[bool],
                 exclude_labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exclude_namespace: Optional[pulumi.Input[str]] = None,
                 include_labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 workloads: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExtraContainerStdoutWorkloadArgs']]]] = None):
        pulumi.set(__self__, "all_containers", all_containers)
        if exclude_labels is not None:
            pulumi.set(__self__, "exclude_labels", exclude_labels)
        if exclude_namespace is not None:
            pulumi.set(__self__, "exclude_namespace", exclude_namespace)
        if include_labels is not None:
            pulumi.set(__self__, "include_labels", include_labels)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if workloads is not None:
            pulumi.set(__self__, "workloads", workloads)

    @property
    @pulumi.getter(name="allContainers")
    def all_containers(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "all_containers")

    @all_containers.setter
    def all_containers(self, value: pulumi.Input[bool]):
        pulumi.set(self, "all_containers", value)

    @property
    @pulumi.getter(name="excludeLabels")
    def exclude_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exclude_labels")

    @exclude_labels.setter
    def exclude_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exclude_labels", value)

    @property
    @pulumi.getter(name="excludeNamespace")
    def exclude_namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exclude_namespace")

    @exclude_namespace.setter
    def exclude_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclude_namespace", value)

    @property
    @pulumi.getter(name="includeLabels")
    def include_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "include_labels")

    @include_labels.setter
    def include_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "include_labels", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def workloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExtraContainerStdoutWorkloadArgs']]]]:
        return pulumi.get(self, "workloads")

    @workloads.setter
    def workloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExtraContainerStdoutWorkloadArgs']]]]):
        pulumi.set(self, "workloads", value)


@pulumi.input_type
class ConfigExtraContainerStdoutWorkloadArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 name: pulumi.Input[str],
                 container: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ConfigExtraExcludePathArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ConfigExtraExtractRuleArgs:
    def __init__(__self__, *,
                 backtracking: Optional[pulumi.Input[int]] = None,
                 begin_regex: Optional[pulumi.Input[str]] = None,
                 delimiter: Optional[pulumi.Input[str]] = None,
                 filter_key_regexes: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExtraExtractRuleFilterKeyRegexArgs']]]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_regex: Optional[pulumi.Input[str]] = None,
                 time_format: Optional[pulumi.Input[str]] = None,
                 time_key: Optional[pulumi.Input[str]] = None,
                 un_match_log_key: Optional[pulumi.Input[str]] = None,
                 un_match_up_load_switch: Optional[pulumi.Input[bool]] = None):
        if backtracking is not None:
            pulumi.set(__self__, "backtracking", backtracking)
        if begin_regex is not None:
            pulumi.set(__self__, "begin_regex", begin_regex)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if filter_key_regexes is not None:
            pulumi.set(__self__, "filter_key_regexes", filter_key_regexes)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if log_regex is not None:
            pulumi.set(__self__, "log_regex", log_regex)
        if time_format is not None:
            pulumi.set(__self__, "time_format", time_format)
        if time_key is not None:
            pulumi.set(__self__, "time_key", time_key)
        if un_match_log_key is not None:
            pulumi.set(__self__, "un_match_log_key", un_match_log_key)
        if un_match_up_load_switch is not None:
            pulumi.set(__self__, "un_match_up_load_switch", un_match_up_load_switch)

    @property
    @pulumi.getter
    def backtracking(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "backtracking")

    @backtracking.setter
    def backtracking(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backtracking", value)

    @property
    @pulumi.getter(name="beginRegex")
    def begin_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "begin_regex")

    @begin_regex.setter
    def begin_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "begin_regex", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="filterKeyRegexes")
    def filter_key_regexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExtraExtractRuleFilterKeyRegexArgs']]]]:
        return pulumi.get(self, "filter_key_regexes")

    @filter_key_regexes.setter
    def filter_key_regexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExtraExtractRuleFilterKeyRegexArgs']]]]):
        pulumi.set(self, "filter_key_regexes", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter(name="logRegex")
    def log_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_regex")

    @log_regex.setter
    def log_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_regex", value)

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_format")

    @time_format.setter
    def time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_format", value)

    @property
    @pulumi.getter(name="timeKey")
    def time_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_key")

    @time_key.setter
    def time_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_key", value)

    @property
    @pulumi.getter(name="unMatchLogKey")
    def un_match_log_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "un_match_log_key")

    @un_match_log_key.setter
    def un_match_log_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "un_match_log_key", value)

    @property
    @pulumi.getter(name="unMatchUpLoadSwitch")
    def un_match_up_load_switch(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "un_match_up_load_switch")

    @un_match_up_load_switch.setter
    def un_match_up_load_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "un_match_up_load_switch", value)


@pulumi.input_type
class ConfigExtraExtractRuleFilterKeyRegexArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class ConfigExtraHostFileArgs:
    def __init__(__self__, *,
                 file_pattern: pulumi.Input[str],
                 log_path: pulumi.Input[str],
                 custom_labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "file_pattern", file_pattern)
        pulumi.set(__self__, "log_path", log_path)
        if custom_labels is not None:
            pulumi.set(__self__, "custom_labels", custom_labels)

    @property
    @pulumi.getter(name="filePattern")
    def file_pattern(self) -> pulumi.Input[str]:
        return pulumi.get(self, "file_pattern")

    @file_pattern.setter
    def file_pattern(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_pattern", value)

    @property
    @pulumi.getter(name="logPath")
    def log_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "log_path")

    @log_path.setter
    def log_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_path", value)

    @property
    @pulumi.getter(name="customLabels")
    def custom_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_labels")

    @custom_labels.setter
    def custom_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "custom_labels", value)


@pulumi.input_type
class ConfigExtractRuleArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 backtracking: Optional[pulumi.Input[int]] = None,
                 begin_regex: Optional[pulumi.Input[str]] = None,
                 delimiter: Optional[pulumi.Input[str]] = None,
                 filter_key_regexes: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExtractRuleFilterKeyRegexArgs']]]] = None,
                 is_gbk: Optional[pulumi.Input[int]] = None,
                 json_standard: Optional[pulumi.Input[int]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_regex: Optional[pulumi.Input[str]] = None,
                 meta_tags: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExtractRuleMetaTagArgs']]]] = None,
                 metadata_type: Optional[pulumi.Input[int]] = None,
                 parse_protocol: Optional[pulumi.Input[str]] = None,
                 path_regex: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 time_format: Optional[pulumi.Input[str]] = None,
                 time_key: Optional[pulumi.Input[str]] = None,
                 un_match_log_key: Optional[pulumi.Input[str]] = None,
                 un_match_up_load_switch: Optional[pulumi.Input[bool]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if backtracking is not None:
            pulumi.set(__self__, "backtracking", backtracking)
        if begin_regex is not None:
            pulumi.set(__self__, "begin_regex", begin_regex)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if filter_key_regexes is not None:
            pulumi.set(__self__, "filter_key_regexes", filter_key_regexes)
        if is_gbk is not None:
            pulumi.set(__self__, "is_gbk", is_gbk)
        if json_standard is not None:
            pulumi.set(__self__, "json_standard", json_standard)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if log_regex is not None:
            pulumi.set(__self__, "log_regex", log_regex)
        if meta_tags is not None:
            pulumi.set(__self__, "meta_tags", meta_tags)
        if metadata_type is not None:
            pulumi.set(__self__, "metadata_type", metadata_type)
        if parse_protocol is not None:
            pulumi.set(__self__, "parse_protocol", parse_protocol)
        if path_regex is not None:
            pulumi.set(__self__, "path_regex", path_regex)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if time_format is not None:
            pulumi.set(__self__, "time_format", time_format)
        if time_key is not None:
            pulumi.set(__self__, "time_key", time_key)
        if un_match_log_key is not None:
            pulumi.set(__self__, "un_match_log_key", un_match_log_key)
        if un_match_up_load_switch is not None:
            pulumi.set(__self__, "un_match_up_load_switch", un_match_up_load_switch)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def backtracking(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "backtracking")

    @backtracking.setter
    def backtracking(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backtracking", value)

    @property
    @pulumi.getter(name="beginRegex")
    def begin_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "begin_regex")

    @begin_regex.setter
    def begin_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "begin_regex", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="filterKeyRegexes")
    def filter_key_regexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExtractRuleFilterKeyRegexArgs']]]]:
        return pulumi.get(self, "filter_key_regexes")

    @filter_key_regexes.setter
    def filter_key_regexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExtractRuleFilterKeyRegexArgs']]]]):
        pulumi.set(self, "filter_key_regexes", value)

    @property
    @pulumi.getter(name="isGbk")
    def is_gbk(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "is_gbk")

    @is_gbk.setter
    def is_gbk(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_gbk", value)

    @property
    @pulumi.getter(name="jsonStandard")
    def json_standard(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "json_standard")

    @json_standard.setter
    def json_standard(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "json_standard", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter(name="logRegex")
    def log_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_regex")

    @log_regex.setter
    def log_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_regex", value)

    @property
    @pulumi.getter(name="metaTags")
    def meta_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExtractRuleMetaTagArgs']]]]:
        return pulumi.get(self, "meta_tags")

    @meta_tags.setter
    def meta_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExtractRuleMetaTagArgs']]]]):
        pulumi.set(self, "meta_tags", value)

    @property
    @pulumi.getter(name="metadataType")
    def metadata_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metadata_type")

    @metadata_type.setter
    def metadata_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metadata_type", value)

    @property
    @pulumi.getter(name="parseProtocol")
    def parse_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parse_protocol")

    @parse_protocol.setter
    def parse_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parse_protocol", value)

    @property
    @pulumi.getter(name="pathRegex")
    def path_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path_regex")

    @path_regex.setter
    def path_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_regex", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_format")

    @time_format.setter
    def time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_format", value)

    @property
    @pulumi.getter(name="timeKey")
    def time_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_key")

    @time_key.setter
    def time_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_key", value)

    @property
    @pulumi.getter(name="unMatchLogKey")
    def un_match_log_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "un_match_log_key")

    @un_match_log_key.setter
    def un_match_log_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "un_match_log_key", value)

    @property
    @pulumi.getter(name="unMatchUpLoadSwitch")
    def un_match_up_load_switch(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "un_match_up_load_switch")

    @un_match_up_load_switch.setter
    def un_match_up_load_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "un_match_up_load_switch", value)


@pulumi.input_type
class ConfigExtractRuleFilterKeyRegexArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class ConfigExtractRuleMetaTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CosRechargeExtractRuleInfoArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 backtracking: Optional[pulumi.Input[int]] = None,
                 begin_regex: Optional[pulumi.Input[str]] = None,
                 delimiter: Optional[pulumi.Input[str]] = None,
                 filter_key_regexes: Optional[pulumi.Input[Sequence[pulumi.Input['CosRechargeExtractRuleInfoFilterKeyRegexArgs']]]] = None,
                 is_gbk: Optional[pulumi.Input[int]] = None,
                 json_standard: Optional[pulumi.Input[int]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_regex: Optional[pulumi.Input[str]] = None,
                 meta_tags: Optional[pulumi.Input[Sequence[pulumi.Input['CosRechargeExtractRuleInfoMetaTagArgs']]]] = None,
                 metadata_type: Optional[pulumi.Input[int]] = None,
                 parse_protocol: Optional[pulumi.Input[str]] = None,
                 path_regex: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 time_format: Optional[pulumi.Input[str]] = None,
                 time_key: Optional[pulumi.Input[str]] = None,
                 un_match_log_key: Optional[pulumi.Input[str]] = None,
                 un_match_up_load_switch: Optional[pulumi.Input[bool]] = None):
        if address is not None:
            pulumi.set(__self__, "address", address)
        if backtracking is not None:
            pulumi.set(__self__, "backtracking", backtracking)
        if begin_regex is not None:
            pulumi.set(__self__, "begin_regex", begin_regex)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if filter_key_regexes is not None:
            pulumi.set(__self__, "filter_key_regexes", filter_key_regexes)
        if is_gbk is not None:
            pulumi.set(__self__, "is_gbk", is_gbk)
        if json_standard is not None:
            pulumi.set(__self__, "json_standard", json_standard)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if log_regex is not None:
            pulumi.set(__self__, "log_regex", log_regex)
        if meta_tags is not None:
            pulumi.set(__self__, "meta_tags", meta_tags)
        if metadata_type is not None:
            pulumi.set(__self__, "metadata_type", metadata_type)
        if parse_protocol is not None:
            pulumi.set(__self__, "parse_protocol", parse_protocol)
        if path_regex is not None:
            pulumi.set(__self__, "path_regex", path_regex)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if time_format is not None:
            pulumi.set(__self__, "time_format", time_format)
        if time_key is not None:
            pulumi.set(__self__, "time_key", time_key)
        if un_match_log_key is not None:
            pulumi.set(__self__, "un_match_log_key", un_match_log_key)
        if un_match_up_load_switch is not None:
            pulumi.set(__self__, "un_match_up_load_switch", un_match_up_load_switch)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def backtracking(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "backtracking")

    @backtracking.setter
    def backtracking(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backtracking", value)

    @property
    @pulumi.getter(name="beginRegex")
    def begin_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "begin_regex")

    @begin_regex.setter
    def begin_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "begin_regex", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="filterKeyRegexes")
    def filter_key_regexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosRechargeExtractRuleInfoFilterKeyRegexArgs']]]]:
        return pulumi.get(self, "filter_key_regexes")

    @filter_key_regexes.setter
    def filter_key_regexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosRechargeExtractRuleInfoFilterKeyRegexArgs']]]]):
        pulumi.set(self, "filter_key_regexes", value)

    @property
    @pulumi.getter(name="isGbk")
    def is_gbk(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "is_gbk")

    @is_gbk.setter
    def is_gbk(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_gbk", value)

    @property
    @pulumi.getter(name="jsonStandard")
    def json_standard(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "json_standard")

    @json_standard.setter
    def json_standard(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "json_standard", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter(name="logRegex")
    def log_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_regex")

    @log_regex.setter
    def log_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_regex", value)

    @property
    @pulumi.getter(name="metaTags")
    def meta_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CosRechargeExtractRuleInfoMetaTagArgs']]]]:
        return pulumi.get(self, "meta_tags")

    @meta_tags.setter
    def meta_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CosRechargeExtractRuleInfoMetaTagArgs']]]]):
        pulumi.set(self, "meta_tags", value)

    @property
    @pulumi.getter(name="metadataType")
    def metadata_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metadata_type")

    @metadata_type.setter
    def metadata_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metadata_type", value)

    @property
    @pulumi.getter(name="parseProtocol")
    def parse_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parse_protocol")

    @parse_protocol.setter
    def parse_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parse_protocol", value)

    @property
    @pulumi.getter(name="pathRegex")
    def path_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path_regex")

    @path_regex.setter
    def path_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_regex", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_format")

    @time_format.setter
    def time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_format", value)

    @property
    @pulumi.getter(name="timeKey")
    def time_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_key")

    @time_key.setter
    def time_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_key", value)

    @property
    @pulumi.getter(name="unMatchLogKey")
    def un_match_log_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "un_match_log_key")

    @un_match_log_key.setter
    def un_match_log_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "un_match_log_key", value)

    @property
    @pulumi.getter(name="unMatchUpLoadSwitch")
    def un_match_up_load_switch(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "un_match_up_load_switch")

    @un_match_up_load_switch.setter
    def un_match_up_load_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "un_match_up_load_switch", value)


@pulumi.input_type
class CosRechargeExtractRuleInfoFilterKeyRegexArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 regex: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def regex(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: pulumi.Input[str]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class CosRechargeExtractRuleInfoMetaTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CosShipperCompressArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str]):
        pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)


@pulumi.input_type
class CosShipperContentArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 csv: Optional[pulumi.Input['CosShipperContentCsvArgs']] = None,
                 json: Optional[pulumi.Input['CosShipperContentJsonArgs']] = None):
        pulumi.set(__self__, "format", format)
        if csv is not None:
            pulumi.set(__self__, "csv", csv)
        if json is not None:
            pulumi.set(__self__, "json", json)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def csv(self) -> Optional[pulumi.Input['CosShipperContentCsvArgs']]:
        return pulumi.get(self, "csv")

    @csv.setter
    def csv(self, value: Optional[pulumi.Input['CosShipperContentCsvArgs']]):
        pulumi.set(self, "csv", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input['CosShipperContentJsonArgs']]:
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input['CosShipperContentJsonArgs']]):
        pulumi.set(self, "json", value)


@pulumi.input_type
class CosShipperContentCsvArgs:
    def __init__(__self__, *,
                 delimiter: pulumi.Input[str],
                 escape_char: pulumi.Input[str],
                 keys: pulumi.Input[Sequence[pulumi.Input[str]]],
                 non_existing_field: pulumi.Input[str],
                 print_key: pulumi.Input[bool]):
        pulumi.set(__self__, "delimiter", delimiter)
        pulumi.set(__self__, "escape_char", escape_char)
        pulumi.set(__self__, "keys", keys)
        pulumi.set(__self__, "non_existing_field", non_existing_field)
        pulumi.set(__self__, "print_key", print_key)

    @property
    @pulumi.getter
    def delimiter(self) -> pulumi.Input[str]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: pulumi.Input[str]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="escapeChar")
    def escape_char(self) -> pulumi.Input[str]:
        return pulumi.get(self, "escape_char")

    @escape_char.setter
    def escape_char(self, value: pulumi.Input[str]):
        pulumi.set(self, "escape_char", value)

    @property
    @pulumi.getter
    def keys(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter(name="nonExistingField")
    def non_existing_field(self) -> pulumi.Input[str]:
        return pulumi.get(self, "non_existing_field")

    @non_existing_field.setter
    def non_existing_field(self, value: pulumi.Input[str]):
        pulumi.set(self, "non_existing_field", value)

    @property
    @pulumi.getter(name="printKey")
    def print_key(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "print_key")

    @print_key.setter
    def print_key(self, value: pulumi.Input[bool]):
        pulumi.set(self, "print_key", value)


@pulumi.input_type
class CosShipperContentJsonArgs:
    def __init__(__self__, *,
                 enable_tag: pulumi.Input[bool],
                 meta_fields: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "enable_tag", enable_tag)
        pulumi.set(__self__, "meta_fields", meta_fields)

    @property
    @pulumi.getter(name="enableTag")
    def enable_tag(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enable_tag")

    @enable_tag.setter
    def enable_tag(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_tag", value)

    @property
    @pulumi.getter(name="metaFields")
    def meta_fields(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "meta_fields")

    @meta_fields.setter
    def meta_fields(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "meta_fields", value)


@pulumi.input_type
class CosShipperFilterRuleArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 regex: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "regex", regex)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def regex(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: pulumi.Input[str]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DataTransformDstResourceArgs:
    def __init__(__self__, *,
                 alias: pulumi.Input[str],
                 topic_id: pulumi.Input[str]):
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def alias(self) -> pulumi.Input[str]:
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: pulumi.Input[str]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)


@pulumi.input_type
class IndexRuleArgs:
    def __init__(__self__, *,
                 full_text: Optional[pulumi.Input['IndexRuleFullTextArgs']] = None,
                 key_value: Optional[pulumi.Input['IndexRuleKeyValueArgs']] = None,
                 tag: Optional[pulumi.Input['IndexRuleTagArgs']] = None):
        if full_text is not None:
            pulumi.set(__self__, "full_text", full_text)
        if key_value is not None:
            pulumi.set(__self__, "key_value", key_value)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="fullText")
    def full_text(self) -> Optional[pulumi.Input['IndexRuleFullTextArgs']]:
        return pulumi.get(self, "full_text")

    @full_text.setter
    def full_text(self, value: Optional[pulumi.Input['IndexRuleFullTextArgs']]):
        pulumi.set(self, "full_text", value)

    @property
    @pulumi.getter(name="keyValue")
    def key_value(self) -> Optional[pulumi.Input['IndexRuleKeyValueArgs']]:
        return pulumi.get(self, "key_value")

    @key_value.setter
    def key_value(self, value: Optional[pulumi.Input['IndexRuleKeyValueArgs']]):
        pulumi.set(self, "key_value", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input['IndexRuleTagArgs']]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input['IndexRuleTagArgs']]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class IndexRuleFullTextArgs:
    def __init__(__self__, *,
                 case_sensitive: pulumi.Input[bool],
                 contain_zh: pulumi.Input[bool],
                 tokenizer: pulumi.Input[str]):
        pulumi.set(__self__, "case_sensitive", case_sensitive)
        pulumi.set(__self__, "contain_zh", contain_zh)
        pulumi.set(__self__, "tokenizer", tokenizer)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: pulumi.Input[bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="containZH")
    def contain_zh(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "contain_zh")

    @contain_zh.setter
    def contain_zh(self, value: pulumi.Input[bool]):
        pulumi.set(self, "contain_zh", value)

    @property
    @pulumi.getter
    def tokenizer(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tokenizer")

    @tokenizer.setter
    def tokenizer(self, value: pulumi.Input[str]):
        pulumi.set(self, "tokenizer", value)


@pulumi.input_type
class IndexRuleKeyValueArgs:
    def __init__(__self__, *,
                 case_sensitive: pulumi.Input[bool],
                 key_values: Optional[pulumi.Input[Sequence[pulumi.Input['IndexRuleKeyValueKeyValueArgs']]]] = None):
        pulumi.set(__self__, "case_sensitive", case_sensitive)
        if key_values is not None:
            pulumi.set(__self__, "key_values", key_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: pulumi.Input[bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="keyValues")
    def key_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IndexRuleKeyValueKeyValueArgs']]]]:
        return pulumi.get(self, "key_values")

    @key_values.setter
    def key_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IndexRuleKeyValueKeyValueArgs']]]]):
        pulumi.set(self, "key_values", value)


@pulumi.input_type
class IndexRuleKeyValueKeyValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: Optional[pulumi.Input['IndexRuleKeyValueKeyValueValueArgs']] = None):
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['IndexRuleKeyValueKeyValueValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['IndexRuleKeyValueKeyValueValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IndexRuleKeyValueKeyValueValueArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 contain_zh: Optional[pulumi.Input[bool]] = None,
                 sql_flag: Optional[pulumi.Input[bool]] = None,
                 tokenizer: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if contain_zh is not None:
            pulumi.set(__self__, "contain_zh", contain_zh)
        if sql_flag is not None:
            pulumi.set(__self__, "sql_flag", sql_flag)
        if tokenizer is not None:
            pulumi.set(__self__, "tokenizer", tokenizer)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="containZH")
    def contain_zh(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contain_zh")

    @contain_zh.setter
    def contain_zh(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contain_zh", value)

    @property
    @pulumi.getter(name="sqlFlag")
    def sql_flag(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sql_flag")

    @sql_flag.setter
    def sql_flag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sql_flag", value)

    @property
    @pulumi.getter
    def tokenizer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tokenizer")

    @tokenizer.setter
    def tokenizer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tokenizer", value)


@pulumi.input_type
class IndexRuleTagArgs:
    def __init__(__self__, *,
                 case_sensitive: pulumi.Input[bool],
                 key_values: Optional[pulumi.Input[Sequence[pulumi.Input['IndexRuleTagKeyValueArgs']]]] = None):
        pulumi.set(__self__, "case_sensitive", case_sensitive)
        if key_values is not None:
            pulumi.set(__self__, "key_values", key_values)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "case_sensitive")

    @case_sensitive.setter
    def case_sensitive(self, value: pulumi.Input[bool]):
        pulumi.set(self, "case_sensitive", value)

    @property
    @pulumi.getter(name="keyValues")
    def key_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IndexRuleTagKeyValueArgs']]]]:
        return pulumi.get(self, "key_values")

    @key_values.setter
    def key_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IndexRuleTagKeyValueArgs']]]]):
        pulumi.set(self, "key_values", value)


@pulumi.input_type
class IndexRuleTagKeyValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: Optional[pulumi.Input['IndexRuleTagKeyValueValueArgs']] = None):
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['IndexRuleTagKeyValueValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['IndexRuleTagKeyValueValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IndexRuleTagKeyValueValueArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 contain_zh: Optional[pulumi.Input[bool]] = None,
                 sql_flag: Optional[pulumi.Input[bool]] = None,
                 tokenizer: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if contain_zh is not None:
            pulumi.set(__self__, "contain_zh", contain_zh)
        if sql_flag is not None:
            pulumi.set(__self__, "sql_flag", sql_flag)
        if tokenizer is not None:
            pulumi.set(__self__, "tokenizer", tokenizer)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="containZH")
    def contain_zh(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contain_zh")

    @contain_zh.setter
    def contain_zh(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contain_zh", value)

    @property
    @pulumi.getter(name="sqlFlag")
    def sql_flag(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sql_flag")

    @sql_flag.setter
    def sql_flag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sql_flag", value)

    @property
    @pulumi.getter
    def tokenizer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tokenizer")

    @tokenizer.setter
    def tokenizer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tokenizer", value)


@pulumi.input_type
class KafkaRechargeLogRechargeRuleArgs:
    def __init__(__self__, *,
                 default_time_switch: pulumi.Input[bool],
                 encoding_format: pulumi.Input[int],
                 recharge_type: pulumi.Input[str],
                 default_time_src: Optional[pulumi.Input[int]] = None,
                 keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_regex: Optional[pulumi.Input[str]] = None,
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 time_format: Optional[pulumi.Input[str]] = None,
                 time_key: Optional[pulumi.Input[str]] = None,
                 time_regex: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 un_match_log_key: Optional[pulumi.Input[str]] = None,
                 un_match_log_switch: Optional[pulumi.Input[bool]] = None,
                 un_match_log_time_src: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "default_time_switch", default_time_switch)
        pulumi.set(__self__, "encoding_format", encoding_format)
        pulumi.set(__self__, "recharge_type", recharge_type)
        if default_time_src is not None:
            pulumi.set(__self__, "default_time_src", default_time_src)
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if log_regex is not None:
            pulumi.set(__self__, "log_regex", log_regex)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if time_format is not None:
            pulumi.set(__self__, "time_format", time_format)
        if time_key is not None:
            pulumi.set(__self__, "time_key", time_key)
        if time_regex is not None:
            pulumi.set(__self__, "time_regex", time_regex)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if un_match_log_key is not None:
            pulumi.set(__self__, "un_match_log_key", un_match_log_key)
        if un_match_log_switch is not None:
            pulumi.set(__self__, "un_match_log_switch", un_match_log_switch)
        if un_match_log_time_src is not None:
            pulumi.set(__self__, "un_match_log_time_src", un_match_log_time_src)

    @property
    @pulumi.getter(name="defaultTimeSwitch")
    def default_time_switch(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "default_time_switch")

    @default_time_switch.setter
    def default_time_switch(self, value: pulumi.Input[bool]):
        pulumi.set(self, "default_time_switch", value)

    @property
    @pulumi.getter(name="encodingFormat")
    def encoding_format(self) -> pulumi.Input[int]:
        return pulumi.get(self, "encoding_format")

    @encoding_format.setter
    def encoding_format(self, value: pulumi.Input[int]):
        pulumi.set(self, "encoding_format", value)

    @property
    @pulumi.getter(name="rechargeType")
    def recharge_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "recharge_type")

    @recharge_type.setter
    def recharge_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "recharge_type", value)

    @property
    @pulumi.getter(name="defaultTimeSrc")
    def default_time_src(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "default_time_src")

    @default_time_src.setter
    def default_time_src(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_time_src", value)

    @property
    @pulumi.getter
    def keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "keys")

    @keys.setter
    def keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "keys", value)

    @property
    @pulumi.getter(name="logRegex")
    def log_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_regex")

    @log_regex.setter
    def log_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_regex", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_format")

    @time_format.setter
    def time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_format", value)

    @property
    @pulumi.getter(name="timeKey")
    def time_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_key")

    @time_key.setter
    def time_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_key", value)

    @property
    @pulumi.getter(name="timeRegex")
    def time_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_regex")

    @time_regex.setter
    def time_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_regex", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="unMatchLogKey")
    def un_match_log_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "un_match_log_key")

    @un_match_log_key.setter
    def un_match_log_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "un_match_log_key", value)

    @property
    @pulumi.getter(name="unMatchLogSwitch")
    def un_match_log_switch(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "un_match_log_switch")

    @un_match_log_switch.setter
    def un_match_log_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "un_match_log_switch", value)

    @property
    @pulumi.getter(name="unMatchLogTimeSrc")
    def un_match_log_time_src(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "un_match_log_time_src")

    @un_match_log_time_src.setter
    def un_match_log_time_src(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "un_match_log_time_src", value)


@pulumi.input_type
class KafkaRechargeProtocolArgs:
    def __init__(__self__, *,
                 mechanism: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        if mechanism is not None:
            pulumi.set(__self__, "mechanism", mechanism)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def mechanism(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mechanism")

    @mechanism.setter
    def mechanism(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mechanism", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class MachineGroupMachineGroupTypeArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ScheduledSqlDstResourceArgs:
    def __init__(__self__, *,
                 topic_id: pulumi.Input[str],
                 biz_type: Optional[pulumi.Input[int]] = None,
                 metric_name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "topic_id", topic_id)
        if biz_type is not None:
            pulumi.set(__self__, "biz_type", biz_type)
        if metric_name is not None:
            pulumi.set(__self__, "metric_name", metric_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "biz_type")

    @biz_type.setter
    def biz_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "biz_type", value)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


