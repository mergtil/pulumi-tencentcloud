# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AttachmentTarget',
    'FunctionTargetsAttachmentFunctionTargets',
    'FunctionTargetsAttachmentFunctionTargetsFunction',
    'InstanceSnatIp',
    'ReplaceCertForLbsCertificate',
    'SnatIpIp',
    'TargetGroupTargetGroupInstance',
    'GetAttachmentsAttachmentListResult',
    'GetAttachmentsAttachmentListTargetResult',
    'GetClusterResourcesClusterResourceSetResult',
    'GetClusterResourcesClusterResourceSetClustersZoneResult',
    'GetClusterResourcesFilterResult',
    'GetCrossTargetsCrossTargetSetResult',
    'GetCrossTargetsFilterResult',
    'GetExclusiveClustersClusterSetResult',
    'GetExclusiveClustersClusterSetClustersZoneResult',
    'GetExclusiveClustersFilterResult',
    'GetIdleInstancesIdleLoadBalancerResult',
    'GetInstanceByCertIdCertSetResult',
    'GetInstanceByCertIdCertSetLoadBalancerResult',
    'GetInstanceByCertIdCertSetLoadBalancerBackupZoneSetResult',
    'GetInstanceByCertIdCertSetLoadBalancerExclusiveClusterResult',
    'GetInstanceByCertIdCertSetLoadBalancerExclusiveClusterClassicalClusterResult',
    'GetInstanceByCertIdCertSetLoadBalancerExclusiveClusterL4ClusterResult',
    'GetInstanceByCertIdCertSetLoadBalancerExclusiveClusterL7ClusterResult',
    'GetInstanceByCertIdCertSetLoadBalancerExtraInfoResult',
    'GetInstanceByCertIdCertSetLoadBalancerMasterZoneResult',
    'GetInstanceByCertIdCertSetLoadBalancerNetworkAttributeResult',
    'GetInstanceByCertIdCertSetLoadBalancerPrepaidAttributeResult',
    'GetInstanceByCertIdCertSetLoadBalancerSnatIpResult',
    'GetInstanceByCertIdCertSetLoadBalancerTagResult',
    'GetInstanceByCertIdCertSetLoadBalancerTargetRegionInfoResult',
    'GetInstanceDetailFilterResult',
    'GetInstanceDetailLoadBalancerDetailSetResult',
    'GetInstanceDetailLoadBalancerDetailSetExtraInfoResult',
    'GetInstanceDetailLoadBalancerDetailSetNetworkAttributeResult',
    'GetInstanceDetailLoadBalancerDetailSetPrepaidAttributeResult',
    'GetInstanceDetailLoadBalancerDetailSetTagResult',
    'GetInstanceTrafficLoadBalancerTrafficResult',
    'GetInstancesClbListResult',
    'GetListenerRulesRuleListResult',
    'GetListenersByTargetsBackendResult',
    'GetListenersByTargetsLoadBalancerResult',
    'GetListenersByTargetsLoadBalancerListenerResult',
    'GetListenersByTargetsLoadBalancerListenerRuleResult',
    'GetListenersByTargetsLoadBalancerListenerRuleTargetResult',
    'GetListenersByTargetsLoadBalancerListenerTargetResult',
    'GetListenersListenerListResult',
    'GetRedirectionsRedirectionListResult',
    'GetResourcesFilterResult',
    'GetResourcesZoneResourceSetResult',
    'GetResourcesZoneResourceSetResourceSetResult',
    'GetResourcesZoneResourceSetResourceSetAvailabilitySetResult',
    'GetTargetGroupListFilterResult',
    'GetTargetGroupListTargetGroupSetResult',
    'GetTargetGroupListTargetGroupSetAssociatedRuleResult',
    'GetTargetGroupsListResult',
    'GetTargetGroupsListAssociatedRuleListResult',
    'GetTargetGroupsListTargetGroupInstanceListResult',
    'GetTargetHealthLoadBalancerResult',
    'GetTargetHealthLoadBalancerListenerResult',
    'GetTargetHealthLoadBalancerListenerRuleResult',
    'GetTargetHealthLoadBalancerListenerRuleTargetResult',
]

@pulumi.output_type
class AttachmentTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eniIp":
            suggest = "eni_ip"
        elif key == "instanceId":
            suggest = "instance_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AttachmentTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AttachmentTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AttachmentTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 eni_ip: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 weight: Optional[int] = None):
        pulumi.set(__self__, "port", port)
        if eni_ip is not None:
            pulumi.set(__self__, "eni_ip", eni_ip)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="eniIp")
    def eni_ip(self) -> Optional[str]:
        return pulumi.get(self, "eni_ip")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class FunctionTargetsAttachmentFunctionTargets(dict):
    def __init__(__self__, *,
                 function: 'outputs.FunctionTargetsAttachmentFunctionTargetsFunction',
                 weight: Optional[int] = None):
        pulumi.set(__self__, "function", function)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def function(self) -> 'outputs.FunctionTargetsAttachmentFunctionTargetsFunction':
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class FunctionTargetsAttachmentFunctionTargetsFunction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionName":
            suggest = "function_name"
        elif key == "functionNamespace":
            suggest = "function_namespace"
        elif key == "functionQualifier":
            suggest = "function_qualifier"
        elif key == "functionQualifierType":
            suggest = "function_qualifier_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTargetsAttachmentFunctionTargetsFunction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTargetsAttachmentFunctionTargetsFunction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTargetsAttachmentFunctionTargetsFunction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 function_name: str,
                 function_namespace: str,
                 function_qualifier: str,
                 function_qualifier_type: Optional[str] = None):
        pulumi.set(__self__, "function_name", function_name)
        pulumi.set(__self__, "function_namespace", function_namespace)
        pulumi.set(__self__, "function_qualifier", function_qualifier)
        if function_qualifier_type is not None:
            pulumi.set(__self__, "function_qualifier_type", function_qualifier_type)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> str:
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter(name="functionNamespace")
    def function_namespace(self) -> str:
        return pulumi.get(self, "function_namespace")

    @property
    @pulumi.getter(name="functionQualifier")
    def function_qualifier(self) -> str:
        return pulumi.get(self, "function_qualifier")

    @property
    @pulumi.getter(name="functionQualifierType")
    def function_qualifier_type(self) -> Optional[str]:
        return pulumi.get(self, "function_qualifier_type")


@pulumi.output_type
class InstanceSnatIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceSnatIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceSnatIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceSnatIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 ip: Optional[str] = None):
        pulumi.set(__self__, "subnet_id", subnet_id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")


@pulumi.output_type
class ReplaceCertForLbsCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certCaContent":
            suggest = "cert_ca_content"
        elif key == "certCaId":
            suggest = "cert_ca_id"
        elif key == "certCaName":
            suggest = "cert_ca_name"
        elif key == "certContent":
            suggest = "cert_content"
        elif key == "certId":
            suggest = "cert_id"
        elif key == "certKey":
            suggest = "cert_key"
        elif key == "certName":
            suggest = "cert_name"
        elif key == "sslMode":
            suggest = "ssl_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplaceCertForLbsCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplaceCertForLbsCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplaceCertForLbsCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cert_ca_content: Optional[str] = None,
                 cert_ca_id: Optional[str] = None,
                 cert_ca_name: Optional[str] = None,
                 cert_content: Optional[str] = None,
                 cert_id: Optional[str] = None,
                 cert_key: Optional[str] = None,
                 cert_name: Optional[str] = None,
                 ssl_mode: Optional[str] = None):
        if cert_ca_content is not None:
            pulumi.set(__self__, "cert_ca_content", cert_ca_content)
        if cert_ca_id is not None:
            pulumi.set(__self__, "cert_ca_id", cert_ca_id)
        if cert_ca_name is not None:
            pulumi.set(__self__, "cert_ca_name", cert_ca_name)
        if cert_content is not None:
            pulumi.set(__self__, "cert_content", cert_content)
        if cert_id is not None:
            pulumi.set(__self__, "cert_id", cert_id)
        if cert_key is not None:
            pulumi.set(__self__, "cert_key", cert_key)
        if cert_name is not None:
            pulumi.set(__self__, "cert_name", cert_name)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)

    @property
    @pulumi.getter(name="certCaContent")
    def cert_ca_content(self) -> Optional[str]:
        return pulumi.get(self, "cert_ca_content")

    @property
    @pulumi.getter(name="certCaId")
    def cert_ca_id(self) -> Optional[str]:
        return pulumi.get(self, "cert_ca_id")

    @property
    @pulumi.getter(name="certCaName")
    def cert_ca_name(self) -> Optional[str]:
        return pulumi.get(self, "cert_ca_name")

    @property
    @pulumi.getter(name="certContent")
    def cert_content(self) -> Optional[str]:
        return pulumi.get(self, "cert_content")

    @property
    @pulumi.getter(name="certId")
    def cert_id(self) -> Optional[str]:
        return pulumi.get(self, "cert_id")

    @property
    @pulumi.getter(name="certKey")
    def cert_key(self) -> Optional[str]:
        return pulumi.get(self, "cert_key")

    @property
    @pulumi.getter(name="certName")
    def cert_name(self) -> Optional[str]:
        return pulumi.get(self, "cert_name")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[str]:
        return pulumi.get(self, "ssl_mode")


@pulumi.output_type
class SnatIpIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SnatIpIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SnatIpIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SnatIpIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip: str,
                 subnet_id: str):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class TargetGroupTargetGroupInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bindIp":
            suggest = "bind_ip"
        elif key == "newPort":
            suggest = "new_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetGroupTargetGroupInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetGroupTargetGroupInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetGroupTargetGroupInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bind_ip: str,
                 port: int,
                 new_port: Optional[int] = None,
                 weight: Optional[int] = None):
        pulumi.set(__self__, "bind_ip", bind_ip)
        pulumi.set(__self__, "port", port)
        if new_port is not None:
            pulumi.set(__self__, "new_port", new_port)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="bindIp")
    def bind_ip(self) -> str:
        return pulumi.get(self, "bind_ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="newPort")
    def new_port(self) -> Optional[int]:
        return pulumi.get(self, "new_port")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetAttachmentsAttachmentListResult(dict):
    def __init__(__self__, *,
                 clb_id: str,
                 listener_id: str,
                 protocol_type: str,
                 rule_id: str,
                 targets: Sequence['outputs.GetAttachmentsAttachmentListTargetResult']):
        pulumi.set(__self__, "clb_id", clb_id)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "rule_id", rule_id)
        pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> str:
        return pulumi.get(self, "clb_id")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> str:
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> str:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetAttachmentsAttachmentListTargetResult']:
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetAttachmentsAttachmentListTargetResult(dict):
    def __init__(__self__, *,
                 instance_id: str,
                 port: int,
                 weight: int):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetClusterResourcesClusterResourceSetResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 cluster_name: str,
                 clusters_zones: Sequence['outputs.GetClusterResourcesClusterResourceSetClustersZoneResult'],
                 idle: str,
                 isp: str,
                 load_balancer_id: str,
                 vip: str):
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "clusters_zones", clusters_zones)
        pulumi.set(__self__, "idle", idle)
        pulumi.set(__self__, "isp", isp)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "vip", vip)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clustersZones")
    def clusters_zones(self) -> Sequence['outputs.GetClusterResourcesClusterResourceSetClustersZoneResult']:
        return pulumi.get(self, "clusters_zones")

    @property
    @pulumi.getter
    def idle(self) -> str:
        return pulumi.get(self, "idle")

    @property
    @pulumi.getter
    def isp(self) -> str:
        return pulumi.get(self, "isp")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def vip(self) -> str:
        return pulumi.get(self, "vip")


@pulumi.output_type
class GetClusterResourcesClusterResourceSetClustersZoneResult(dict):
    def __init__(__self__, *,
                 master_zones: Sequence[str],
                 slave_zones: Sequence[str]):
        pulumi.set(__self__, "master_zones", master_zones)
        pulumi.set(__self__, "slave_zones", slave_zones)

    @property
    @pulumi.getter(name="masterZones")
    def master_zones(self) -> Sequence[str]:
        return pulumi.get(self, "master_zones")

    @property
    @pulumi.getter(name="slaveZones")
    def slave_zones(self) -> Sequence[str]:
        return pulumi.get(self, "slave_zones")


@pulumi.output_type
class GetClusterResourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCrossTargetsCrossTargetSetResult(dict):
    def __init__(__self__, *,
                 eni_id: str,
                 instance_id: str,
                 instance_name: str,
                 ip: str,
                 local_vpc_id: str,
                 region: str,
                 vpc_id: str,
                 vpc_name: str):
        pulumi.set(__self__, "eni_id", eni_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "local_vpc_id", local_vpc_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vpc_name", vpc_name)

    @property
    @pulumi.getter(name="eniId")
    def eni_id(self) -> str:
        return pulumi.get(self, "eni_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="localVpcId")
    def local_vpc_id(self) -> str:
        return pulumi.get(self, "local_vpc_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> str:
        return pulumi.get(self, "vpc_name")


@pulumi.output_type
class GetCrossTargetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetExclusiveClustersClusterSetResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 cluster_name: str,
                 cluster_tag: str,
                 cluster_type: str,
                 clusters_version: str,
                 clusters_zones: Sequence['outputs.GetExclusiveClustersClusterSetClustersZoneResult'],
                 disaster_recovery_type: str,
                 http_max_new_conn: int,
                 http_qps: int,
                 https_max_new_conn: int,
                 https_qps: int,
                 idle_resource_count: int,
                 isp: str,
                 load_balance_director_count: int,
                 max_conn: int,
                 max_in_flow: int,
                 max_in_pkg: int,
                 max_new_conn: int,
                 max_out_flow: int,
                 max_out_pkg: int,
                 network: str,
                 resource_count: int,
                 zone: str):
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_tag", cluster_tag)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "clusters_version", clusters_version)
        pulumi.set(__self__, "clusters_zones", clusters_zones)
        pulumi.set(__self__, "disaster_recovery_type", disaster_recovery_type)
        pulumi.set(__self__, "http_max_new_conn", http_max_new_conn)
        pulumi.set(__self__, "http_qps", http_qps)
        pulumi.set(__self__, "https_max_new_conn", https_max_new_conn)
        pulumi.set(__self__, "https_qps", https_qps)
        pulumi.set(__self__, "idle_resource_count", idle_resource_count)
        pulumi.set(__self__, "isp", isp)
        pulumi.set(__self__, "load_balance_director_count", load_balance_director_count)
        pulumi.set(__self__, "max_conn", max_conn)
        pulumi.set(__self__, "max_in_flow", max_in_flow)
        pulumi.set(__self__, "max_in_pkg", max_in_pkg)
        pulumi.set(__self__, "max_new_conn", max_new_conn)
        pulumi.set(__self__, "max_out_flow", max_out_flow)
        pulumi.set(__self__, "max_out_pkg", max_out_pkg)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "resource_count", resource_count)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterTag")
    def cluster_tag(self) -> str:
        return pulumi.get(self, "cluster_tag")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="clustersVersion")
    def clusters_version(self) -> str:
        return pulumi.get(self, "clusters_version")

    @property
    @pulumi.getter(name="clustersZones")
    def clusters_zones(self) -> Sequence['outputs.GetExclusiveClustersClusterSetClustersZoneResult']:
        return pulumi.get(self, "clusters_zones")

    @property
    @pulumi.getter(name="disasterRecoveryType")
    def disaster_recovery_type(self) -> str:
        return pulumi.get(self, "disaster_recovery_type")

    @property
    @pulumi.getter(name="httpMaxNewConn")
    def http_max_new_conn(self) -> int:
        return pulumi.get(self, "http_max_new_conn")

    @property
    @pulumi.getter(name="httpQps")
    def http_qps(self) -> int:
        return pulumi.get(self, "http_qps")

    @property
    @pulumi.getter(name="httpsMaxNewConn")
    def https_max_new_conn(self) -> int:
        return pulumi.get(self, "https_max_new_conn")

    @property
    @pulumi.getter(name="httpsQps")
    def https_qps(self) -> int:
        return pulumi.get(self, "https_qps")

    @property
    @pulumi.getter(name="idleResourceCount")
    def idle_resource_count(self) -> int:
        return pulumi.get(self, "idle_resource_count")

    @property
    @pulumi.getter
    def isp(self) -> str:
        return pulumi.get(self, "isp")

    @property
    @pulumi.getter(name="loadBalanceDirectorCount")
    def load_balance_director_count(self) -> int:
        return pulumi.get(self, "load_balance_director_count")

    @property
    @pulumi.getter(name="maxConn")
    def max_conn(self) -> int:
        return pulumi.get(self, "max_conn")

    @property
    @pulumi.getter(name="maxInFlow")
    def max_in_flow(self) -> int:
        return pulumi.get(self, "max_in_flow")

    @property
    @pulumi.getter(name="maxInPkg")
    def max_in_pkg(self) -> int:
        return pulumi.get(self, "max_in_pkg")

    @property
    @pulumi.getter(name="maxNewConn")
    def max_new_conn(self) -> int:
        return pulumi.get(self, "max_new_conn")

    @property
    @pulumi.getter(name="maxOutFlow")
    def max_out_flow(self) -> int:
        return pulumi.get(self, "max_out_flow")

    @property
    @pulumi.getter(name="maxOutPkg")
    def max_out_pkg(self) -> int:
        return pulumi.get(self, "max_out_pkg")

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="resourceCount")
    def resource_count(self) -> int:
        return pulumi.get(self, "resource_count")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetExclusiveClustersClusterSetClustersZoneResult(dict):
    def __init__(__self__, *,
                 master_zones: Sequence[str],
                 slave_zones: Sequence[str]):
        pulumi.set(__self__, "master_zones", master_zones)
        pulumi.set(__self__, "slave_zones", slave_zones)

    @property
    @pulumi.getter(name="masterZones")
    def master_zones(self) -> Sequence[str]:
        return pulumi.get(self, "master_zones")

    @property
    @pulumi.getter(name="slaveZones")
    def slave_zones(self) -> Sequence[str]:
        return pulumi.get(self, "slave_zones")


@pulumi.output_type
class GetExclusiveClustersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetIdleInstancesIdleLoadBalancerResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 forward: int,
                 idle_reason: str,
                 load_balancer_id: str,
                 load_balancer_name: str,
                 region: str,
                 status: int,
                 vip: str):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "forward", forward)
        pulumi.set(__self__, "idle_reason", idle_reason)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vip", vip)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def forward(self) -> int:
        return pulumi.get(self, "forward")

    @property
    @pulumi.getter(name="idleReason")
    def idle_reason(self) -> str:
        return pulumi.get(self, "idle_reason")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> str:
        return pulumi.get(self, "load_balancer_name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vip(self) -> str:
        return pulumi.get(self, "vip")


@pulumi.output_type
class GetInstanceByCertIdCertSetResult(dict):
    def __init__(__self__, *,
                 cert_id: str,
                 load_balancers: Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerResult']):
        pulumi.set(__self__, "cert_id", cert_id)
        pulumi.set(__self__, "load_balancers", load_balancers)

    @property
    @pulumi.getter(name="certId")
    def cert_id(self) -> str:
        return pulumi.get(self, "cert_id")

    @property
    @pulumi.getter(name="loadBalancers")
    def load_balancers(self) -> Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerResult']:
        return pulumi.get(self, "load_balancers")


@pulumi.output_type
class GetInstanceByCertIdCertSetLoadBalancerResult(dict):
    def __init__(__self__, *,
                 address_ip_version: str,
                 address_i_pv6: str,
                 anycast_zone: str,
                 attribute_flags: Sequence[str],
                 backup_zone_sets: Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerBackupZoneSetResult'],
                 charge_type: str,
                 cluster_ids: Sequence[str],
                 cluster_tag: str,
                 config_id: str,
                 create_time: str,
                 domain: str,
                 exclusive_clusters: Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerExclusiveClusterResult'],
                 expire_time: str,
                 extra_infos: Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerExtraInfoResult'],
                 forward: int,
                 health_log_set_id: str,
                 health_log_topic_id: str,
                 ipv6_mode: str,
                 is_block: bool,
                 is_block_time: str,
                 is_ddos: bool,
                 isolated_time: str,
                 isolation: int,
                 load_balancer_domain: str,
                 load_balancer_id: str,
                 load_balancer_name: str,
                 load_balancer_pass_to_target: bool,
                 load_balancer_type: str,
                 load_balancer_vips: Sequence[str],
                 local_bgp: bool,
                 log: str,
                 log_set_id: str,
                 log_topic_id: str,
                 master_zones: Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerMasterZoneResult'],
                 mix_ip_target: bool,
                 network_attributes: Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerNetworkAttributeResult'],
                 nfv_info: str,
                 numerical_vpc_id: int,
                 open_bgp: int,
                 prepaid_attributes: Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerPrepaidAttributeResult'],
                 project_id: int,
                 secure_groups: Sequence[str],
                 sla_type: str,
                 snat: bool,
                 snat_ips: Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerSnatIpResult'],
                 snat_pro: bool,
                 status: int,
                 status_time: str,
                 subnet_id: str,
                 tags: Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerTagResult'],
                 target_region_infos: Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerTargetRegionInfoResult'],
                 vip_isp: str,
                 vpc_id: str,
                 zones: Sequence[str]):
        pulumi.set(__self__, "address_ip_version", address_ip_version)
        pulumi.set(__self__, "address_i_pv6", address_i_pv6)
        pulumi.set(__self__, "anycast_zone", anycast_zone)
        pulumi.set(__self__, "attribute_flags", attribute_flags)
        pulumi.set(__self__, "backup_zone_sets", backup_zone_sets)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "cluster_ids", cluster_ids)
        pulumi.set(__self__, "cluster_tag", cluster_tag)
        pulumi.set(__self__, "config_id", config_id)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "exclusive_clusters", exclusive_clusters)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "extra_infos", extra_infos)
        pulumi.set(__self__, "forward", forward)
        pulumi.set(__self__, "health_log_set_id", health_log_set_id)
        pulumi.set(__self__, "health_log_topic_id", health_log_topic_id)
        pulumi.set(__self__, "ipv6_mode", ipv6_mode)
        pulumi.set(__self__, "is_block", is_block)
        pulumi.set(__self__, "is_block_time", is_block_time)
        pulumi.set(__self__, "is_ddos", is_ddos)
        pulumi.set(__self__, "isolated_time", isolated_time)
        pulumi.set(__self__, "isolation", isolation)
        pulumi.set(__self__, "load_balancer_domain", load_balancer_domain)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        pulumi.set(__self__, "load_balancer_pass_to_target", load_balancer_pass_to_target)
        pulumi.set(__self__, "load_balancer_type", load_balancer_type)
        pulumi.set(__self__, "load_balancer_vips", load_balancer_vips)
        pulumi.set(__self__, "local_bgp", local_bgp)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "log_set_id", log_set_id)
        pulumi.set(__self__, "log_topic_id", log_topic_id)
        pulumi.set(__self__, "master_zones", master_zones)
        pulumi.set(__self__, "mix_ip_target", mix_ip_target)
        pulumi.set(__self__, "network_attributes", network_attributes)
        pulumi.set(__self__, "nfv_info", nfv_info)
        pulumi.set(__self__, "numerical_vpc_id", numerical_vpc_id)
        pulumi.set(__self__, "open_bgp", open_bgp)
        pulumi.set(__self__, "prepaid_attributes", prepaid_attributes)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "secure_groups", secure_groups)
        pulumi.set(__self__, "sla_type", sla_type)
        pulumi.set(__self__, "snat", snat)
        pulumi.set(__self__, "snat_ips", snat_ips)
        pulumi.set(__self__, "snat_pro", snat_pro)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_time", status_time)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "target_region_infos", target_region_infos)
        pulumi.set(__self__, "vip_isp", vip_isp)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="addressIPVersion")
    def address_ip_version(self) -> str:
        return pulumi.get(self, "address_ip_version")

    @property
    @pulumi.getter(name="addressIPv6")
    def address_i_pv6(self) -> str:
        return pulumi.get(self, "address_i_pv6")

    @property
    @pulumi.getter(name="anycastZone")
    def anycast_zone(self) -> str:
        return pulumi.get(self, "anycast_zone")

    @property
    @pulumi.getter(name="attributeFlags")
    def attribute_flags(self) -> Sequence[str]:
        return pulumi.get(self, "attribute_flags")

    @property
    @pulumi.getter(name="backupZoneSets")
    def backup_zone_sets(self) -> Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerBackupZoneSetResult']:
        return pulumi.get(self, "backup_zone_sets")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="clusterIds")
    def cluster_ids(self) -> Sequence[str]:
        return pulumi.get(self, "cluster_ids")

    @property
    @pulumi.getter(name="clusterTag")
    def cluster_tag(self) -> str:
        return pulumi.get(self, "cluster_tag")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> str:
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="exclusiveClusters")
    def exclusive_clusters(self) -> Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerExclusiveClusterResult']:
        return pulumi.get(self, "exclusive_clusters")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="extraInfos")
    def extra_infos(self) -> Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerExtraInfoResult']:
        return pulumi.get(self, "extra_infos")

    @property
    @pulumi.getter
    def forward(self) -> int:
        return pulumi.get(self, "forward")

    @property
    @pulumi.getter(name="healthLogSetId")
    def health_log_set_id(self) -> str:
        return pulumi.get(self, "health_log_set_id")

    @property
    @pulumi.getter(name="healthLogTopicId")
    def health_log_topic_id(self) -> str:
        return pulumi.get(self, "health_log_topic_id")

    @property
    @pulumi.getter(name="ipv6Mode")
    def ipv6_mode(self) -> str:
        return pulumi.get(self, "ipv6_mode")

    @property
    @pulumi.getter(name="isBlock")
    def is_block(self) -> bool:
        return pulumi.get(self, "is_block")

    @property
    @pulumi.getter(name="isBlockTime")
    def is_block_time(self) -> str:
        return pulumi.get(self, "is_block_time")

    @property
    @pulumi.getter(name="isDdos")
    def is_ddos(self) -> bool:
        return pulumi.get(self, "is_ddos")

    @property
    @pulumi.getter(name="isolatedTime")
    def isolated_time(self) -> str:
        return pulumi.get(self, "isolated_time")

    @property
    @pulumi.getter
    def isolation(self) -> int:
        return pulumi.get(self, "isolation")

    @property
    @pulumi.getter(name="loadBalancerDomain")
    def load_balancer_domain(self) -> str:
        return pulumi.get(self, "load_balancer_domain")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> str:
        return pulumi.get(self, "load_balancer_name")

    @property
    @pulumi.getter(name="loadBalancerPassToTarget")
    def load_balancer_pass_to_target(self) -> bool:
        return pulumi.get(self, "load_balancer_pass_to_target")

    @property
    @pulumi.getter(name="loadBalancerType")
    def load_balancer_type(self) -> str:
        return pulumi.get(self, "load_balancer_type")

    @property
    @pulumi.getter(name="loadBalancerVips")
    def load_balancer_vips(self) -> Sequence[str]:
        return pulumi.get(self, "load_balancer_vips")

    @property
    @pulumi.getter(name="localBgp")
    def local_bgp(self) -> bool:
        return pulumi.get(self, "local_bgp")

    @property
    @pulumi.getter
    def log(self) -> str:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logSetId")
    def log_set_id(self) -> str:
        return pulumi.get(self, "log_set_id")

    @property
    @pulumi.getter(name="logTopicId")
    def log_topic_id(self) -> str:
        return pulumi.get(self, "log_topic_id")

    @property
    @pulumi.getter(name="masterZones")
    def master_zones(self) -> Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerMasterZoneResult']:
        return pulumi.get(self, "master_zones")

    @property
    @pulumi.getter(name="mixIpTarget")
    def mix_ip_target(self) -> bool:
        return pulumi.get(self, "mix_ip_target")

    @property
    @pulumi.getter(name="networkAttributes")
    def network_attributes(self) -> Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerNetworkAttributeResult']:
        return pulumi.get(self, "network_attributes")

    @property
    @pulumi.getter(name="nfvInfo")
    def nfv_info(self) -> str:
        return pulumi.get(self, "nfv_info")

    @property
    @pulumi.getter(name="numericalVpcId")
    def numerical_vpc_id(self) -> int:
        return pulumi.get(self, "numerical_vpc_id")

    @property
    @pulumi.getter(name="openBgp")
    def open_bgp(self) -> int:
        return pulumi.get(self, "open_bgp")

    @property
    @pulumi.getter(name="prepaidAttributes")
    def prepaid_attributes(self) -> Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerPrepaidAttributeResult']:
        return pulumi.get(self, "prepaid_attributes")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="secureGroups")
    def secure_groups(self) -> Sequence[str]:
        return pulumi.get(self, "secure_groups")

    @property
    @pulumi.getter(name="slaType")
    def sla_type(self) -> str:
        return pulumi.get(self, "sla_type")

    @property
    @pulumi.getter
    def snat(self) -> bool:
        return pulumi.get(self, "snat")

    @property
    @pulumi.getter(name="snatIps")
    def snat_ips(self) -> Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerSnatIpResult']:
        return pulumi.get(self, "snat_ips")

    @property
    @pulumi.getter(name="snatPro")
    def snat_pro(self) -> bool:
        return pulumi.get(self, "snat_pro")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusTime")
    def status_time(self) -> str:
        return pulumi.get(self, "status_time")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetRegionInfos")
    def target_region_infos(self) -> Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerTargetRegionInfoResult']:
        return pulumi.get(self, "target_region_infos")

    @property
    @pulumi.getter(name="vipIsp")
    def vip_isp(self) -> str:
        return pulumi.get(self, "vip_isp")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zones(self) -> Sequence[str]:
        return pulumi.get(self, "zones")


@pulumi.output_type
class GetInstanceByCertIdCertSetLoadBalancerBackupZoneSetResult(dict):
    def __init__(__self__, *,
                 edge_zone: bool,
                 local_zone: bool,
                 zone: str,
                 zone_id: int,
                 zone_name: str,
                 zone_region: str):
        pulumi.set(__self__, "edge_zone", edge_zone)
        pulumi.set(__self__, "local_zone", local_zone)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)
        pulumi.set(__self__, "zone_region", zone_region)

    @property
    @pulumi.getter(name="edgeZone")
    def edge_zone(self) -> bool:
        return pulumi.get(self, "edge_zone")

    @property
    @pulumi.getter(name="localZone")
    def local_zone(self) -> bool:
        return pulumi.get(self, "local_zone")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        return pulumi.get(self, "zone_name")

    @property
    @pulumi.getter(name="zoneRegion")
    def zone_region(self) -> str:
        return pulumi.get(self, "zone_region")


@pulumi.output_type
class GetInstanceByCertIdCertSetLoadBalancerExclusiveClusterResult(dict):
    def __init__(__self__, *,
                 classical_clusters: Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerExclusiveClusterClassicalClusterResult'],
                 l4_clusters: Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerExclusiveClusterL4ClusterResult'],
                 l7_clusters: Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerExclusiveClusterL7ClusterResult']):
        pulumi.set(__self__, "classical_clusters", classical_clusters)
        pulumi.set(__self__, "l4_clusters", l4_clusters)
        pulumi.set(__self__, "l7_clusters", l7_clusters)

    @property
    @pulumi.getter(name="classicalClusters")
    def classical_clusters(self) -> Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerExclusiveClusterClassicalClusterResult']:
        return pulumi.get(self, "classical_clusters")

    @property
    @pulumi.getter(name="l4Clusters")
    def l4_clusters(self) -> Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerExclusiveClusterL4ClusterResult']:
        return pulumi.get(self, "l4_clusters")

    @property
    @pulumi.getter(name="l7Clusters")
    def l7_clusters(self) -> Sequence['outputs.GetInstanceByCertIdCertSetLoadBalancerExclusiveClusterL7ClusterResult']:
        return pulumi.get(self, "l7_clusters")


@pulumi.output_type
class GetInstanceByCertIdCertSetLoadBalancerExclusiveClusterClassicalClusterResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 cluster_name: str,
                 zone: str):
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetInstanceByCertIdCertSetLoadBalancerExclusiveClusterL4ClusterResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 cluster_name: str,
                 zone: str):
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetInstanceByCertIdCertSetLoadBalancerExclusiveClusterL7ClusterResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 cluster_name: str,
                 zone: str):
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetInstanceByCertIdCertSetLoadBalancerExtraInfoResult(dict):
    def __init__(__self__, *,
                 tgw_group_name: str,
                 zhi_tong: bool):
        pulumi.set(__self__, "tgw_group_name", tgw_group_name)
        pulumi.set(__self__, "zhi_tong", zhi_tong)

    @property
    @pulumi.getter(name="tgwGroupName")
    def tgw_group_name(self) -> str:
        return pulumi.get(self, "tgw_group_name")

    @property
    @pulumi.getter(name="zhiTong")
    def zhi_tong(self) -> bool:
        return pulumi.get(self, "zhi_tong")


@pulumi.output_type
class GetInstanceByCertIdCertSetLoadBalancerMasterZoneResult(dict):
    def __init__(__self__, *,
                 edge_zone: bool,
                 local_zone: bool,
                 zone: str,
                 zone_id: int,
                 zone_name: str,
                 zone_region: str):
        pulumi.set(__self__, "edge_zone", edge_zone)
        pulumi.set(__self__, "local_zone", local_zone)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)
        pulumi.set(__self__, "zone_region", zone_region)

    @property
    @pulumi.getter(name="edgeZone")
    def edge_zone(self) -> bool:
        return pulumi.get(self, "edge_zone")

    @property
    @pulumi.getter(name="localZone")
    def local_zone(self) -> bool:
        return pulumi.get(self, "local_zone")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        return pulumi.get(self, "zone_name")

    @property
    @pulumi.getter(name="zoneRegion")
    def zone_region(self) -> str:
        return pulumi.get(self, "zone_region")


@pulumi.output_type
class GetInstanceByCertIdCertSetLoadBalancerNetworkAttributeResult(dict):
    def __init__(__self__, *,
                 bandwidthpkg_sub_type: str,
                 internet_charge_type: str,
                 internet_max_bandwidth_out: int):
        pulumi.set(__self__, "bandwidthpkg_sub_type", bandwidthpkg_sub_type)
        pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)

    @property
    @pulumi.getter(name="bandwidthpkgSubType")
    def bandwidthpkg_sub_type(self) -> str:
        return pulumi.get(self, "bandwidthpkg_sub_type")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> str:
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> int:
        return pulumi.get(self, "internet_max_bandwidth_out")


@pulumi.output_type
class GetInstanceByCertIdCertSetLoadBalancerPrepaidAttributeResult(dict):
    def __init__(__self__, *,
                 period: int,
                 renew_flag: str):
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "renew_flag", renew_flag)

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> str:
        return pulumi.get(self, "renew_flag")


@pulumi.output_type
class GetInstanceByCertIdCertSetLoadBalancerSnatIpResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 subnet_id: str):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetInstanceByCertIdCertSetLoadBalancerTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetInstanceByCertIdCertSetLoadBalancerTargetRegionInfoResult(dict):
    def __init__(__self__, *,
                 region: str,
                 vpc_id: str):
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetInstanceDetailFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetInstanceDetailLoadBalancerDetailSetResult(dict):
    def __init__(__self__, *,
                 address: str,
                 address_ip_version: str,
                 address_ipv6: str,
                 address_isp: str,
                 charge_type: str,
                 config_id: str,
                 create_time: str,
                 domain: str,
                 domains: str,
                 extra_infos: Sequence['outputs.GetInstanceDetailLoadBalancerDetailSetExtraInfoResult'],
                 ipv6_mode: str,
                 isolation: int,
                 listener_id: str,
                 load_balancer_domain: str,
                 load_balancer_id: str,
                 load_balancer_name: str,
                 load_balancer_pass_to_target: int,
                 load_balancer_type: str,
                 location_id: str,
                 network_attributes: Sequence['outputs.GetInstanceDetailLoadBalancerDetailSetNetworkAttributeResult'],
                 port: int,
                 prepaid_attributes: Sequence['outputs.GetInstanceDetailLoadBalancerDetailSetPrepaidAttributeResult'],
                 project_id: int,
                 protocol: str,
                 security_groups: Sequence[str],
                 slave_zones: Sequence[str],
                 sni_switch: int,
                 status: int,
                 tags: Sequence['outputs.GetInstanceDetailLoadBalancerDetailSetTagResult'],
                 target_address: str,
                 target_health: str,
                 target_id: str,
                 target_port: int,
                 target_weight: int,
                 url: str,
                 vpc_id: str,
                 zone: str,
                 zones: Sequence[str]):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "address_ip_version", address_ip_version)
        pulumi.set(__self__, "address_ipv6", address_ipv6)
        pulumi.set(__self__, "address_isp", address_isp)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "config_id", config_id)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "domains", domains)
        pulumi.set(__self__, "extra_infos", extra_infos)
        pulumi.set(__self__, "ipv6_mode", ipv6_mode)
        pulumi.set(__self__, "isolation", isolation)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "load_balancer_domain", load_balancer_domain)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        pulumi.set(__self__, "load_balancer_pass_to_target", load_balancer_pass_to_target)
        pulumi.set(__self__, "load_balancer_type", load_balancer_type)
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "network_attributes", network_attributes)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "prepaid_attributes", prepaid_attributes)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "slave_zones", slave_zones)
        pulumi.set(__self__, "sni_switch", sni_switch)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "target_address", target_address)
        pulumi.set(__self__, "target_health", target_health)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "target_port", target_port)
        pulumi.set(__self__, "target_weight", target_weight)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="addressIpVersion")
    def address_ip_version(self) -> str:
        return pulumi.get(self, "address_ip_version")

    @property
    @pulumi.getter(name="addressIpv6")
    def address_ipv6(self) -> str:
        return pulumi.get(self, "address_ipv6")

    @property
    @pulumi.getter(name="addressIsp")
    def address_isp(self) -> str:
        return pulumi.get(self, "address_isp")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> str:
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def domains(self) -> str:
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter(name="extraInfos")
    def extra_infos(self) -> Sequence['outputs.GetInstanceDetailLoadBalancerDetailSetExtraInfoResult']:
        return pulumi.get(self, "extra_infos")

    @property
    @pulumi.getter(name="ipv6Mode")
    def ipv6_mode(self) -> str:
        return pulumi.get(self, "ipv6_mode")

    @property
    @pulumi.getter
    def isolation(self) -> int:
        return pulumi.get(self, "isolation")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="loadBalancerDomain")
    def load_balancer_domain(self) -> str:
        return pulumi.get(self, "load_balancer_domain")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> str:
        return pulumi.get(self, "load_balancer_name")

    @property
    @pulumi.getter(name="loadBalancerPassToTarget")
    def load_balancer_pass_to_target(self) -> int:
        return pulumi.get(self, "load_balancer_pass_to_target")

    @property
    @pulumi.getter(name="loadBalancerType")
    def load_balancer_type(self) -> str:
        return pulumi.get(self, "load_balancer_type")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> str:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter(name="networkAttributes")
    def network_attributes(self) -> Sequence['outputs.GetInstanceDetailLoadBalancerDetailSetNetworkAttributeResult']:
        return pulumi.get(self, "network_attributes")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="prepaidAttributes")
    def prepaid_attributes(self) -> Sequence['outputs.GetInstanceDetailLoadBalancerDetailSetPrepaidAttributeResult']:
        return pulumi.get(self, "prepaid_attributes")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence[str]:
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="slaveZones")
    def slave_zones(self) -> Sequence[str]:
        return pulumi.get(self, "slave_zones")

    @property
    @pulumi.getter(name="sniSwitch")
    def sni_switch(self) -> int:
        return pulumi.get(self, "sni_switch")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetInstanceDetailLoadBalancerDetailSetTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetAddress")
    def target_address(self) -> str:
        return pulumi.get(self, "target_address")

    @property
    @pulumi.getter(name="targetHealth")
    def target_health(self) -> str:
        return pulumi.get(self, "target_health")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> str:
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> int:
        return pulumi.get(self, "target_port")

    @property
    @pulumi.getter(name="targetWeight")
    def target_weight(self) -> int:
        return pulumi.get(self, "target_weight")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter
    def zones(self) -> Sequence[str]:
        return pulumi.get(self, "zones")


@pulumi.output_type
class GetInstanceDetailLoadBalancerDetailSetExtraInfoResult(dict):
    def __init__(__self__, *,
                 tgw_group_name: str,
                 zhi_tong: bool):
        pulumi.set(__self__, "tgw_group_name", tgw_group_name)
        pulumi.set(__self__, "zhi_tong", zhi_tong)

    @property
    @pulumi.getter(name="tgwGroupName")
    def tgw_group_name(self) -> str:
        return pulumi.get(self, "tgw_group_name")

    @property
    @pulumi.getter(name="zhiTong")
    def zhi_tong(self) -> bool:
        return pulumi.get(self, "zhi_tong")


@pulumi.output_type
class GetInstanceDetailLoadBalancerDetailSetNetworkAttributeResult(dict):
    def __init__(__self__, *,
                 bandwidth_pkg_sub_type: str,
                 internet_charge_type: str,
                 internet_max_bandwidth_out: int):
        pulumi.set(__self__, "bandwidth_pkg_sub_type", bandwidth_pkg_sub_type)
        pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)

    @property
    @pulumi.getter(name="bandwidthPkgSubType")
    def bandwidth_pkg_sub_type(self) -> str:
        return pulumi.get(self, "bandwidth_pkg_sub_type")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> str:
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> int:
        return pulumi.get(self, "internet_max_bandwidth_out")


@pulumi.output_type
class GetInstanceDetailLoadBalancerDetailSetPrepaidAttributeResult(dict):
    def __init__(__self__, *,
                 period: int,
                 renew_flag: str):
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "renew_flag", renew_flag)

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> str:
        return pulumi.get(self, "renew_flag")


@pulumi.output_type
class GetInstanceDetailLoadBalancerDetailSetTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetInstanceTrafficLoadBalancerTrafficResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 load_balancer_id: str,
                 load_balancer_name: str,
                 out_bandwidth: float,
                 region: str,
                 vip: str):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        pulumi.set(__self__, "out_bandwidth", out_bandwidth)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "vip", vip)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> str:
        return pulumi.get(self, "load_balancer_name")

    @property
    @pulumi.getter(name="outBandwidth")
    def out_bandwidth(self) -> float:
        return pulumi.get(self, "out_bandwidth")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def vip(self) -> str:
        return pulumi.get(self, "vip")


@pulumi.output_type
class GetInstancesClbListResult(dict):
    def __init__(__self__, *,
                 address_ip_version: str,
                 clb_id: str,
                 clb_name: str,
                 clb_vips: Sequence[str],
                 create_time: str,
                 internet_bandwidth_max_out: int,
                 internet_charge_type: str,
                 local_zone: bool,
                 network_type: str,
                 project_id: int,
                 security_groups: Sequence[str],
                 status: int,
                 status_time: str,
                 subnet_id: str,
                 tags: Mapping[str, Any],
                 target_region_info_region: str,
                 target_region_info_vpc_id: str,
                 vip_isp: str,
                 vpc_id: str,
                 zone: str,
                 zone_id: int,
                 zone_name: str,
                 zone_region: str):
        pulumi.set(__self__, "address_ip_version", address_ip_version)
        pulumi.set(__self__, "clb_id", clb_id)
        pulumi.set(__self__, "clb_name", clb_name)
        pulumi.set(__self__, "clb_vips", clb_vips)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "internet_bandwidth_max_out", internet_bandwidth_max_out)
        pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        pulumi.set(__self__, "local_zone", local_zone)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_time", status_time)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "target_region_info_region", target_region_info_region)
        pulumi.set(__self__, "target_region_info_vpc_id", target_region_info_vpc_id)
        pulumi.set(__self__, "vip_isp", vip_isp)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)
        pulumi.set(__self__, "zone_region", zone_region)

    @property
    @pulumi.getter(name="addressIpVersion")
    def address_ip_version(self) -> str:
        return pulumi.get(self, "address_ip_version")

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> str:
        return pulumi.get(self, "clb_id")

    @property
    @pulumi.getter(name="clbName")
    def clb_name(self) -> str:
        return pulumi.get(self, "clb_name")

    @property
    @pulumi.getter(name="clbVips")
    def clb_vips(self) -> Sequence[str]:
        return pulumi.get(self, "clb_vips")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="internetBandwidthMaxOut")
    def internet_bandwidth_max_out(self) -> int:
        return pulumi.get(self, "internet_bandwidth_max_out")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> str:
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="localZone")
    def local_zone(self) -> bool:
        return pulumi.get(self, "local_zone")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence[str]:
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusTime")
    def status_time(self) -> str:
        return pulumi.get(self, "status_time")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetRegionInfoRegion")
    def target_region_info_region(self) -> str:
        return pulumi.get(self, "target_region_info_region")

    @property
    @pulumi.getter(name="targetRegionInfoVpcId")
    def target_region_info_vpc_id(self) -> str:
        return pulumi.get(self, "target_region_info_vpc_id")

    @property
    @pulumi.getter(name="vipIsp")
    def vip_isp(self) -> str:
        return pulumi.get(self, "vip_isp")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        return pulumi.get(self, "zone_name")

    @property
    @pulumi.getter(name="zoneRegion")
    def zone_region(self) -> str:
        return pulumi.get(self, "zone_region")


@pulumi.output_type
class GetListenerRulesRuleListResult(dict):
    def __init__(__self__, *,
                 certificate_ca_id: str,
                 certificate_id: str,
                 certificate_ssl_mode: str,
                 clb_id: str,
                 health_check_health_num: int,
                 health_check_http_code: int,
                 health_check_http_domain: str,
                 health_check_http_method: str,
                 health_check_http_path: str,
                 health_check_interval_time: int,
                 health_check_switch: bool,
                 health_check_unhealth_num: int,
                 http2_switch: bool,
                 listener_id: str,
                 rule_id: str,
                 scheduler: str,
                 session_expire_time: int,
                 domain: Optional[str] = None,
                 url: Optional[str] = None):
        pulumi.set(__self__, "certificate_ca_id", certificate_ca_id)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "certificate_ssl_mode", certificate_ssl_mode)
        pulumi.set(__self__, "clb_id", clb_id)
        pulumi.set(__self__, "health_check_health_num", health_check_health_num)
        pulumi.set(__self__, "health_check_http_code", health_check_http_code)
        pulumi.set(__self__, "health_check_http_domain", health_check_http_domain)
        pulumi.set(__self__, "health_check_http_method", health_check_http_method)
        pulumi.set(__self__, "health_check_http_path", health_check_http_path)
        pulumi.set(__self__, "health_check_interval_time", health_check_interval_time)
        pulumi.set(__self__, "health_check_switch", health_check_switch)
        pulumi.set(__self__, "health_check_unhealth_num", health_check_unhealth_num)
        pulumi.set(__self__, "http2_switch", http2_switch)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "rule_id", rule_id)
        pulumi.set(__self__, "scheduler", scheduler)
        pulumi.set(__self__, "session_expire_time", session_expire_time)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="certificateCaId")
    def certificate_ca_id(self) -> str:
        return pulumi.get(self, "certificate_ca_id")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateSslMode")
    def certificate_ssl_mode(self) -> str:
        return pulumi.get(self, "certificate_ssl_mode")

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> str:
        return pulumi.get(self, "clb_id")

    @property
    @pulumi.getter(name="healthCheckHealthNum")
    def health_check_health_num(self) -> int:
        return pulumi.get(self, "health_check_health_num")

    @property
    @pulumi.getter(name="healthCheckHttpCode")
    def health_check_http_code(self) -> int:
        return pulumi.get(self, "health_check_http_code")

    @property
    @pulumi.getter(name="healthCheckHttpDomain")
    def health_check_http_domain(self) -> str:
        return pulumi.get(self, "health_check_http_domain")

    @property
    @pulumi.getter(name="healthCheckHttpMethod")
    def health_check_http_method(self) -> str:
        return pulumi.get(self, "health_check_http_method")

    @property
    @pulumi.getter(name="healthCheckHttpPath")
    def health_check_http_path(self) -> str:
        return pulumi.get(self, "health_check_http_path")

    @property
    @pulumi.getter(name="healthCheckIntervalTime")
    def health_check_interval_time(self) -> int:
        return pulumi.get(self, "health_check_interval_time")

    @property
    @pulumi.getter(name="healthCheckSwitch")
    def health_check_switch(self) -> bool:
        return pulumi.get(self, "health_check_switch")

    @property
    @pulumi.getter(name="healthCheckUnhealthNum")
    def health_check_unhealth_num(self) -> int:
        return pulumi.get(self, "health_check_unhealth_num")

    @property
    @pulumi.getter(name="http2Switch")
    def http2_switch(self) -> bool:
        return pulumi.get(self, "http2_switch")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> str:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def scheduler(self) -> str:
        return pulumi.get(self, "scheduler")

    @property
    @pulumi.getter(name="sessionExpireTime")
    def session_expire_time(self) -> int:
        return pulumi.get(self, "session_expire_time")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetListenersByTargetsBackendResult(dict):
    def __init__(__self__, *,
                 private_ip: str,
                 vpc_id: str):
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetListenersByTargetsLoadBalancerResult(dict):
    def __init__(__self__, *,
                 listeners: Sequence['outputs.GetListenersByTargetsLoadBalancerListenerResult'],
                 load_balancer_id: str,
                 region: str,
                 vip: str):
        pulumi.set(__self__, "listeners", listeners)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "vip", vip)

    @property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.GetListenersByTargetsLoadBalancerListenerResult']:
        return pulumi.get(self, "listeners")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def vip(self) -> str:
        return pulumi.get(self, "vip")


@pulumi.output_type
class GetListenersByTargetsLoadBalancerListenerResult(dict):
    def __init__(__self__, *,
                 end_port: int,
                 listener_id: str,
                 port: int,
                 protocol: str,
                 rules: Sequence['outputs.GetListenersByTargetsLoadBalancerListenerRuleResult'],
                 targets: Sequence['outputs.GetListenersByTargetsLoadBalancerListenerTargetResult']):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        return pulumi.get(self, "end_port")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetListenersByTargetsLoadBalancerListenerRuleResult']:
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetListenersByTargetsLoadBalancerListenerTargetResult']:
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetListenersByTargetsLoadBalancerListenerRuleResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 location_id: str,
                 targets: Sequence['outputs.GetListenersByTargetsLoadBalancerListenerRuleTargetResult'],
                 url: str):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "targets", targets)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> str:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetListenersByTargetsLoadBalancerListenerRuleTargetResult']:
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetListenersByTargetsLoadBalancerListenerRuleTargetResult(dict):
    def __init__(__self__, *,
                 port: int,
                 private_ip: str,
                 type: str,
                 vpc_id: int,
                 weight: int):
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> int:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetListenersByTargetsLoadBalancerListenerTargetResult(dict):
    def __init__(__self__, *,
                 port: int,
                 private_ip: str,
                 type: str,
                 vpc_id: int,
                 weight: int):
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> int:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetListenersListenerListResult(dict):
    def __init__(__self__, *,
                 certificate_ca_id: str,
                 certificate_id: str,
                 certificate_ssl_mode: str,
                 clb_id: str,
                 health_check_context_type: str,
                 health_check_health_num: int,
                 health_check_http_code: int,
                 health_check_http_domain: str,
                 health_check_http_method: str,
                 health_check_http_path: str,
                 health_check_http_version: str,
                 health_check_interval_time: int,
                 health_check_port: int,
                 health_check_recv_context: str,
                 health_check_send_context: str,
                 health_check_switch: bool,
                 health_check_time_out: int,
                 health_check_type: str,
                 health_check_unhealth_num: int,
                 listener_id: str,
                 listener_name: str,
                 port: int,
                 protocol: str,
                 scheduler: str,
                 session_expire_time: int,
                 sni_switch: bool):
        pulumi.set(__self__, "certificate_ca_id", certificate_ca_id)
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "certificate_ssl_mode", certificate_ssl_mode)
        pulumi.set(__self__, "clb_id", clb_id)
        pulumi.set(__self__, "health_check_context_type", health_check_context_type)
        pulumi.set(__self__, "health_check_health_num", health_check_health_num)
        pulumi.set(__self__, "health_check_http_code", health_check_http_code)
        pulumi.set(__self__, "health_check_http_domain", health_check_http_domain)
        pulumi.set(__self__, "health_check_http_method", health_check_http_method)
        pulumi.set(__self__, "health_check_http_path", health_check_http_path)
        pulumi.set(__self__, "health_check_http_version", health_check_http_version)
        pulumi.set(__self__, "health_check_interval_time", health_check_interval_time)
        pulumi.set(__self__, "health_check_port", health_check_port)
        pulumi.set(__self__, "health_check_recv_context", health_check_recv_context)
        pulumi.set(__self__, "health_check_send_context", health_check_send_context)
        pulumi.set(__self__, "health_check_switch", health_check_switch)
        pulumi.set(__self__, "health_check_time_out", health_check_time_out)
        pulumi.set(__self__, "health_check_type", health_check_type)
        pulumi.set(__self__, "health_check_unhealth_num", health_check_unhealth_num)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "listener_name", listener_name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "scheduler", scheduler)
        pulumi.set(__self__, "session_expire_time", session_expire_time)
        pulumi.set(__self__, "sni_switch", sni_switch)

    @property
    @pulumi.getter(name="certificateCaId")
    def certificate_ca_id(self) -> str:
        return pulumi.get(self, "certificate_ca_id")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateSslMode")
    def certificate_ssl_mode(self) -> str:
        return pulumi.get(self, "certificate_ssl_mode")

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> str:
        return pulumi.get(self, "clb_id")

    @property
    @pulumi.getter(name="healthCheckContextType")
    def health_check_context_type(self) -> str:
        return pulumi.get(self, "health_check_context_type")

    @property
    @pulumi.getter(name="healthCheckHealthNum")
    def health_check_health_num(self) -> int:
        return pulumi.get(self, "health_check_health_num")

    @property
    @pulumi.getter(name="healthCheckHttpCode")
    def health_check_http_code(self) -> int:
        return pulumi.get(self, "health_check_http_code")

    @property
    @pulumi.getter(name="healthCheckHttpDomain")
    def health_check_http_domain(self) -> str:
        return pulumi.get(self, "health_check_http_domain")

    @property
    @pulumi.getter(name="healthCheckHttpMethod")
    def health_check_http_method(self) -> str:
        return pulumi.get(self, "health_check_http_method")

    @property
    @pulumi.getter(name="healthCheckHttpPath")
    def health_check_http_path(self) -> str:
        return pulumi.get(self, "health_check_http_path")

    @property
    @pulumi.getter(name="healthCheckHttpVersion")
    def health_check_http_version(self) -> str:
        return pulumi.get(self, "health_check_http_version")

    @property
    @pulumi.getter(name="healthCheckIntervalTime")
    def health_check_interval_time(self) -> int:
        return pulumi.get(self, "health_check_interval_time")

    @property
    @pulumi.getter(name="healthCheckPort")
    def health_check_port(self) -> int:
        return pulumi.get(self, "health_check_port")

    @property
    @pulumi.getter(name="healthCheckRecvContext")
    def health_check_recv_context(self) -> str:
        return pulumi.get(self, "health_check_recv_context")

    @property
    @pulumi.getter(name="healthCheckSendContext")
    def health_check_send_context(self) -> str:
        return pulumi.get(self, "health_check_send_context")

    @property
    @pulumi.getter(name="healthCheckSwitch")
    def health_check_switch(self) -> bool:
        return pulumi.get(self, "health_check_switch")

    @property
    @pulumi.getter(name="healthCheckTimeOut")
    def health_check_time_out(self) -> int:
        return pulumi.get(self, "health_check_time_out")

    @property
    @pulumi.getter(name="healthCheckType")
    def health_check_type(self) -> str:
        return pulumi.get(self, "health_check_type")

    @property
    @pulumi.getter(name="healthCheckUnhealthNum")
    def health_check_unhealth_num(self) -> int:
        return pulumi.get(self, "health_check_unhealth_num")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> str:
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def scheduler(self) -> str:
        return pulumi.get(self, "scheduler")

    @property
    @pulumi.getter(name="sessionExpireTime")
    def session_expire_time(self) -> int:
        return pulumi.get(self, "session_expire_time")

    @property
    @pulumi.getter(name="sniSwitch")
    def sni_switch(self) -> bool:
        return pulumi.get(self, "sni_switch")


@pulumi.output_type
class GetRedirectionsRedirectionListResult(dict):
    def __init__(__self__, *,
                 clb_id: str,
                 source_listener_id: str,
                 source_rule_id: str,
                 target_listener_id: str,
                 target_rule_id: str):
        pulumi.set(__self__, "clb_id", clb_id)
        pulumi.set(__self__, "source_listener_id", source_listener_id)
        pulumi.set(__self__, "source_rule_id", source_rule_id)
        pulumi.set(__self__, "target_listener_id", target_listener_id)
        pulumi.set(__self__, "target_rule_id", target_rule_id)

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> str:
        return pulumi.get(self, "clb_id")

    @property
    @pulumi.getter(name="sourceListenerId")
    def source_listener_id(self) -> str:
        return pulumi.get(self, "source_listener_id")

    @property
    @pulumi.getter(name="sourceRuleId")
    def source_rule_id(self) -> str:
        return pulumi.get(self, "source_rule_id")

    @property
    @pulumi.getter(name="targetListenerId")
    def target_listener_id(self) -> str:
        return pulumi.get(self, "target_listener_id")

    @property
    @pulumi.getter(name="targetRuleId")
    def target_rule_id(self) -> str:
        return pulumi.get(self, "target_rule_id")


@pulumi.output_type
class GetResourcesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetResourcesZoneResourceSetResult(dict):
    def __init__(__self__, *,
                 edge_zone: bool,
                 ip_version: str,
                 local_zone: bool,
                 master_zone: str,
                 resource_sets: Sequence['outputs.GetResourcesZoneResourceSetResourceSetResult'],
                 slave_zone: str,
                 zone_region: str,
                 zone_resource_type: str):
        pulumi.set(__self__, "edge_zone", edge_zone)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "local_zone", local_zone)
        pulumi.set(__self__, "master_zone", master_zone)
        pulumi.set(__self__, "resource_sets", resource_sets)
        pulumi.set(__self__, "slave_zone", slave_zone)
        pulumi.set(__self__, "zone_region", zone_region)
        pulumi.set(__self__, "zone_resource_type", zone_resource_type)

    @property
    @pulumi.getter(name="edgeZone")
    def edge_zone(self) -> bool:
        return pulumi.get(self, "edge_zone")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> str:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="localZone")
    def local_zone(self) -> bool:
        return pulumi.get(self, "local_zone")

    @property
    @pulumi.getter(name="masterZone")
    def master_zone(self) -> str:
        return pulumi.get(self, "master_zone")

    @property
    @pulumi.getter(name="resourceSets")
    def resource_sets(self) -> Sequence['outputs.GetResourcesZoneResourceSetResourceSetResult']:
        return pulumi.get(self, "resource_sets")

    @property
    @pulumi.getter(name="slaveZone")
    def slave_zone(self) -> str:
        return pulumi.get(self, "slave_zone")

    @property
    @pulumi.getter(name="zoneRegion")
    def zone_region(self) -> str:
        return pulumi.get(self, "zone_region")

    @property
    @pulumi.getter(name="zoneResourceType")
    def zone_resource_type(self) -> str:
        return pulumi.get(self, "zone_resource_type")


@pulumi.output_type
class GetResourcesZoneResourceSetResourceSetResult(dict):
    def __init__(__self__, *,
                 availability_sets: Sequence['outputs.GetResourcesZoneResourceSetResourceSetAvailabilitySetResult'],
                 isp: str,
                 types: Sequence[str]):
        pulumi.set(__self__, "availability_sets", availability_sets)
        pulumi.set(__self__, "isp", isp)
        pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter(name="availabilitySets")
    def availability_sets(self) -> Sequence['outputs.GetResourcesZoneResourceSetResourceSetAvailabilitySetResult']:
        return pulumi.get(self, "availability_sets")

    @property
    @pulumi.getter
    def isp(self) -> str:
        return pulumi.get(self, "isp")

    @property
    @pulumi.getter
    def types(self) -> Sequence[str]:
        return pulumi.get(self, "types")


@pulumi.output_type
class GetResourcesZoneResourceSetResourceSetAvailabilitySetResult(dict):
    def __init__(__self__, *,
                 availability: str,
                 type: str):
        pulumi.set(__self__, "availability", availability)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def availability(self) -> str:
        return pulumi.get(self, "availability")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetTargetGroupListFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTargetGroupListTargetGroupSetResult(dict):
    def __init__(__self__, *,
                 associated_rules: Sequence['outputs.GetTargetGroupListTargetGroupSetAssociatedRuleResult'],
                 created_time: str,
                 port: int,
                 target_group_id: str,
                 target_group_name: str,
                 updated_time: str,
                 vpc_id: str):
        pulumi.set(__self__, "associated_rules", associated_rules)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "target_group_id", target_group_id)
        pulumi.set(__self__, "target_group_name", target_group_name)
        pulumi.set(__self__, "updated_time", updated_time)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="associatedRules")
    def associated_rules(self) -> Sequence['outputs.GetTargetGroupListTargetGroupSetAssociatedRuleResult']:
        return pulumi.get(self, "associated_rules")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> str:
        return pulumi.get(self, "target_group_id")

    @property
    @pulumi.getter(name="targetGroupName")
    def target_group_name(self) -> str:
        return pulumi.get(self, "target_group_name")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> str:
        return pulumi.get(self, "updated_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetTargetGroupListTargetGroupSetAssociatedRuleResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 listener_id: str,
                 listener_name: str,
                 load_balancer_id: str,
                 load_balancer_name: str,
                 location_id: str,
                 port: int,
                 protocol: str,
                 url: str):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "listener_name", listener_name)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> str:
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> str:
        return pulumi.get(self, "load_balancer_name")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> str:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetTargetGroupsListResult(dict):
    def __init__(__self__, *,
                 associated_rule_lists: Sequence['outputs.GetTargetGroupsListAssociatedRuleListResult'],
                 create_time: str,
                 port: int,
                 target_group_id: str,
                 target_group_instance_lists: Sequence['outputs.GetTargetGroupsListTargetGroupInstanceListResult'],
                 target_group_name: str,
                 update_time: str,
                 vpc_id: str):
        pulumi.set(__self__, "associated_rule_lists", associated_rule_lists)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "target_group_id", target_group_id)
        pulumi.set(__self__, "target_group_instance_lists", target_group_instance_lists)
        pulumi.set(__self__, "target_group_name", target_group_name)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="associatedRuleLists")
    def associated_rule_lists(self) -> Sequence['outputs.GetTargetGroupsListAssociatedRuleListResult']:
        return pulumi.get(self, "associated_rule_lists")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> str:
        return pulumi.get(self, "target_group_id")

    @property
    @pulumi.getter(name="targetGroupInstanceLists")
    def target_group_instance_lists(self) -> Sequence['outputs.GetTargetGroupsListTargetGroupInstanceListResult']:
        return pulumi.get(self, "target_group_instance_lists")

    @property
    @pulumi.getter(name="targetGroupName")
    def target_group_name(self) -> str:
        return pulumi.get(self, "target_group_name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetTargetGroupsListAssociatedRuleListResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 listener_id: str,
                 listener_name: str,
                 listener_port: int,
                 load_balancer_id: str,
                 load_balancer_name: str,
                 location_id: str,
                 protocol: str,
                 url: str):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "listener_name", listener_name)
        pulumi.set(__self__, "listener_port", listener_port)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> str:
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter(name="listenerPort")
    def listener_port(self) -> int:
        return pulumi.get(self, "listener_port")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> str:
        return pulumi.get(self, "load_balancer_name")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> str:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetTargetGroupsListTargetGroupInstanceListResult(dict):
    def __init__(__self__, *,
                 eni_id: str,
                 instance_id: str,
                 instance_name: str,
                 private_ip_addresses: Sequence[Any],
                 public_ip_addresses: Sequence[Any],
                 registered_time: str,
                 server_port: int,
                 server_type: str,
                 weight: int):
        pulumi.set(__self__, "eni_id", eni_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "private_ip_addresses", private_ip_addresses)
        pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        pulumi.set(__self__, "registered_time", registered_time)
        pulumi.set(__self__, "server_port", server_port)
        pulumi.set(__self__, "server_type", server_type)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="eniId")
    def eni_id(self) -> str:
        return pulumi.get(self, "eni_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> Sequence[Any]:
        return pulumi.get(self, "private_ip_addresses")

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Sequence[Any]:
        return pulumi.get(self, "public_ip_addresses")

    @property
    @pulumi.getter(name="registeredTime")
    def registered_time(self) -> str:
        return pulumi.get(self, "registered_time")

    @property
    @pulumi.getter(name="serverPort")
    def server_port(self) -> int:
        return pulumi.get(self, "server_port")

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> str:
        return pulumi.get(self, "server_type")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetTargetHealthLoadBalancerResult(dict):
    def __init__(__self__, *,
                 listeners: Sequence['outputs.GetTargetHealthLoadBalancerListenerResult'],
                 load_balancer_id: str,
                 load_balancer_name: str):
        pulumi.set(__self__, "listeners", listeners)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)

    @property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.GetTargetHealthLoadBalancerListenerResult']:
        return pulumi.get(self, "listeners")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> str:
        return pulumi.get(self, "load_balancer_name")


@pulumi.output_type
class GetTargetHealthLoadBalancerListenerResult(dict):
    def __init__(__self__, *,
                 listener_id: str,
                 listener_name: str,
                 port: int,
                 protocol: str,
                 rules: Sequence['outputs.GetTargetHealthLoadBalancerListenerRuleResult']):
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "listener_name", listener_name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> str:
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetTargetHealthLoadBalancerListenerRuleResult']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetTargetHealthLoadBalancerListenerRuleResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 location_id: str,
                 targets: Sequence['outputs.GetTargetHealthLoadBalancerListenerRuleTargetResult'],
                 url: str):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "targets", targets)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> str:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetTargetHealthLoadBalancerListenerRuleTargetResult']:
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetTargetHealthLoadBalancerListenerRuleTargetResult(dict):
    def __init__(__self__, *,
                 health_status: bool,
                 health_status_detail: str,
                 ip: str,
                 port: int,
                 target_id: str):
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "health_status_detail", health_status_detail)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "target_id", target_id)

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> bool:
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter(name="healthStatusDetail")
    def health_status_detail(self) -> str:
        return pulumi.get(self, "health_status_detail")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> str:
        return pulumi.get(self, "target_id")


