# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetTargetGroupsResult',
    'AwaitableGetTargetGroupsResult',
    'get_target_groups',
    'get_target_groups_output',
]

@pulumi.output_type
class GetTargetGroupsResult:
    """
    A collection of values returned by getTargetGroups.
    """
    def __init__(__self__, id=None, lists=None, result_output_file=None, target_group_id=None, target_group_name=None, vpc_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if target_group_id and not isinstance(target_group_id, str):
            raise TypeError("Expected argument 'target_group_id' to be a str")
        pulumi.set(__self__, "target_group_id", target_group_id)
        if target_group_name and not isinstance(target_group_name, str):
            raise TypeError("Expected argument 'target_group_name' to be a str")
        pulumi.set(__self__, "target_group_name", target_group_name)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetTargetGroupsListResult']:
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> Optional[str]:
        return pulumi.get(self, "target_group_id")

    @property
    @pulumi.getter(name="targetGroupName")
    def target_group_name(self) -> Optional[str]:
        return pulumi.get(self, "target_group_name")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        return pulumi.get(self, "vpc_id")


class AwaitableGetTargetGroupsResult(GetTargetGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTargetGroupsResult(
            id=self.id,
            lists=self.lists,
            result_output_file=self.result_output_file,
            target_group_id=self.target_group_id,
            target_group_name=self.target_group_name,
            vpc_id=self.vpc_id)


def get_target_groups(result_output_file: Optional[str] = None,
                      target_group_id: Optional[str] = None,
                      target_group_name: Optional[str] = None,
                      vpc_id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTargetGroupsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['resultOutputFile'] = result_output_file
    __args__['targetGroupId'] = target_group_id
    __args__['targetGroupName'] = target_group_name
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Clb/getTargetGroups:getTargetGroups', __args__, opts=opts, typ=GetTargetGroupsResult).value

    return AwaitableGetTargetGroupsResult(
        id=pulumi.get(__ret__, 'id'),
        lists=pulumi.get(__ret__, 'lists'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        target_group_id=pulumi.get(__ret__, 'target_group_id'),
        target_group_name=pulumi.get(__ret__, 'target_group_name'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))


@_utilities.lift_output_func(get_target_groups)
def get_target_groups_output(result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                             target_group_id: Optional[pulumi.Input[Optional[str]]] = None,
                             target_group_name: Optional[pulumi.Input[Optional[str]]] = None,
                             vpc_id: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTargetGroupsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
