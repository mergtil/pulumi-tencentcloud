# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetListenerRulesResult',
    'AwaitableGetListenerRulesResult',
    'get_listener_rules',
    'get_listener_rules_output',
]

@pulumi.output_type
class GetListenerRulesResult:
    """
    A collection of values returned by getListenerRules.
    """
    def __init__(__self__, clb_id=None, domain=None, id=None, listener_id=None, result_output_file=None, rule_id=None, rule_lists=None, scheduler=None, url=None):
        if clb_id and not isinstance(clb_id, str):
            raise TypeError("Expected argument 'clb_id' to be a str")
        pulumi.set(__self__, "clb_id", clb_id)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if listener_id and not isinstance(listener_id, str):
            raise TypeError("Expected argument 'listener_id' to be a str")
        pulumi.set(__self__, "listener_id", listener_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if rule_lists and not isinstance(rule_lists, list):
            raise TypeError("Expected argument 'rule_lists' to be a list")
        pulumi.set(__self__, "rule_lists", rule_lists)
        if scheduler and not isinstance(scheduler, str):
            raise TypeError("Expected argument 'scheduler' to be a str")
        pulumi.set(__self__, "scheduler", scheduler)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> str:
        return pulumi.get(self, "clb_id")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[str]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="ruleLists")
    def rule_lists(self) -> Sequence['outputs.GetListenerRulesRuleListResult']:
        return pulumi.get(self, "rule_lists")

    @property
    @pulumi.getter
    def scheduler(self) -> Optional[str]:
        return pulumi.get(self, "scheduler")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


class AwaitableGetListenerRulesResult(GetListenerRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetListenerRulesResult(
            clb_id=self.clb_id,
            domain=self.domain,
            id=self.id,
            listener_id=self.listener_id,
            result_output_file=self.result_output_file,
            rule_id=self.rule_id,
            rule_lists=self.rule_lists,
            scheduler=self.scheduler,
            url=self.url)


def get_listener_rules(clb_id: Optional[str] = None,
                       domain: Optional[str] = None,
                       listener_id: Optional[str] = None,
                       result_output_file: Optional[str] = None,
                       rule_id: Optional[str] = None,
                       scheduler: Optional[str] = None,
                       url: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetListenerRulesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clbId'] = clb_id
    __args__['domain'] = domain
    __args__['listenerId'] = listener_id
    __args__['resultOutputFile'] = result_output_file
    __args__['ruleId'] = rule_id
    __args__['scheduler'] = scheduler
    __args__['url'] = url
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Clb/getListenerRules:getListenerRules', __args__, opts=opts, typ=GetListenerRulesResult).value

    return AwaitableGetListenerRulesResult(
        clb_id=pulumi.get(__ret__, 'clb_id'),
        domain=pulumi.get(__ret__, 'domain'),
        id=pulumi.get(__ret__, 'id'),
        listener_id=pulumi.get(__ret__, 'listener_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        rule_lists=pulumi.get(__ret__, 'rule_lists'),
        scheduler=pulumi.get(__ret__, 'scheduler'),
        url=pulumi.get(__ret__, 'url'))


@_utilities.lift_output_func(get_listener_rules)
def get_listener_rules_output(clb_id: Optional[pulumi.Input[str]] = None,
                              domain: Optional[pulumi.Input[Optional[str]]] = None,
                              listener_id: Optional[pulumi.Input[str]] = None,
                              result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                              rule_id: Optional[pulumi.Input[Optional[str]]] = None,
                              scheduler: Optional[pulumi.Input[Optional[str]]] = None,
                              url: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetListenerRulesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
