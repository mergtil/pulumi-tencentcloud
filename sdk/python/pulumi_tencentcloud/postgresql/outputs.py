# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'InstanceBackupPlan',
    'InstanceDbNodeSet',
    'ParameterTemplateModifyParamEntrySet',
    'GetBackupDownloadUrlsBackupDownloadRestrictionResult',
    'GetBaseBackupsBaseBackupSetResult',
    'GetBaseBackupsFilterResult',
    'GetDbInstanceClassesClassInfoSetResult',
    'GetDbInstanceVersionsVersionSetResult',
    'GetDefaultParametersParamInfoSetResult',
    'GetDefaultParametersParamInfoSetSpecRelationSetResult',
    'GetDefaultParametersParamInfoSetVersionRelationSetResult',
    'GetInstancesInstanceListResult',
    'GetLogBackupsFilterResult',
    'GetLogBackupsLogBackupSetResult',
    'GetParameterTemplatesFilterResult',
    'GetParameterTemplatesListResult',
    'GetReadonlyGroupsFilterResult',
    'GetReadonlyGroupsReadOnlyGroupListResult',
    'GetReadonlyGroupsReadOnlyGroupListDbInstanceNetInfoResult',
    'GetReadonlyGroupsReadOnlyGroupListNetworkAccessListResult',
    'GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListResult',
    'GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListDbInstanceNetInfoResult',
    'GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListDbNodeSetResult',
    'GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListNetworkAccessListResult',
    'GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListTagListResult',
    'GetRegionsRegionSetResult',
    'GetSpecinfosListResult',
    'GetXlogsListResult',
    'GetZonesZoneSetResult',
]

@pulumi.output_type
class InstanceBackupPlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupPeriods":
            suggest = "backup_periods"
        elif key == "baseBackupRetentionPeriod":
            suggest = "base_backup_retention_period"
        elif key == "maxBackupStartTime":
            suggest = "max_backup_start_time"
        elif key == "minBackupStartTime":
            suggest = "min_backup_start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceBackupPlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceBackupPlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceBackupPlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_periods: Optional[Sequence[str]] = None,
                 base_backup_retention_period: Optional[int] = None,
                 max_backup_start_time: Optional[str] = None,
                 min_backup_start_time: Optional[str] = None):
        if backup_periods is not None:
            pulumi.set(__self__, "backup_periods", backup_periods)
        if base_backup_retention_period is not None:
            pulumi.set(__self__, "base_backup_retention_period", base_backup_retention_period)
        if max_backup_start_time is not None:
            pulumi.set(__self__, "max_backup_start_time", max_backup_start_time)
        if min_backup_start_time is not None:
            pulumi.set(__self__, "min_backup_start_time", min_backup_start_time)

    @property
    @pulumi.getter(name="backupPeriods")
    def backup_periods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "backup_periods")

    @property
    @pulumi.getter(name="baseBackupRetentionPeriod")
    def base_backup_retention_period(self) -> Optional[int]:
        return pulumi.get(self, "base_backup_retention_period")

    @property
    @pulumi.getter(name="maxBackupStartTime")
    def max_backup_start_time(self) -> Optional[str]:
        return pulumi.get(self, "max_backup_start_time")

    @property
    @pulumi.getter(name="minBackupStartTime")
    def min_backup_start_time(self) -> Optional[str]:
        return pulumi.get(self, "min_backup_start_time")


@pulumi.output_type
class InstanceDbNodeSet(dict):
    def __init__(__self__, *,
                 zone: str,
                 role: Optional[str] = None):
        pulumi.set(__self__, "zone", zone)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")


@pulumi.output_type
class ParameterTemplateModifyParamEntrySet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expectedValue":
            suggest = "expected_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ParameterTemplateModifyParamEntrySet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ParameterTemplateModifyParamEntrySet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ParameterTemplateModifyParamEntrySet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expected_value: str,
                 name: str):
        pulumi.set(__self__, "expected_value", expected_value)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="expectedValue")
    def expected_value(self) -> str:
        return pulumi.get(self, "expected_value")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetBackupDownloadUrlsBackupDownloadRestrictionResult(dict):
    def __init__(__self__, *,
                 ip_restriction_effect: Optional[str] = None,
                 ip_sets: Optional[Sequence[str]] = None,
                 restriction_type: Optional[str] = None,
                 vpc_id_sets: Optional[Sequence[str]] = None,
                 vpc_restriction_effect: Optional[str] = None):
        if ip_restriction_effect is not None:
            pulumi.set(__self__, "ip_restriction_effect", ip_restriction_effect)
        if ip_sets is not None:
            pulumi.set(__self__, "ip_sets", ip_sets)
        if restriction_type is not None:
            pulumi.set(__self__, "restriction_type", restriction_type)
        if vpc_id_sets is not None:
            pulumi.set(__self__, "vpc_id_sets", vpc_id_sets)
        if vpc_restriction_effect is not None:
            pulumi.set(__self__, "vpc_restriction_effect", vpc_restriction_effect)

    @property
    @pulumi.getter(name="ipRestrictionEffect")
    def ip_restriction_effect(self) -> Optional[str]:
        return pulumi.get(self, "ip_restriction_effect")

    @property
    @pulumi.getter(name="ipSets")
    def ip_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_sets")

    @property
    @pulumi.getter(name="restrictionType")
    def restriction_type(self) -> Optional[str]:
        return pulumi.get(self, "restriction_type")

    @property
    @pulumi.getter(name="vpcIdSets")
    def vpc_id_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "vpc_id_sets")

    @property
    @pulumi.getter(name="vpcRestrictionEffect")
    def vpc_restriction_effect(self) -> Optional[str]:
        return pulumi.get(self, "vpc_restriction_effect")


@pulumi.output_type
class GetBaseBackupsBaseBackupSetResult(dict):
    def __init__(__self__, *,
                 backup_method: str,
                 backup_mode: str,
                 db_instance_id: str,
                 expire_time: str,
                 finish_time: str,
                 id: str,
                 name: str,
                 size: int,
                 start_time: str,
                 state: str):
        pulumi.set(__self__, "backup_method", backup_method)
        pulumi.set(__self__, "backup_mode", backup_mode)
        pulumi.set(__self__, "db_instance_id", db_instance_id)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "finish_time", finish_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="backupMethod")
    def backup_method(self) -> str:
        return pulumi.get(self, "backup_method")

    @property
    @pulumi.getter(name="backupMode")
    def backup_mode(self) -> str:
        return pulumi.get(self, "backup_mode")

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> str:
        return pulumi.get(self, "db_instance_id")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="finishTime")
    def finish_time(self) -> str:
        return pulumi.get(self, "finish_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetBaseBackupsFilterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDbInstanceClassesClassInfoSetResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 max_storage: int,
                 memory: int,
                 min_storage: int,
                 qps: int,
                 spec_code: str):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "max_storage", max_storage)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "min_storage", min_storage)
        pulumi.set(__self__, "qps", qps)
        pulumi.set(__self__, "spec_code", spec_code)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="maxStorage")
    def max_storage(self) -> int:
        return pulumi.get(self, "max_storage")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="minStorage")
    def min_storage(self) -> int:
        return pulumi.get(self, "min_storage")

    @property
    @pulumi.getter
    def qps(self) -> int:
        return pulumi.get(self, "qps")

    @property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> str:
        return pulumi.get(self, "spec_code")


@pulumi.output_type
class GetDbInstanceVersionsVersionSetResult(dict):
    def __init__(__self__, *,
                 available_upgrade_targets: Sequence[str],
                 db_engine: str,
                 db_kernel_version: str,
                 db_major_version: str,
                 db_version: str,
                 status: str,
                 supported_feature_names: Sequence[str]):
        pulumi.set(__self__, "available_upgrade_targets", available_upgrade_targets)
        pulumi.set(__self__, "db_engine", db_engine)
        pulumi.set(__self__, "db_kernel_version", db_kernel_version)
        pulumi.set(__self__, "db_major_version", db_major_version)
        pulumi.set(__self__, "db_version", db_version)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "supported_feature_names", supported_feature_names)

    @property
    @pulumi.getter(name="availableUpgradeTargets")
    def available_upgrade_targets(self) -> Sequence[str]:
        return pulumi.get(self, "available_upgrade_targets")

    @property
    @pulumi.getter(name="dbEngine")
    def db_engine(self) -> str:
        return pulumi.get(self, "db_engine")

    @property
    @pulumi.getter(name="dbKernelVersion")
    def db_kernel_version(self) -> str:
        return pulumi.get(self, "db_kernel_version")

    @property
    @pulumi.getter(name="dbMajorVersion")
    def db_major_version(self) -> str:
        return pulumi.get(self, "db_major_version")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> str:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportedFeatureNames")
    def supported_feature_names(self) -> Sequence[str]:
        return pulumi.get(self, "supported_feature_names")


@pulumi.output_type
class GetDefaultParametersParamInfoSetResult(dict):
    def __init__(__self__, *,
                 advanced: bool,
                 classification_cn: str,
                 classification_en: str,
                 current_value: str,
                 default_value: str,
                 enum_values: Sequence[str],
                 id: int,
                 last_modify_time: str,
                 max: float,
                 min: float,
                 name: str,
                 need_reboot: bool,
                 param_description_ch: str,
                 param_description_en: str,
                 param_value_type: str,
                 spec_related: bool,
                 spec_relation_sets: Sequence['outputs.GetDefaultParametersParamInfoSetSpecRelationSetResult'],
                 standby_related: int,
                 unit: str,
                 version_relation_sets: Sequence['outputs.GetDefaultParametersParamInfoSetVersionRelationSetResult']):
        pulumi.set(__self__, "advanced", advanced)
        pulumi.set(__self__, "classification_cn", classification_cn)
        pulumi.set(__self__, "classification_en", classification_en)
        pulumi.set(__self__, "current_value", current_value)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "enum_values", enum_values)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_modify_time", last_modify_time)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "need_reboot", need_reboot)
        pulumi.set(__self__, "param_description_ch", param_description_ch)
        pulumi.set(__self__, "param_description_en", param_description_en)
        pulumi.set(__self__, "param_value_type", param_value_type)
        pulumi.set(__self__, "spec_related", spec_related)
        pulumi.set(__self__, "spec_relation_sets", spec_relation_sets)
        pulumi.set(__self__, "standby_related", standby_related)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "version_relation_sets", version_relation_sets)

    @property
    @pulumi.getter
    def advanced(self) -> bool:
        return pulumi.get(self, "advanced")

    @property
    @pulumi.getter(name="classificationCn")
    def classification_cn(self) -> str:
        return pulumi.get(self, "classification_cn")

    @property
    @pulumi.getter(name="classificationEn")
    def classification_en(self) -> str:
        return pulumi.get(self, "classification_en")

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> str:
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="enumValues")
    def enum_values(self) -> Sequence[str]:
        return pulumi.get(self, "enum_values")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModifyTime")
    def last_modify_time(self) -> str:
        return pulumi.get(self, "last_modify_time")

    @property
    @pulumi.getter
    def max(self) -> float:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> float:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="needReboot")
    def need_reboot(self) -> bool:
        return pulumi.get(self, "need_reboot")

    @property
    @pulumi.getter(name="paramDescriptionCh")
    def param_description_ch(self) -> str:
        return pulumi.get(self, "param_description_ch")

    @property
    @pulumi.getter(name="paramDescriptionEn")
    def param_description_en(self) -> str:
        return pulumi.get(self, "param_description_en")

    @property
    @pulumi.getter(name="paramValueType")
    def param_value_type(self) -> str:
        return pulumi.get(self, "param_value_type")

    @property
    @pulumi.getter(name="specRelated")
    def spec_related(self) -> bool:
        return pulumi.get(self, "spec_related")

    @property
    @pulumi.getter(name="specRelationSets")
    def spec_relation_sets(self) -> Sequence['outputs.GetDefaultParametersParamInfoSetSpecRelationSetResult']:
        return pulumi.get(self, "spec_relation_sets")

    @property
    @pulumi.getter(name="standbyRelated")
    def standby_related(self) -> int:
        return pulumi.get(self, "standby_related")

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter(name="versionRelationSets")
    def version_relation_sets(self) -> Sequence['outputs.GetDefaultParametersParamInfoSetVersionRelationSetResult']:
        return pulumi.get(self, "version_relation_sets")


@pulumi.output_type
class GetDefaultParametersParamInfoSetSpecRelationSetResult(dict):
    def __init__(__self__, *,
                 enum_values: Sequence[str],
                 max: float,
                 memory: str,
                 min: float,
                 name: str,
                 unit: str,
                 value: str):
        pulumi.set(__self__, "enum_values", enum_values)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="enumValues")
    def enum_values(self) -> Sequence[str]:
        return pulumi.get(self, "enum_values")

    @property
    @pulumi.getter
    def max(self) -> float:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def memory(self) -> str:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def min(self) -> float:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDefaultParametersParamInfoSetVersionRelationSetResult(dict):
    def __init__(__self__, *,
                 db_kernel_version: str,
                 enum_values: Sequence[str],
                 max: float,
                 min: float,
                 name: str,
                 unit: str,
                 value: str):
        pulumi.set(__self__, "db_kernel_version", db_kernel_version)
        pulumi.set(__self__, "enum_values", enum_values)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="dbKernelVersion")
    def db_kernel_version(self) -> str:
        return pulumi.get(self, "db_kernel_version")

    @property
    @pulumi.getter(name="enumValues")
    def enum_values(self) -> Sequence[str]:
        return pulumi.get(self, "enum_values")

    @property
    @pulumi.getter
    def max(self) -> float:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> float:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def unit(self) -> str:
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetInstancesInstanceListResult(dict):
    def __init__(__self__, *,
                 auto_renew_flag: int,
                 availability_zone: str,
                 charge_type: str,
                 charset: str,
                 create_time: str,
                 engine_version: str,
                 id: str,
                 memory: int,
                 name: str,
                 private_access_ip: str,
                 private_access_port: int,
                 project_id: int,
                 public_access_host: str,
                 public_access_port: int,
                 public_access_switch: bool,
                 root_user: str,
                 storage: int,
                 subnet_id: str,
                 tags: Mapping[str, Any],
                 vpc_id: str):
        pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "charset", charset)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_access_ip", private_access_ip)
        pulumi.set(__self__, "private_access_port", private_access_port)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "public_access_host", public_access_host)
        pulumi.set(__self__, "public_access_port", public_access_port)
        pulumi.set(__self__, "public_access_switch", public_access_switch)
        pulumi.set(__self__, "root_user", root_user)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> int:
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter
    def charset(self) -> str:
        return pulumi.get(self, "charset")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateAccessIp")
    def private_access_ip(self) -> str:
        return pulumi.get(self, "private_access_ip")

    @property
    @pulumi.getter(name="privateAccessPort")
    def private_access_port(self) -> int:
        return pulumi.get(self, "private_access_port")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="publicAccessHost")
    def public_access_host(self) -> str:
        return pulumi.get(self, "public_access_host")

    @property
    @pulumi.getter(name="publicAccessPort")
    def public_access_port(self) -> int:
        return pulumi.get(self, "public_access_port")

    @property
    @pulumi.getter(name="publicAccessSwitch")
    def public_access_switch(self) -> bool:
        return pulumi.get(self, "public_access_switch")

    @property
    @pulumi.getter(name="rootUser")
    def root_user(self) -> str:
        return pulumi.get(self, "root_user")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetLogBackupsFilterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetLogBackupsLogBackupSetResult(dict):
    def __init__(__self__, *,
                 backup_method: str,
                 backup_mode: str,
                 db_instance_id: str,
                 expire_time: str,
                 finish_time: str,
                 id: str,
                 name: str,
                 size: int,
                 start_time: str,
                 state: str):
        pulumi.set(__self__, "backup_method", backup_method)
        pulumi.set(__self__, "backup_mode", backup_mode)
        pulumi.set(__self__, "db_instance_id", db_instance_id)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "finish_time", finish_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="backupMethod")
    def backup_method(self) -> str:
        return pulumi.get(self, "backup_method")

    @property
    @pulumi.getter(name="backupMode")
    def backup_mode(self) -> str:
        return pulumi.get(self, "backup_mode")

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> str:
        return pulumi.get(self, "db_instance_id")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="finishTime")
    def finish_time(self) -> str:
        return pulumi.get(self, "finish_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetParameterTemplatesFilterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetParameterTemplatesListResult(dict):
    def __init__(__self__, *,
                 db_engine: str,
                 db_major_version: str,
                 template_description: str,
                 template_id: str,
                 template_name: str):
        pulumi.set(__self__, "db_engine", db_engine)
        pulumi.set(__self__, "db_major_version", db_major_version)
        pulumi.set(__self__, "template_description", template_description)
        pulumi.set(__self__, "template_id", template_id)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="dbEngine")
    def db_engine(self) -> str:
        return pulumi.get(self, "db_engine")

    @property
    @pulumi.getter(name="dbMajorVersion")
    def db_major_version(self) -> str:
        return pulumi.get(self, "db_major_version")

    @property
    @pulumi.getter(name="templateDescription")
    def template_description(self) -> str:
        return pulumi.get(self, "template_description")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> str:
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class GetReadonlyGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetReadonlyGroupsReadOnlyGroupListResult(dict):
    def __init__(__self__, *,
                 db_instance_net_infos: Sequence['outputs.GetReadonlyGroupsReadOnlyGroupListDbInstanceNetInfoResult'],
                 master_db_instance_id: str,
                 max_replay_lag: float,
                 max_replay_latency: int,
                 min_delay_eliminate_reserve: int,
                 network_access_lists: Sequence['outputs.GetReadonlyGroupsReadOnlyGroupListNetworkAccessListResult'],
                 project_id: int,
                 read_only_db_instance_lists: Sequence['outputs.GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListResult'],
                 read_only_group_id: str,
                 read_only_group_name: str,
                 rebalance: int,
                 region: str,
                 replay_lag_eliminate: int,
                 replay_latency_eliminate: int,
                 status: str,
                 subnet_id: str,
                 vpc_id: str,
                 zone: str):
        pulumi.set(__self__, "db_instance_net_infos", db_instance_net_infos)
        pulumi.set(__self__, "master_db_instance_id", master_db_instance_id)
        pulumi.set(__self__, "max_replay_lag", max_replay_lag)
        pulumi.set(__self__, "max_replay_latency", max_replay_latency)
        pulumi.set(__self__, "min_delay_eliminate_reserve", min_delay_eliminate_reserve)
        pulumi.set(__self__, "network_access_lists", network_access_lists)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "read_only_db_instance_lists", read_only_db_instance_lists)
        pulumi.set(__self__, "read_only_group_id", read_only_group_id)
        pulumi.set(__self__, "read_only_group_name", read_only_group_name)
        pulumi.set(__self__, "rebalance", rebalance)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "replay_lag_eliminate", replay_lag_eliminate)
        pulumi.set(__self__, "replay_latency_eliminate", replay_latency_eliminate)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="dbInstanceNetInfos")
    def db_instance_net_infos(self) -> Sequence['outputs.GetReadonlyGroupsReadOnlyGroupListDbInstanceNetInfoResult']:
        return pulumi.get(self, "db_instance_net_infos")

    @property
    @pulumi.getter(name="masterDbInstanceId")
    def master_db_instance_id(self) -> str:
        return pulumi.get(self, "master_db_instance_id")

    @property
    @pulumi.getter(name="maxReplayLag")
    def max_replay_lag(self) -> float:
        return pulumi.get(self, "max_replay_lag")

    @property
    @pulumi.getter(name="maxReplayLatency")
    def max_replay_latency(self) -> int:
        return pulumi.get(self, "max_replay_latency")

    @property
    @pulumi.getter(name="minDelayEliminateReserve")
    def min_delay_eliminate_reserve(self) -> int:
        return pulumi.get(self, "min_delay_eliminate_reserve")

    @property
    @pulumi.getter(name="networkAccessLists")
    def network_access_lists(self) -> Sequence['outputs.GetReadonlyGroupsReadOnlyGroupListNetworkAccessListResult']:
        return pulumi.get(self, "network_access_lists")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="readOnlyDbInstanceLists")
    def read_only_db_instance_lists(self) -> Sequence['outputs.GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListResult']:
        return pulumi.get(self, "read_only_db_instance_lists")

    @property
    @pulumi.getter(name="readOnlyGroupId")
    def read_only_group_id(self) -> str:
        return pulumi.get(self, "read_only_group_id")

    @property
    @pulumi.getter(name="readOnlyGroupName")
    def read_only_group_name(self) -> str:
        return pulumi.get(self, "read_only_group_name")

    @property
    @pulumi.getter
    def rebalance(self) -> int:
        return pulumi.get(self, "rebalance")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="replayLagEliminate")
    def replay_lag_eliminate(self) -> int:
        return pulumi.get(self, "replay_lag_eliminate")

    @property
    @pulumi.getter(name="replayLatencyEliminate")
    def replay_latency_eliminate(self) -> int:
        return pulumi.get(self, "replay_latency_eliminate")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetReadonlyGroupsReadOnlyGroupListDbInstanceNetInfoResult(dict):
    def __init__(__self__, *,
                 address: str,
                 ip: str,
                 net_type: str,
                 port: int,
                 protocol_type: str,
                 status: str,
                 subnet_id: str,
                 vpc_id: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "net_type", net_type)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="netType")
    def net_type(self) -> str:
        return pulumi.get(self, "net_type")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> str:
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetReadonlyGroupsReadOnlyGroupListNetworkAccessListResult(dict):
    def __init__(__self__, *,
                 resource_id: str,
                 resource_type: int,
                 subnet_id: str,
                 vip: str,
                 vip6: str,
                 vpc_id: str,
                 vpc_status: int,
                 vport: int):
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "vip6", vip6)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vpc_status", vpc_status)
        pulumi.set(__self__, "vport", vport)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> int:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def vip(self) -> str:
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter
    def vip6(self) -> str:
        return pulumi.get(self, "vip6")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpcStatus")
    def vpc_status(self) -> int:
        return pulumi.get(self, "vpc_status")

    @property
    @pulumi.getter
    def vport(self) -> int:
        return pulumi.get(self, "vport")


@pulumi.output_type
class GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListResult(dict):
    def __init__(__self__, *,
                 app_id: int,
                 auto_renew: int,
                 create_time: str,
                 db_charset: str,
                 db_engine: str,
                 db_engine_config: str,
                 db_instance_class: str,
                 db_instance_cpu: int,
                 db_instance_id: str,
                 db_instance_memory: int,
                 db_instance_name: str,
                 db_instance_net_infos: Sequence['outputs.GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListDbInstanceNetInfoResult'],
                 db_instance_status: str,
                 db_instance_storage: int,
                 db_instance_type: str,
                 db_instance_version: str,
                 db_kernel_version: str,
                 db_major_version: str,
                 db_node_sets: Sequence['outputs.GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListDbNodeSetResult'],
                 db_version: str,
                 expire_time: str,
                 is_support_tde: int,
                 isolated_time: str,
                 master_db_instance_id: str,
                 network_access_lists: Sequence['outputs.GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListNetworkAccessListResult'],
                 offline_time: str,
                 pay_type: str,
                 project_id: int,
                 read_only_instance_num: int,
                 region: str,
                 status_in_readonly_group: str,
                 subnet_id: str,
                 support_ipv6: int,
                 tag_lists: Sequence['outputs.GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListTagListResult'],
                 type: str,
                 uid: int,
                 update_time: str,
                 vpc_id: str,
                 zone: str):
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "auto_renew", auto_renew)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "db_charset", db_charset)
        pulumi.set(__self__, "db_engine", db_engine)
        pulumi.set(__self__, "db_engine_config", db_engine_config)
        pulumi.set(__self__, "db_instance_class", db_instance_class)
        pulumi.set(__self__, "db_instance_cpu", db_instance_cpu)
        pulumi.set(__self__, "db_instance_id", db_instance_id)
        pulumi.set(__self__, "db_instance_memory", db_instance_memory)
        pulumi.set(__self__, "db_instance_name", db_instance_name)
        pulumi.set(__self__, "db_instance_net_infos", db_instance_net_infos)
        pulumi.set(__self__, "db_instance_status", db_instance_status)
        pulumi.set(__self__, "db_instance_storage", db_instance_storage)
        pulumi.set(__self__, "db_instance_type", db_instance_type)
        pulumi.set(__self__, "db_instance_version", db_instance_version)
        pulumi.set(__self__, "db_kernel_version", db_kernel_version)
        pulumi.set(__self__, "db_major_version", db_major_version)
        pulumi.set(__self__, "db_node_sets", db_node_sets)
        pulumi.set(__self__, "db_version", db_version)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "is_support_tde", is_support_tde)
        pulumi.set(__self__, "isolated_time", isolated_time)
        pulumi.set(__self__, "master_db_instance_id", master_db_instance_id)
        pulumi.set(__self__, "network_access_lists", network_access_lists)
        pulumi.set(__self__, "offline_time", offline_time)
        pulumi.set(__self__, "pay_type", pay_type)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "read_only_instance_num", read_only_instance_num)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "status_in_readonly_group", status_in_readonly_group)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "support_ipv6", support_ipv6)
        pulumi.set(__self__, "tag_lists", tag_lists)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uid", uid)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> int:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> int:
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dbCharset")
    def db_charset(self) -> str:
        return pulumi.get(self, "db_charset")

    @property
    @pulumi.getter(name="dbEngine")
    def db_engine(self) -> str:
        return pulumi.get(self, "db_engine")

    @property
    @pulumi.getter(name="dbEngineConfig")
    def db_engine_config(self) -> str:
        return pulumi.get(self, "db_engine_config")

    @property
    @pulumi.getter(name="dbInstanceClass")
    def db_instance_class(self) -> str:
        return pulumi.get(self, "db_instance_class")

    @property
    @pulumi.getter(name="dbInstanceCpu")
    def db_instance_cpu(self) -> int:
        return pulumi.get(self, "db_instance_cpu")

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> str:
        return pulumi.get(self, "db_instance_id")

    @property
    @pulumi.getter(name="dbInstanceMemory")
    def db_instance_memory(self) -> int:
        return pulumi.get(self, "db_instance_memory")

    @property
    @pulumi.getter(name="dbInstanceName")
    def db_instance_name(self) -> str:
        return pulumi.get(self, "db_instance_name")

    @property
    @pulumi.getter(name="dbInstanceNetInfos")
    def db_instance_net_infos(self) -> Sequence['outputs.GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListDbInstanceNetInfoResult']:
        return pulumi.get(self, "db_instance_net_infos")

    @property
    @pulumi.getter(name="dbInstanceStatus")
    def db_instance_status(self) -> str:
        return pulumi.get(self, "db_instance_status")

    @property
    @pulumi.getter(name="dbInstanceStorage")
    def db_instance_storage(self) -> int:
        return pulumi.get(self, "db_instance_storage")

    @property
    @pulumi.getter(name="dbInstanceType")
    def db_instance_type(self) -> str:
        return pulumi.get(self, "db_instance_type")

    @property
    @pulumi.getter(name="dbInstanceVersion")
    def db_instance_version(self) -> str:
        return pulumi.get(self, "db_instance_version")

    @property
    @pulumi.getter(name="dbKernelVersion")
    def db_kernel_version(self) -> str:
        return pulumi.get(self, "db_kernel_version")

    @property
    @pulumi.getter(name="dbMajorVersion")
    def db_major_version(self) -> str:
        return pulumi.get(self, "db_major_version")

    @property
    @pulumi.getter(name="dbNodeSets")
    def db_node_sets(self) -> Sequence['outputs.GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListDbNodeSetResult']:
        return pulumi.get(self, "db_node_sets")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> str:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="isSupportTDE")
    def is_support_tde(self) -> int:
        return pulumi.get(self, "is_support_tde")

    @property
    @pulumi.getter(name="isolatedTime")
    def isolated_time(self) -> str:
        return pulumi.get(self, "isolated_time")

    @property
    @pulumi.getter(name="masterDbInstanceId")
    def master_db_instance_id(self) -> str:
        return pulumi.get(self, "master_db_instance_id")

    @property
    @pulumi.getter(name="networkAccessLists")
    def network_access_lists(self) -> Sequence['outputs.GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListNetworkAccessListResult']:
        return pulumi.get(self, "network_access_lists")

    @property
    @pulumi.getter(name="offlineTime")
    def offline_time(self) -> str:
        return pulumi.get(self, "offline_time")

    @property
    @pulumi.getter(name="payType")
    def pay_type(self) -> str:
        return pulumi.get(self, "pay_type")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="readOnlyInstanceNum")
    def read_only_instance_num(self) -> int:
        return pulumi.get(self, "read_only_instance_num")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="statusInReadonlyGroup")
    def status_in_readonly_group(self) -> str:
        return pulumi.get(self, "status_in_readonly_group")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="supportIpv6")
    def support_ipv6(self) -> int:
        return pulumi.get(self, "support_ipv6")

    @property
    @pulumi.getter(name="tagLists")
    def tag_lists(self) -> Sequence['outputs.GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListTagListResult']:
        return pulumi.get(self, "tag_lists")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uid(self) -> int:
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListDbInstanceNetInfoResult(dict):
    def __init__(__self__, *,
                 address: str,
                 ip: str,
                 net_type: str,
                 port: int,
                 protocol_type: str,
                 status: str,
                 subnet_id: str,
                 vpc_id: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "net_type", net_type)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="netType")
    def net_type(self) -> str:
        return pulumi.get(self, "net_type")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> str:
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListDbNodeSetResult(dict):
    def __init__(__self__, *,
                 role: str,
                 zone: str):
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListNetworkAccessListResult(dict):
    def __init__(__self__, *,
                 resource_id: str,
                 resource_type: int,
                 subnet_id: str,
                 vip: str,
                 vip6: str,
                 vpc_id: str,
                 vpc_status: int,
                 vport: int):
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "vip6", vip6)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vpc_status", vpc_status)
        pulumi.set(__self__, "vport", vport)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> int:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def vip(self) -> str:
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter
    def vip6(self) -> str:
        return pulumi.get(self, "vip6")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpcStatus")
    def vpc_status(self) -> int:
        return pulumi.get(self, "vpc_status")

    @property
    @pulumi.getter
    def vport(self) -> int:
        return pulumi.get(self, "vport")


@pulumi.output_type
class GetReadonlyGroupsReadOnlyGroupListReadOnlyDbInstanceListTagListResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetRegionsRegionSetResult(dict):
    def __init__(__self__, *,
                 region: str,
                 region_id: int,
                 region_name: str,
                 region_state: str,
                 support_international: int):
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "region_state", region_state)
        pulumi.set(__self__, "support_international", support_international)

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="regionState")
    def region_state(self) -> str:
        return pulumi.get(self, "region_state")

    @property
    @pulumi.getter(name="supportInternational")
    def support_international(self) -> int:
        return pulumi.get(self, "support_international")


@pulumi.output_type
class GetSpecinfosListResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 engine_version: str,
                 engine_version_name: str,
                 id: str,
                 memory: int,
                 qps: int,
                 storage_max: int,
                 storage_min: int):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "engine_version_name", engine_version_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "qps", qps)
        pulumi.set(__self__, "storage_max", storage_max)
        pulumi.set(__self__, "storage_min", storage_min)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="engineVersionName")
    def engine_version_name(self) -> str:
        return pulumi.get(self, "engine_version_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def qps(self) -> int:
        return pulumi.get(self, "qps")

    @property
    @pulumi.getter(name="storageMax")
    def storage_max(self) -> int:
        return pulumi.get(self, "storage_max")

    @property
    @pulumi.getter(name="storageMin")
    def storage_min(self) -> int:
        return pulumi.get(self, "storage_min")


@pulumi.output_type
class GetXlogsListResult(dict):
    def __init__(__self__, *,
                 end_time: str,
                 external_addr: str,
                 id: int,
                 internal_addr: str,
                 size: int,
                 start_time: str):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "external_addr", external_addr)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "internal_addr", internal_addr)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="externalAddr")
    def external_addr(self) -> str:
        return pulumi.get(self, "external_addr")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalAddr")
    def internal_addr(self) -> str:
        return pulumi.get(self, "internal_addr")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetZonesZoneSetResult(dict):
    def __init__(__self__, *,
                 standby_zone_sets: Sequence[str],
                 zone: str,
                 zone_id: int,
                 zone_name: str,
                 zone_state: str,
                 zone_support_ipv6: int):
        pulumi.set(__self__, "standby_zone_sets", standby_zone_sets)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)
        pulumi.set(__self__, "zone_state", zone_state)
        pulumi.set(__self__, "zone_support_ipv6", zone_support_ipv6)

    @property
    @pulumi.getter(name="standbyZoneSets")
    def standby_zone_sets(self) -> Sequence[str]:
        return pulumi.get(self, "standby_zone_sets")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        return pulumi.get(self, "zone_name")

    @property
    @pulumi.getter(name="zoneState")
    def zone_state(self) -> str:
        return pulumi.get(self, "zone_state")

    @property
    @pulumi.getter(name="zoneSupportIpv6")
    def zone_support_ipv6(self) -> int:
        return pulumi.get(self, "zone_support_ipv6")


