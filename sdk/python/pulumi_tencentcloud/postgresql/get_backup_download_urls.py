# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetBackupDownloadUrlsResult',
    'AwaitableGetBackupDownloadUrlsResult',
    'get_backup_download_urls',
    'get_backup_download_urls_output',
]

@pulumi.output_type
class GetBackupDownloadUrlsResult:
    """
    A collection of values returned by getBackupDownloadUrls.
    """
    def __init__(__self__, backup_download_restriction=None, backup_download_url=None, backup_id=None, backup_type=None, db_instance_id=None, id=None, result_output_file=None, url_expire_time=None):
        if backup_download_restriction and not isinstance(backup_download_restriction, dict):
            raise TypeError("Expected argument 'backup_download_restriction' to be a dict")
        pulumi.set(__self__, "backup_download_restriction", backup_download_restriction)
        if backup_download_url and not isinstance(backup_download_url, str):
            raise TypeError("Expected argument 'backup_download_url' to be a str")
        pulumi.set(__self__, "backup_download_url", backup_download_url)
        if backup_id and not isinstance(backup_id, str):
            raise TypeError("Expected argument 'backup_id' to be a str")
        pulumi.set(__self__, "backup_id", backup_id)
        if backup_type and not isinstance(backup_type, str):
            raise TypeError("Expected argument 'backup_type' to be a str")
        pulumi.set(__self__, "backup_type", backup_type)
        if db_instance_id and not isinstance(db_instance_id, str):
            raise TypeError("Expected argument 'db_instance_id' to be a str")
        pulumi.set(__self__, "db_instance_id", db_instance_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if url_expire_time and not isinstance(url_expire_time, int):
            raise TypeError("Expected argument 'url_expire_time' to be a int")
        pulumi.set(__self__, "url_expire_time", url_expire_time)

    @property
    @pulumi.getter(name="backupDownloadRestriction")
    def backup_download_restriction(self) -> Optional['outputs.GetBackupDownloadUrlsBackupDownloadRestrictionResult']:
        return pulumi.get(self, "backup_download_restriction")

    @property
    @pulumi.getter(name="backupDownloadUrl")
    def backup_download_url(self) -> str:
        return pulumi.get(self, "backup_download_url")

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> str:
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> str:
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> str:
        return pulumi.get(self, "db_instance_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="urlExpireTime")
    def url_expire_time(self) -> Optional[int]:
        return pulumi.get(self, "url_expire_time")


class AwaitableGetBackupDownloadUrlsResult(GetBackupDownloadUrlsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupDownloadUrlsResult(
            backup_download_restriction=self.backup_download_restriction,
            backup_download_url=self.backup_download_url,
            backup_id=self.backup_id,
            backup_type=self.backup_type,
            db_instance_id=self.db_instance_id,
            id=self.id,
            result_output_file=self.result_output_file,
            url_expire_time=self.url_expire_time)


def get_backup_download_urls(backup_download_restriction: Optional[pulumi.InputType['GetBackupDownloadUrlsBackupDownloadRestrictionArgs']] = None,
                             backup_id: Optional[str] = None,
                             backup_type: Optional[str] = None,
                             db_instance_id: Optional[str] = None,
                             result_output_file: Optional[str] = None,
                             url_expire_time: Optional[int] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupDownloadUrlsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backupDownloadRestriction'] = backup_download_restriction
    __args__['backupId'] = backup_id
    __args__['backupType'] = backup_type
    __args__['dbInstanceId'] = db_instance_id
    __args__['resultOutputFile'] = result_output_file
    __args__['urlExpireTime'] = url_expire_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Postgresql/getBackupDownloadUrls:getBackupDownloadUrls', __args__, opts=opts, typ=GetBackupDownloadUrlsResult).value

    return AwaitableGetBackupDownloadUrlsResult(
        backup_download_restriction=pulumi.get(__ret__, 'backup_download_restriction'),
        backup_download_url=pulumi.get(__ret__, 'backup_download_url'),
        backup_id=pulumi.get(__ret__, 'backup_id'),
        backup_type=pulumi.get(__ret__, 'backup_type'),
        db_instance_id=pulumi.get(__ret__, 'db_instance_id'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        url_expire_time=pulumi.get(__ret__, 'url_expire_time'))


@_utilities.lift_output_func(get_backup_download_urls)
def get_backup_download_urls_output(backup_download_restriction: Optional[pulumi.Input[Optional[pulumi.InputType['GetBackupDownloadUrlsBackupDownloadRestrictionArgs']]]] = None,
                                    backup_id: Optional[pulumi.Input[str]] = None,
                                    backup_type: Optional[pulumi.Input[str]] = None,
                                    db_instance_id: Optional[pulumi.Input[str]] = None,
                                    result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                    url_expire_time: Optional[pulumi.Input[Optional[int]]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBackupDownloadUrlsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
