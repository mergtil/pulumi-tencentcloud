# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BackupDownloadRestrictionLimitVpc',
    'InstanceNodeInfo',
    'ParamTemplateParamDetail',
    'ParamTemplateParamsOverride',
    'GetBackupBackupSetResult',
    'GetBackupDownloadInfoBackupInfoResult',
    'GetBackupDownloadInfoLimitVpcResult',
    'GetInstanceNodeInfoProxyResult',
    'GetInstanceNodeInfoRediResult',
    'GetInstanceShardsInstanceShardResult',
    'GetInstanceTaskListTaskResult',
    'GetInstanceZoneInfoReplicaGroupResult',
    'GetInstanceZoneInfoReplicaGroupRedisNodeResult',
    'GetInstancesInstanceListResult',
    'GetInstancesInstanceListNodeInfoResult',
    'GetParamRecordsInstanceParamHistoryResult',
    'GetZoneConfigListResult',
]

@pulumi.output_type
class BackupDownloadRestrictionLimitVpc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpcLists":
            suggest = "vpc_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupDownloadRestrictionLimitVpc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupDownloadRestrictionLimitVpc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupDownloadRestrictionLimitVpc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: str,
                 vpc_lists: Sequence[str]):
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "vpc_lists", vpc_lists)

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="vpcLists")
    def vpc_lists(self) -> Sequence[str]:
        return pulumi.get(self, "vpc_lists")


@pulumi.output_type
class InstanceNodeInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceNodeInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceNodeInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceNodeInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[int] = None,
                 master: Optional[bool] = None,
                 zone_id: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if master is not None:
            pulumi.set(__self__, "master", master)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def master(self) -> Optional[bool]:
        return pulumi.get(self, "master")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[int]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class ParamTemplateParamDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentValue":
            suggest = "current_value"
        elif key == "enumValues":
            suggest = "enum_values"
        elif key == "needReboot":
            suggest = "need_reboot"
        elif key == "paramType":
            suggest = "param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ParamTemplateParamDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ParamTemplateParamDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ParamTemplateParamDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_value: Optional[str] = None,
                 default: Optional[str] = None,
                 description: Optional[str] = None,
                 enum_values: Optional[Sequence[str]] = None,
                 max: Optional[str] = None,
                 min: Optional[str] = None,
                 name: Optional[str] = None,
                 need_reboot: Optional[int] = None,
                 param_type: Optional[str] = None):
        if current_value is not None:
            pulumi.set(__self__, "current_value", current_value)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum_values is not None:
            pulumi.set(__self__, "enum_values", enum_values)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if need_reboot is not None:
            pulumi.set(__self__, "need_reboot", need_reboot)
        if param_type is not None:
            pulumi.set(__self__, "param_type", param_type)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> Optional[str]:
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter
    def default(self) -> Optional[str]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumValues")
    def enum_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "enum_values")

    @property
    @pulumi.getter
    def max(self) -> Optional[str]:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[str]:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="needReboot")
    def need_reboot(self) -> Optional[int]:
        return pulumi.get(self, "need_reboot")

    @property
    @pulumi.getter(name="paramType")
    def param_type(self) -> Optional[str]:
        return pulumi.get(self, "param_type")


@pulumi.output_type
class ParamTemplateParamsOverride(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBackupBackupSetResult(dict):
    def __init__(__self__, *,
                 backup_id: str,
                 backup_size: int,
                 backup_type: str,
                 end_time: str,
                 expire_time: str,
                 file_type: str,
                 full_backup: int,
                 instance_id: str,
                 instance_name: str,
                 instance_type: int,
                 locked: int,
                 region: str,
                 remark: str,
                 start_time: str,
                 status: int):
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "backup_size", backup_size)
        pulumi.set(__self__, "backup_type", backup_type)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "file_type", file_type)
        pulumi.set(__self__, "full_backup", full_backup)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "locked", locked)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> str:
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="backupSize")
    def backup_size(self) -> int:
        return pulumi.get(self, "backup_size")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> str:
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> str:
        return pulumi.get(self, "file_type")

    @property
    @pulumi.getter(name="fullBackup")
    def full_backup(self) -> int:
        return pulumi.get(self, "full_backup")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> int:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def locked(self) -> int:
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetBackupDownloadInfoBackupInfoResult(dict):
    def __init__(__self__, *,
                 download_url: str,
                 file_name: str,
                 file_size: int,
                 inner_download_url: str):
        pulumi.set(__self__, "download_url", download_url)
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "file_size", file_size)
        pulumi.set(__self__, "inner_download_url", inner_download_url)

    @property
    @pulumi.getter(name="downloadUrl")
    def download_url(self) -> str:
        return pulumi.get(self, "download_url")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> int:
        return pulumi.get(self, "file_size")

    @property
    @pulumi.getter(name="innerDownloadUrl")
    def inner_download_url(self) -> str:
        return pulumi.get(self, "inner_download_url")


@pulumi.output_type
class GetBackupDownloadInfoLimitVpcResult(dict):
    def __init__(__self__, *,
                 region: str,
                 vpc_lists: Sequence[str]):
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "vpc_lists", vpc_lists)

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="vpcLists")
    def vpc_lists(self) -> Sequence[str]:
        return pulumi.get(self, "vpc_lists")


@pulumi.output_type
class GetInstanceNodeInfoProxyResult(dict):
    def __init__(__self__, *,
                 node_id: str,
                 zone_id: int):
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetInstanceNodeInfoRediResult(dict):
    def __init__(__self__, *,
                 cluster_id: int,
                 node_id: str,
                 node_role: str,
                 zone_id: int):
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "node_role", node_role)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> int:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter(name="nodeRole")
    def node_role(self) -> str:
        return pulumi.get(self, "node_role")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetInstanceShardsInstanceShardResult(dict):
    def __init__(__self__, *,
                 connected: int,
                 keys: int,
                 role: int,
                 runid: str,
                 shard_id: str,
                 shard_name: str,
                 slots: str,
                 storage: int,
                 storage_slope: float):
        pulumi.set(__self__, "connected", connected)
        pulumi.set(__self__, "keys", keys)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "runid", runid)
        pulumi.set(__self__, "shard_id", shard_id)
        pulumi.set(__self__, "shard_name", shard_name)
        pulumi.set(__self__, "slots", slots)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "storage_slope", storage_slope)

    @property
    @pulumi.getter
    def connected(self) -> int:
        return pulumi.get(self, "connected")

    @property
    @pulumi.getter
    def keys(self) -> int:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter
    def role(self) -> int:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def runid(self) -> str:
        return pulumi.get(self, "runid")

    @property
    @pulumi.getter(name="shardId")
    def shard_id(self) -> str:
        return pulumi.get(self, "shard_id")

    @property
    @pulumi.getter(name="shardName")
    def shard_name(self) -> str:
        return pulumi.get(self, "shard_name")

    @property
    @pulumi.getter
    def slots(self) -> str:
        return pulumi.get(self, "slots")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="storageSlope")
    def storage_slope(self) -> float:
        return pulumi.get(self, "storage_slope")


@pulumi.output_type
class GetInstanceTaskListTaskResult(dict):
    def __init__(__self__, *,
                 end_time: str,
                 instance_id: str,
                 instance_name: str,
                 progress: float,
                 project_id: int,
                 result: int,
                 start_time: str,
                 task_id: int,
                 task_type: str):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "result", result)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "task_id", task_id)
        pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def progress(self) -> float:
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def result(self) -> int:
        return pulumi.get(self, "result")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> int:
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        return pulumi.get(self, "task_type")


@pulumi.output_type
class GetInstanceZoneInfoReplicaGroupResult(dict):
    def __init__(__self__, *,
                 group_id: int,
                 group_name: str,
                 redis_nodes: Sequence['outputs.GetInstanceZoneInfoReplicaGroupRedisNodeResult'],
                 role: str,
                 zone_id: str):
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "redis_nodes", redis_nodes)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="redisNodes")
    def redis_nodes(self) -> Sequence['outputs.GetInstanceZoneInfoReplicaGroupRedisNodeResult']:
        return pulumi.get(self, "redis_nodes")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetInstanceZoneInfoReplicaGroupRedisNodeResult(dict):
    def __init__(__self__, *,
                 keys: int,
                 node_id: str,
                 role: str,
                 slot: str,
                 status: str):
        pulumi.set(__self__, "keys", keys)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "slot", slot)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def keys(self) -> int:
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def slot(self) -> str:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetInstancesInstanceListResult(dict):
    def __init__(__self__, *,
                 charge_type: str,
                 create_time: str,
                 ip: str,
                 mem_size: int,
                 name: str,
                 node_infos: Sequence['outputs.GetInstancesInstanceListNodeInfoResult'],
                 port: int,
                 project_id: int,
                 redis_id: str,
                 redis_replicas_num: int,
                 redis_shard_num: int,
                 status: str,
                 subnet_id: str,
                 tags: Mapping[str, Any],
                 type: str,
                 type_id: int,
                 vpc_id: str,
                 zone: str):
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "mem_size", mem_size)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_infos", node_infos)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "redis_id", redis_id)
        pulumi.set(__self__, "redis_replicas_num", redis_replicas_num)
        pulumi.set(__self__, "redis_shard_num", redis_shard_num)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "type_id", type_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> int:
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeInfos")
    def node_infos(self) -> Sequence['outputs.GetInstancesInstanceListNodeInfoResult']:
        return pulumi.get(self, "node_infos")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="redisId")
    def redis_id(self) -> str:
        return pulumi.get(self, "redis_id")

    @property
    @pulumi.getter(name="redisReplicasNum")
    def redis_replicas_num(self) -> int:
        return pulumi.get(self, "redis_replicas_num")

    @property
    @pulumi.getter(name="redisShardNum")
    def redis_shard_num(self) -> int:
        return pulumi.get(self, "redis_shard_num")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> str:
        warnings.warn("""It has been deprecated from version 1.33.1. Please use 'type_id' instead.""", DeprecationWarning)
        pulumi.log.warn("""type is deprecated: It has been deprecated from version 1.33.1. Please use 'type_id' instead.""")

        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> int:
        return pulumi.get(self, "type_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetInstancesInstanceListNodeInfoResult(dict):
    def __init__(__self__, *,
                 id: int,
                 master: bool,
                 zone_id: int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "master", master)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def master(self) -> bool:
        return pulumi.get(self, "master")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetParamRecordsInstanceParamHistoryResult(dict):
    def __init__(__self__, *,
                 modify_time: str,
                 new_value: str,
                 param_name: str,
                 pre_value: str,
                 status: int):
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "pre_value", pre_value)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> str:
        return pulumi.get(self, "new_value")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="preValue")
    def pre_value(self) -> str:
        return pulumi.get(self, "pre_value")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetZoneConfigListResult(dict):
    def __init__(__self__, *,
                 mem_sizes: Sequence[int],
                 redis_replicas_nums: Sequence[int],
                 redis_shard_nums: Sequence[int],
                 shard_memories: Sequence[int],
                 type: str,
                 type_id: int,
                 version: str,
                 zone: str):
        pulumi.set(__self__, "mem_sizes", mem_sizes)
        pulumi.set(__self__, "redis_replicas_nums", redis_replicas_nums)
        pulumi.set(__self__, "redis_shard_nums", redis_shard_nums)
        pulumi.set(__self__, "shard_memories", shard_memories)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "type_id", type_id)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="memSizes")
    def mem_sizes(self) -> Sequence[int]:
        warnings.warn("""It has been deprecated from version 1.26.0. Use `shard_memories` instead.""", DeprecationWarning)
        pulumi.log.warn("""mem_sizes is deprecated: It has been deprecated from version 1.26.0. Use `shard_memories` instead.""")

        return pulumi.get(self, "mem_sizes")

    @property
    @pulumi.getter(name="redisReplicasNums")
    def redis_replicas_nums(self) -> Sequence[int]:
        return pulumi.get(self, "redis_replicas_nums")

    @property
    @pulumi.getter(name="redisShardNums")
    def redis_shard_nums(self) -> Sequence[int]:
        return pulumi.get(self, "redis_shard_nums")

    @property
    @pulumi.getter(name="shardMemories")
    def shard_memories(self) -> Sequence[int]:
        return pulumi.get(self, "shard_memories")

    @property
    @pulumi.getter
    def type(self) -> str:
        warnings.warn("""It has been deprecated from version 1.33.1. Please use 'type_id' instead.""", DeprecationWarning)
        pulumi.log.warn("""type is deprecated: It has been deprecated from version 1.33.1. Please use 'type_id' instead.""")

        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> int:
        return pulumi.get(self, "type_id")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


