# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'BackupDownloadRestrictionLimitVpcArgs',
    'InstanceNodeInfoArgs',
    'ParamTemplateParamDetailArgs',
    'ParamTemplateParamsOverrideArgs',
    'GetBackupDownloadInfoLimitVpcArgs',
]

@pulumi.input_type
class BackupDownloadRestrictionLimitVpcArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 vpc_lists: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "vpc_lists", vpc_lists)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="vpcLists")
    def vpc_lists(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "vpc_lists")

    @vpc_lists.setter
    def vpc_lists(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "vpc_lists", value)


@pulumi.input_type
class InstanceNodeInfoArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None,
                 master: Optional[pulumi.Input[bool]] = None,
                 zone_id: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if master is not None:
            pulumi.set(__self__, "master", master)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def master(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "master")

    @master.setter
    def master(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "master", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_id", value)


@pulumi.input_type
class ParamTemplateParamDetailArgs:
    def __init__(__self__, *,
                 current_value: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enum_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 need_reboot: Optional[pulumi.Input[int]] = None,
                 param_type: Optional[pulumi.Input[str]] = None):
        if current_value is not None:
            pulumi.set(__self__, "current_value", current_value)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enum_values is not None:
            pulumi.set(__self__, "enum_values", enum_values)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if need_reboot is not None:
            pulumi.set(__self__, "need_reboot", need_reboot)
        if param_type is not None:
            pulumi.set(__self__, "param_type", param_type)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "current_value")

    @current_value.setter
    def current_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "current_value", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enumValues")
    def enum_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "enum_values")

    @enum_values.setter
    def enum_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enum_values", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="needReboot")
    def need_reboot(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "need_reboot")

    @need_reboot.setter
    def need_reboot(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "need_reboot", value)

    @property
    @pulumi.getter(name="paramType")
    def param_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "param_type")

    @param_type.setter
    def param_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "param_type", value)


@pulumi.input_type
class ParamTemplateParamsOverrideArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetBackupDownloadInfoLimitVpcArgs:
    def __init__(__self__, *,
                 region: str,
                 vpc_lists: Sequence[str]):
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "vpc_lists", vpc_lists)

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: str):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="vpcLists")
    def vpc_lists(self) -> Sequence[str]:
        return pulumi.get(self, "vpc_lists")

    @vpc_lists.setter
    def vpc_lists(self, value: Sequence[str]):
        pulumi.set(self, "vpc_lists", value)


