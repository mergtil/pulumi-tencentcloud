# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AuditLogFileFilter',
    'BackupDownloadRestrictionLimitVpc',
    'ParamTemplateParamList',
    'PasswordComplexityParamList',
    'PrivilegeColumn',
    'PrivilegeDatabase',
    'PrivilegeTable',
    'ProxyProxyNodeCustom',
    'RoGroupRoGroupInfo',
    'RoGroupRoWeightValue',
    'RollbackDatabase',
    'RollbackTable',
    'RollbackTableTable',
    'GetBackupListListResult',
    'GetBackupSummariesItemResult',
    'GetBinLogItemResult',
    'GetBinLogItemRemoteInfoResult',
    'GetCloneListItemResult',
    'GetDatabasesDatabaseListResult',
    'GetDefaultParamsParamListResult',
    'GetErrorLogItemResult',
    'GetInstanceInstanceListResult',
    'GetInstanceInstanceListRoGroupResult',
    'GetInstanceParamRecordItemResult',
    'GetInstanceRebootTimeItemResult',
    'GetParameterListParameterListResult',
    'GetProjectSecurityGroupGroupResult',
    'GetProjectSecurityGroupGroupInboundResult',
    'GetProjectSecurityGroupGroupOutboundResult',
    'GetProxyCustomCustomConfResult',
    'GetProxyCustomWeightRuleResult',
    'GetRollbackRangeTimeItemResult',
    'GetRollbackRangeTimeItemTimeResult',
    'GetSlowLogDataItemResult',
    'GetSlowLogItemResult',
    'GetSwitchRecordItemResult',
    'GetUserTaskItemResult',
    'GetZoneConfigListResult',
    'GetZoneConfigListSellResult',
]

@pulumi.output_type
class AuditLogFileFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "affectRows":
            suggest = "affect_rows"
        elif key == "dbNames":
            suggest = "db_names"
        elif key == "execTime":
            suggest = "exec_time"
        elif key == "policyNames":
            suggest = "policy_names"
        elif key == "sqlType":
            suggest = "sql_type"
        elif key == "sqlTypes":
            suggest = "sql_types"
        elif key == "tableNames":
            suggest = "table_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditLogFileFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditLogFileFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditLogFileFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 affect_rows: Optional[int] = None,
                 db_names: Optional[Sequence[str]] = None,
                 exec_time: Optional[int] = None,
                 hosts: Optional[Sequence[str]] = None,
                 policy_names: Optional[Sequence[str]] = None,
                 sql: Optional[str] = None,
                 sql_type: Optional[str] = None,
                 sql_types: Optional[Sequence[str]] = None,
                 sqls: Optional[Sequence[str]] = None,
                 table_names: Optional[Sequence[str]] = None,
                 users: Optional[Sequence[str]] = None):
        if affect_rows is not None:
            pulumi.set(__self__, "affect_rows", affect_rows)
        if db_names is not None:
            pulumi.set(__self__, "db_names", db_names)
        if exec_time is not None:
            pulumi.set(__self__, "exec_time", exec_time)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)
        if sql is not None:
            pulumi.set(__self__, "sql", sql)
        if sql_type is not None:
            pulumi.set(__self__, "sql_type", sql_type)
        if sql_types is not None:
            pulumi.set(__self__, "sql_types", sql_types)
        if sqls is not None:
            pulumi.set(__self__, "sqls", sqls)
        if table_names is not None:
            pulumi.set(__self__, "table_names", table_names)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="affectRows")
    def affect_rows(self) -> Optional[int]:
        return pulumi.get(self, "affect_rows")

    @property
    @pulumi.getter(name="dbNames")
    def db_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "db_names")

    @property
    @pulumi.getter(name="execTime")
    def exec_time(self) -> Optional[int]:
        return pulumi.get(self, "exec_time")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policy_names")

    @property
    @pulumi.getter
    def sql(self) -> Optional[str]:
        return pulumi.get(self, "sql")

    @property
    @pulumi.getter(name="sqlType")
    def sql_type(self) -> Optional[str]:
        return pulumi.get(self, "sql_type")

    @property
    @pulumi.getter(name="sqlTypes")
    def sql_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "sql_types")

    @property
    @pulumi.getter
    def sqls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "sqls")

    @property
    @pulumi.getter(name="tableNames")
    def table_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "table_names")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "users")


@pulumi.output_type
class BackupDownloadRestrictionLimitVpc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpcLists":
            suggest = "vpc_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupDownloadRestrictionLimitVpc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupDownloadRestrictionLimitVpc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupDownloadRestrictionLimitVpc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: str,
                 vpc_lists: Sequence[str]):
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "vpc_lists", vpc_lists)

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="vpcLists")
    def vpc_lists(self) -> Sequence[str]:
        return pulumi.get(self, "vpc_lists")


@pulumi.output_type
class ParamTemplateParamList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentValue":
            suggest = "current_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ParamTemplateParamList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ParamTemplateParamList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ParamTemplateParamList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_value: Optional[str] = None,
                 name: Optional[str] = None):
        if current_value is not None:
            pulumi.set(__self__, "current_value", current_value)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> Optional[str]:
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class PasswordComplexityParamList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentValue":
            suggest = "current_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PasswordComplexityParamList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PasswordComplexityParamList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PasswordComplexityParamList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_value: Optional[str] = None,
                 name: Optional[str] = None):
        if current_value is not None:
            pulumi.set(__self__, "current_value", current_value)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> Optional[str]:
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class PrivilegeColumn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivilegeColumn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivilegeColumn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivilegeColumn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: str,
                 database_name: str,
                 privileges: Sequence[str],
                 table_name: str):
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "privileges", privileges)
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        return pulumi.get(self, "table_name")


@pulumi.output_type
class PrivilegeDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivilegeDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivilegeDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivilegeDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: str,
                 privileges: Sequence[str]):
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "privileges", privileges)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        return pulumi.get(self, "privileges")


@pulumi.output_type
class PrivilegeTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"
        elif key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivilegeTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivilegeTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivilegeTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: str,
                 privileges: Sequence[str],
                 table_name: str):
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "privileges", privileges)
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        return pulumi.get(self, "table_name")


@pulumi.output_type
class ProxyProxyNodeCustom(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeCount":
            suggest = "node_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxyProxyNodeCustom. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxyProxyNodeCustom.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxyProxyNodeCustom.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu: int,
                 mem: int,
                 node_count: int,
                 region: str,
                 zone: str):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "mem", mem)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def mem(self) -> int:
        return pulumi.get(self, "mem")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class RoGroupRoGroupInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minRoInGroup":
            suggest = "min_ro_in_group"
        elif key == "replicationDelayTime":
            suggest = "replication_delay_time"
        elif key == "roGroupName":
            suggest = "ro_group_name"
        elif key == "roMaxDelayTime":
            suggest = "ro_max_delay_time"
        elif key == "roOfflineDelay":
            suggest = "ro_offline_delay"
        elif key == "weightMode":
            suggest = "weight_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoGroupRoGroupInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoGroupRoGroupInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoGroupRoGroupInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 min_ro_in_group: Optional[int] = None,
                 replication_delay_time: Optional[int] = None,
                 ro_group_name: Optional[str] = None,
                 ro_max_delay_time: Optional[int] = None,
                 ro_offline_delay: Optional[int] = None,
                 weight_mode: Optional[str] = None):
        if min_ro_in_group is not None:
            pulumi.set(__self__, "min_ro_in_group", min_ro_in_group)
        if replication_delay_time is not None:
            pulumi.set(__self__, "replication_delay_time", replication_delay_time)
        if ro_group_name is not None:
            pulumi.set(__self__, "ro_group_name", ro_group_name)
        if ro_max_delay_time is not None:
            pulumi.set(__self__, "ro_max_delay_time", ro_max_delay_time)
        if ro_offline_delay is not None:
            pulumi.set(__self__, "ro_offline_delay", ro_offline_delay)
        if weight_mode is not None:
            pulumi.set(__self__, "weight_mode", weight_mode)

    @property
    @pulumi.getter(name="minRoInGroup")
    def min_ro_in_group(self) -> Optional[int]:
        return pulumi.get(self, "min_ro_in_group")

    @property
    @pulumi.getter(name="replicationDelayTime")
    def replication_delay_time(self) -> Optional[int]:
        return pulumi.get(self, "replication_delay_time")

    @property
    @pulumi.getter(name="roGroupName")
    def ro_group_name(self) -> Optional[str]:
        return pulumi.get(self, "ro_group_name")

    @property
    @pulumi.getter(name="roMaxDelayTime")
    def ro_max_delay_time(self) -> Optional[int]:
        return pulumi.get(self, "ro_max_delay_time")

    @property
    @pulumi.getter(name="roOfflineDelay")
    def ro_offline_delay(self) -> Optional[int]:
        return pulumi.get(self, "ro_offline_delay")

    @property
    @pulumi.getter(name="weightMode")
    def weight_mode(self) -> Optional[str]:
        return pulumi.get(self, "weight_mode")


@pulumi.output_type
class RoGroupRoWeightValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoGroupRoWeightValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoGroupRoWeightValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoGroupRoWeightValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: str,
                 weight: int):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class RollbackDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"
        elif key == "newDatabaseName":
            suggest = "new_database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RollbackDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RollbackDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RollbackDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: str,
                 new_database_name: str):
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "new_database_name", new_database_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="newDatabaseName")
    def new_database_name(self) -> str:
        return pulumi.get(self, "new_database_name")


@pulumi.output_type
class RollbackTable(dict):
    def __init__(__self__, *,
                 database: str,
                 tables: Sequence['outputs.RollbackTableTable']):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def tables(self) -> Sequence['outputs.RollbackTableTable']:
        return pulumi.get(self, "tables")


@pulumi.output_type
class RollbackTableTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newTableName":
            suggest = "new_table_name"
        elif key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RollbackTableTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RollbackTableTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RollbackTableTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_table_name: str,
                 table_name: str):
        pulumi.set(__self__, "new_table_name", new_table_name)
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="newTableName")
    def new_table_name(self) -> str:
        return pulumi.get(self, "new_table_name")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        return pulumi.get(self, "table_name")


@pulumi.output_type
class GetBackupListListResult(dict):
    def __init__(__self__, *,
                 backup_id: int,
                 backup_model: str,
                 creator: str,
                 finish_time: str,
                 internet_url: str,
                 intranet_url: str,
                 size: int,
                 time: str):
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "backup_model", backup_model)
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "finish_time", finish_time)
        pulumi.set(__self__, "internet_url", internet_url)
        pulumi.set(__self__, "intranet_url", intranet_url)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> int:
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="backupModel")
    def backup_model(self) -> str:
        return pulumi.get(self, "backup_model")

    @property
    @pulumi.getter
    def creator(self) -> str:
        return pulumi.get(self, "creator")

    @property
    @pulumi.getter(name="finishTime")
    def finish_time(self) -> str:
        return pulumi.get(self, "finish_time")

    @property
    @pulumi.getter(name="internetUrl")
    def internet_url(self) -> str:
        return pulumi.get(self, "internet_url")

    @property
    @pulumi.getter(name="intranetUrl")
    def intranet_url(self) -> str:
        return pulumi.get(self, "intranet_url")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def time(self) -> str:
        return pulumi.get(self, "time")


@pulumi.output_type
class GetBackupSummariesItemResult(dict):
    def __init__(__self__, *,
                 auto_backup_count: int,
                 auto_backup_volume: int,
                 backup_volume: int,
                 binlog_backup_count: int,
                 binlog_backup_volume: int,
                 data_backup_count: int,
                 data_backup_volume: int,
                 instance_id: str,
                 manual_backup_count: int,
                 manual_backup_volume: int):
        pulumi.set(__self__, "auto_backup_count", auto_backup_count)
        pulumi.set(__self__, "auto_backup_volume", auto_backup_volume)
        pulumi.set(__self__, "backup_volume", backup_volume)
        pulumi.set(__self__, "binlog_backup_count", binlog_backup_count)
        pulumi.set(__self__, "binlog_backup_volume", binlog_backup_volume)
        pulumi.set(__self__, "data_backup_count", data_backup_count)
        pulumi.set(__self__, "data_backup_volume", data_backup_volume)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "manual_backup_count", manual_backup_count)
        pulumi.set(__self__, "manual_backup_volume", manual_backup_volume)

    @property
    @pulumi.getter(name="autoBackupCount")
    def auto_backup_count(self) -> int:
        return pulumi.get(self, "auto_backup_count")

    @property
    @pulumi.getter(name="autoBackupVolume")
    def auto_backup_volume(self) -> int:
        return pulumi.get(self, "auto_backup_volume")

    @property
    @pulumi.getter(name="backupVolume")
    def backup_volume(self) -> int:
        return pulumi.get(self, "backup_volume")

    @property
    @pulumi.getter(name="binlogBackupCount")
    def binlog_backup_count(self) -> int:
        return pulumi.get(self, "binlog_backup_count")

    @property
    @pulumi.getter(name="binlogBackupVolume")
    def binlog_backup_volume(self) -> int:
        return pulumi.get(self, "binlog_backup_volume")

    @property
    @pulumi.getter(name="dataBackupCount")
    def data_backup_count(self) -> int:
        return pulumi.get(self, "data_backup_count")

    @property
    @pulumi.getter(name="dataBackupVolume")
    def data_backup_volume(self) -> int:
        return pulumi.get(self, "data_backup_volume")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="manualBackupCount")
    def manual_backup_count(self) -> int:
        return pulumi.get(self, "manual_backup_count")

    @property
    @pulumi.getter(name="manualBackupVolume")
    def manual_backup_volume(self) -> int:
        return pulumi.get(self, "manual_backup_volume")


@pulumi.output_type
class GetBinLogItemResult(dict):
    def __init__(__self__, *,
                 binlog_finish_time: str,
                 binlog_start_time: str,
                 cos_storage_type: int,
                 date: str,
                 instance_id: str,
                 internet_url: str,
                 intranet_url: str,
                 name: str,
                 region: str,
                 remote_infos: Sequence['outputs.GetBinLogItemRemoteInfoResult'],
                 size: int,
                 status: str,
                 type: str):
        pulumi.set(__self__, "binlog_finish_time", binlog_finish_time)
        pulumi.set(__self__, "binlog_start_time", binlog_start_time)
        pulumi.set(__self__, "cos_storage_type", cos_storage_type)
        pulumi.set(__self__, "date", date)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "internet_url", internet_url)
        pulumi.set(__self__, "intranet_url", intranet_url)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "remote_infos", remote_infos)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="binlogFinishTime")
    def binlog_finish_time(self) -> str:
        return pulumi.get(self, "binlog_finish_time")

    @property
    @pulumi.getter(name="binlogStartTime")
    def binlog_start_time(self) -> str:
        return pulumi.get(self, "binlog_start_time")

    @property
    @pulumi.getter(name="cosStorageType")
    def cos_storage_type(self) -> int:
        return pulumi.get(self, "cos_storage_type")

    @property
    @pulumi.getter
    def date(self) -> str:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="internetUrl")
    def internet_url(self) -> str:
        return pulumi.get(self, "internet_url")

    @property
    @pulumi.getter(name="intranetUrl")
    def intranet_url(self) -> str:
        return pulumi.get(self, "intranet_url")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="remoteInfos")
    def remote_infos(self) -> Sequence['outputs.GetBinLogItemRemoteInfoResult']:
        return pulumi.get(self, "remote_infos")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBinLogItemRemoteInfoResult(dict):
    def __init__(__self__, *,
                 finish_time: str,
                 region: str,
                 start_time: str,
                 status: str,
                 sub_backup_ids: Sequence[int],
                 url: str):
        pulumi.set(__self__, "finish_time", finish_time)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "sub_backup_ids", sub_backup_ids)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="finishTime")
    def finish_time(self) -> str:
        return pulumi.get(self, "finish_time")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subBackupIds")
    def sub_backup_ids(self) -> Sequence[int]:
        return pulumi.get(self, "sub_backup_ids")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetCloneListItemResult(dict):
    def __init__(__self__, *,
                 clone_job_id: int,
                 dst_instance_id: str,
                 end_time: str,
                 new_region_id: int,
                 rollback_strategy: str,
                 rollback_target_time: str,
                 src_instance_id: str,
                 src_region_id: int,
                 start_time: str,
                 task_status: str):
        pulumi.set(__self__, "clone_job_id", clone_job_id)
        pulumi.set(__self__, "dst_instance_id", dst_instance_id)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "new_region_id", new_region_id)
        pulumi.set(__self__, "rollback_strategy", rollback_strategy)
        pulumi.set(__self__, "rollback_target_time", rollback_target_time)
        pulumi.set(__self__, "src_instance_id", src_instance_id)
        pulumi.set(__self__, "src_region_id", src_region_id)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "task_status", task_status)

    @property
    @pulumi.getter(name="cloneJobId")
    def clone_job_id(self) -> int:
        return pulumi.get(self, "clone_job_id")

    @property
    @pulumi.getter(name="dstInstanceId")
    def dst_instance_id(self) -> str:
        return pulumi.get(self, "dst_instance_id")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="newRegionId")
    def new_region_id(self) -> int:
        return pulumi.get(self, "new_region_id")

    @property
    @pulumi.getter(name="rollbackStrategy")
    def rollback_strategy(self) -> str:
        return pulumi.get(self, "rollback_strategy")

    @property
    @pulumi.getter(name="rollbackTargetTime")
    def rollback_target_time(self) -> str:
        return pulumi.get(self, "rollback_target_time")

    @property
    @pulumi.getter(name="srcInstanceId")
    def src_instance_id(self) -> str:
        return pulumi.get(self, "src_instance_id")

    @property
    @pulumi.getter(name="srcRegionId")
    def src_region_id(self) -> int:
        return pulumi.get(self, "src_region_id")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> str:
        return pulumi.get(self, "task_status")


@pulumi.output_type
class GetDatabasesDatabaseListResult(dict):
    def __init__(__self__, *,
                 character_set: str,
                 database_name: str):
        pulumi.set(__self__, "character_set", character_set)
        pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> str:
        return pulumi.get(self, "character_set")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")


@pulumi.output_type
class GetDefaultParamsParamListResult(dict):
    def __init__(__self__, *,
                 current_value: str,
                 default: str,
                 description: str,
                 enum_values: Sequence[str],
                 max: int,
                 min: int,
                 name: str,
                 need_reboot: int,
                 param_type: str):
        pulumi.set(__self__, "current_value", current_value)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enum_values", enum_values)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "need_reboot", need_reboot)
        pulumi.set(__self__, "param_type", param_type)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> str:
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumValues")
    def enum_values(self) -> Sequence[str]:
        return pulumi.get(self, "enum_values")

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="needReboot")
    def need_reboot(self) -> int:
        return pulumi.get(self, "need_reboot")

    @property
    @pulumi.getter(name="paramType")
    def param_type(self) -> str:
        return pulumi.get(self, "param_type")


@pulumi.output_type
class GetErrorLogItemResult(dict):
    def __init__(__self__, *,
                 content: str,
                 timestamp: int):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def timestamp(self) -> int:
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class GetInstanceInstanceListResult(dict):
    def __init__(__self__, *,
                 auto_renew_flag: int,
                 charge_type: str,
                 cpu_core_count: int,
                 create_time: str,
                 dead_line_time: str,
                 device_type: str,
                 dr_instance_ids: Sequence[str],
                 engine_version: str,
                 init_flag: int,
                 instance_name: str,
                 instance_role: str,
                 internet_host: str,
                 internet_port: int,
                 internet_status: int,
                 intranet_ip: str,
                 intranet_port: int,
                 master_instance_id: str,
                 memory_size: int,
                 mysql_id: str,
                 pay_type: int,
                 project_id: int,
                 ro_groups: Sequence['outputs.GetInstanceInstanceListRoGroupResult'],
                 ro_instance_ids: Sequence[str],
                 slave_sync_mode: int,
                 status: int,
                 subnet_id: str,
                 volume_size: int,
                 vpc_id: str,
                 zone: str):
        pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "dead_line_time", dead_line_time)
        pulumi.set(__self__, "device_type", device_type)
        pulumi.set(__self__, "dr_instance_ids", dr_instance_ids)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "init_flag", init_flag)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_role", instance_role)
        pulumi.set(__self__, "internet_host", internet_host)
        pulumi.set(__self__, "internet_port", internet_port)
        pulumi.set(__self__, "internet_status", internet_status)
        pulumi.set(__self__, "intranet_ip", intranet_ip)
        pulumi.set(__self__, "intranet_port", intranet_port)
        pulumi.set(__self__, "master_instance_id", master_instance_id)
        pulumi.set(__self__, "memory_size", memory_size)
        pulumi.set(__self__, "mysql_id", mysql_id)
        pulumi.set(__self__, "pay_type", pay_type)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "ro_groups", ro_groups)
        pulumi.set(__self__, "ro_instance_ids", ro_instance_ids)
        pulumi.set(__self__, "slave_sync_mode", slave_sync_mode)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "volume_size", volume_size)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> int:
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> int:
        return pulumi.get(self, "cpu_core_count")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deadLineTime")
    def dead_line_time(self) -> str:
        return pulumi.get(self, "dead_line_time")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> str:
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="drInstanceIds")
    def dr_instance_ids(self) -> Sequence[str]:
        return pulumi.get(self, "dr_instance_ids")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="initFlag")
    def init_flag(self) -> int:
        return pulumi.get(self, "init_flag")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceRole")
    def instance_role(self) -> str:
        return pulumi.get(self, "instance_role")

    @property
    @pulumi.getter(name="internetHost")
    def internet_host(self) -> str:
        return pulumi.get(self, "internet_host")

    @property
    @pulumi.getter(name="internetPort")
    def internet_port(self) -> int:
        return pulumi.get(self, "internet_port")

    @property
    @pulumi.getter(name="internetStatus")
    def internet_status(self) -> int:
        return pulumi.get(self, "internet_status")

    @property
    @pulumi.getter(name="intranetIp")
    def intranet_ip(self) -> str:
        return pulumi.get(self, "intranet_ip")

    @property
    @pulumi.getter(name="intranetPort")
    def intranet_port(self) -> int:
        return pulumi.get(self, "intranet_port")

    @property
    @pulumi.getter(name="masterInstanceId")
    def master_instance_id(self) -> str:
        return pulumi.get(self, "master_instance_id")

    @property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> int:
        return pulumi.get(self, "memory_size")

    @property
    @pulumi.getter(name="mysqlId")
    def mysql_id(self) -> str:
        return pulumi.get(self, "mysql_id")

    @property
    @pulumi.getter(name="payType")
    def pay_type(self) -> int:
        return pulumi.get(self, "pay_type")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="roGroups")
    def ro_groups(self) -> Sequence['outputs.GetInstanceInstanceListRoGroupResult']:
        return pulumi.get(self, "ro_groups")

    @property
    @pulumi.getter(name="roInstanceIds")
    def ro_instance_ids(self) -> Sequence[str]:
        return pulumi.get(self, "ro_instance_ids")

    @property
    @pulumi.getter(name="slaveSyncMode")
    def slave_sync_mode(self) -> int:
        return pulumi.get(self, "slave_sync_mode")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> int:
        return pulumi.get(self, "volume_size")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetInstanceInstanceListRoGroupResult(dict):
    def __init__(__self__, *,
                 group_id: str,
                 instance_ids: Sequence[str]):
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "instance_ids", instance_ids)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Sequence[str]:
        return pulumi.get(self, "instance_ids")


@pulumi.output_type
class GetInstanceParamRecordItemResult(dict):
    def __init__(__self__, *,
                 instance_id: str,
                 is_success: bool,
                 modify_time: str,
                 new_value: str,
                 old_value: str,
                 param_name: str):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "is_success", is_success)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "old_value", old_value)
        pulumi.set(__self__, "param_name", param_name)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="isSuccess")
    def is_success(self) -> bool:
        return pulumi.get(self, "is_success")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> str:
        return pulumi.get(self, "new_value")

    @property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> str:
        return pulumi.get(self, "old_value")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        return pulumi.get(self, "param_name")


@pulumi.output_type
class GetInstanceRebootTimeItemResult(dict):
    def __init__(__self__, *,
                 instance_id: str,
                 time_in_seconds: int):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "time_in_seconds", time_in_seconds)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="timeInSeconds")
    def time_in_seconds(self) -> int:
        return pulumi.get(self, "time_in_seconds")


@pulumi.output_type
class GetParameterListParameterListResult(dict):
    def __init__(__self__, *,
                 current_value: str,
                 default_value: str,
                 description: str,
                 enum_values: Sequence[str],
                 max: int,
                 min: int,
                 need_reboot: int,
                 parameter_name: str,
                 parameter_type: str):
        pulumi.set(__self__, "current_value", current_value)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enum_values", enum_values)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "need_reboot", need_reboot)
        pulumi.set(__self__, "parameter_name", parameter_name)
        pulumi.set(__self__, "parameter_type", parameter_type)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> str:
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumValues")
    def enum_values(self) -> Sequence[str]:
        return pulumi.get(self, "enum_values")

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="needReboot")
    def need_reboot(self) -> int:
        return pulumi.get(self, "need_reboot")

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> str:
        return pulumi.get(self, "parameter_name")

    @property
    @pulumi.getter(name="parameterType")
    def parameter_type(self) -> str:
        return pulumi.get(self, "parameter_type")


@pulumi.output_type
class GetProjectSecurityGroupGroupResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 inbounds: Sequence['outputs.GetProjectSecurityGroupGroupInboundResult'],
                 outbounds: Sequence['outputs.GetProjectSecurityGroupGroupOutboundResult'],
                 project_id: int,
                 security_group_id: str,
                 security_group_name: str,
                 security_group_remark: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "inbounds", inbounds)
        pulumi.set(__self__, "outbounds", outbounds)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)
        pulumi.set(__self__, "security_group_remark", security_group_remark)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def inbounds(self) -> Sequence['outputs.GetProjectSecurityGroupGroupInboundResult']:
        return pulumi.get(self, "inbounds")

    @property
    @pulumi.getter
    def outbounds(self) -> Sequence['outputs.GetProjectSecurityGroupGroupOutboundResult']:
        return pulumi.get(self, "outbounds")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        return pulumi.get(self, "security_group_name")

    @property
    @pulumi.getter(name="securityGroupRemark")
    def security_group_remark(self) -> str:
        return pulumi.get(self, "security_group_remark")


@pulumi.output_type
class GetProjectSecurityGroupGroupInboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 desc: str,
                 dir: str,
                 ip_protocol: str,
                 port_range: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "desc", desc)
        pulumi.set(__self__, "dir", dir)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter
    def desc(self) -> str:
        return pulumi.get(self, "desc")

    @property
    @pulumi.getter
    def dir(self) -> str:
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        return pulumi.get(self, "port_range")


@pulumi.output_type
class GetProjectSecurityGroupGroupOutboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 desc: str,
                 dir: str,
                 ip_protocol: str,
                 port_range: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "desc", desc)
        pulumi.set(__self__, "dir", dir)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter
    def desc(self) -> str:
        return pulumi.get(self, "desc")

    @property
    @pulumi.getter
    def dir(self) -> str:
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        return pulumi.get(self, "port_range")


@pulumi.output_type
class GetProxyCustomCustomConfResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 device: str,
                 device_type: str,
                 memory: int,
                 type: str):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "device", device)
        pulumi.set(__self__, "device_type", device_type)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def device(self) -> str:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> str:
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetProxyCustomWeightRuleResult(dict):
    def __init__(__self__, *,
                 less_than: int,
                 weight: int):
        pulumi.set(__self__, "less_than", less_than)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="lessThan")
    def less_than(self) -> int:
        return pulumi.get(self, "less_than")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetRollbackRangeTimeItemResult(dict):
    def __init__(__self__, *,
                 code: int,
                 instance_id: str,
                 message: str,
                 times: Sequence['outputs.GetRollbackRangeTimeItemTimeResult']):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "times", times)

    @property
    @pulumi.getter
    def code(self) -> int:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def times(self) -> Sequence['outputs.GetRollbackRangeTimeItemTimeResult']:
        return pulumi.get(self, "times")


@pulumi.output_type
class GetRollbackRangeTimeItemTimeResult(dict):
    def __init__(__self__, *,
                 begin: str,
                 end: str):
        pulumi.set(__self__, "begin", begin)
        pulumi.set(__self__, "end", end)

    @property
    @pulumi.getter
    def begin(self) -> str:
        return pulumi.get(self, "begin")

    @property
    @pulumi.getter
    def end(self) -> str:
        return pulumi.get(self, "end")


@pulumi.output_type
class GetSlowLogDataItemResult(dict):
    def __init__(__self__, *,
                 database: str,
                 lock_time: float,
                 md5: str,
                 query_time: float,
                 rows_examined: int,
                 rows_sent: int,
                 sql_template: str,
                 sql_text: str,
                 timestamp: int,
                 user_host: str,
                 user_name: str):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "lock_time", lock_time)
        pulumi.set(__self__, "md5", md5)
        pulumi.set(__self__, "query_time", query_time)
        pulumi.set(__self__, "rows_examined", rows_examined)
        pulumi.set(__self__, "rows_sent", rows_sent)
        pulumi.set(__self__, "sql_template", sql_template)
        pulumi.set(__self__, "sql_text", sql_text)
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "user_host", user_host)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="lockTime")
    def lock_time(self) -> float:
        return pulumi.get(self, "lock_time")

    @property
    @pulumi.getter
    def md5(self) -> str:
        return pulumi.get(self, "md5")

    @property
    @pulumi.getter(name="queryTime")
    def query_time(self) -> float:
        return pulumi.get(self, "query_time")

    @property
    @pulumi.getter(name="rowsExamined")
    def rows_examined(self) -> int:
        return pulumi.get(self, "rows_examined")

    @property
    @pulumi.getter(name="rowsSent")
    def rows_sent(self) -> int:
        return pulumi.get(self, "rows_sent")

    @property
    @pulumi.getter(name="sqlTemplate")
    def sql_template(self) -> str:
        return pulumi.get(self, "sql_template")

    @property
    @pulumi.getter(name="sqlText")
    def sql_text(self) -> str:
        return pulumi.get(self, "sql_text")

    @property
    @pulumi.getter
    def timestamp(self) -> int:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter(name="userHost")
    def user_host(self) -> str:
        return pulumi.get(self, "user_host")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetSlowLogItemResult(dict):
    def __init__(__self__, *,
                 date: str,
                 internet_url: str,
                 intranet_url: str,
                 name: str,
                 size: int,
                 type: str):
        pulumi.set(__self__, "date", date)
        pulumi.set(__self__, "internet_url", internet_url)
        pulumi.set(__self__, "intranet_url", intranet_url)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def date(self) -> str:
        return pulumi.get(self, "date")

    @property
    @pulumi.getter(name="internetUrl")
    def internet_url(self) -> str:
        return pulumi.get(self, "internet_url")

    @property
    @pulumi.getter(name="intranetUrl")
    def intranet_url(self) -> str:
        return pulumi.get(self, "intranet_url")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSwitchRecordItemResult(dict):
    def __init__(__self__, *,
                 switch_time: str,
                 switch_type: str):
        pulumi.set(__self__, "switch_time", switch_time)
        pulumi.set(__self__, "switch_type", switch_type)

    @property
    @pulumi.getter(name="switchTime")
    def switch_time(self) -> str:
        return pulumi.get(self, "switch_time")

    @property
    @pulumi.getter(name="switchType")
    def switch_type(self) -> str:
        return pulumi.get(self, "switch_type")


@pulumi.output_type
class GetUserTaskItemResult(dict):
    def __init__(__self__, *,
                 async_request_id: str,
                 code: int,
                 end_time: str,
                 instance_ids: Sequence[str],
                 job_id: int,
                 message: str,
                 progress: int,
                 start_time: str,
                 task_status: str,
                 task_type: str):
        pulumi.set(__self__, "async_request_id", async_request_id)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "instance_ids", instance_ids)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "task_status", task_status)
        pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="asyncRequestId")
    def async_request_id(self) -> str:
        return pulumi.get(self, "async_request_id")

    @property
    @pulumi.getter
    def code(self) -> int:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Sequence[str]:
        return pulumi.get(self, "instance_ids")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> int:
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def progress(self) -> int:
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> str:
        return pulumi.get(self, "task_status")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        return pulumi.get(self, "task_type")


@pulumi.output_type
class GetZoneConfigListResult(dict):
    def __init__(__self__, *,
                 disaster_recovery_zones: Sequence[str],
                 engine_versions: Sequence[str],
                 first_slave_zones: Sequence[str],
                 hour_instance_sale_max_num: int,
                 is_default: int,
                 is_support_disaster_recovery: int,
                 is_support_vpc: int,
                 name: str,
                 pay_types: Sequence[int],
                 remote_ro_zones: Sequence[str],
                 second_slave_zones: Sequence[str],
                 sells: Sequence['outputs.GetZoneConfigListSellResult'],
                 slave_deploy_modes: Sequence[int],
                 support_slave_sync_modes: Sequence[int]):
        pulumi.set(__self__, "disaster_recovery_zones", disaster_recovery_zones)
        pulumi.set(__self__, "engine_versions", engine_versions)
        pulumi.set(__self__, "first_slave_zones", first_slave_zones)
        pulumi.set(__self__, "hour_instance_sale_max_num", hour_instance_sale_max_num)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_support_disaster_recovery", is_support_disaster_recovery)
        pulumi.set(__self__, "is_support_vpc", is_support_vpc)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pay_types", pay_types)
        pulumi.set(__self__, "remote_ro_zones", remote_ro_zones)
        pulumi.set(__self__, "second_slave_zones", second_slave_zones)
        pulumi.set(__self__, "sells", sells)
        pulumi.set(__self__, "slave_deploy_modes", slave_deploy_modes)
        pulumi.set(__self__, "support_slave_sync_modes", support_slave_sync_modes)

    @property
    @pulumi.getter(name="disasterRecoveryZones")
    def disaster_recovery_zones(self) -> Sequence[str]:
        return pulumi.get(self, "disaster_recovery_zones")

    @property
    @pulumi.getter(name="engineVersions")
    def engine_versions(self) -> Sequence[str]:
        return pulumi.get(self, "engine_versions")

    @property
    @pulumi.getter(name="firstSlaveZones")
    def first_slave_zones(self) -> Sequence[str]:
        return pulumi.get(self, "first_slave_zones")

    @property
    @pulumi.getter(name="hourInstanceSaleMaxNum")
    def hour_instance_sale_max_num(self) -> int:
        return pulumi.get(self, "hour_instance_sale_max_num")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> int:
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isSupportDisasterRecovery")
    def is_support_disaster_recovery(self) -> int:
        return pulumi.get(self, "is_support_disaster_recovery")

    @property
    @pulumi.getter(name="isSupportVpc")
    def is_support_vpc(self) -> int:
        return pulumi.get(self, "is_support_vpc")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="payTypes")
    def pay_types(self) -> Sequence[int]:
        return pulumi.get(self, "pay_types")

    @property
    @pulumi.getter(name="remoteRoZones")
    def remote_ro_zones(self) -> Sequence[str]:
        return pulumi.get(self, "remote_ro_zones")

    @property
    @pulumi.getter(name="secondSlaveZones")
    def second_slave_zones(self) -> Sequence[str]:
        return pulumi.get(self, "second_slave_zones")

    @property
    @pulumi.getter
    def sells(self) -> Sequence['outputs.GetZoneConfigListSellResult']:
        return pulumi.get(self, "sells")

    @property
    @pulumi.getter(name="slaveDeployModes")
    def slave_deploy_modes(self) -> Sequence[int]:
        return pulumi.get(self, "slave_deploy_modes")

    @property
    @pulumi.getter(name="supportSlaveSyncModes")
    def support_slave_sync_modes(self) -> Sequence[int]:
        return pulumi.get(self, "support_slave_sync_modes")


@pulumi.output_type
class GetZoneConfigListSellResult(dict):
    def __init__(__self__, *,
                 cdb_type: str,
                 cpu: int,
                 info: str,
                 max_volume_size: int,
                 mem_size: int,
                 min_volume_size: int,
                 qps: int,
                 volume_step: int):
        pulumi.set(__self__, "cdb_type", cdb_type)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "max_volume_size", max_volume_size)
        pulumi.set(__self__, "mem_size", mem_size)
        pulumi.set(__self__, "min_volume_size", min_volume_size)
        pulumi.set(__self__, "qps", qps)
        pulumi.set(__self__, "volume_step", volume_step)

    @property
    @pulumi.getter(name="cdbType")
    def cdb_type(self) -> str:
        return pulumi.get(self, "cdb_type")

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def info(self) -> str:
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="maxVolumeSize")
    def max_volume_size(self) -> int:
        return pulumi.get(self, "max_volume_size")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> int:
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter(name="minVolumeSize")
    def min_volume_size(self) -> int:
        return pulumi.get(self, "min_volume_size")

    @property
    @pulumi.getter
    def qps(self) -> int:
        return pulumi.get(self, "qps")

    @property
    @pulumi.getter(name="volumeStep")
    def volume_step(self) -> int:
        return pulumi.get(self, "volume_step")


