# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDatabasesResult',
    'AwaitableGetDatabasesResult',
    'get_databases',
    'get_databases_output',
]

@pulumi.output_type
class GetDatabasesResult:
    """
    A collection of values returned by getDatabases.
    """
    def __init__(__self__, database_lists=None, database_regexp=None, id=None, instance_id=None, items=None, limit=None, offset=None, result_output_file=None):
        if database_lists and not isinstance(database_lists, list):
            raise TypeError("Expected argument 'database_lists' to be a list")
        pulumi.set(__self__, "database_lists", database_lists)
        if database_regexp and not isinstance(database_regexp, str):
            raise TypeError("Expected argument 'database_regexp' to be a str")
        pulumi.set(__self__, "database_regexp", database_regexp)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if offset and not isinstance(offset, int):
            raise TypeError("Expected argument 'offset' to be a int")
        pulumi.set(__self__, "offset", offset)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="databaseLists")
    def database_lists(self) -> Sequence['outputs.GetDatabasesDatabaseListResult']:
        return pulumi.get(self, "database_lists")

    @property
    @pulumi.getter(name="databaseRegexp")
    def database_regexp(self) -> Optional[str]:
        return pulumi.get(self, "database_regexp")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetDatabasesResult(GetDatabasesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabasesResult(
            database_lists=self.database_lists,
            database_regexp=self.database_regexp,
            id=self.id,
            instance_id=self.instance_id,
            items=self.items,
            limit=self.limit,
            offset=self.offset,
            result_output_file=self.result_output_file)


def get_databases(database_regexp: Optional[str] = None,
                  instance_id: Optional[str] = None,
                  limit: Optional[int] = None,
                  offset: Optional[int] = None,
                  result_output_file: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabasesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['databaseRegexp'] = database_regexp
    __args__['instanceId'] = instance_id
    __args__['limit'] = limit
    __args__['offset'] = offset
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Mysql/getDatabases:getDatabases', __args__, opts=opts, typ=GetDatabasesResult).value

    return AwaitableGetDatabasesResult(
        database_lists=pulumi.get(__ret__, 'database_lists'),
        database_regexp=pulumi.get(__ret__, 'database_regexp'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        items=pulumi.get(__ret__, 'items'),
        limit=pulumi.get(__ret__, 'limit'),
        offset=pulumi.get(__ret__, 'offset'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_databases)
def get_databases_output(database_regexp: Optional[pulumi.Input[Optional[str]]] = None,
                         instance_id: Optional[pulumi.Input[str]] = None,
                         limit: Optional[pulumi.Input[Optional[int]]] = None,
                         offset: Optional[pulumi.Input[Optional[int]]] = None,
                         result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDatabasesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
