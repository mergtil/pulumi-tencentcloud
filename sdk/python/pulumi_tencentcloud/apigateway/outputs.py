# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ApiConstantParameter',
    'ApiMicroService',
    'ApiOauthConfig',
    'ApiRequestParameter',
    'ApiResponseErrorCode',
    'ApiServiceConfigCosConfig',
    'ApiServiceParameter',
    'ApiServiceTsfHealthCheckConf',
    'ApiServiceTsfLoadBalanceConf',
    'ApiTargetService',
    'ApiTargetServicesHealthCheckConf',
    'ServiceApiList',
    'ServiceUsagePlanList',
    'UpstreamHealthChecker',
    'UpstreamK8sService',
    'UpstreamK8sServiceExtraLabel',
    'UpstreamNode',
    'UsagePlanAttachList',
    'GetApiAppServiceApiIdStatusSetResult',
    'GetApiAppServiceApiIdStatusSetOauthConfigResult',
    'GetApiAppServiceUsagePlanListResult',
    'GetApiAppsApiAppListResult',
    'GetApiDocsApiDocListResult',
    'GetApiKeysListResult',
    'GetApiUsagePlansResultResult',
    'GetApisListResult',
    'GetApisListRequestParameterResult',
    'GetApisListResponseErrorCodeResult',
    'GetCustomerDomainsListResult',
    'GetCustomerDomainsListPathMappingResult',
    'GetIpStrategiesListResult',
    'GetIpStrategiesListAttachListResult',
    'GetPluginsResultResult',
    'GetServicesListResult',
    'GetServicesListUsagePlanListResult',
    'GetThrottlingApisListResult',
    'GetThrottlingApisListApiEnvironmentStrategyResult',
    'GetThrottlingApisListApiEnvironmentStrategyStrategyListResult',
    'GetThrottlingServicesListResult',
    'GetThrottlingServicesListEnvironmentResult',
    'GetUpstreamsFilterResult',
    'GetUpstreamsResultResult',
    'GetUsagePlanEnvironmentsListResult',
    'GetUsagePlansListResult',
]

@pulumi.output_type
class ApiConstantParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValue":
            suggest = "default_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiConstantParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiConstantParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiConstantParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_value: Optional[str] = None,
                 desc: Optional[str] = None,
                 name: Optional[str] = None,
                 position: Optional[str] = None):
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if desc is not None:
            pulumi.set(__self__, "desc", desc)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if position is not None:
            pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def desc(self) -> Optional[str]:
        return pulumi.get(self, "desc")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def position(self) -> Optional[str]:
        return pulumi.get(self, "position")


@pulumi.output_type
class ApiMicroService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "microServiceName":
            suggest = "micro_service_name"
        elif key == "namespaceId":
            suggest = "namespace_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiMicroService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiMicroService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiMicroService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: str,
                 micro_service_name: str,
                 namespace_id: str):
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "micro_service_name", micro_service_name)
        pulumi.set(__self__, "namespace_id", namespace_id)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="microServiceName")
    def micro_service_name(self) -> str:
        return pulumi.get(self, "micro_service_name")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> str:
        return pulumi.get(self, "namespace_id")


@pulumi.output_type
class ApiOauthConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicKey":
            suggest = "public_key"
        elif key == "tokenLocation":
            suggest = "token_location"
        elif key == "loginRedirectUrl":
            suggest = "login_redirect_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiOauthConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiOauthConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiOauthConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_key: str,
                 token_location: str,
                 login_redirect_url: Optional[str] = None):
        pulumi.set(__self__, "public_key", public_key)
        pulumi.set(__self__, "token_location", token_location)
        if login_redirect_url is not None:
            pulumi.set(__self__, "login_redirect_url", login_redirect_url)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> str:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="tokenLocation")
    def token_location(self) -> str:
        return pulumi.get(self, "token_location")

    @property
    @pulumi.getter(name="loginRedirectUrl")
    def login_redirect_url(self) -> Optional[str]:
        return pulumi.get(self, "login_redirect_url")


@pulumi.output_type
class ApiRequestParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValue":
            suggest = "default_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiRequestParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiRequestParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiRequestParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 position: str,
                 type: str,
                 default_value: Optional[str] = None,
                 desc: Optional[str] = None,
                 required: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "type", type)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if desc is not None:
            pulumi.set(__self__, "desc", desc)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def position(self) -> str:
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def desc(self) -> Optional[str]:
        return pulumi.get(self, "desc")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")


@pulumi.output_type
class ApiResponseErrorCode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "convertedCode":
            suggest = "converted_code"
        elif key == "needConvert":
            suggest = "need_convert"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiResponseErrorCode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiResponseErrorCode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiResponseErrorCode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code: int,
                 msg: str,
                 converted_code: Optional[int] = None,
                 desc: Optional[str] = None,
                 need_convert: Optional[bool] = None):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "msg", msg)
        if converted_code is not None:
            pulumi.set(__self__, "converted_code", converted_code)
        if desc is not None:
            pulumi.set(__self__, "desc", desc)
        if need_convert is not None:
            pulumi.set(__self__, "need_convert", need_convert)

    @property
    @pulumi.getter
    def code(self) -> int:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def msg(self) -> str:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter(name="convertedCode")
    def converted_code(self) -> Optional[int]:
        return pulumi.get(self, "converted_code")

    @property
    @pulumi.getter
    def desc(self) -> Optional[str]:
        return pulumi.get(self, "desc")

    @property
    @pulumi.getter(name="needConvert")
    def need_convert(self) -> Optional[bool]:
        return pulumi.get(self, "need_convert")


@pulumi.output_type
class ApiServiceConfigCosConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "pathMatchMode":
            suggest = "path_match_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiServiceConfigCosConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiServiceConfigCosConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiServiceConfigCosConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 bucket_name: str,
                 authorization: Optional[bool] = None,
                 path_match_mode: Optional[str] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "bucket_name", bucket_name)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if path_match_mode is not None:
            pulumi.set(__self__, "path_match_mode", path_match_mode)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter
    def authorization(self) -> Optional[bool]:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter(name="pathMatchMode")
    def path_match_mode(self) -> Optional[str]:
        return pulumi.get(self, "path_match_mode")


@pulumi.output_type
class ApiServiceParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValue":
            suggest = "default_value"
        elif key == "relevantRequestParameterDesc":
            suggest = "relevant_request_parameter_desc"
        elif key == "relevantRequestParameterName":
            suggest = "relevant_request_parameter_name"
        elif key == "relevantRequestParameterPosition":
            suggest = "relevant_request_parameter_position"
        elif key == "relevantRequestParameterType":
            suggest = "relevant_request_parameter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiServiceParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiServiceParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiServiceParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_value: Optional[str] = None,
                 name: Optional[str] = None,
                 position: Optional[str] = None,
                 relevant_request_parameter_desc: Optional[str] = None,
                 relevant_request_parameter_name: Optional[str] = None,
                 relevant_request_parameter_position: Optional[str] = None,
                 relevant_request_parameter_type: Optional[str] = None):
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if relevant_request_parameter_desc is not None:
            pulumi.set(__self__, "relevant_request_parameter_desc", relevant_request_parameter_desc)
        if relevant_request_parameter_name is not None:
            pulumi.set(__self__, "relevant_request_parameter_name", relevant_request_parameter_name)
        if relevant_request_parameter_position is not None:
            pulumi.set(__self__, "relevant_request_parameter_position", relevant_request_parameter_position)
        if relevant_request_parameter_type is not None:
            pulumi.set(__self__, "relevant_request_parameter_type", relevant_request_parameter_type)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def position(self) -> Optional[str]:
        return pulumi.get(self, "position")

    @property
    @pulumi.getter(name="relevantRequestParameterDesc")
    def relevant_request_parameter_desc(self) -> Optional[str]:
        return pulumi.get(self, "relevant_request_parameter_desc")

    @property
    @pulumi.getter(name="relevantRequestParameterName")
    def relevant_request_parameter_name(self) -> Optional[str]:
        return pulumi.get(self, "relevant_request_parameter_name")

    @property
    @pulumi.getter(name="relevantRequestParameterPosition")
    def relevant_request_parameter_position(self) -> Optional[str]:
        return pulumi.get(self, "relevant_request_parameter_position")

    @property
    @pulumi.getter(name="relevantRequestParameterType")
    def relevant_request_parameter_type(self) -> Optional[str]:
        return pulumi.get(self, "relevant_request_parameter_type")


@pulumi.output_type
class ApiServiceTsfHealthCheckConf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorThresholdPercentage":
            suggest = "error_threshold_percentage"
        elif key == "isHealthCheck":
            suggest = "is_health_check"
        elif key == "requestVolumeThreshold":
            suggest = "request_volume_threshold"
        elif key == "sleepWindowInMilliseconds":
            suggest = "sleep_window_in_milliseconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiServiceTsfHealthCheckConf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiServiceTsfHealthCheckConf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiServiceTsfHealthCheckConf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_threshold_percentage: Optional[int] = None,
                 is_health_check: Optional[bool] = None,
                 request_volume_threshold: Optional[int] = None,
                 sleep_window_in_milliseconds: Optional[int] = None):
        if error_threshold_percentage is not None:
            pulumi.set(__self__, "error_threshold_percentage", error_threshold_percentage)
        if is_health_check is not None:
            pulumi.set(__self__, "is_health_check", is_health_check)
        if request_volume_threshold is not None:
            pulumi.set(__self__, "request_volume_threshold", request_volume_threshold)
        if sleep_window_in_milliseconds is not None:
            pulumi.set(__self__, "sleep_window_in_milliseconds", sleep_window_in_milliseconds)

    @property
    @pulumi.getter(name="errorThresholdPercentage")
    def error_threshold_percentage(self) -> Optional[int]:
        return pulumi.get(self, "error_threshold_percentage")

    @property
    @pulumi.getter(name="isHealthCheck")
    def is_health_check(self) -> Optional[bool]:
        return pulumi.get(self, "is_health_check")

    @property
    @pulumi.getter(name="requestVolumeThreshold")
    def request_volume_threshold(self) -> Optional[int]:
        return pulumi.get(self, "request_volume_threshold")

    @property
    @pulumi.getter(name="sleepWindowInMilliseconds")
    def sleep_window_in_milliseconds(self) -> Optional[int]:
        return pulumi.get(self, "sleep_window_in_milliseconds")


@pulumi.output_type
class ApiServiceTsfLoadBalanceConf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isLoadBalance":
            suggest = "is_load_balance"
        elif key == "sessionStickRequired":
            suggest = "session_stick_required"
        elif key == "sessionStickTimeout":
            suggest = "session_stick_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiServiceTsfLoadBalanceConf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiServiceTsfLoadBalanceConf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiServiceTsfLoadBalanceConf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_load_balance: Optional[bool] = None,
                 method: Optional[str] = None,
                 session_stick_required: Optional[bool] = None,
                 session_stick_timeout: Optional[int] = None):
        if is_load_balance is not None:
            pulumi.set(__self__, "is_load_balance", is_load_balance)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if session_stick_required is not None:
            pulumi.set(__self__, "session_stick_required", session_stick_required)
        if session_stick_timeout is not None:
            pulumi.set(__self__, "session_stick_timeout", session_stick_timeout)

    @property
    @pulumi.getter(name="isLoadBalance")
    def is_load_balance(self) -> Optional[bool]:
        return pulumi.get(self, "is_load_balance")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="sessionStickRequired")
    def session_stick_required(self) -> Optional[bool]:
        return pulumi.get(self, "session_stick_required")

    @property
    @pulumi.getter(name="sessionStickTimeout")
    def session_stick_timeout(self) -> Optional[int]:
        return pulumi.get(self, "session_stick_timeout")


@pulumi.output_type
class ApiTargetService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostIp":
            suggest = "host_ip"
        elif key == "vmIp":
            suggest = "vm_ip"
        elif key == "vmPort":
            suggest = "vm_port"
        elif key == "vpcId":
            suggest = "vpc_id"
        elif key == "dockerIp":
            suggest = "docker_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiTargetService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiTargetService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiTargetService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_ip: str,
                 vm_ip: str,
                 vm_port: int,
                 vpc_id: str,
                 docker_ip: Optional[str] = None):
        pulumi.set(__self__, "host_ip", host_ip)
        pulumi.set(__self__, "vm_ip", vm_ip)
        pulumi.set(__self__, "vm_port", vm_port)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if docker_ip is not None:
            pulumi.set(__self__, "docker_ip", docker_ip)

    @property
    @pulumi.getter(name="hostIp")
    def host_ip(self) -> str:
        return pulumi.get(self, "host_ip")

    @property
    @pulumi.getter(name="vmIp")
    def vm_ip(self) -> str:
        return pulumi.get(self, "vm_ip")

    @property
    @pulumi.getter(name="vmPort")
    def vm_port(self) -> int:
        return pulumi.get(self, "vm_port")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="dockerIp")
    def docker_ip(self) -> Optional[str]:
        return pulumi.get(self, "docker_ip")


@pulumi.output_type
class ApiTargetServicesHealthCheckConf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorThresholdPercentage":
            suggest = "error_threshold_percentage"
        elif key == "isHealthCheck":
            suggest = "is_health_check"
        elif key == "requestVolumeThreshold":
            suggest = "request_volume_threshold"
        elif key == "sleepWindowInMilliseconds":
            suggest = "sleep_window_in_milliseconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiTargetServicesHealthCheckConf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiTargetServicesHealthCheckConf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiTargetServicesHealthCheckConf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_threshold_percentage: Optional[int] = None,
                 is_health_check: Optional[bool] = None,
                 request_volume_threshold: Optional[int] = None,
                 sleep_window_in_milliseconds: Optional[int] = None):
        if error_threshold_percentage is not None:
            pulumi.set(__self__, "error_threshold_percentage", error_threshold_percentage)
        if is_health_check is not None:
            pulumi.set(__self__, "is_health_check", is_health_check)
        if request_volume_threshold is not None:
            pulumi.set(__self__, "request_volume_threshold", request_volume_threshold)
        if sleep_window_in_milliseconds is not None:
            pulumi.set(__self__, "sleep_window_in_milliseconds", sleep_window_in_milliseconds)

    @property
    @pulumi.getter(name="errorThresholdPercentage")
    def error_threshold_percentage(self) -> Optional[int]:
        return pulumi.get(self, "error_threshold_percentage")

    @property
    @pulumi.getter(name="isHealthCheck")
    def is_health_check(self) -> Optional[bool]:
        return pulumi.get(self, "is_health_check")

    @property
    @pulumi.getter(name="requestVolumeThreshold")
    def request_volume_threshold(self) -> Optional[int]:
        return pulumi.get(self, "request_volume_threshold")

    @property
    @pulumi.getter(name="sleepWindowInMilliseconds")
    def sleep_window_in_milliseconds(self) -> Optional[int]:
        return pulumi.get(self, "sleep_window_in_milliseconds")


@pulumi.output_type
class ServiceApiList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiDesc":
            suggest = "api_desc"
        elif key == "apiId":
            suggest = "api_id"
        elif key == "apiName":
            suggest = "api_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceApiList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceApiList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceApiList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_desc: Optional[str] = None,
                 api_id: Optional[str] = None,
                 api_name: Optional[str] = None,
                 method: Optional[str] = None,
                 path: Optional[str] = None):
        if api_desc is not None:
            pulumi.set(__self__, "api_desc", api_desc)
        if api_id is not None:
            pulumi.set(__self__, "api_id", api_id)
        if api_name is not None:
            pulumi.set(__self__, "api_name", api_name)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="apiDesc")
    def api_desc(self) -> Optional[str]:
        return pulumi.get(self, "api_desc")

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[str]:
        return pulumi.get(self, "api_id")

    @property
    @pulumi.getter(name="apiName")
    def api_name(self) -> Optional[str]:
        return pulumi.get(self, "api_name")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")


@pulumi.output_type
class ServiceUsagePlanList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiId":
            suggest = "api_id"
        elif key == "bindType":
            suggest = "bind_type"
        elif key == "usagePlanId":
            suggest = "usage_plan_id"
        elif key == "usagePlanName":
            suggest = "usage_plan_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceUsagePlanList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceUsagePlanList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceUsagePlanList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_id: Optional[str] = None,
                 bind_type: Optional[str] = None,
                 usage_plan_id: Optional[str] = None,
                 usage_plan_name: Optional[str] = None):
        if api_id is not None:
            pulumi.set(__self__, "api_id", api_id)
        if bind_type is not None:
            pulumi.set(__self__, "bind_type", bind_type)
        if usage_plan_id is not None:
            pulumi.set(__self__, "usage_plan_id", usage_plan_id)
        if usage_plan_name is not None:
            pulumi.set(__self__, "usage_plan_name", usage_plan_name)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[str]:
        return pulumi.get(self, "api_id")

    @property
    @pulumi.getter(name="bindType")
    def bind_type(self) -> Optional[str]:
        return pulumi.get(self, "bind_type")

    @property
    @pulumi.getter(name="usagePlanId")
    def usage_plan_id(self) -> Optional[str]:
        return pulumi.get(self, "usage_plan_id")

    @property
    @pulumi.getter(name="usagePlanName")
    def usage_plan_name(self) -> Optional[str]:
        return pulumi.get(self, "usage_plan_name")


@pulumi.output_type
class UpstreamHealthChecker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableActiveCheck":
            suggest = "enable_active_check"
        elif key == "enablePassiveCheck":
            suggest = "enable_passive_check"
        elif key == "healthyHttpStatus":
            suggest = "healthy_http_status"
        elif key == "httpFailureThreshold":
            suggest = "http_failure_threshold"
        elif key == "tcpFailureThreshold":
            suggest = "tcp_failure_threshold"
        elif key == "timeoutThreshold":
            suggest = "timeout_threshold"
        elif key == "unhealthyHttpStatus":
            suggest = "unhealthy_http_status"
        elif key == "activeCheckHttpPath":
            suggest = "active_check_http_path"
        elif key == "activeCheckInterval":
            suggest = "active_check_interval"
        elif key == "activeCheckTimeout":
            suggest = "active_check_timeout"
        elif key == "unhealthyTimeout":
            suggest = "unhealthy_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpstreamHealthChecker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpstreamHealthChecker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpstreamHealthChecker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_active_check: bool,
                 enable_passive_check: bool,
                 healthy_http_status: str,
                 http_failure_threshold: int,
                 tcp_failure_threshold: int,
                 timeout_threshold: int,
                 unhealthy_http_status: str,
                 active_check_http_path: Optional[str] = None,
                 active_check_interval: Optional[int] = None,
                 active_check_timeout: Optional[int] = None,
                 unhealthy_timeout: Optional[int] = None):
        pulumi.set(__self__, "enable_active_check", enable_active_check)
        pulumi.set(__self__, "enable_passive_check", enable_passive_check)
        pulumi.set(__self__, "healthy_http_status", healthy_http_status)
        pulumi.set(__self__, "http_failure_threshold", http_failure_threshold)
        pulumi.set(__self__, "tcp_failure_threshold", tcp_failure_threshold)
        pulumi.set(__self__, "timeout_threshold", timeout_threshold)
        pulumi.set(__self__, "unhealthy_http_status", unhealthy_http_status)
        if active_check_http_path is not None:
            pulumi.set(__self__, "active_check_http_path", active_check_http_path)
        if active_check_interval is not None:
            pulumi.set(__self__, "active_check_interval", active_check_interval)
        if active_check_timeout is not None:
            pulumi.set(__self__, "active_check_timeout", active_check_timeout)
        if unhealthy_timeout is not None:
            pulumi.set(__self__, "unhealthy_timeout", unhealthy_timeout)

    @property
    @pulumi.getter(name="enableActiveCheck")
    def enable_active_check(self) -> bool:
        return pulumi.get(self, "enable_active_check")

    @property
    @pulumi.getter(name="enablePassiveCheck")
    def enable_passive_check(self) -> bool:
        return pulumi.get(self, "enable_passive_check")

    @property
    @pulumi.getter(name="healthyHttpStatus")
    def healthy_http_status(self) -> str:
        return pulumi.get(self, "healthy_http_status")

    @property
    @pulumi.getter(name="httpFailureThreshold")
    def http_failure_threshold(self) -> int:
        return pulumi.get(self, "http_failure_threshold")

    @property
    @pulumi.getter(name="tcpFailureThreshold")
    def tcp_failure_threshold(self) -> int:
        return pulumi.get(self, "tcp_failure_threshold")

    @property
    @pulumi.getter(name="timeoutThreshold")
    def timeout_threshold(self) -> int:
        return pulumi.get(self, "timeout_threshold")

    @property
    @pulumi.getter(name="unhealthyHttpStatus")
    def unhealthy_http_status(self) -> str:
        return pulumi.get(self, "unhealthy_http_status")

    @property
    @pulumi.getter(name="activeCheckHttpPath")
    def active_check_http_path(self) -> Optional[str]:
        return pulumi.get(self, "active_check_http_path")

    @property
    @pulumi.getter(name="activeCheckInterval")
    def active_check_interval(self) -> Optional[int]:
        return pulumi.get(self, "active_check_interval")

    @property
    @pulumi.getter(name="activeCheckTimeout")
    def active_check_timeout(self) -> Optional[int]:
        return pulumi.get(self, "active_check_timeout")

    @property
    @pulumi.getter(name="unhealthyTimeout")
    def unhealthy_timeout(self) -> Optional[int]:
        return pulumi.get(self, "unhealthy_timeout")


@pulumi.output_type
class UpstreamK8sService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "extraLabels":
            suggest = "extra_labels"
        elif key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpstreamK8sService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpstreamK8sService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpstreamK8sService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: str,
                 extra_labels: Sequence['outputs.UpstreamK8sServiceExtraLabel'],
                 namespace: str,
                 port: int,
                 service_name: str,
                 weight: int,
                 name: Optional[str] = None):
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "extra_labels", extra_labels)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "weight", weight)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="extraLabels")
    def extra_labels(self) -> Sequence['outputs.UpstreamK8sServiceExtraLabel']:
        return pulumi.get(self, "extra_labels")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class UpstreamK8sServiceExtraLabel(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class UpstreamNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "nameSpace":
            suggest = "name_space"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "uniqueServiceName":
            suggest = "unique_service_name"
        elif key == "vmInstanceId":
            suggest = "vm_instance_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpstreamNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpstreamNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpstreamNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: str,
                 port: int,
                 weight: int,
                 cluster_id: Optional[str] = None,
                 name_space: Optional[str] = None,
                 service_name: Optional[str] = None,
                 source: Optional[str] = None,
                 tags: Optional[Sequence[str]] = None,
                 unique_service_name: Optional[str] = None,
                 vm_instance_id: Optional[str] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "weight", weight)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if name_space is not None:
            pulumi.set(__self__, "name_space", name_space)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if unique_service_name is not None:
            pulumi.set(__self__, "unique_service_name", unique_service_name)
        if vm_instance_id is not None:
            pulumi.set(__self__, "vm_instance_id", vm_instance_id)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="nameSpace")
    def name_space(self) -> Optional[str]:
        return pulumi.get(self, "name_space")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="uniqueServiceName")
    def unique_service_name(self) -> Optional[str]:
        return pulumi.get(self, "unique_service_name")

    @property
    @pulumi.getter(name="vmInstanceId")
    def vm_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "vm_instance_id")


@pulumi.output_type
class UsagePlanAttachList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiId":
            suggest = "api_id"
        elif key == "apiName":
            suggest = "api_name"
        elif key == "createTime":
            suggest = "create_time"
        elif key == "modifyTime":
            suggest = "modify_time"
        elif key == "serviceId":
            suggest = "service_id"
        elif key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UsagePlanAttachList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UsagePlanAttachList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UsagePlanAttachList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_id: Optional[str] = None,
                 api_name: Optional[str] = None,
                 create_time: Optional[str] = None,
                 environment: Optional[str] = None,
                 method: Optional[str] = None,
                 modify_time: Optional[str] = None,
                 path: Optional[str] = None,
                 service_id: Optional[str] = None,
                 service_name: Optional[str] = None):
        if api_id is not None:
            pulumi.set(__self__, "api_id", api_id)
        if api_name is not None:
            pulumi.set(__self__, "api_name", api_name)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if modify_time is not None:
            pulumi.set(__self__, "modify_time", modify_time)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[str]:
        return pulumi.get(self, "api_id")

    @property
    @pulumi.getter(name="apiName")
    def api_name(self) -> Optional[str]:
        return pulumi.get(self, "api_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> Optional[str]:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[str]:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetApiAppServiceApiIdStatusSetResult(dict):
    def __init__(__self__, *,
                 api_business_type: str,
                 api_desc: str,
                 api_id: str,
                 api_name: str,
                 api_type: str,
                 auth_relation_api_id: str,
                 auth_type: str,
                 created_time: str,
                 is_debug_after_charge: bool,
                 method: str,
                 modified_time: str,
                 oauth_configs: Sequence['outputs.GetApiAppServiceApiIdStatusSetOauthConfigResult'],
                 path: str,
                 protocol: str,
                 service_id: str,
                 token_location: str,
                 uniq_vpc_id: str):
        pulumi.set(__self__, "api_business_type", api_business_type)
        pulumi.set(__self__, "api_desc", api_desc)
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "api_name", api_name)
        pulumi.set(__self__, "api_type", api_type)
        pulumi.set(__self__, "auth_relation_api_id", auth_relation_api_id)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "is_debug_after_charge", is_debug_after_charge)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "oauth_configs", oauth_configs)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "token_location", token_location)
        pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)

    @property
    @pulumi.getter(name="apiBusinessType")
    def api_business_type(self) -> str:
        return pulumi.get(self, "api_business_type")

    @property
    @pulumi.getter(name="apiDesc")
    def api_desc(self) -> str:
        return pulumi.get(self, "api_desc")

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> str:
        return pulumi.get(self, "api_id")

    @property
    @pulumi.getter(name="apiName")
    def api_name(self) -> str:
        return pulumi.get(self, "api_name")

    @property
    @pulumi.getter(name="apiType")
    def api_type(self) -> str:
        return pulumi.get(self, "api_type")

    @property
    @pulumi.getter(name="authRelationApiId")
    def auth_relation_api_id(self) -> str:
        return pulumi.get(self, "auth_relation_api_id")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="isDebugAfterCharge")
    def is_debug_after_charge(self) -> bool:
        return pulumi.get(self, "is_debug_after_charge")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter(name="oauthConfigs")
    def oauth_configs(self) -> Sequence['outputs.GetApiAppServiceApiIdStatusSetOauthConfigResult']:
        return pulumi.get(self, "oauth_configs")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="tokenLocation")
    def token_location(self) -> str:
        return pulumi.get(self, "token_location")

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> str:
        return pulumi.get(self, "uniq_vpc_id")


@pulumi.output_type
class GetApiAppServiceApiIdStatusSetOauthConfigResult(dict):
    def __init__(__self__, *,
                 login_redirect_url: str,
                 public_key: str,
                 token_location: str):
        pulumi.set(__self__, "login_redirect_url", login_redirect_url)
        pulumi.set(__self__, "public_key", public_key)
        pulumi.set(__self__, "token_location", token_location)

    @property
    @pulumi.getter(name="loginRedirectUrl")
    def login_redirect_url(self) -> str:
        return pulumi.get(self, "login_redirect_url")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> str:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="tokenLocation")
    def token_location(self) -> str:
        return pulumi.get(self, "token_location")


@pulumi.output_type
class GetApiAppServiceUsagePlanListResult(dict):
    def __init__(__self__, *,
                 created_time: str,
                 environment: str,
                 max_request_num_pre_sec: int,
                 modified_time: str,
                 usage_plan_desc: str,
                 usage_plan_id: str,
                 usage_plan_name: str):
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "max_request_num_pre_sec", max_request_num_pre_sec)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "usage_plan_desc", usage_plan_desc)
        pulumi.set(__self__, "usage_plan_id", usage_plan_id)
        pulumi.set(__self__, "usage_plan_name", usage_plan_name)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def environment(self) -> str:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="maxRequestNumPreSec")
    def max_request_num_pre_sec(self) -> int:
        return pulumi.get(self, "max_request_num_pre_sec")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter(name="usagePlanDesc")
    def usage_plan_desc(self) -> str:
        return pulumi.get(self, "usage_plan_desc")

    @property
    @pulumi.getter(name="usagePlanId")
    def usage_plan_id(self) -> str:
        return pulumi.get(self, "usage_plan_id")

    @property
    @pulumi.getter(name="usagePlanName")
    def usage_plan_name(self) -> str:
        return pulumi.get(self, "usage_plan_name")


@pulumi.output_type
class GetApiAppsApiAppListResult(dict):
    def __init__(__self__, *,
                 api_app_desc: str,
                 api_app_id: str,
                 api_app_key: str,
                 api_app_name: str,
                 api_app_secret: str,
                 created_time: str,
                 modified_time: str):
        pulumi.set(__self__, "api_app_desc", api_app_desc)
        pulumi.set(__self__, "api_app_id", api_app_id)
        pulumi.set(__self__, "api_app_key", api_app_key)
        pulumi.set(__self__, "api_app_name", api_app_name)
        pulumi.set(__self__, "api_app_secret", api_app_secret)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "modified_time", modified_time)

    @property
    @pulumi.getter(name="apiAppDesc")
    def api_app_desc(self) -> str:
        return pulumi.get(self, "api_app_desc")

    @property
    @pulumi.getter(name="apiAppId")
    def api_app_id(self) -> str:
        return pulumi.get(self, "api_app_id")

    @property
    @pulumi.getter(name="apiAppKey")
    def api_app_key(self) -> str:
        return pulumi.get(self, "api_app_key")

    @property
    @pulumi.getter(name="apiAppName")
    def api_app_name(self) -> str:
        return pulumi.get(self, "api_app_name")

    @property
    @pulumi.getter(name="apiAppSecret")
    def api_app_secret(self) -> str:
        return pulumi.get(self, "api_app_secret")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")


@pulumi.output_type
class GetApiDocsApiDocListResult(dict):
    def __init__(__self__, *,
                 api_doc_id: str,
                 api_doc_name: str,
                 api_doc_status: str):
        pulumi.set(__self__, "api_doc_id", api_doc_id)
        pulumi.set(__self__, "api_doc_name", api_doc_name)
        pulumi.set(__self__, "api_doc_status", api_doc_status)

    @property
    @pulumi.getter(name="apiDocId")
    def api_doc_id(self) -> str:
        return pulumi.get(self, "api_doc_id")

    @property
    @pulumi.getter(name="apiDocName")
    def api_doc_name(self) -> str:
        return pulumi.get(self, "api_doc_name")

    @property
    @pulumi.getter(name="apiDocStatus")
    def api_doc_status(self) -> str:
        return pulumi.get(self, "api_doc_status")


@pulumi.output_type
class GetApiKeysListResult(dict):
    def __init__(__self__, *,
                 access_key_secret: str,
                 api_key_id: str,
                 create_time: str,
                 modify_time: str,
                 status: str):
        pulumi.set(__self__, "access_key_secret", access_key_secret)
        pulumi.set(__self__, "api_key_id", api_key_id)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessKeySecret")
    def access_key_secret(self) -> str:
        return pulumi.get(self, "access_key_secret")

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> str:
        return pulumi.get(self, "api_key_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetApiUsagePlansResultResult(dict):
    def __init__(__self__, *,
                 api_id: str,
                 api_name: str,
                 created_time: str,
                 environment: str,
                 in_use_request_num: int,
                 max_request_num: int,
                 max_request_num_pre_sec: int,
                 method: str,
                 modified_time: str,
                 path: str,
                 service_id: str,
                 service_name: str,
                 usage_plan_desc: str,
                 usage_plan_id: str,
                 usage_plan_name: str):
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "api_name", api_name)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "in_use_request_num", in_use_request_num)
        pulumi.set(__self__, "max_request_num", max_request_num)
        pulumi.set(__self__, "max_request_num_pre_sec", max_request_num_pre_sec)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "usage_plan_desc", usage_plan_desc)
        pulumi.set(__self__, "usage_plan_id", usage_plan_id)
        pulumi.set(__self__, "usage_plan_name", usage_plan_name)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> str:
        return pulumi.get(self, "api_id")

    @property
    @pulumi.getter(name="apiName")
    def api_name(self) -> str:
        return pulumi.get(self, "api_name")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def environment(self) -> str:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="inUseRequestNum")
    def in_use_request_num(self) -> int:
        return pulumi.get(self, "in_use_request_num")

    @property
    @pulumi.getter(name="maxRequestNum")
    def max_request_num(self) -> int:
        return pulumi.get(self, "max_request_num")

    @property
    @pulumi.getter(name="maxRequestNumPreSec")
    def max_request_num_pre_sec(self) -> int:
        return pulumi.get(self, "max_request_num_pre_sec")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="usagePlanDesc")
    def usage_plan_desc(self) -> str:
        return pulumi.get(self, "usage_plan_desc")

    @property
    @pulumi.getter(name="usagePlanId")
    def usage_plan_id(self) -> str:
        return pulumi.get(self, "usage_plan_id")

    @property
    @pulumi.getter(name="usagePlanName")
    def usage_plan_name(self) -> str:
        return pulumi.get(self, "usage_plan_name")


@pulumi.output_type
class GetApisListResult(dict):
    def __init__(__self__, *,
                 api_desc: str,
                 api_name: str,
                 auth_type: str,
                 create_time: str,
                 enable_cors: bool,
                 modify_time: str,
                 protocol: str,
                 request_config_method: str,
                 request_config_path: str,
                 request_parameters: Sequence['outputs.GetApisListRequestParameterResult'],
                 response_error_codes: Sequence['outputs.GetApisListResponseErrorCodeResult'],
                 response_fail_example: str,
                 response_success_example: str,
                 response_type: str,
                 service_config_method: str,
                 service_config_mock_return_message: str,
                 service_config_path: str,
                 service_config_product: str,
                 service_config_scf_function_name: str,
                 service_config_scf_function_namespace: str,
                 service_config_scf_function_qualifier: str,
                 service_config_timeout: int,
                 service_config_type: str,
                 service_config_url: str,
                 service_config_vpc_id: str,
                 service_id: str):
        pulumi.set(__self__, "api_desc", api_desc)
        pulumi.set(__self__, "api_name", api_name)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "enable_cors", enable_cors)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "request_config_method", request_config_method)
        pulumi.set(__self__, "request_config_path", request_config_path)
        pulumi.set(__self__, "request_parameters", request_parameters)
        pulumi.set(__self__, "response_error_codes", response_error_codes)
        pulumi.set(__self__, "response_fail_example", response_fail_example)
        pulumi.set(__self__, "response_success_example", response_success_example)
        pulumi.set(__self__, "response_type", response_type)
        pulumi.set(__self__, "service_config_method", service_config_method)
        pulumi.set(__self__, "service_config_mock_return_message", service_config_mock_return_message)
        pulumi.set(__self__, "service_config_path", service_config_path)
        pulumi.set(__self__, "service_config_product", service_config_product)
        pulumi.set(__self__, "service_config_scf_function_name", service_config_scf_function_name)
        pulumi.set(__self__, "service_config_scf_function_namespace", service_config_scf_function_namespace)
        pulumi.set(__self__, "service_config_scf_function_qualifier", service_config_scf_function_qualifier)
        pulumi.set(__self__, "service_config_timeout", service_config_timeout)
        pulumi.set(__self__, "service_config_type", service_config_type)
        pulumi.set(__self__, "service_config_url", service_config_url)
        pulumi.set(__self__, "service_config_vpc_id", service_config_vpc_id)
        pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="apiDesc")
    def api_desc(self) -> str:
        return pulumi.get(self, "api_desc")

    @property
    @pulumi.getter(name="apiName")
    def api_name(self) -> str:
        return pulumi.get(self, "api_name")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="enableCors")
    def enable_cors(self) -> bool:
        return pulumi.get(self, "enable_cors")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="requestConfigMethod")
    def request_config_method(self) -> str:
        return pulumi.get(self, "request_config_method")

    @property
    @pulumi.getter(name="requestConfigPath")
    def request_config_path(self) -> str:
        return pulumi.get(self, "request_config_path")

    @property
    @pulumi.getter(name="requestParameters")
    def request_parameters(self) -> Sequence['outputs.GetApisListRequestParameterResult']:
        return pulumi.get(self, "request_parameters")

    @property
    @pulumi.getter(name="responseErrorCodes")
    def response_error_codes(self) -> Sequence['outputs.GetApisListResponseErrorCodeResult']:
        return pulumi.get(self, "response_error_codes")

    @property
    @pulumi.getter(name="responseFailExample")
    def response_fail_example(self) -> str:
        return pulumi.get(self, "response_fail_example")

    @property
    @pulumi.getter(name="responseSuccessExample")
    def response_success_example(self) -> str:
        return pulumi.get(self, "response_success_example")

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> str:
        return pulumi.get(self, "response_type")

    @property
    @pulumi.getter(name="serviceConfigMethod")
    def service_config_method(self) -> str:
        return pulumi.get(self, "service_config_method")

    @property
    @pulumi.getter(name="serviceConfigMockReturnMessage")
    def service_config_mock_return_message(self) -> str:
        return pulumi.get(self, "service_config_mock_return_message")

    @property
    @pulumi.getter(name="serviceConfigPath")
    def service_config_path(self) -> str:
        return pulumi.get(self, "service_config_path")

    @property
    @pulumi.getter(name="serviceConfigProduct")
    def service_config_product(self) -> str:
        return pulumi.get(self, "service_config_product")

    @property
    @pulumi.getter(name="serviceConfigScfFunctionName")
    def service_config_scf_function_name(self) -> str:
        return pulumi.get(self, "service_config_scf_function_name")

    @property
    @pulumi.getter(name="serviceConfigScfFunctionNamespace")
    def service_config_scf_function_namespace(self) -> str:
        return pulumi.get(self, "service_config_scf_function_namespace")

    @property
    @pulumi.getter(name="serviceConfigScfFunctionQualifier")
    def service_config_scf_function_qualifier(self) -> str:
        return pulumi.get(self, "service_config_scf_function_qualifier")

    @property
    @pulumi.getter(name="serviceConfigTimeout")
    def service_config_timeout(self) -> int:
        return pulumi.get(self, "service_config_timeout")

    @property
    @pulumi.getter(name="serviceConfigType")
    def service_config_type(self) -> str:
        return pulumi.get(self, "service_config_type")

    @property
    @pulumi.getter(name="serviceConfigUrl")
    def service_config_url(self) -> str:
        return pulumi.get(self, "service_config_url")

    @property
    @pulumi.getter(name="serviceConfigVpcId")
    def service_config_vpc_id(self) -> str:
        return pulumi.get(self, "service_config_vpc_id")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        return pulumi.get(self, "service_id")


@pulumi.output_type
class GetApisListRequestParameterResult(dict):
    def __init__(__self__, *,
                 default_value: str,
                 desc: str,
                 name: str,
                 position: str,
                 required: bool,
                 type: str):
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "desc", desc)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def desc(self) -> str:
        return pulumi.get(self, "desc")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def position(self) -> str:
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def required(self) -> bool:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApisListResponseErrorCodeResult(dict):
    def __init__(__self__, *,
                 code: int,
                 converted_code: int,
                 desc: str,
                 msg: str,
                 need_convert: bool):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "converted_code", converted_code)
        pulumi.set(__self__, "desc", desc)
        pulumi.set(__self__, "msg", msg)
        pulumi.set(__self__, "need_convert", need_convert)

    @property
    @pulumi.getter
    def code(self) -> int:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="convertedCode")
    def converted_code(self) -> int:
        return pulumi.get(self, "converted_code")

    @property
    @pulumi.getter
    def desc(self) -> str:
        return pulumi.get(self, "desc")

    @property
    @pulumi.getter
    def msg(self) -> str:
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter(name="needConvert")
    def need_convert(self) -> bool:
        return pulumi.get(self, "need_convert")


@pulumi.output_type
class GetCustomerDomainsListResult(dict):
    def __init__(__self__, *,
                 certificate_id: str,
                 domain_name: str,
                 is_default_mapping: bool,
                 is_status_on: bool,
                 net_type: str,
                 path_mappings: Sequence['outputs.GetCustomerDomainsListPathMappingResult'],
                 protocol: str):
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "is_default_mapping", is_default_mapping)
        pulumi.set(__self__, "is_status_on", is_status_on)
        pulumi.set(__self__, "net_type", net_type)
        pulumi.set(__self__, "path_mappings", path_mappings)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="isDefaultMapping")
    def is_default_mapping(self) -> bool:
        return pulumi.get(self, "is_default_mapping")

    @property
    @pulumi.getter(name="isStatusOn")
    def is_status_on(self) -> bool:
        return pulumi.get(self, "is_status_on")

    @property
    @pulumi.getter(name="netType")
    def net_type(self) -> str:
        return pulumi.get(self, "net_type")

    @property
    @pulumi.getter(name="pathMappings")
    def path_mappings(self) -> Sequence['outputs.GetCustomerDomainsListPathMappingResult']:
        return pulumi.get(self, "path_mappings")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetCustomerDomainsListPathMappingResult(dict):
    def __init__(__self__, *,
                 environment: str,
                 path: str):
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def environment(self) -> str:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")


@pulumi.output_type
class GetIpStrategiesListResult(dict):
    def __init__(__self__, *,
                 attach_lists: Sequence['outputs.GetIpStrategiesListAttachListResult'],
                 bind_api_total_count: int,
                 create_time: str,
                 ip_list: str,
                 modify_time: str,
                 service_id: str,
                 strategy_id: str,
                 strategy_name: str,
                 strategy_type: str):
        pulumi.set(__self__, "attach_lists", attach_lists)
        pulumi.set(__self__, "bind_api_total_count", bind_api_total_count)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "ip_list", ip_list)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "strategy_id", strategy_id)
        pulumi.set(__self__, "strategy_name", strategy_name)
        pulumi.set(__self__, "strategy_type", strategy_type)

    @property
    @pulumi.getter(name="attachLists")
    def attach_lists(self) -> Sequence['outputs.GetIpStrategiesListAttachListResult']:
        return pulumi.get(self, "attach_lists")

    @property
    @pulumi.getter(name="bindApiTotalCount")
    def bind_api_total_count(self) -> int:
        return pulumi.get(self, "bind_api_total_count")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="ipList")
    def ip_list(self) -> str:
        return pulumi.get(self, "ip_list")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="strategyId")
    def strategy_id(self) -> str:
        return pulumi.get(self, "strategy_id")

    @property
    @pulumi.getter(name="strategyName")
    def strategy_name(self) -> str:
        return pulumi.get(self, "strategy_name")

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> str:
        return pulumi.get(self, "strategy_type")


@pulumi.output_type
class GetIpStrategiesListAttachListResult(dict):
    def __init__(__self__, *,
                 api_business_type: str,
                 api_desc: str,
                 api_id: str,
                 api_name: str,
                 api_type: str,
                 auth_relation_api_id: str,
                 auth_type: str,
                 create_time: str,
                 method: str,
                 modify_time: str,
                 oauth_config: Mapping[str, Any],
                 path: str,
                 protocol: str,
                 relation_business_api_ids: Sequence[str],
                 service_id: str,
                 tags: Sequence[str],
                 uniq_vpc_id: str,
                 vpc_id: int):
        pulumi.set(__self__, "api_business_type", api_business_type)
        pulumi.set(__self__, "api_desc", api_desc)
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "api_name", api_name)
        pulumi.set(__self__, "api_type", api_type)
        pulumi.set(__self__, "auth_relation_api_id", auth_relation_api_id)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "oauth_config", oauth_config)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "relation_business_api_ids", relation_business_api_ids)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="apiBusinessType")
    def api_business_type(self) -> str:
        return pulumi.get(self, "api_business_type")

    @property
    @pulumi.getter(name="apiDesc")
    def api_desc(self) -> str:
        return pulumi.get(self, "api_desc")

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> str:
        return pulumi.get(self, "api_id")

    @property
    @pulumi.getter(name="apiName")
    def api_name(self) -> str:
        return pulumi.get(self, "api_name")

    @property
    @pulumi.getter(name="apiType")
    def api_type(self) -> str:
        return pulumi.get(self, "api_type")

    @property
    @pulumi.getter(name="authRelationApiId")
    def auth_relation_api_id(self) -> str:
        return pulumi.get(self, "auth_relation_api_id")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter(name="oauthConfig")
    def oauth_config(self) -> Mapping[str, Any]:
        return pulumi.get(self, "oauth_config")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="relationBusinessApiIds")
    def relation_business_api_ids(self) -> Sequence[str]:
        return pulumi.get(self, "relation_business_api_ids")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> str:
        return pulumi.get(self, "uniq_vpc_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> int:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetPluginsResultResult(dict):
    def __init__(__self__, *,
                 api_id: str,
                 api_name: str,
                 api_type: str,
                 attached_other_plugin: bool,
                 is_attached: bool,
                 method: str,
                 path: str):
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "api_name", api_name)
        pulumi.set(__self__, "api_type", api_type)
        pulumi.set(__self__, "attached_other_plugin", attached_other_plugin)
        pulumi.set(__self__, "is_attached", is_attached)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> str:
        return pulumi.get(self, "api_id")

    @property
    @pulumi.getter(name="apiName")
    def api_name(self) -> str:
        return pulumi.get(self, "api_name")

    @property
    @pulumi.getter(name="apiType")
    def api_type(self) -> str:
        return pulumi.get(self, "api_type")

    @property
    @pulumi.getter(name="attachedOtherPlugin")
    def attached_other_plugin(self) -> bool:
        return pulumi.get(self, "attached_other_plugin")

    @property
    @pulumi.getter(name="isAttached")
    def is_attached(self) -> bool:
        return pulumi.get(self, "is_attached")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")


@pulumi.output_type
class GetServicesListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 exclusive_set_name: str,
                 inner_http_port: int,
                 inner_https_port: int,
                 internal_sub_domain: str,
                 ip_version: str,
                 modify_time: str,
                 net_types: Sequence[str],
                 outer_sub_domain: str,
                 protocol: str,
                 service_desc: str,
                 service_id: str,
                 service_name: str,
                 usage_plan_lists: Sequence['outputs.GetServicesListUsagePlanListResult']):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "exclusive_set_name", exclusive_set_name)
        pulumi.set(__self__, "inner_http_port", inner_http_port)
        pulumi.set(__self__, "inner_https_port", inner_https_port)
        pulumi.set(__self__, "internal_sub_domain", internal_sub_domain)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "net_types", net_types)
        pulumi.set(__self__, "outer_sub_domain", outer_sub_domain)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "service_desc", service_desc)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "usage_plan_lists", usage_plan_lists)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="exclusiveSetName")
    def exclusive_set_name(self) -> str:
        warnings.warn("""It has been deprecated from version 1.81.9.""", DeprecationWarning)
        pulumi.log.warn("""exclusive_set_name is deprecated: It has been deprecated from version 1.81.9.""")

        return pulumi.get(self, "exclusive_set_name")

    @property
    @pulumi.getter(name="innerHttpPort")
    def inner_http_port(self) -> int:
        return pulumi.get(self, "inner_http_port")

    @property
    @pulumi.getter(name="innerHttpsPort")
    def inner_https_port(self) -> int:
        return pulumi.get(self, "inner_https_port")

    @property
    @pulumi.getter(name="internalSubDomain")
    def internal_sub_domain(self) -> str:
        return pulumi.get(self, "internal_sub_domain")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> str:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter(name="netTypes")
    def net_types(self) -> Sequence[str]:
        return pulumi.get(self, "net_types")

    @property
    @pulumi.getter(name="outerSubDomain")
    def outer_sub_domain(self) -> str:
        return pulumi.get(self, "outer_sub_domain")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceDesc")
    def service_desc(self) -> str:
        return pulumi.get(self, "service_desc")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="usagePlanLists")
    def usage_plan_lists(self) -> Sequence['outputs.GetServicesListUsagePlanListResult']:
        return pulumi.get(self, "usage_plan_lists")


@pulumi.output_type
class GetServicesListUsagePlanListResult(dict):
    def __init__(__self__, *,
                 api_id: str,
                 bind_type: str,
                 usage_plan_id: str,
                 usage_plan_name: str):
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "bind_type", bind_type)
        pulumi.set(__self__, "usage_plan_id", usage_plan_id)
        pulumi.set(__self__, "usage_plan_name", usage_plan_name)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> str:
        return pulumi.get(self, "api_id")

    @property
    @pulumi.getter(name="bindType")
    def bind_type(self) -> str:
        return pulumi.get(self, "bind_type")

    @property
    @pulumi.getter(name="usagePlanId")
    def usage_plan_id(self) -> str:
        return pulumi.get(self, "usage_plan_id")

    @property
    @pulumi.getter(name="usagePlanName")
    def usage_plan_name(self) -> str:
        return pulumi.get(self, "usage_plan_name")


@pulumi.output_type
class GetThrottlingApisListResult(dict):
    def __init__(__self__, *,
                 api_environment_strategies: Sequence['outputs.GetThrottlingApisListApiEnvironmentStrategyResult'],
                 service_id: str):
        pulumi.set(__self__, "api_environment_strategies", api_environment_strategies)
        pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="apiEnvironmentStrategies")
    def api_environment_strategies(self) -> Sequence['outputs.GetThrottlingApisListApiEnvironmentStrategyResult']:
        return pulumi.get(self, "api_environment_strategies")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        return pulumi.get(self, "service_id")


@pulumi.output_type
class GetThrottlingApisListApiEnvironmentStrategyResult(dict):
    def __init__(__self__, *,
                 api_id: str,
                 api_name: str,
                 method: str,
                 path: str,
                 strategy_lists: Sequence['outputs.GetThrottlingApisListApiEnvironmentStrategyStrategyListResult']):
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "api_name", api_name)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "strategy_lists", strategy_lists)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> str:
        return pulumi.get(self, "api_id")

    @property
    @pulumi.getter(name="apiName")
    def api_name(self) -> str:
        return pulumi.get(self, "api_name")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="strategyLists")
    def strategy_lists(self) -> Sequence['outputs.GetThrottlingApisListApiEnvironmentStrategyStrategyListResult']:
        return pulumi.get(self, "strategy_lists")


@pulumi.output_type
class GetThrottlingApisListApiEnvironmentStrategyStrategyListResult(dict):
    def __init__(__self__, *,
                 environment_name: str,
                 quota: int):
        pulumi.set(__self__, "environment_name", environment_name)
        pulumi.set(__self__, "quota", quota)

    @property
    @pulumi.getter(name="environmentName")
    def environment_name(self) -> str:
        return pulumi.get(self, "environment_name")

    @property
    @pulumi.getter
    def quota(self) -> int:
        return pulumi.get(self, "quota")


@pulumi.output_type
class GetThrottlingServicesListResult(dict):
    def __init__(__self__, *,
                 environments: Sequence['outputs.GetThrottlingServicesListEnvironmentResult'],
                 service_id: str):
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetThrottlingServicesListEnvironmentResult']:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        return pulumi.get(self, "service_id")


@pulumi.output_type
class GetThrottlingServicesListEnvironmentResult(dict):
    def __init__(__self__, *,
                 environment_name: str,
                 status: int,
                 strategy: int,
                 url: str,
                 version_name: str):
        pulumi.set(__self__, "environment_name", environment_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "strategy", strategy)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "version_name", version_name)

    @property
    @pulumi.getter(name="environmentName")
    def environment_name(self) -> str:
        return pulumi.get(self, "environment_name")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def strategy(self) -> int:
        return pulumi.get(self, "strategy")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="versionName")
    def version_name(self) -> str:
        return pulumi.get(self, "version_name")


@pulumi.output_type
class GetUpstreamsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetUpstreamsResultResult(dict):
    def __init__(__self__, *,
                 api_id: str,
                 api_name: str,
                 bind_time: str,
                 service_id: str,
                 service_name: str):
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "api_name", api_name)
        pulumi.set(__self__, "bind_time", bind_time)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> str:
        return pulumi.get(self, "api_id")

    @property
    @pulumi.getter(name="apiName")
    def api_name(self) -> str:
        return pulumi.get(self, "api_name")

    @property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> str:
        return pulumi.get(self, "bind_time")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetUsagePlanEnvironmentsListResult(dict):
    def __init__(__self__, *,
                 api_id: str,
                 api_name: str,
                 create_time: str,
                 environment: str,
                 method: str,
                 modify_time: str,
                 path: str,
                 service_id: str,
                 service_name: str):
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "api_name", api_name)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> str:
        return pulumi.get(self, "api_id")

    @property
    @pulumi.getter(name="apiName")
    def api_name(self) -> str:
        return pulumi.get(self, "api_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def environment(self) -> str:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetUsagePlansListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 max_request_num: int,
                 max_request_num_pre_sec: int,
                 modify_time: str,
                 usage_plan_desc: str,
                 usage_plan_id: str,
                 usage_plan_name: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "max_request_num", max_request_num)
        pulumi.set(__self__, "max_request_num_pre_sec", max_request_num_pre_sec)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "usage_plan_desc", usage_plan_desc)
        pulumi.set(__self__, "usage_plan_id", usage_plan_id)
        pulumi.set(__self__, "usage_plan_name", usage_plan_name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="maxRequestNum")
    def max_request_num(self) -> int:
        return pulumi.get(self, "max_request_num")

    @property
    @pulumi.getter(name="maxRequestNumPreSec")
    def max_request_num_pre_sec(self) -> int:
        return pulumi.get(self, "max_request_num_pre_sec")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter(name="usagePlanDesc")
    def usage_plan_desc(self) -> str:
        return pulumi.get(self, "usage_plan_desc")

    @property
    @pulumi.getter(name="usagePlanId")
    def usage_plan_id(self) -> str:
        return pulumi.get(self, "usage_plan_id")

    @property
    @pulumi.getter(name="usagePlanName")
    def usage_plan_name(self) -> str:
        return pulumi.get(self, "usage_plan_name")


