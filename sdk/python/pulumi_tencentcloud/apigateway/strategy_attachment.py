# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['StrategyAttachmentArgs', 'StrategyAttachment']

@pulumi.input_type
class StrategyAttachmentArgs:
    def __init__(__self__, *,
                 bind_api_id: pulumi.Input[str],
                 environment_name: pulumi.Input[str],
                 service_id: pulumi.Input[str],
                 strategy_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a StrategyAttachment resource.
        :param pulumi.Input[str] bind_api_id: The API that needs to be bound.
        :param pulumi.Input[str] environment_name: The environment of the strategy association. Valid values: `test`, `release`, `prepub`.
        :param pulumi.Input[str] service_id: The ID of the API gateway service.
        :param pulumi.Input[str] strategy_id: The ID of the API gateway strategy.
        """
        pulumi.set(__self__, "bind_api_id", bind_api_id)
        pulumi.set(__self__, "environment_name", environment_name)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "strategy_id", strategy_id)

    @property
    @pulumi.getter(name="bindApiId")
    def bind_api_id(self) -> pulumi.Input[str]:
        """
        The API that needs to be bound.
        """
        return pulumi.get(self, "bind_api_id")

    @bind_api_id.setter
    def bind_api_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "bind_api_id", value)

    @property
    @pulumi.getter(name="environmentName")
    def environment_name(self) -> pulumi.Input[str]:
        """
        The environment of the strategy association. Valid values: `test`, `release`, `prepub`.
        """
        return pulumi.get(self, "environment_name")

    @environment_name.setter
    def environment_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment_name", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Input[str]:
        """
        The ID of the API gateway service.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="strategyId")
    def strategy_id(self) -> pulumi.Input[str]:
        """
        The ID of the API gateway strategy.
        """
        return pulumi.get(self, "strategy_id")

    @strategy_id.setter
    def strategy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "strategy_id", value)


@pulumi.input_type
class _StrategyAttachmentState:
    def __init__(__self__, *,
                 bind_api_id: Optional[pulumi.Input[str]] = None,
                 environment_name: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 strategy_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering StrategyAttachment resources.
        :param pulumi.Input[str] bind_api_id: The API that needs to be bound.
        :param pulumi.Input[str] environment_name: The environment of the strategy association. Valid values: `test`, `release`, `prepub`.
        :param pulumi.Input[str] service_id: The ID of the API gateway service.
        :param pulumi.Input[str] strategy_id: The ID of the API gateway strategy.
        """
        if bind_api_id is not None:
            pulumi.set(__self__, "bind_api_id", bind_api_id)
        if environment_name is not None:
            pulumi.set(__self__, "environment_name", environment_name)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if strategy_id is not None:
            pulumi.set(__self__, "strategy_id", strategy_id)

    @property
    @pulumi.getter(name="bindApiId")
    def bind_api_id(self) -> Optional[pulumi.Input[str]]:
        """
        The API that needs to be bound.
        """
        return pulumi.get(self, "bind_api_id")

    @bind_api_id.setter
    def bind_api_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bind_api_id", value)

    @property
    @pulumi.getter(name="environmentName")
    def environment_name(self) -> Optional[pulumi.Input[str]]:
        """
        The environment of the strategy association. Valid values: `test`, `release`, `prepub`.
        """
        return pulumi.get(self, "environment_name")

    @environment_name.setter
    def environment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_name", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the API gateway service.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="strategyId")
    def strategy_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the API gateway strategy.
        """
        return pulumi.get(self, "strategy_id")

    @strategy_id.setter
    def strategy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy_id", value)


class StrategyAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bind_api_id: Optional[pulumi.Input[str]] = None,
                 environment_name: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 strategy_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a StrategyAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bind_api_id: The API that needs to be bound.
        :param pulumi.Input[str] environment_name: The environment of the strategy association. Valid values: `test`, `release`, `prepub`.
        :param pulumi.Input[str] service_id: The ID of the API gateway service.
        :param pulumi.Input[str] strategy_id: The ID of the API gateway strategy.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StrategyAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a StrategyAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param StrategyAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StrategyAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bind_api_id: Optional[pulumi.Input[str]] = None,
                 environment_name: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 strategy_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StrategyAttachmentArgs.__new__(StrategyAttachmentArgs)

            if bind_api_id is None and not opts.urn:
                raise TypeError("Missing required property 'bind_api_id'")
            __props__.__dict__["bind_api_id"] = bind_api_id
            if environment_name is None and not opts.urn:
                raise TypeError("Missing required property 'environment_name'")
            __props__.__dict__["environment_name"] = environment_name
            if service_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_id'")
            __props__.__dict__["service_id"] = service_id
            if strategy_id is None and not opts.urn:
                raise TypeError("Missing required property 'strategy_id'")
            __props__.__dict__["strategy_id"] = strategy_id
        super(StrategyAttachment, __self__).__init__(
            'tencentcloud:ApiGateway/strategyAttachment:StrategyAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bind_api_id: Optional[pulumi.Input[str]] = None,
            environment_name: Optional[pulumi.Input[str]] = None,
            service_id: Optional[pulumi.Input[str]] = None,
            strategy_id: Optional[pulumi.Input[str]] = None) -> 'StrategyAttachment':
        """
        Get an existing StrategyAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bind_api_id: The API that needs to be bound.
        :param pulumi.Input[str] environment_name: The environment of the strategy association. Valid values: `test`, `release`, `prepub`.
        :param pulumi.Input[str] service_id: The ID of the API gateway service.
        :param pulumi.Input[str] strategy_id: The ID of the API gateway strategy.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StrategyAttachmentState.__new__(_StrategyAttachmentState)

        __props__.__dict__["bind_api_id"] = bind_api_id
        __props__.__dict__["environment_name"] = environment_name
        __props__.__dict__["service_id"] = service_id
        __props__.__dict__["strategy_id"] = strategy_id
        return StrategyAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bindApiId")
    def bind_api_id(self) -> pulumi.Output[str]:
        """
        The API that needs to be bound.
        """
        return pulumi.get(self, "bind_api_id")

    @property
    @pulumi.getter(name="environmentName")
    def environment_name(self) -> pulumi.Output[str]:
        """
        The environment of the strategy association. Valid values: `test`, `release`, `prepub`.
        """
        return pulumi.get(self, "environment_name")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[str]:
        """
        The ID of the API gateway service.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="strategyId")
    def strategy_id(self) -> pulumi.Output[str]:
        """
        The ID of the API gateway strategy.
        """
        return pulumi.get(self, "strategy_id")

