# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'InstanceDataDiskArgs',
    'GetTypesFilterArgs',
]

@pulumi.input_type
class InstanceDataDiskArgs:
    def __init__(__self__, *,
                 data_disk_size: pulumi.Input[int],
                 data_disk_type: pulumi.Input[str],
                 data_disk_id: Optional[pulumi.Input[str]] = None,
                 data_disk_snapshot_id: Optional[pulumi.Input[str]] = None,
                 delete_with_instance: Optional[pulumi.Input[bool]] = None,
                 encrypt: Optional[pulumi.Input[bool]] = None,
                 throughput_performance: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "data_disk_size", data_disk_size)
        pulumi.set(__self__, "data_disk_type", data_disk_type)
        if data_disk_id is not None:
            pulumi.set(__self__, "data_disk_id", data_disk_id)
        if data_disk_snapshot_id is not None:
            pulumi.set(__self__, "data_disk_snapshot_id", data_disk_snapshot_id)
        if delete_with_instance is not None:
            pulumi.set(__self__, "delete_with_instance", delete_with_instance)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if throughput_performance is not None:
            pulumi.set(__self__, "throughput_performance", throughput_performance)

    @property
    @pulumi.getter(name="dataDiskSize")
    def data_disk_size(self) -> pulumi.Input[int]:
        return pulumi.get(self, "data_disk_size")

    @data_disk_size.setter
    def data_disk_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "data_disk_size", value)

    @property
    @pulumi.getter(name="dataDiskType")
    def data_disk_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_disk_type")

    @data_disk_type.setter
    def data_disk_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_disk_type", value)

    @property
    @pulumi.getter(name="dataDiskId")
    def data_disk_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_disk_id")

    @data_disk_id.setter
    def data_disk_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_disk_id", value)

    @property
    @pulumi.getter(name="dataDiskSnapshotId")
    def data_disk_snapshot_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_disk_snapshot_id")

    @data_disk_snapshot_id.setter
    def data_disk_snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_disk_snapshot_id", value)

    @property
    @pulumi.getter(name="deleteWithInstance")
    def delete_with_instance(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_with_instance")

    @delete_with_instance.setter
    def delete_with_instance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_with_instance", value)

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypt", value)

    @property
    @pulumi.getter(name="throughputPerformance")
    def throughput_performance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "throughput_performance")

    @throughput_performance.setter
    def throughput_performance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throughput_performance", value)


@pulumi.input_type
class GetTypesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


