# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDomainErrorPagesResult',
    'AwaitableGetDomainErrorPagesResult',
    'get_domain_error_pages',
    'get_domain_error_pages_output',
]

@pulumi.output_type
class GetDomainErrorPagesResult:
    """
    A collection of values returned by getDomainErrorPages.
    """
    def __init__(__self__, domain=None, error_page_info_lists=None, id=None, ids=None, listener_id=None, result_output_file=None):
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if error_page_info_lists and not isinstance(error_page_info_lists, list):
            raise TypeError("Expected argument 'error_page_info_lists' to be a list")
        pulumi.set(__self__, "error_page_info_lists", error_page_info_lists)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if listener_id and not isinstance(listener_id, str):
            raise TypeError("Expected argument 'listener_id' to be a str")
        pulumi.set(__self__, "listener_id", listener_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="errorPageInfoLists")
    def error_page_info_lists(self) -> Sequence['outputs.GetDomainErrorPagesErrorPageInfoListResult']:
        return pulumi.get(self, "error_page_info_lists")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetDomainErrorPagesResult(GetDomainErrorPagesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainErrorPagesResult(
            domain=self.domain,
            error_page_info_lists=self.error_page_info_lists,
            id=self.id,
            ids=self.ids,
            listener_id=self.listener_id,
            result_output_file=self.result_output_file)


def get_domain_error_pages(domain: Optional[str] = None,
                           ids: Optional[Sequence[str]] = None,
                           listener_id: Optional[str] = None,
                           result_output_file: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainErrorPagesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['ids'] = ids
    __args__['listenerId'] = listener_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Gaap/getDomainErrorPages:getDomainErrorPages', __args__, opts=opts, typ=GetDomainErrorPagesResult).value

    return AwaitableGetDomainErrorPagesResult(
        domain=pulumi.get(__ret__, 'domain'),
        error_page_info_lists=pulumi.get(__ret__, 'error_page_info_lists'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        listener_id=pulumi.get(__ret__, 'listener_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_domain_error_pages)
def get_domain_error_pages_output(domain: Optional[pulumi.Input[str]] = None,
                                  ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                  listener_id: Optional[pulumi.Input[str]] = None,
                                  result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDomainErrorPagesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
