# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'TaskSetBatchTasks',
    'GetNodeNodeDefineResult',
    'GetProbeDataDetailedSingleDataDefineResult',
    'GetProbeDataDetailedSingleDataDefineFieldResult',
    'GetProbeDataDetailedSingleDataDefineLabelResult',
]

@pulumi.output_type
class TaskSetBatchTasks(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetAddress":
            suggest = "target_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskSetBatchTasks. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskSetBatchTasks.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskSetBatchTasks.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 target_address: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "target_address", target_address)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="targetAddress")
    def target_address(self) -> str:
        return pulumi.get(self, "target_address")


@pulumi.output_type
class GetNodeNodeDefineResult(dict):
    def __init__(__self__, *,
                 city: str,
                 code: str,
                 code_type: str,
                 district: str,
                 ip_type: int,
                 location: int,
                 name: str,
                 net_service: str,
                 node_define_status: int,
                 type: int):
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "code_type", code_type)
        pulumi.set(__self__, "district", district)
        pulumi.set(__self__, "ip_type", ip_type)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "net_service", net_service)
        pulumi.set(__self__, "node_define_status", node_define_status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="codeType")
    def code_type(self) -> str:
        return pulumi.get(self, "code_type")

    @property
    @pulumi.getter
    def district(self) -> str:
        return pulumi.get(self, "district")

    @property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> int:
        return pulumi.get(self, "ip_type")

    @property
    @pulumi.getter
    def location(self) -> int:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="netService")
    def net_service(self) -> str:
        return pulumi.get(self, "net_service")

    @property
    @pulumi.getter(name="nodeDefineStatus")
    def node_define_status(self) -> int:
        return pulumi.get(self, "node_define_status")

    @property
    @pulumi.getter
    def type(self) -> int:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetProbeDataDetailedSingleDataDefineResult(dict):
    def __init__(__self__, *,
                 fields: Sequence['outputs.GetProbeDataDetailedSingleDataDefineFieldResult'],
                 labels: Sequence['outputs.GetProbeDataDetailedSingleDataDefineLabelResult'],
                 probe_time: int):
        pulumi.set(__self__, "fields", fields)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "probe_time", probe_time)

    @property
    @pulumi.getter
    def fields(self) -> Sequence['outputs.GetProbeDataDetailedSingleDataDefineFieldResult']:
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetProbeDataDetailedSingleDataDefineLabelResult']:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="probeTime")
    def probe_time(self) -> int:
        return pulumi.get(self, "probe_time")


@pulumi.output_type
class GetProbeDataDetailedSingleDataDefineFieldResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 value: float):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> float:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProbeDataDetailedSingleDataDefineLabelResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 value: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


