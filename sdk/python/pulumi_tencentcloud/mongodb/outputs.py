# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'InstanceAccountAuthRole',
    'InstanceBackupDownloadTaskBackupSet',
    'InstanceStandbyInstanceList',
    'GetInstanceBackupsBackupListResult',
    'GetInstanceConnectionsClientResult',
    'GetInstanceCurrentOpCurrentOpResult',
    'GetInstanceParamsInstanceEnumParamResult',
    'GetInstanceParamsInstanceIntegerParamResult',
    'GetInstanceParamsInstanceMultiParamResult',
    'GetInstanceParamsInstanceTextParamResult',
    'GetInstancesInstanceListResult',
    'GetZoneConfigListResult',
]

@pulumi.output_type
class InstanceAccountAuthRole(dict):
    def __init__(__self__, *,
                 mask: int,
                 namespace: str):
        pulumi.set(__self__, "mask", mask)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def mask(self) -> int:
        return pulumi.get(self, "mask")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")


@pulumi.output_type
class InstanceBackupDownloadTaskBackupSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "replicaSetId":
            suggest = "replica_set_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceBackupDownloadTaskBackupSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceBackupDownloadTaskBackupSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceBackupDownloadTaskBackupSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 replica_set_id: str):
        pulumi.set(__self__, "replica_set_id", replica_set_id)

    @property
    @pulumi.getter(name="replicaSetId")
    def replica_set_id(self) -> str:
        return pulumi.get(self, "replica_set_id")


@pulumi.output_type
class InstanceStandbyInstanceList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "standbyInstanceId":
            suggest = "standby_instance_id"
        elif key == "standbyInstanceRegion":
            suggest = "standby_instance_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStandbyInstanceList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStandbyInstanceList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStandbyInstanceList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 standby_instance_id: Optional[str] = None,
                 standby_instance_region: Optional[str] = None):
        if standby_instance_id is not None:
            pulumi.set(__self__, "standby_instance_id", standby_instance_id)
        if standby_instance_region is not None:
            pulumi.set(__self__, "standby_instance_region", standby_instance_region)

    @property
    @pulumi.getter(name="standbyInstanceId")
    def standby_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "standby_instance_id")

    @property
    @pulumi.getter(name="standbyInstanceRegion")
    def standby_instance_region(self) -> Optional[str]:
        return pulumi.get(self, "standby_instance_region")


@pulumi.output_type
class GetInstanceBackupsBackupListResult(dict):
    def __init__(__self__, *,
                 backup_desc: str,
                 backup_method: int,
                 backup_name: str,
                 backup_size: int,
                 backup_type: int,
                 end_time: str,
                 instance_id: str,
                 start_time: str,
                 status: int):
        pulumi.set(__self__, "backup_desc", backup_desc)
        pulumi.set(__self__, "backup_method", backup_method)
        pulumi.set(__self__, "backup_name", backup_name)
        pulumi.set(__self__, "backup_size", backup_size)
        pulumi.set(__self__, "backup_type", backup_type)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="backupDesc")
    def backup_desc(self) -> str:
        return pulumi.get(self, "backup_desc")

    @property
    @pulumi.getter(name="backupMethod")
    def backup_method(self) -> int:
        return pulumi.get(self, "backup_method")

    @property
    @pulumi.getter(name="backupName")
    def backup_name(self) -> str:
        return pulumi.get(self, "backup_name")

    @property
    @pulumi.getter(name="backupSize")
    def backup_size(self) -> int:
        return pulumi.get(self, "backup_size")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> int:
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetInstanceConnectionsClientResult(dict):
    def __init__(__self__, *,
                 count: int,
                 internal_service: bool,
                 ip: str):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "internal_service", internal_service)
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def count(self) -> int:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="internalService")
    def internal_service(self) -> bool:
        return pulumi.get(self, "internal_service")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetInstanceCurrentOpCurrentOpResult(dict):
    def __init__(__self__, *,
                 microsecs_running: int,
                 node_name: str,
                 ns: str,
                 op: str,
                 op_id: int,
                 operation: str,
                 query: str,
                 replica_set_name: str,
                 state: str):
        pulumi.set(__self__, "microsecs_running", microsecs_running)
        pulumi.set(__self__, "node_name", node_name)
        pulumi.set(__self__, "ns", ns)
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "op_id", op_id)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "replica_set_name", replica_set_name)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="microsecsRunning")
    def microsecs_running(self) -> int:
        return pulumi.get(self, "microsecs_running")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> str:
        return pulumi.get(self, "node_name")

    @property
    @pulumi.getter
    def ns(self) -> str:
        return pulumi.get(self, "ns")

    @property
    @pulumi.getter
    def op(self) -> str:
        return pulumi.get(self, "op")

    @property
    @pulumi.getter(name="opId")
    def op_id(self) -> int:
        return pulumi.get(self, "op_id")

    @property
    @pulumi.getter
    def operation(self) -> str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="replicaSetName")
    def replica_set_name(self) -> str:
        return pulumi.get(self, "replica_set_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetInstanceParamsInstanceEnumParamResult(dict):
    def __init__(__self__, *,
                 current_value: str,
                 default_value: str,
                 enum_values: Sequence[str],
                 need_restart: str,
                 param_name: str,
                 status: int,
                 tips: Sequence[str],
                 value_type: str):
        pulumi.set(__self__, "current_value", current_value)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "enum_values", enum_values)
        pulumi.set(__self__, "need_restart", need_restart)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tips", tips)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> str:
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="enumValues")
    def enum_values(self) -> Sequence[str]:
        return pulumi.get(self, "enum_values")

    @property
    @pulumi.getter(name="needRestart")
    def need_restart(self) -> str:
        return pulumi.get(self, "need_restart")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tips(self) -> Sequence[str]:
        return pulumi.get(self, "tips")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetInstanceParamsInstanceIntegerParamResult(dict):
    def __init__(__self__, *,
                 current_value: str,
                 default_value: str,
                 max: str,
                 min: str,
                 need_restart: str,
                 param_name: str,
                 status: int,
                 tips: Sequence[str],
                 value_type: str):
        pulumi.set(__self__, "current_value", current_value)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "need_restart", need_restart)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tips", tips)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> str:
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def max(self) -> str:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> str:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="needRestart")
    def need_restart(self) -> str:
        return pulumi.get(self, "need_restart")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tips(self) -> Sequence[str]:
        return pulumi.get(self, "tips")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetInstanceParamsInstanceMultiParamResult(dict):
    def __init__(__self__, *,
                 current_value: str,
                 default_value: str,
                 enum_values: Sequence[str],
                 need_restart: str,
                 param_name: str,
                 status: int,
                 tips: Sequence[str],
                 value_type: str):
        pulumi.set(__self__, "current_value", current_value)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "enum_values", enum_values)
        pulumi.set(__self__, "need_restart", need_restart)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tips", tips)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> str:
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="enumValues")
    def enum_values(self) -> Sequence[str]:
        return pulumi.get(self, "enum_values")

    @property
    @pulumi.getter(name="needRestart")
    def need_restart(self) -> str:
        return pulumi.get(self, "need_restart")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tips(self) -> Sequence[str]:
        return pulumi.get(self, "tips")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetInstanceParamsInstanceTextParamResult(dict):
    def __init__(__self__, *,
                 current_value: str,
                 default_value: str,
                 need_restart: str,
                 param_name: str,
                 status: str,
                 text_value: str,
                 tips: Sequence[str],
                 value_type: str):
        pulumi.set(__self__, "current_value", current_value)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "need_restart", need_restart)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "text_value", text_value)
        pulumi.set(__self__, "tips", tips)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> str:
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="needRestart")
    def need_restart(self) -> str:
        return pulumi.get(self, "need_restart")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="textValue")
    def text_value(self) -> str:
        return pulumi.get(self, "text_value")

    @property
    @pulumi.getter
    def tips(self) -> Sequence[str]:
        return pulumi.get(self, "tips")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetInstancesInstanceListResult(dict):
    def __init__(__self__, *,
                 auto_renew_flag: int,
                 available_zone: str,
                 charge_type: str,
                 cluster_type: str,
                 cpu: int,
                 create_time: str,
                 engine_version: str,
                 instance_id: str,
                 instance_name: str,
                 machine_type: str,
                 memory: int,
                 project_id: int,
                 shard_quantity: int,
                 status: int,
                 subnet_id: str,
                 tags: Mapping[str, Any],
                 vip: str,
                 volume: int,
                 vpc_id: str,
                 vport: int):
        pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        pulumi.set(__self__, "available_zone", available_zone)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "shard_quantity", shard_quantity)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "volume", volume)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vport", vport)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> int:
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="availableZone")
    def available_zone(self) -> str:
        return pulumi.get(self, "available_zone")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="shardQuantity")
    def shard_quantity(self) -> int:
        return pulumi.get(self, "shard_quantity")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def vip(self) -> str:
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter
    def volume(self) -> int:
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def vport(self) -> int:
        return pulumi.get(self, "vport")


@pulumi.output_type
class GetZoneConfigListResult(dict):
    def __init__(__self__, *,
                 available_zone: str,
                 cluster_type: str,
                 cpu: int,
                 default_storage: int,
                 engine_version: str,
                 machine_type: str,
                 max_replicate_set_num: int,
                 max_storage: int,
                 memory: int,
                 min_replicate_set_num: int,
                 min_storage: int):
        pulumi.set(__self__, "available_zone", available_zone)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "default_storage", default_storage)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "max_replicate_set_num", max_replicate_set_num)
        pulumi.set(__self__, "max_storage", max_storage)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "min_replicate_set_num", min_replicate_set_num)
        pulumi.set(__self__, "min_storage", min_storage)

    @property
    @pulumi.getter(name="availableZone")
    def available_zone(self) -> str:
        return pulumi.get(self, "available_zone")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="defaultStorage")
    def default_storage(self) -> int:
        return pulumi.get(self, "default_storage")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter(name="maxReplicateSetNum")
    def max_replicate_set_num(self) -> int:
        return pulumi.get(self, "max_replicate_set_num")

    @property
    @pulumi.getter(name="maxStorage")
    def max_storage(self) -> int:
        return pulumi.get(self, "max_storage")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="minReplicateSetNum")
    def min_replicate_set_num(self) -> int:
        return pulumi.get(self, "min_replicate_set_num")

    @property
    @pulumi.getter(name="minStorage")
    def min_storage(self) -> int:
        return pulumi.get(self, "min_storage")


