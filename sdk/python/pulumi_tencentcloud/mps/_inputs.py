# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AdaptiveDynamicStreamingTemplateStreamInfoArgs',
    'AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs',
    'AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs',
    'AiAnalysisTemplateClassificationConfigureArgs',
    'AiAnalysisTemplateCoverConfigureArgs',
    'AiAnalysisTemplateFrameTagConfigureArgs',
    'AiAnalysisTemplateTagConfigureArgs',
    'AiRecognitionTemplateAsrFullTextConfigureArgs',
    'AiRecognitionTemplateAsrWordsConfigureArgs',
    'AiRecognitionTemplateFaceConfigureArgs',
    'AiRecognitionTemplateOcrFullTextConfigureArgs',
    'AiRecognitionTemplateOcrWordsConfigureArgs',
    'TranscodeTemplateAudioTemplateArgs',
    'TranscodeTemplateEnhanceConfigArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepairArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhanceArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceDenoiseArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhanceArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceFrameRateArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceHdrArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhanceArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhanceArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepairArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhanceArgs',
    'TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolutionArgs',
    'TranscodeTemplateTehdConfigArgs',
    'TranscodeTemplateVideoTemplateArgs',
    'WatermarkTemplateImageTemplateArgs',
    'WatermarkTemplateSvgTemplateArgs',
    'WatermarkTemplateTextTemplateArgs',
    'WorkflowAiAnalysisTaskArgs',
    'WorkflowAiContentReviewTaskArgs',
    'WorkflowAiRecognitionTaskArgs',
    'WorkflowMediaProcessTaskArgs',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetArgs',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterArgs',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateArgs',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs',
    'WorkflowMediaProcessTaskAnimatedGraphicTaskSetArgs',
    'WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs',
    'WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs',
    'WorkflowMediaProcessTaskImageSpriteTaskSetArgs',
    'WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormatArgs',
    'WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageArgs',
    'WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorageArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormatArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorageArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormatArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfoArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfoArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfoArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfoArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetMosaicSetArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormatArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorageArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplateArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplateArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfigArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplateArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplateArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfigArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplateArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs',
    'WorkflowOutputStorageArgs',
    'WorkflowOutputStorageCosOutputStorageArgs',
    'WorkflowTaskNotifyConfigArgs',
    'WorkflowTriggerArgs',
    'WorkflowTriggerCosFileUploadTriggerArgs',
]

@pulumi.input_type
class AdaptiveDynamicStreamingTemplateStreamInfoArgs:
    def __init__(__self__, *,
                 audio: pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs'],
                 video: pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs'],
                 remove_audio: Optional[pulumi.Input[int]] = None,
                 remove_video: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "audio", audio)
        pulumi.set(__self__, "video", video)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)

    @property
    @pulumi.getter
    def audio(self) -> pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs']:
        return pulumi.get(self, "audio")

    @audio.setter
    def audio(self, value: pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs']):
        pulumi.set(self, "audio", value)

    @property
    @pulumi.getter
    def video(self) -> pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs']:
        return pulumi.get(self, "video")

    @video.setter
    def video(self, value: pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs']):
        pulumi.set(self, "video", value)

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_audio")

    @remove_audio.setter
    def remove_audio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_audio", value)

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_video")

    @remove_video.setter
    def remove_video(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_video", value)


@pulumi.input_type
class AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs:
    def __init__(__self__, *,
                 bitrate: pulumi.Input[int],
                 codec: pulumi.Input[str],
                 sample_rate: pulumi.Input[int],
                 audio_channel: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_rate", value)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audio_channel")

    @audio_channel.setter
    def audio_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audio_channel", value)


@pulumi.input_type
class AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs:
    def __init__(__self__, *,
                 bitrate: pulumi.Input[int],
                 codec: pulumi.Input[str],
                 fps: pulumi.Input[int],
                 fill_type: Optional[pulumi.Input[str]] = None,
                 gop: Optional[pulumi.Input[int]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 resolution_adaptive: Optional[pulumi.Input[str]] = None,
                 vcrf: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter
    def fps(self) -> pulumi.Input[int]:
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: pulumi.Input[int]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fill_type")

    @fill_type.setter
    def fill_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_type", value)

    @property
    @pulumi.getter
    def gop(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gop")

    @gop.setter
    def gop(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gop", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolution_adaptive")

    @resolution_adaptive.setter
    def resolution_adaptive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution_adaptive", value)

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vcrf")

    @vcrf.setter
    def vcrf(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcrf", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class AiAnalysisTemplateClassificationConfigureArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class AiAnalysisTemplateCoverConfigureArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class AiAnalysisTemplateFrameTagConfigureArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class AiAnalysisTemplateTagConfigureArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class AiRecognitionTemplateAsrFullTextConfigureArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 subtitle_format: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "switch", switch)
        if subtitle_format is not None:
            pulumi.set(__self__, "subtitle_format", subtitle_format)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="subtitleFormat")
    def subtitle_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subtitle_format")

    @subtitle_format.setter
    def subtitle_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtitle_format", value)


@pulumi.input_type
class AiRecognitionTemplateAsrWordsConfigureArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 label_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "switch", switch)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "label_sets")

    @label_sets.setter
    def label_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "label_sets", value)


@pulumi.input_type
class AiRecognitionTemplateFaceConfigureArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 default_library_label_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 face_library: Optional[pulumi.Input[str]] = None,
                 score: Optional[pulumi.Input[float]] = None,
                 user_define_library_label_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "switch", switch)
        if default_library_label_sets is not None:
            pulumi.set(__self__, "default_library_label_sets", default_library_label_sets)
        if face_library is not None:
            pulumi.set(__self__, "face_library", face_library)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if user_define_library_label_sets is not None:
            pulumi.set(__self__, "user_define_library_label_sets", user_define_library_label_sets)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="defaultLibraryLabelSets")
    def default_library_label_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "default_library_label_sets")

    @default_library_label_sets.setter
    def default_library_label_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "default_library_label_sets", value)

    @property
    @pulumi.getter(name="faceLibrary")
    def face_library(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "face_library")

    @face_library.setter
    def face_library(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "face_library", value)

    @property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "score", value)

    @property
    @pulumi.getter(name="userDefineLibraryLabelSets")
    def user_define_library_label_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "user_define_library_label_sets")

    @user_define_library_label_sets.setter
    def user_define_library_label_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_define_library_label_sets", value)


@pulumi.input_type
class AiRecognitionTemplateOcrFullTextConfigureArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class AiRecognitionTemplateOcrWordsConfigureArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 label_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "switch", switch)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "label_sets")

    @label_sets.setter
    def label_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "label_sets", value)


@pulumi.input_type
class TranscodeTemplateAudioTemplateArgs:
    def __init__(__self__, *,
                 bitrate: pulumi.Input[int],
                 codec: pulumi.Input[str],
                 sample_rate: pulumi.Input[int],
                 audio_channel: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_rate", value)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audio_channel")

    @audio_channel.setter
    def audio_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audio_channel", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigArgs:
    def __init__(__self__, *,
                 video_enhance: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceArgs']] = None):
        if video_enhance is not None:
            pulumi.set(__self__, "video_enhance", video_enhance)

    @property
    @pulumi.getter(name="videoEnhance")
    def video_enhance(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceArgs']]:
        return pulumi.get(self, "video_enhance")

    @video_enhance.setter
    def video_enhance(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceArgs']]):
        pulumi.set(self, "video_enhance", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceArgs:
    def __init__(__self__, *,
                 artifact_repair: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepairArgs']] = None,
                 color_enhance: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhanceArgs']] = None,
                 denoise: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceDenoiseArgs']] = None,
                 face_enhance: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhanceArgs']] = None,
                 frame_rate: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceFrameRateArgs']] = None,
                 hdr: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceHdrArgs']] = None,
                 image_quality_enhance: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhanceArgs']] = None,
                 low_light_enhance: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhanceArgs']] = None,
                 scratch_repair: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepairArgs']] = None,
                 sharp_enhance: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhanceArgs']] = None,
                 super_resolution: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolutionArgs']] = None):
        if artifact_repair is not None:
            pulumi.set(__self__, "artifact_repair", artifact_repair)
        if color_enhance is not None:
            pulumi.set(__self__, "color_enhance", color_enhance)
        if denoise is not None:
            pulumi.set(__self__, "denoise", denoise)
        if face_enhance is not None:
            pulumi.set(__self__, "face_enhance", face_enhance)
        if frame_rate is not None:
            pulumi.set(__self__, "frame_rate", frame_rate)
        if hdr is not None:
            pulumi.set(__self__, "hdr", hdr)
        if image_quality_enhance is not None:
            pulumi.set(__self__, "image_quality_enhance", image_quality_enhance)
        if low_light_enhance is not None:
            pulumi.set(__self__, "low_light_enhance", low_light_enhance)
        if scratch_repair is not None:
            pulumi.set(__self__, "scratch_repair", scratch_repair)
        if sharp_enhance is not None:
            pulumi.set(__self__, "sharp_enhance", sharp_enhance)
        if super_resolution is not None:
            pulumi.set(__self__, "super_resolution", super_resolution)

    @property
    @pulumi.getter(name="artifactRepair")
    def artifact_repair(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepairArgs']]:
        return pulumi.get(self, "artifact_repair")

    @artifact_repair.setter
    def artifact_repair(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepairArgs']]):
        pulumi.set(self, "artifact_repair", value)

    @property
    @pulumi.getter(name="colorEnhance")
    def color_enhance(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhanceArgs']]:
        return pulumi.get(self, "color_enhance")

    @color_enhance.setter
    def color_enhance(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhanceArgs']]):
        pulumi.set(self, "color_enhance", value)

    @property
    @pulumi.getter
    def denoise(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceDenoiseArgs']]:
        return pulumi.get(self, "denoise")

    @denoise.setter
    def denoise(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceDenoiseArgs']]):
        pulumi.set(self, "denoise", value)

    @property
    @pulumi.getter(name="faceEnhance")
    def face_enhance(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhanceArgs']]:
        return pulumi.get(self, "face_enhance")

    @face_enhance.setter
    def face_enhance(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhanceArgs']]):
        pulumi.set(self, "face_enhance", value)

    @property
    @pulumi.getter(name="frameRate")
    def frame_rate(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceFrameRateArgs']]:
        return pulumi.get(self, "frame_rate")

    @frame_rate.setter
    def frame_rate(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceFrameRateArgs']]):
        pulumi.set(self, "frame_rate", value)

    @property
    @pulumi.getter
    def hdr(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceHdrArgs']]:
        return pulumi.get(self, "hdr")

    @hdr.setter
    def hdr(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceHdrArgs']]):
        pulumi.set(self, "hdr", value)

    @property
    @pulumi.getter(name="imageQualityEnhance")
    def image_quality_enhance(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhanceArgs']]:
        return pulumi.get(self, "image_quality_enhance")

    @image_quality_enhance.setter
    def image_quality_enhance(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhanceArgs']]):
        pulumi.set(self, "image_quality_enhance", value)

    @property
    @pulumi.getter(name="lowLightEnhance")
    def low_light_enhance(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhanceArgs']]:
        return pulumi.get(self, "low_light_enhance")

    @low_light_enhance.setter
    def low_light_enhance(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhanceArgs']]):
        pulumi.set(self, "low_light_enhance", value)

    @property
    @pulumi.getter(name="scratchRepair")
    def scratch_repair(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepairArgs']]:
        return pulumi.get(self, "scratch_repair")

    @scratch_repair.setter
    def scratch_repair(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepairArgs']]):
        pulumi.set(self, "scratch_repair", value)

    @property
    @pulumi.getter(name="sharpEnhance")
    def sharp_enhance(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhanceArgs']]:
        return pulumi.get(self, "sharp_enhance")

    @sharp_enhance.setter
    def sharp_enhance(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhanceArgs']]):
        pulumi.set(self, "sharp_enhance", value)

    @property
    @pulumi.getter(name="superResolution")
    def super_resolution(self) -> Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolutionArgs']]:
        return pulumi.get(self, "super_resolution")

    @super_resolution.setter
    def super_resolution(self, value: Optional[pulumi.Input['TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolutionArgs']]):
        pulumi.set(self, "super_resolution", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepairArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhanceArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceDenoiseArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhanceArgs:
    def __init__(__self__, *,
                 intensity: Optional[pulumi.Input[float]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        if intensity is not None:
            pulumi.set(__self__, "intensity", intensity)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def intensity(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "intensity")

    @intensity.setter
    def intensity(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "intensity", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceFrameRateArgs:
    def __init__(__self__, *,
                 fps: Optional[pulumi.Input[int]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def fps(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceHdrArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhanceArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhanceArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepairArgs:
    def __init__(__self__, *,
                 intensity: Optional[pulumi.Input[float]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        if intensity is not None:
            pulumi.set(__self__, "intensity", intensity)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def intensity(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "intensity")

    @intensity.setter
    def intensity(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "intensity", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhanceArgs:
    def __init__(__self__, *,
                 intensity: Optional[pulumi.Input[float]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        if intensity is not None:
            pulumi.set(__self__, "intensity", intensity)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def intensity(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "intensity")

    @intensity.setter
    def intensity(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "intensity", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolutionArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[int]] = None,
                 switch: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if size is not None:
            pulumi.set(__self__, "size", size)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TranscodeTemplateTehdConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 max_video_bitrate: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "type", type)
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_video_bitrate")

    @max_video_bitrate.setter
    def max_video_bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_video_bitrate", value)


@pulumi.input_type
class TranscodeTemplateVideoTemplateArgs:
    def __init__(__self__, *,
                 bitrate: pulumi.Input[int],
                 codec: pulumi.Input[str],
                 fps: pulumi.Input[int],
                 fill_type: Optional[pulumi.Input[str]] = None,
                 gop: Optional[pulumi.Input[int]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 resolution_adaptive: Optional[pulumi.Input[str]] = None,
                 vcrf: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter
    def fps(self) -> pulumi.Input[int]:
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: pulumi.Input[int]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fill_type")

    @fill_type.setter
    def fill_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_type", value)

    @property
    @pulumi.getter
    def gop(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gop")

    @gop.setter
    def gop(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gop", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolution_adaptive")

    @resolution_adaptive.setter
    def resolution_adaptive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution_adaptive", value)

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vcrf")

    @vcrf.setter
    def vcrf(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcrf", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WatermarkTemplateImageTemplateArgs:
    def __init__(__self__, *,
                 image_content: pulumi.Input[str],
                 height: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "image_content")

    @image_content.setter
    def image_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_content", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WatermarkTemplateSvgTemplateArgs:
    def __init__(__self__, *,
                 height: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        if height is not None:
            pulumi.set(__self__, "height", height)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WatermarkTemplateTextTemplateArgs:
    def __init__(__self__, *,
                 font_alpha: pulumi.Input[float],
                 font_color: pulumi.Input[str],
                 font_size: pulumi.Input[str],
                 font_type: pulumi.Input[str]):
        pulumi.set(__self__, "font_alpha", font_alpha)
        pulumi.set(__self__, "font_color", font_color)
        pulumi.set(__self__, "font_size", font_size)
        pulumi.set(__self__, "font_type", font_type)

    @property
    @pulumi.getter(name="fontAlpha")
    def font_alpha(self) -> pulumi.Input[float]:
        return pulumi.get(self, "font_alpha")

    @font_alpha.setter
    def font_alpha(self, value: pulumi.Input[float]):
        pulumi.set(self, "font_alpha", value)

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "font_color")

    @font_color.setter
    def font_color(self, value: pulumi.Input[str]):
        pulumi.set(self, "font_color", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> pulumi.Input[str]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: pulumi.Input[str]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "font_type")

    @font_type.setter
    def font_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "font_type", value)


@pulumi.input_type
class WorkflowAiAnalysisTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 extended_parameter: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if extended_parameter is not None:
            pulumi.set(__self__, "extended_parameter", extended_parameter)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="extendedParameter")
    def extended_parameter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extended_parameter")

    @extended_parameter.setter
    def extended_parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_parameter", value)


@pulumi.input_type
class WorkflowAiContentReviewTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int]):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)


@pulumi.input_type
class WorkflowAiRecognitionTaskArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int]):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)


@pulumi.input_type
class WorkflowMediaProcessTaskArgs:
    def __init__(__self__, *,
                 adaptive_dynamic_streaming_task_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs']]]] = None,
                 animated_graphic_task_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskAnimatedGraphicTaskSetArgs']]]] = None,
                 image_sprite_task_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetArgs']]]] = None,
                 sample_snapshot_task_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetArgs']]]] = None,
                 snapshot_by_time_offset_task_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs']]]] = None,
                 transcode_task_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetArgs']]]] = None):
        if adaptive_dynamic_streaming_task_sets is not None:
            pulumi.set(__self__, "adaptive_dynamic_streaming_task_sets", adaptive_dynamic_streaming_task_sets)
        if animated_graphic_task_sets is not None:
            pulumi.set(__self__, "animated_graphic_task_sets", animated_graphic_task_sets)
        if image_sprite_task_sets is not None:
            pulumi.set(__self__, "image_sprite_task_sets", image_sprite_task_sets)
        if sample_snapshot_task_sets is not None:
            pulumi.set(__self__, "sample_snapshot_task_sets", sample_snapshot_task_sets)
        if snapshot_by_time_offset_task_sets is not None:
            pulumi.set(__self__, "snapshot_by_time_offset_task_sets", snapshot_by_time_offset_task_sets)
        if transcode_task_sets is not None:
            pulumi.set(__self__, "transcode_task_sets", transcode_task_sets)

    @property
    @pulumi.getter(name="adaptiveDynamicStreamingTaskSets")
    def adaptive_dynamic_streaming_task_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs']]]]:
        return pulumi.get(self, "adaptive_dynamic_streaming_task_sets")

    @adaptive_dynamic_streaming_task_sets.setter
    def adaptive_dynamic_streaming_task_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs']]]]):
        pulumi.set(self, "adaptive_dynamic_streaming_task_sets", value)

    @property
    @pulumi.getter(name="animatedGraphicTaskSets")
    def animated_graphic_task_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskAnimatedGraphicTaskSetArgs']]]]:
        return pulumi.get(self, "animated_graphic_task_sets")

    @animated_graphic_task_sets.setter
    def animated_graphic_task_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskAnimatedGraphicTaskSetArgs']]]]):
        pulumi.set(self, "animated_graphic_task_sets", value)

    @property
    @pulumi.getter(name="imageSpriteTaskSets")
    def image_sprite_task_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetArgs']]]]:
        return pulumi.get(self, "image_sprite_task_sets")

    @image_sprite_task_sets.setter
    def image_sprite_task_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetArgs']]]]):
        pulumi.set(self, "image_sprite_task_sets", value)

    @property
    @pulumi.getter(name="sampleSnapshotTaskSets")
    def sample_snapshot_task_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetArgs']]]]:
        return pulumi.get(self, "sample_snapshot_task_sets")

    @sample_snapshot_task_sets.setter
    def sample_snapshot_task_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetArgs']]]]):
        pulumi.set(self, "sample_snapshot_task_sets", value)

    @property
    @pulumi.getter(name="snapshotByTimeOffsetTaskSets")
    def snapshot_by_time_offset_task_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs']]]]:
        return pulumi.get(self, "snapshot_by_time_offset_task_sets")

    @snapshot_by_time_offset_task_sets.setter
    def snapshot_by_time_offset_task_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs']]]]):
        pulumi.set(self, "snapshot_by_time_offset_task_sets", value)

    @property
    @pulumi.getter(name="transcodeTaskSets")
    def transcode_task_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetArgs']]]]:
        return pulumi.get(self, "transcode_task_sets")

    @transcode_task_sets.setter
    def transcode_task_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetArgs']]]]):
        pulumi.set(self, "transcode_task_sets", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs']] = None,
                 segment_object_name: Optional[pulumi.Input[str]] = None,
                 sub_stream_object_name: Optional[pulumi.Input[str]] = None,
                 watermark_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetArgs']]]] = None):
        pulumi.set(__self__, "definition", definition)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if sub_stream_object_name is not None:
            pulumi.set(__self__, "sub_stream_object_name", sub_stream_object_name)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "segment_object_name")

    @segment_object_name.setter
    def segment_object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_object_name", value)

    @property
    @pulumi.getter(name="subStreamObjectName")
    def sub_stream_object_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_stream_object_name")

    @sub_stream_object_name.setter
    def sub_stream_object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_stream_object_name", value)

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetArgs']]]]:
        return pulumi.get(self, "watermark_sets")

    @watermark_sets.setter
    def watermark_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetArgs']]]]):
        pulumi.set(self, "watermark_sets", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 raw_parameter: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterArgs']] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 svg_content: Optional[pulumi.Input[str]] = None,
                 text_content: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "svg_content")

    @svg_content.setter
    def svg_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "svg_content", value)

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_content")

    @text_content.setter
    def text_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_content", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateArgs']] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateArgs']]:
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateArgs:
    def __init__(__self__, *,
                 image_content: pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs'],
                 height: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']:
        return pulumi.get(self, "image_content")

    @image_content.setter
    def image_content(self, value: pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']):
        pulumi.set(self, "image_content", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAnimatedGraphicTaskSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: pulumi.Input[float],
                 start_time_offset: pulumi.Input[float],
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs']] = None):
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> pulumi.Input[float]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: pulumi.Input[float]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> pulumi.Input[float]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: pulumi.Input[float]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)


@pulumi.input_type
class WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskImageSpriteTaskSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 object_number_format: Optional[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormatArgs']] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageArgs']] = None,
                 web_vtt_object_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if web_vtt_object_name is not None:
            pulumi.set(__self__, "web_vtt_object_name", web_vtt_object_name)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormatArgs']]:
        return pulumi.get(self, "object_number_format")

    @object_number_format.setter
    def object_number_format(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormatArgs']]):
        pulumi.set(self, "object_number_format", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="webVttObjectName")
    def web_vtt_object_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_vtt_object_name")

    @web_vtt_object_name.setter
    def web_vtt_object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_vtt_object_name", value)


@pulumi.input_type
class WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormatArgs:
    def __init__(__self__, *,
                 increment: Optional[pulumi.Input[int]] = None,
                 initial_value: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 place_holder: Optional[pulumi.Input[str]] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "increment")

    @increment.setter
    def increment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "increment", value)

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_value")

    @initial_value.setter
    def initial_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_value", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "place_holder")

    @place_holder.setter
    def place_holder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "place_holder", value)


@pulumi.input_type
class WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)


@pulumi.input_type
class WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 object_number_format: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormatArgs']] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageArgs']] = None,
                 watermark_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetArgs']]]] = None):
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormatArgs']]:
        return pulumi.get(self, "object_number_format")

    @object_number_format.setter
    def object_number_format(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormatArgs']]):
        pulumi.set(self, "object_number_format", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetArgs']]]]:
        return pulumi.get(self, "watermark_sets")

    @watermark_sets.setter
    def watermark_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetArgs']]]]):
        pulumi.set(self, "watermark_sets", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormatArgs:
    def __init__(__self__, *,
                 increment: Optional[pulumi.Input[int]] = None,
                 initial_value: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 place_holder: Optional[pulumi.Input[str]] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "increment")

    @increment.setter
    def increment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "increment", value)

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_value")

    @initial_value.setter
    def initial_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_value", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "place_holder")

    @place_holder.setter
    def place_holder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "place_holder", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 raw_parameter: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterArgs']] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 svg_content: Optional[pulumi.Input[str]] = None,
                 text_content: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "svg_content")

    @svg_content.setter
    def svg_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "svg_content", value)

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_content")

    @text_content.setter
    def text_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_content", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateArgs']] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateArgs']]:
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateArgs:
    def __init__(__self__, *,
                 image_content: pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs'],
                 height: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']:
        return pulumi.get(self, "image_content")

    @image_content.setter
    def image_content(self, value: pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']):
        pulumi.set(self, "image_content", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 ext_time_offset_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 object_number_format: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormatArgs']] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs']] = None,
                 time_offset_sets: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 watermark_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetArgs']]]] = None):
        pulumi.set(__self__, "definition", definition)
        if ext_time_offset_sets is not None:
            pulumi.set(__self__, "ext_time_offset_sets", ext_time_offset_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if time_offset_sets is not None:
            pulumi.set(__self__, "time_offset_sets", time_offset_sets)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="extTimeOffsetSets")
    def ext_time_offset_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ext_time_offset_sets")

    @ext_time_offset_sets.setter
    def ext_time_offset_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ext_time_offset_sets", value)

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormatArgs']]:
        return pulumi.get(self, "object_number_format")

    @object_number_format.setter
    def object_number_format(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormatArgs']]):
        pulumi.set(self, "object_number_format", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="timeOffsetSets")
    def time_offset_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "time_offset_sets")

    @time_offset_sets.setter
    def time_offset_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "time_offset_sets", value)

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetArgs']]]]:
        return pulumi.get(self, "watermark_sets")

    @watermark_sets.setter
    def watermark_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetArgs']]]]):
        pulumi.set(self, "watermark_sets", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormatArgs:
    def __init__(__self__, *,
                 increment: Optional[pulumi.Input[int]] = None,
                 initial_value: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 place_holder: Optional[pulumi.Input[str]] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "increment")

    @increment.setter
    def increment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "increment", value)

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_value")

    @initial_value.setter
    def initial_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_value", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "place_holder")

    @place_holder.setter
    def place_holder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "place_holder", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 raw_parameter: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterArgs']] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 svg_content: Optional[pulumi.Input[str]] = None,
                 text_content: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "svg_content")

    @svg_content.setter
    def svg_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "svg_content", value)

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_content")

    @text_content.setter
    def text_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_content", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateArgs']] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateArgs']]:
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateArgs:
    def __init__(__self__, *,
                 image_content: pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs'],
                 height: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']:
        return pulumi.get(self, "image_content")

    @image_content.setter
    def image_content(self, value: pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']):
        pulumi.set(self, "image_content", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 head_tail_parameter: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterArgs']] = None,
                 mosaic_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetMosaicSetArgs']]]] = None,
                 object_number_format: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormatArgs']] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageArgs']] = None,
                 override_parameter: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterArgs']] = None,
                 raw_parameter: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterArgs']] = None,
                 segment_object_name: Optional[pulumi.Input[str]] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 watermark_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetArgs']]]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if head_tail_parameter is not None:
            pulumi.set(__self__, "head_tail_parameter", head_tail_parameter)
        if mosaic_sets is not None:
            pulumi.set(__self__, "mosaic_sets", mosaic_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if override_parameter is not None:
            pulumi.set(__self__, "override_parameter", override_parameter)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="headTailParameter")
    def head_tail_parameter(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterArgs']]:
        return pulumi.get(self, "head_tail_parameter")

    @head_tail_parameter.setter
    def head_tail_parameter(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterArgs']]):
        pulumi.set(self, "head_tail_parameter", value)

    @property
    @pulumi.getter(name="mosaicSets")
    def mosaic_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetMosaicSetArgs']]]]:
        return pulumi.get(self, "mosaic_sets")

    @mosaic_sets.setter
    def mosaic_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetMosaicSetArgs']]]]):
        pulumi.set(self, "mosaic_sets", value)

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormatArgs']]:
        return pulumi.get(self, "object_number_format")

    @object_number_format.setter
    def object_number_format(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormatArgs']]):
        pulumi.set(self, "object_number_format", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageArgs']]:
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="overrideParameter")
    def override_parameter(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterArgs']]:
        return pulumi.get(self, "override_parameter")

    @override_parameter.setter
    def override_parameter(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterArgs']]):
        pulumi.set(self, "override_parameter", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "segment_object_name")

    @segment_object_name.setter
    def segment_object_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_object_name", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetArgs']]]]:
        return pulumi.get(self, "watermark_sets")

    @watermark_sets.setter
    def watermark_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetArgs']]]]):
        pulumi.set(self, "watermark_sets", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterArgs:
    def __init__(__self__, *,
                 head_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetArgs']]]] = None,
                 tail_sets: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetArgs']]]] = None):
        if head_sets is not None:
            pulumi.set(__self__, "head_sets", head_sets)
        if tail_sets is not None:
            pulumi.set(__self__, "tail_sets", tail_sets)

    @property
    @pulumi.getter(name="headSets")
    def head_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetArgs']]]]:
        return pulumi.get(self, "head_sets")

    @head_sets.setter
    def head_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetArgs']]]]):
        pulumi.set(self, "head_sets", value)

    @property
    @pulumi.getter(name="tailSets")
    def tail_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetArgs']]]]:
        return pulumi.get(self, "tail_sets")

    @tail_sets.setter
    def tail_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetArgs']]]]):
        pulumi.set(self, "tail_sets", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetMosaicSetArgs:
    def __init__(__self__, *,
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 height: Optional[pulumi.Input[str]] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 width: Optional[pulumi.Input[str]] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormatArgs:
    def __init__(__self__, *,
                 increment: Optional[pulumi.Input[int]] = None,
                 initial_value: Optional[pulumi.Input[int]] = None,
                 min_length: Optional[pulumi.Input[int]] = None,
                 place_holder: Optional[pulumi.Input[str]] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "increment")

    @increment.setter
    def increment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "increment", value)

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_value")

    @initial_value.setter
    def initial_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_value", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "place_holder")

    @place_holder.setter
    def place_holder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "place_holder", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterArgs:
    def __init__(__self__, *,
                 audio_template: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplateArgs']] = None,
                 container: Optional[pulumi.Input[str]] = None,
                 remove_audio: Optional[pulumi.Input[int]] = None,
                 remove_video: Optional[pulumi.Input[int]] = None,
                 subtitle_template: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplateArgs']] = None,
                 tehd_config: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfigArgs']] = None,
                 video_template: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplateArgs']] = None):
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if subtitle_template is not None:
            pulumi.set(__self__, "subtitle_template", subtitle_template)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplateArgs']]:
        return pulumi.get(self, "audio_template")

    @audio_template.setter
    def audio_template(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplateArgs']]):
        pulumi.set(self, "audio_template", value)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_audio")

    @remove_audio.setter
    def remove_audio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_audio", value)

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_video")

    @remove_video.setter
    def remove_video(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_video", value)

    @property
    @pulumi.getter(name="subtitleTemplate")
    def subtitle_template(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplateArgs']]:
        return pulumi.get(self, "subtitle_template")

    @subtitle_template.setter
    def subtitle_template(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplateArgs']]):
        pulumi.set(self, "subtitle_template", value)

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfigArgs']]:
        return pulumi.get(self, "tehd_config")

    @tehd_config.setter
    def tehd_config(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfigArgs']]):
        pulumi.set(self, "tehd_config", value)

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplateArgs']]:
        return pulumi.get(self, "video_template")

    @video_template.setter
    def video_template(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplateArgs']]):
        pulumi.set(self, "video_template", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplateArgs:
    def __init__(__self__, *,
                 audio_channel: Optional[pulumi.Input[int]] = None,
                 bitrate: Optional[pulumi.Input[int]] = None,
                 codec: Optional[pulumi.Input[str]] = None,
                 sample_rate: Optional[pulumi.Input[int]] = None,
                 stream_selects: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)
        if stream_selects is not None:
            pulumi.set(__self__, "stream_selects", stream_selects)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audio_channel")

    @audio_channel.setter
    def audio_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audio_channel", value)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sample_rate", value)

    @property
    @pulumi.getter(name="streamSelects")
    def stream_selects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "stream_selects")

    @stream_selects.setter
    def stream_selects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "stream_selects", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplateArgs:
    def __init__(__self__, *,
                 font_alpha: Optional[pulumi.Input[float]] = None,
                 font_color: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[str]] = None,
                 font_type: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 stream_index: Optional[pulumi.Input[int]] = None):
        if font_alpha is not None:
            pulumi.set(__self__, "font_alpha", font_alpha)
        if font_color is not None:
            pulumi.set(__self__, "font_color", font_color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if font_type is not None:
            pulumi.set(__self__, "font_type", font_type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if stream_index is not None:
            pulumi.set(__self__, "stream_index", stream_index)

    @property
    @pulumi.getter(name="fontAlpha")
    def font_alpha(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "font_alpha")

    @font_alpha.setter
    def font_alpha(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "font_alpha", value)

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_color")

    @font_color.setter
    def font_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_color", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_type")

    @font_type.setter
    def font_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_type", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="streamIndex")
    def stream_index(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "stream_index")

    @stream_index.setter
    def stream_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stream_index", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfigArgs:
    def __init__(__self__, *,
                 max_video_bitrate: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_video_bitrate")

    @max_video_bitrate.setter
    def max_video_bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_video_bitrate", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplateArgs:
    def __init__(__self__, *,
                 bitrate: Optional[pulumi.Input[int]] = None,
                 codec: Optional[pulumi.Input[str]] = None,
                 content_adapt_stream: Optional[pulumi.Input[int]] = None,
                 fill_type: Optional[pulumi.Input[str]] = None,
                 fps: Optional[pulumi.Input[int]] = None,
                 gop: Optional[pulumi.Input[int]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 resolution_adaptive: Optional[pulumi.Input[str]] = None,
                 vcrf: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if content_adapt_stream is not None:
            pulumi.set(__self__, "content_adapt_stream", content_adapt_stream)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="contentAdaptStream")
    def content_adapt_stream(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "content_adapt_stream")

    @content_adapt_stream.setter
    def content_adapt_stream(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "content_adapt_stream", value)

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fill_type")

    @fill_type.setter
    def fill_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_type", value)

    @property
    @pulumi.getter
    def fps(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter
    def gop(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gop")

    @gop.setter
    def gop(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gop", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolution_adaptive")

    @resolution_adaptive.setter
    def resolution_adaptive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution_adaptive", value)

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vcrf")

    @vcrf.setter
    def vcrf(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcrf", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameterArgs:
    def __init__(__self__, *,
                 container: pulumi.Input[str],
                 audio_template: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplateArgs']] = None,
                 remove_audio: Optional[pulumi.Input[int]] = None,
                 remove_video: Optional[pulumi.Input[int]] = None,
                 tehd_config: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfigArgs']] = None,
                 video_template: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplateArgs']] = None):
        pulumi.set(__self__, "container", container)
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter
    def container(self) -> pulumi.Input[str]:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: pulumi.Input[str]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplateArgs']]:
        return pulumi.get(self, "audio_template")

    @audio_template.setter
    def audio_template(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplateArgs']]):
        pulumi.set(self, "audio_template", value)

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_audio")

    @remove_audio.setter
    def remove_audio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_audio", value)

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remove_video")

    @remove_video.setter
    def remove_video(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remove_video", value)

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfigArgs']]:
        return pulumi.get(self, "tehd_config")

    @tehd_config.setter
    def tehd_config(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfigArgs']]):
        pulumi.set(self, "tehd_config", value)

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplateArgs']]:
        return pulumi.get(self, "video_template")

    @video_template.setter
    def video_template(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplateArgs']]):
        pulumi.set(self, "video_template", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplateArgs:
    def __init__(__self__, *,
                 bitrate: pulumi.Input[int],
                 codec: pulumi.Input[str],
                 sample_rate: pulumi.Input[int],
                 audio_channel: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_rate", value)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "audio_channel")

    @audio_channel.setter
    def audio_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audio_channel", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 max_video_bitrate: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "type", type)
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_video_bitrate")

    @max_video_bitrate.setter
    def max_video_bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_video_bitrate", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplateArgs:
    def __init__(__self__, *,
                 bitrate: pulumi.Input[int],
                 codec: pulumi.Input[str],
                 fps: pulumi.Input[int],
                 fill_type: Optional[pulumi.Input[str]] = None,
                 gop: Optional[pulumi.Input[int]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 resolution_adaptive: Optional[pulumi.Input[str]] = None,
                 vcrf: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: pulumi.Input[int]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter
    def fps(self) -> pulumi.Input[int]:
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: pulumi.Input[int]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fill_type")

    @fill_type.setter
    def fill_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_type", value)

    @property
    @pulumi.getter
    def gop(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gop")

    @gop.setter
    def gop(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gop", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolution_adaptive")

    @resolution_adaptive.setter
    def resolution_adaptive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution_adaptive", value)

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vcrf")

    @vcrf.setter
    def vcrf(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vcrf", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetArgs:
    def __init__(__self__, *,
                 definition: pulumi.Input[int],
                 end_time_offset: Optional[pulumi.Input[float]] = None,
                 raw_parameter: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterArgs']] = None,
                 start_time_offset: Optional[pulumi.Input[float]] = None,
                 svg_content: Optional[pulumi.Input[str]] = None,
                 text_content: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[int]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[int]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "end_time_offset")

    @end_time_offset.setter
    def end_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "end_time_offset", value)

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterArgs']]:
        return pulumi.get(self, "raw_parameter")

    @raw_parameter.setter
    def raw_parameter(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterArgs']]):
        pulumi.set(self, "raw_parameter", value)

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_time_offset")

    @start_time_offset.setter
    def start_time_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_time_offset", value)

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "svg_content")

    @svg_content.setter
    def svg_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "svg_content", value)

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_content")

    @text_content.setter
    def text_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_content", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateArgs']] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateArgs']]:
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateArgs:
    def __init__(__self__, *,
                 image_content: pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs'],
                 height: Optional[pulumi.Input[str]] = None,
                 repeat_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']:
        return pulumi.get(self, "image_content")

    @image_content.setter
    def image_content(self, value: pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs']):
        pulumi.set(self, "image_content", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repeat_type")

    @repeat_type.setter
    def repeat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']] = None,
                 url_input_info: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]:
        return pulumi.get(self, "cos_input_info")

    @cos_input_info.setter
    def cos_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs']]):
        pulumi.set(self, "cos_input_info", value)

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]:
        return pulumi.get(self, "url_input_info")

    @url_input_info.setter
    def url_input_info(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs']]):
        pulumi.set(self, "url_input_info", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfoArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 object: pulumi.Input[str],
                 region: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfoArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class WorkflowOutputStorageArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_output_storage: Optional[pulumi.Input['WorkflowOutputStorageCosOutputStorageArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional[pulumi.Input['WorkflowOutputStorageCosOutputStorageArgs']]:
        return pulumi.get(self, "cos_output_storage")

    @cos_output_storage.setter
    def cos_output_storage(self, value: Optional[pulumi.Input['WorkflowOutputStorageCosOutputStorageArgs']]):
        pulumi.set(self, "cos_output_storage", value)


@pulumi.input_type
class WorkflowOutputStorageCosOutputStorageArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class WorkflowTaskNotifyConfigArgs:
    def __init__(__self__, *,
                 cmq_model: Optional[pulumi.Input[str]] = None,
                 cmq_region: Optional[pulumi.Input[str]] = None,
                 notify_mode: Optional[pulumi.Input[str]] = None,
                 notify_type: Optional[pulumi.Input[str]] = None,
                 notify_url: Optional[pulumi.Input[str]] = None,
                 queue_name: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_mode is not None:
            pulumi.set(__self__, "notify_mode", notify_mode)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cmq_model")

    @cmq_model.setter
    def cmq_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmq_model", value)

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cmq_region")

    @cmq_region.setter
    def cmq_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmq_region", value)

    @property
    @pulumi.getter(name="notifyMode")
    def notify_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_mode")

    @notify_mode.setter
    def notify_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_mode", value)

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_type")

    @notify_type.setter
    def notify_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_type", value)

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_url")

    @notify_url.setter
    def notify_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_url", value)

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "queue_name")

    @queue_name.setter
    def queue_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queue_name", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


@pulumi.input_type
class WorkflowTriggerArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cos_file_upload_trigger: Optional[pulumi.Input['WorkflowTriggerCosFileUploadTriggerArgs']] = None):
        pulumi.set(__self__, "type", type)
        if cos_file_upload_trigger is not None:
            pulumi.set(__self__, "cos_file_upload_trigger", cos_file_upload_trigger)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cosFileUploadTrigger")
    def cos_file_upload_trigger(self) -> Optional[pulumi.Input['WorkflowTriggerCosFileUploadTriggerArgs']]:
        return pulumi.get(self, "cos_file_upload_trigger")

    @cos_file_upload_trigger.setter
    def cos_file_upload_trigger(self, value: Optional[pulumi.Input['WorkflowTriggerCosFileUploadTriggerArgs']]):
        pulumi.set(self, "cos_file_upload_trigger", value)


@pulumi.input_type
class WorkflowTriggerCosFileUploadTriggerArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 region: pulumi.Input[str],
                 dir: Optional[pulumi.Input[str]] = None,
                 formats: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if formats is not None:
            pulumi.set(__self__, "formats", formats)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def dir(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dir")

    @dir.setter
    def dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dir", value)

    @property
    @pulumi.getter
    def formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "formats")

    @formats.setter
    def formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "formats", value)


