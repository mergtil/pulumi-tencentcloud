# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AdaptiveDynamicStreamingTemplateStreamInfo',
    'AdaptiveDynamicStreamingTemplateStreamInfoAudio',
    'AdaptiveDynamicStreamingTemplateStreamInfoVideo',
    'AiAnalysisTemplateClassificationConfigure',
    'AiAnalysisTemplateCoverConfigure',
    'AiAnalysisTemplateFrameTagConfigure',
    'AiAnalysisTemplateTagConfigure',
    'AiRecognitionTemplateAsrFullTextConfigure',
    'AiRecognitionTemplateAsrWordsConfigure',
    'AiRecognitionTemplateFaceConfigure',
    'AiRecognitionTemplateOcrFullTextConfigure',
    'AiRecognitionTemplateOcrWordsConfigure',
    'TranscodeTemplateAudioTemplate',
    'TranscodeTemplateEnhanceConfig',
    'TranscodeTemplateEnhanceConfigVideoEnhance',
    'TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepair',
    'TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhance',
    'TranscodeTemplateEnhanceConfigVideoEnhanceDenoise',
    'TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhance',
    'TranscodeTemplateEnhanceConfigVideoEnhanceFrameRate',
    'TranscodeTemplateEnhanceConfigVideoEnhanceHdr',
    'TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhance',
    'TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhance',
    'TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepair',
    'TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhance',
    'TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolution',
    'TranscodeTemplateTehdConfig',
    'TranscodeTemplateVideoTemplate',
    'WatermarkTemplateImageTemplate',
    'WatermarkTemplateSvgTemplate',
    'WatermarkTemplateTextTemplate',
    'WorkflowAiAnalysisTask',
    'WorkflowAiContentReviewTask',
    'WorkflowAiRecognitionTask',
    'WorkflowMediaProcessTask',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'WorkflowMediaProcessTaskAnimatedGraphicTaskSet',
    'WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage',
    'WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage',
    'WorkflowMediaProcessTaskImageSpriteTaskSet',
    'WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat',
    'WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage',
    'WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSet',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'WorkflowMediaProcessTaskTranscodeTaskSet',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo',
    'WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo',
    'WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet',
    'WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat',
    'WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage',
    'WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig',
    'WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameter',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig',
    'WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo',
    'WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo',
    'WorkflowOutputStorage',
    'WorkflowOutputStorageCosOutputStorage',
    'WorkflowTaskNotifyConfig',
    'WorkflowTrigger',
    'WorkflowTriggerCosFileUploadTrigger',
]

@pulumi.output_type
class AdaptiveDynamicStreamingTemplateStreamInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "removeAudio":
            suggest = "remove_audio"
        elif key == "removeVideo":
            suggest = "remove_video"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdaptiveDynamicStreamingTemplateStreamInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdaptiveDynamicStreamingTemplateStreamInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdaptiveDynamicStreamingTemplateStreamInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio: 'outputs.AdaptiveDynamicStreamingTemplateStreamInfoAudio',
                 video: 'outputs.AdaptiveDynamicStreamingTemplateStreamInfoVideo',
                 remove_audio: Optional[int] = None,
                 remove_video: Optional[int] = None):
        pulumi.set(__self__, "audio", audio)
        pulumi.set(__self__, "video", video)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)

    @property
    @pulumi.getter
    def audio(self) -> 'outputs.AdaptiveDynamicStreamingTemplateStreamInfoAudio':
        return pulumi.get(self, "audio")

    @property
    @pulumi.getter
    def video(self) -> 'outputs.AdaptiveDynamicStreamingTemplateStreamInfoVideo':
        return pulumi.get(self, "video")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[int]:
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[int]:
        return pulumi.get(self, "remove_video")


@pulumi.output_type
class AdaptiveDynamicStreamingTemplateStreamInfoAudio(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sampleRate":
            suggest = "sample_rate"
        elif key == "audioChannel":
            suggest = "audio_channel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdaptiveDynamicStreamingTemplateStreamInfoAudio. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdaptiveDynamicStreamingTemplateStreamInfoAudio.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdaptiveDynamicStreamingTemplateStreamInfoAudio.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 sample_rate: int,
                 audio_channel: Optional[int] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> int:
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        return pulumi.get(self, "audio_channel")


@pulumi.output_type
class AdaptiveDynamicStreamingTemplateStreamInfoVideo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdaptiveDynamicStreamingTemplateStreamInfoVideo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdaptiveDynamicStreamingTemplateStreamInfoVideo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdaptiveDynamicStreamingTemplateStreamInfoVideo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 fps: int,
                 fill_type: Optional[str] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def fps(self) -> int:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")


@pulumi.output_type
class AiAnalysisTemplateClassificationConfigure(dict):
    def __init__(__self__, *,
                 switch: str):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")


@pulumi.output_type
class AiAnalysisTemplateCoverConfigure(dict):
    def __init__(__self__, *,
                 switch: str):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")


@pulumi.output_type
class AiAnalysisTemplateFrameTagConfigure(dict):
    def __init__(__self__, *,
                 switch: str):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")


@pulumi.output_type
class AiAnalysisTemplateTagConfigure(dict):
    def __init__(__self__, *,
                 switch: str):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")


@pulumi.output_type
class AiRecognitionTemplateAsrFullTextConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subtitleFormat":
            suggest = "subtitle_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiRecognitionTemplateAsrFullTextConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiRecognitionTemplateAsrFullTextConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiRecognitionTemplateAsrFullTextConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 subtitle_format: Optional[str] = None):
        pulumi.set(__self__, "switch", switch)
        if subtitle_format is not None:
            pulumi.set(__self__, "subtitle_format", subtitle_format)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="subtitleFormat")
    def subtitle_format(self) -> Optional[str]:
        return pulumi.get(self, "subtitle_format")


@pulumi.output_type
class AiRecognitionTemplateAsrWordsConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSets":
            suggest = "label_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiRecognitionTemplateAsrWordsConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiRecognitionTemplateAsrWordsConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiRecognitionTemplateAsrWordsConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 label_sets: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "switch", switch)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "label_sets")


@pulumi.output_type
class AiRecognitionTemplateFaceConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultLibraryLabelSets":
            suggest = "default_library_label_sets"
        elif key == "faceLibrary":
            suggest = "face_library"
        elif key == "userDefineLibraryLabelSets":
            suggest = "user_define_library_label_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiRecognitionTemplateFaceConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiRecognitionTemplateFaceConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiRecognitionTemplateFaceConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 default_library_label_sets: Optional[Sequence[str]] = None,
                 face_library: Optional[str] = None,
                 score: Optional[float] = None,
                 user_define_library_label_sets: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "switch", switch)
        if default_library_label_sets is not None:
            pulumi.set(__self__, "default_library_label_sets", default_library_label_sets)
        if face_library is not None:
            pulumi.set(__self__, "face_library", face_library)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if user_define_library_label_sets is not None:
            pulumi.set(__self__, "user_define_library_label_sets", user_define_library_label_sets)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="defaultLibraryLabelSets")
    def default_library_label_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "default_library_label_sets")

    @property
    @pulumi.getter(name="faceLibrary")
    def face_library(self) -> Optional[str]:
        return pulumi.get(self, "face_library")

    @property
    @pulumi.getter
    def score(self) -> Optional[float]:
        return pulumi.get(self, "score")

    @property
    @pulumi.getter(name="userDefineLibraryLabelSets")
    def user_define_library_label_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_define_library_label_sets")


@pulumi.output_type
class AiRecognitionTemplateOcrFullTextConfigure(dict):
    def __init__(__self__, *,
                 switch: str):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")


@pulumi.output_type
class AiRecognitionTemplateOcrWordsConfigure(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelSets":
            suggest = "label_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiRecognitionTemplateOcrWordsConfigure. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiRecognitionTemplateOcrWordsConfigure.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiRecognitionTemplateOcrWordsConfigure.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 label_sets: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "switch", switch)
        if label_sets is not None:
            pulumi.set(__self__, "label_sets", label_sets)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="labelSets")
    def label_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "label_sets")


@pulumi.output_type
class TranscodeTemplateAudioTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sampleRate":
            suggest = "sample_rate"
        elif key == "audioChannel":
            suggest = "audio_channel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TranscodeTemplateAudioTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TranscodeTemplateAudioTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TranscodeTemplateAudioTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 sample_rate: int,
                 audio_channel: Optional[int] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> int:
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        return pulumi.get(self, "audio_channel")


@pulumi.output_type
class TranscodeTemplateEnhanceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "videoEnhance":
            suggest = "video_enhance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TranscodeTemplateEnhanceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TranscodeTemplateEnhanceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TranscodeTemplateEnhanceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 video_enhance: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhance'] = None):
        if video_enhance is not None:
            pulumi.set(__self__, "video_enhance", video_enhance)

    @property
    @pulumi.getter(name="videoEnhance")
    def video_enhance(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhance']:
        return pulumi.get(self, "video_enhance")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "artifactRepair":
            suggest = "artifact_repair"
        elif key == "colorEnhance":
            suggest = "color_enhance"
        elif key == "faceEnhance":
            suggest = "face_enhance"
        elif key == "frameRate":
            suggest = "frame_rate"
        elif key == "imageQualityEnhance":
            suggest = "image_quality_enhance"
        elif key == "lowLightEnhance":
            suggest = "low_light_enhance"
        elif key == "scratchRepair":
            suggest = "scratch_repair"
        elif key == "sharpEnhance":
            suggest = "sharp_enhance"
        elif key == "superResolution":
            suggest = "super_resolution"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TranscodeTemplateEnhanceConfigVideoEnhance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TranscodeTemplateEnhanceConfigVideoEnhance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TranscodeTemplateEnhanceConfigVideoEnhance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 artifact_repair: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepair'] = None,
                 color_enhance: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhance'] = None,
                 denoise: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceDenoise'] = None,
                 face_enhance: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhance'] = None,
                 frame_rate: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceFrameRate'] = None,
                 hdr: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceHdr'] = None,
                 image_quality_enhance: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhance'] = None,
                 low_light_enhance: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhance'] = None,
                 scratch_repair: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepair'] = None,
                 sharp_enhance: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhance'] = None,
                 super_resolution: Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolution'] = None):
        if artifact_repair is not None:
            pulumi.set(__self__, "artifact_repair", artifact_repair)
        if color_enhance is not None:
            pulumi.set(__self__, "color_enhance", color_enhance)
        if denoise is not None:
            pulumi.set(__self__, "denoise", denoise)
        if face_enhance is not None:
            pulumi.set(__self__, "face_enhance", face_enhance)
        if frame_rate is not None:
            pulumi.set(__self__, "frame_rate", frame_rate)
        if hdr is not None:
            pulumi.set(__self__, "hdr", hdr)
        if image_quality_enhance is not None:
            pulumi.set(__self__, "image_quality_enhance", image_quality_enhance)
        if low_light_enhance is not None:
            pulumi.set(__self__, "low_light_enhance", low_light_enhance)
        if scratch_repair is not None:
            pulumi.set(__self__, "scratch_repair", scratch_repair)
        if sharp_enhance is not None:
            pulumi.set(__self__, "sharp_enhance", sharp_enhance)
        if super_resolution is not None:
            pulumi.set(__self__, "super_resolution", super_resolution)

    @property
    @pulumi.getter(name="artifactRepair")
    def artifact_repair(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepair']:
        return pulumi.get(self, "artifact_repair")

    @property
    @pulumi.getter(name="colorEnhance")
    def color_enhance(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhance']:
        return pulumi.get(self, "color_enhance")

    @property
    @pulumi.getter
    def denoise(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceDenoise']:
        return pulumi.get(self, "denoise")

    @property
    @pulumi.getter(name="faceEnhance")
    def face_enhance(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhance']:
        return pulumi.get(self, "face_enhance")

    @property
    @pulumi.getter(name="frameRate")
    def frame_rate(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceFrameRate']:
        return pulumi.get(self, "frame_rate")

    @property
    @pulumi.getter
    def hdr(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceHdr']:
        return pulumi.get(self, "hdr")

    @property
    @pulumi.getter(name="imageQualityEnhance")
    def image_quality_enhance(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhance']:
        return pulumi.get(self, "image_quality_enhance")

    @property
    @pulumi.getter(name="lowLightEnhance")
    def low_light_enhance(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhance']:
        return pulumi.get(self, "low_light_enhance")

    @property
    @pulumi.getter(name="scratchRepair")
    def scratch_repair(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepair']:
        return pulumi.get(self, "scratch_repair")

    @property
    @pulumi.getter(name="sharpEnhance")
    def sharp_enhance(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhance']:
        return pulumi.get(self, "sharp_enhance")

    @property
    @pulumi.getter(name="superResolution")
    def super_resolution(self) -> Optional['outputs.TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolution']:
        return pulumi.get(self, "super_resolution")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceArtifactRepair(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceColorEnhance(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceDenoise(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceFaceEnhance(dict):
    def __init__(__self__, *,
                 intensity: Optional[float] = None,
                 switch: Optional[str] = None):
        if intensity is not None:
            pulumi.set(__self__, "intensity", intensity)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def intensity(self) -> Optional[float]:
        return pulumi.get(self, "intensity")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceFrameRate(dict):
    def __init__(__self__, *,
                 fps: Optional[int] = None,
                 switch: Optional[str] = None):
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def fps(self) -> Optional[int]:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceHdr(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceImageQualityEnhance(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceLowLightEnhance(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceScratchRepair(dict):
    def __init__(__self__, *,
                 intensity: Optional[float] = None,
                 switch: Optional[str] = None):
        if intensity is not None:
            pulumi.set(__self__, "intensity", intensity)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def intensity(self) -> Optional[float]:
        return pulumi.get(self, "intensity")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceSharpEnhance(dict):
    def __init__(__self__, *,
                 intensity: Optional[float] = None,
                 switch: Optional[str] = None):
        if intensity is not None:
            pulumi.set(__self__, "intensity", intensity)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def intensity(self) -> Optional[float]:
        return pulumi.get(self, "intensity")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")


@pulumi.output_type
class TranscodeTemplateEnhanceConfigVideoEnhanceSuperResolution(dict):
    def __init__(__self__, *,
                 size: Optional[int] = None,
                 switch: Optional[str] = None,
                 type: Optional[str] = None):
        if size is not None:
            pulumi.set(__self__, "size", size)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TranscodeTemplateTehdConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxVideoBitrate":
            suggest = "max_video_bitrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TranscodeTemplateTehdConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TranscodeTemplateTehdConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TranscodeTemplateTehdConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 max_video_bitrate: Optional[int] = None):
        pulumi.set(__self__, "type", type)
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[int]:
        return pulumi.get(self, "max_video_bitrate")


@pulumi.output_type
class TranscodeTemplateVideoTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TranscodeTemplateVideoTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TranscodeTemplateVideoTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TranscodeTemplateVideoTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 fps: int,
                 fill_type: Optional[str] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def fps(self) -> int:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")


@pulumi.output_type
class WatermarkTemplateImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WatermarkTemplateImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WatermarkTemplateImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WatermarkTemplateImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: str,
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> str:
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class WatermarkTemplateSvgTemplate(dict):
    def __init__(__self__, *,
                 height: Optional[str] = None,
                 width: Optional[str] = None):
        if height is not None:
            pulumi.set(__self__, "height", height)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class WatermarkTemplateTextTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontAlpha":
            suggest = "font_alpha"
        elif key == "fontColor":
            suggest = "font_color"
        elif key == "fontSize":
            suggest = "font_size"
        elif key == "fontType":
            suggest = "font_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WatermarkTemplateTextTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WatermarkTemplateTextTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WatermarkTemplateTextTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 font_alpha: float,
                 font_color: str,
                 font_size: str,
                 font_type: str):
        pulumi.set(__self__, "font_alpha", font_alpha)
        pulumi.set(__self__, "font_color", font_color)
        pulumi.set(__self__, "font_size", font_size)
        pulumi.set(__self__, "font_type", font_type)

    @property
    @pulumi.getter(name="fontAlpha")
    def font_alpha(self) -> float:
        return pulumi.get(self, "font_alpha")

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> str:
        return pulumi.get(self, "font_color")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> str:
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> str:
        return pulumi.get(self, "font_type")


@pulumi.output_type
class WorkflowAiAnalysisTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extendedParameter":
            suggest = "extended_parameter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowAiAnalysisTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowAiAnalysisTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowAiAnalysisTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 extended_parameter: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if extended_parameter is not None:
            pulumi.set(__self__, "extended_parameter", extended_parameter)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extendedParameter")
    def extended_parameter(self) -> Optional[str]:
        return pulumi.get(self, "extended_parameter")


@pulumi.output_type
class WorkflowAiContentReviewTask(dict):
    def __init__(__self__, *,
                 definition: int):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")


@pulumi.output_type
class WorkflowAiRecognitionTask(dict):
    def __init__(__self__, *,
                 definition: int):
        pulumi.set(__self__, "definition", definition)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")


@pulumi.output_type
class WorkflowMediaProcessTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adaptiveDynamicStreamingTaskSets":
            suggest = "adaptive_dynamic_streaming_task_sets"
        elif key == "animatedGraphicTaskSets":
            suggest = "animated_graphic_task_sets"
        elif key == "imageSpriteTaskSets":
            suggest = "image_sprite_task_sets"
        elif key == "sampleSnapshotTaskSets":
            suggest = "sample_snapshot_task_sets"
        elif key == "snapshotByTimeOffsetTaskSets":
            suggest = "snapshot_by_time_offset_task_sets"
        elif key == "transcodeTaskSets":
            suggest = "transcode_task_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adaptive_dynamic_streaming_task_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet']] = None,
                 animated_graphic_task_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskAnimatedGraphicTaskSet']] = None,
                 image_sprite_task_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskImageSpriteTaskSet']] = None,
                 sample_snapshot_task_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSet']] = None,
                 snapshot_by_time_offset_task_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet']] = None,
                 transcode_task_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSet']] = None):
        if adaptive_dynamic_streaming_task_sets is not None:
            pulumi.set(__self__, "adaptive_dynamic_streaming_task_sets", adaptive_dynamic_streaming_task_sets)
        if animated_graphic_task_sets is not None:
            pulumi.set(__self__, "animated_graphic_task_sets", animated_graphic_task_sets)
        if image_sprite_task_sets is not None:
            pulumi.set(__self__, "image_sprite_task_sets", image_sprite_task_sets)
        if sample_snapshot_task_sets is not None:
            pulumi.set(__self__, "sample_snapshot_task_sets", sample_snapshot_task_sets)
        if snapshot_by_time_offset_task_sets is not None:
            pulumi.set(__self__, "snapshot_by_time_offset_task_sets", snapshot_by_time_offset_task_sets)
        if transcode_task_sets is not None:
            pulumi.set(__self__, "transcode_task_sets", transcode_task_sets)

    @property
    @pulumi.getter(name="adaptiveDynamicStreamingTaskSets")
    def adaptive_dynamic_streaming_task_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet']]:
        return pulumi.get(self, "adaptive_dynamic_streaming_task_sets")

    @property
    @pulumi.getter(name="animatedGraphicTaskSets")
    def animated_graphic_task_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskAnimatedGraphicTaskSet']]:
        return pulumi.get(self, "animated_graphic_task_sets")

    @property
    @pulumi.getter(name="imageSpriteTaskSets")
    def image_sprite_task_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskImageSpriteTaskSet']]:
        return pulumi.get(self, "image_sprite_task_sets")

    @property
    @pulumi.getter(name="sampleSnapshotTaskSets")
    def sample_snapshot_task_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSet']]:
        return pulumi.get(self, "sample_snapshot_task_sets")

    @property
    @pulumi.getter(name="snapshotByTimeOffsetTaskSets")
    def snapshot_by_time_offset_task_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet']]:
        return pulumi.get(self, "snapshot_by_time_offset_task_sets")

    @property
    @pulumi.getter(name="transcodeTaskSets")
    def transcode_task_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSet']]:
        return pulumi.get(self, "transcode_task_sets")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "segmentObjectName":
            suggest = "segment_object_name"
        elif key == "subStreamObjectName":
            suggest = "sub_stream_object_name"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage'] = None,
                 segment_object_name: Optional[str] = None,
                 sub_stream_object_name: Optional[str] = None,
                 watermark_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet']] = None):
        pulumi.set(__self__, "definition", definition)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if sub_stream_object_name is not None:
            pulumi.set(__self__, "sub_stream_object_name", sub_stream_object_name)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[str]:
        return pulumi.get(self, "segment_object_name")

    @property
    @pulumi.getter(name="subStreamObjectName")
    def sub_stream_object_name(self) -> Optional[str]:
        return pulumi.get(self, "sub_stream_object_name")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet']]:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate']:
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 url_input_info: Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class WorkflowMediaProcessTaskAnimatedGraphicTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAnimatedGraphicTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAnimatedGraphicTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAnimatedGraphicTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: float,
                 start_time_offset: float,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage'] = None):
        pulumi.set(__self__, "definition", definition)
        pulumi.set(__self__, "end_time_offset", end_time_offset)
        pulumi.set(__self__, "start_time_offset", start_time_offset)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> float:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> float:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage']:
        return pulumi.get(self, "output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskImageSpriteTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "webVttObjectName":
            suggest = "web_vtt_object_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskImageSpriteTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskImageSpriteTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskImageSpriteTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 object_number_format: Optional['outputs.WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage'] = None,
                 web_vtt_object_name: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if web_vtt_object_name is not None:
            pulumi.set(__self__, "web_vtt_object_name", web_vtt_object_name)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat']:
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="webVttObjectName")
    def web_vtt_object_name(self) -> Optional[str]:
        return pulumi.get(self, "web_vtt_object_name")


@pulumi.output_type
class WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskImageSpriteTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskImageSpriteTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 object_number_format: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage'] = None,
                 watermark_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet']] = None):
        pulumi.set(__self__, "definition", definition)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat']:
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet']]:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate']:
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 url_input_info: Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskSampleSnapshotTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extTimeOffsetSets":
            suggest = "ext_time_offset_sets"
        elif key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "timeOffsetSets":
            suggest = "time_offset_sets"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 ext_time_offset_sets: Optional[Sequence[str]] = None,
                 object_number_format: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage'] = None,
                 time_offset_sets: Optional[Sequence[float]] = None,
                 watermark_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet']] = None):
        pulumi.set(__self__, "definition", definition)
        if ext_time_offset_sets is not None:
            pulumi.set(__self__, "ext_time_offset_sets", ext_time_offset_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if time_offset_sets is not None:
            pulumi.set(__self__, "time_offset_sets", time_offset_sets)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="extTimeOffsetSets")
    def ext_time_offset_sets(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ext_time_offset_sets")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat']:
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="timeOffsetSets")
    def time_offset_sets(self) -> Optional[Sequence[float]]:
        return pulumi.get(self, "time_offset_sets")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet']]:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate']:
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 url_input_info: Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "headTailParameter":
            suggest = "head_tail_parameter"
        elif key == "mosaicSets":
            suggest = "mosaic_sets"
        elif key == "objectNumberFormat":
            suggest = "object_number_format"
        elif key == "outputObjectPath":
            suggest = "output_object_path"
        elif key == "outputStorage":
            suggest = "output_storage"
        elif key == "overrideParameter":
            suggest = "override_parameter"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "segmentObjectName":
            suggest = "segment_object_name"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "watermarkSets":
            suggest = "watermark_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 head_tail_parameter: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter'] = None,
                 mosaic_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet']] = None,
                 object_number_format: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat'] = None,
                 output_object_path: Optional[str] = None,
                 output_storage: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage'] = None,
                 override_parameter: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter'] = None,
                 raw_parameter: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameter'] = None,
                 segment_object_name: Optional[str] = None,
                 start_time_offset: Optional[float] = None,
                 watermark_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet']] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if head_tail_parameter is not None:
            pulumi.set(__self__, "head_tail_parameter", head_tail_parameter)
        if mosaic_sets is not None:
            pulumi.set(__self__, "mosaic_sets", mosaic_sets)
        if object_number_format is not None:
            pulumi.set(__self__, "object_number_format", object_number_format)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if override_parameter is not None:
            pulumi.set(__self__, "override_parameter", override_parameter)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if segment_object_name is not None:
            pulumi.set(__self__, "segment_object_name", segment_object_name)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if watermark_sets is not None:
            pulumi.set(__self__, "watermark_sets", watermark_sets)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="headTailParameter")
    def head_tail_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter']:
        return pulumi.get(self, "head_tail_parameter")

    @property
    @pulumi.getter(name="mosaicSets")
    def mosaic_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet']]:
        return pulumi.get(self, "mosaic_sets")

    @property
    @pulumi.getter(name="objectNumberFormat")
    def object_number_format(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat']:
        return pulumi.get(self, "object_number_format")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[str]:
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage']:
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="overrideParameter")
    def override_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter']:
        return pulumi.get(self, "override_parameter")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="segmentObjectName")
    def segment_object_name(self) -> Optional[str]:
        return pulumi.get(self, "segment_object_name")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="watermarkSets")
    def watermark_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet']]:
        return pulumi.get(self, "watermark_sets")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headSets":
            suggest = "head_sets"
        elif key == "tailSets":
            suggest = "tail_sets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 head_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet']] = None,
                 tail_sets: Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet']] = None):
        if head_sets is not None:
            pulumi.set(__self__, "head_sets", head_sets)
        if tail_sets is not None:
            pulumi.set(__self__, "tail_sets", tail_sets)

    @property
    @pulumi.getter(name="headSets")
    def head_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet']]:
        return pulumi.get(self, "head_sets")

    @property
    @pulumi.getter(name="tailSets")
    def tail_sets(self) -> Optional[Sequence['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet']]:
        return pulumi.get(self, "tail_sets")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo'] = None,
                 url_input_info: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterHeadSetUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo'] = None,
                 url_input_info: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetHeadTailParameterTailSetUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetMosaicSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 coordinate_origin: Optional[str] = None,
                 end_time_offset: Optional[float] = None,
                 height: Optional[str] = None,
                 start_time_offset: Optional[float] = None,
                 width: Optional[str] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if width is not None:
            pulumi.set(__self__, "width", width)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialValue":
            suggest = "initial_value"
        elif key == "minLength":
            suggest = "min_length"
        elif key == "placeHolder":
            suggest = "place_holder"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetObjectNumberFormat.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 increment: Optional[int] = None,
                 initial_value: Optional[int] = None,
                 min_length: Optional[int] = None,
                 place_holder: Optional[str] = None):
        if increment is not None:
            pulumi.set(__self__, "increment", increment)
        if initial_value is not None:
            pulumi.set(__self__, "initial_value", initial_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if place_holder is not None:
            pulumi.set(__self__, "place_holder", place_holder)

    @property
    @pulumi.getter
    def increment(self) -> Optional[int]:
        return pulumi.get(self, "increment")

    @property
    @pulumi.getter(name="initialValue")
    def initial_value(self) -> Optional[int]:
        return pulumi.get(self, "initial_value")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[int]:
        return pulumi.get(self, "min_length")

    @property
    @pulumi.getter(name="placeHolder")
    def place_holder(self) -> Optional[str]:
        return pulumi.get(self, "place_holder")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioTemplate":
            suggest = "audio_template"
        elif key == "removeAudio":
            suggest = "remove_audio"
        elif key == "removeVideo":
            suggest = "remove_video"
        elif key == "subtitleTemplate":
            suggest = "subtitle_template"
        elif key == "tehdConfig":
            suggest = "tehd_config"
        elif key == "videoTemplate":
            suggest = "video_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio_template: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate'] = None,
                 container: Optional[str] = None,
                 remove_audio: Optional[int] = None,
                 remove_video: Optional[int] = None,
                 subtitle_template: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate'] = None,
                 tehd_config: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig'] = None,
                 video_template: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate'] = None):
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if subtitle_template is not None:
            pulumi.set(__self__, "subtitle_template", subtitle_template)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate']:
        return pulumi.get(self, "audio_template")

    @property
    @pulumi.getter
    def container(self) -> Optional[str]:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[int]:
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[int]:
        return pulumi.get(self, "remove_video")

    @property
    @pulumi.getter(name="subtitleTemplate")
    def subtitle_template(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate']:
        return pulumi.get(self, "subtitle_template")

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig']:
        return pulumi.get(self, "tehd_config")

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate']:
        return pulumi.get(self, "video_template")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioChannel":
            suggest = "audio_channel"
        elif key == "sampleRate":
            suggest = "sample_rate"
        elif key == "streamSelects":
            suggest = "stream_selects"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterAudioTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio_channel: Optional[int] = None,
                 bitrate: Optional[int] = None,
                 codec: Optional[str] = None,
                 sample_rate: Optional[int] = None,
                 stream_selects: Optional[Sequence[int]] = None):
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)
        if stream_selects is not None:
            pulumi.set(__self__, "stream_selects", stream_selects)

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        return pulumi.get(self, "audio_channel")

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[int]:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> Optional[str]:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[int]:
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="streamSelects")
    def stream_selects(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "stream_selects")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontAlpha":
            suggest = "font_alpha"
        elif key == "fontColor":
            suggest = "font_color"
        elif key == "fontSize":
            suggest = "font_size"
        elif key == "fontType":
            suggest = "font_type"
        elif key == "streamIndex":
            suggest = "stream_index"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterSubtitleTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 font_alpha: Optional[float] = None,
                 font_color: Optional[str] = None,
                 font_size: Optional[str] = None,
                 font_type: Optional[str] = None,
                 path: Optional[str] = None,
                 stream_index: Optional[int] = None):
        if font_alpha is not None:
            pulumi.set(__self__, "font_alpha", font_alpha)
        if font_color is not None:
            pulumi.set(__self__, "font_color", font_color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if font_type is not None:
            pulumi.set(__self__, "font_type", font_type)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if stream_index is not None:
            pulumi.set(__self__, "stream_index", stream_index)

    @property
    @pulumi.getter(name="fontAlpha")
    def font_alpha(self) -> Optional[float]:
        return pulumi.get(self, "font_alpha")

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[str]:
        return pulumi.get(self, "font_color")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[str]:
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> Optional[str]:
        return pulumi.get(self, "font_type")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="streamIndex")
    def stream_index(self) -> Optional[int]:
        return pulumi.get(self, "stream_index")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxVideoBitrate":
            suggest = "max_video_bitrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterTehdConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_video_bitrate: Optional[int] = None,
                 type: Optional[str] = None):
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[int]:
        return pulumi.get(self, "max_video_bitrate")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentAdaptStream":
            suggest = "content_adapt_stream"
        elif key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetOverrideParameterVideoTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: Optional[int] = None,
                 codec: Optional[str] = None,
                 content_adapt_stream: Optional[int] = None,
                 fill_type: Optional[str] = None,
                 fps: Optional[int] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if content_adapt_stream is not None:
            pulumi.set(__self__, "content_adapt_stream", content_adapt_stream)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[int]:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> Optional[str]:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="contentAdaptStream")
    def content_adapt_stream(self) -> Optional[int]:
        return pulumi.get(self, "content_adapt_stream")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def fps(self) -> Optional[int]:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioTemplate":
            suggest = "audio_template"
        elif key == "removeAudio":
            suggest = "remove_audio"
        elif key == "removeVideo":
            suggest = "remove_video"
        elif key == "tehdConfig":
            suggest = "tehd_config"
        elif key == "videoTemplate":
            suggest = "video_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container: str,
                 audio_template: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate'] = None,
                 remove_audio: Optional[int] = None,
                 remove_video: Optional[int] = None,
                 tehd_config: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig'] = None,
                 video_template: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate'] = None):
        pulumi.set(__self__, "container", container)
        if audio_template is not None:
            pulumi.set(__self__, "audio_template", audio_template)
        if remove_audio is not None:
            pulumi.set(__self__, "remove_audio", remove_audio)
        if remove_video is not None:
            pulumi.set(__self__, "remove_video", remove_video)
        if tehd_config is not None:
            pulumi.set(__self__, "tehd_config", tehd_config)
        if video_template is not None:
            pulumi.set(__self__, "video_template", video_template)

    @property
    @pulumi.getter
    def container(self) -> str:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter(name="audioTemplate")
    def audio_template(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate']:
        return pulumi.get(self, "audio_template")

    @property
    @pulumi.getter(name="removeAudio")
    def remove_audio(self) -> Optional[int]:
        return pulumi.get(self, "remove_audio")

    @property
    @pulumi.getter(name="removeVideo")
    def remove_video(self) -> Optional[int]:
        return pulumi.get(self, "remove_video")

    @property
    @pulumi.getter(name="tehdConfig")
    def tehd_config(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig']:
        return pulumi.get(self, "tehd_config")

    @property
    @pulumi.getter(name="videoTemplate")
    def video_template(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate']:
        return pulumi.get(self, "video_template")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sampleRate":
            suggest = "sample_rate"
        elif key == "audioChannel":
            suggest = "audio_channel"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameterAudioTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 sample_rate: int,
                 audio_channel: Optional[int] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "sample_rate", sample_rate)
        if audio_channel is not None:
            pulumi.set(__self__, "audio_channel", audio_channel)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> int:
        return pulumi.get(self, "sample_rate")

    @property
    @pulumi.getter(name="audioChannel")
    def audio_channel(self) -> Optional[int]:
        return pulumi.get(self, "audio_channel")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxVideoBitrate":
            suggest = "max_video_bitrate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameterTehdConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 max_video_bitrate: Optional[int] = None):
        pulumi.set(__self__, "type", type)
        if max_video_bitrate is not None:
            pulumi.set(__self__, "max_video_bitrate", max_video_bitrate)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="maxVideoBitrate")
    def max_video_bitrate(self) -> Optional[int]:
        return pulumi.get(self, "max_video_bitrate")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fillType":
            suggest = "fill_type"
        elif key == "resolutionAdaptive":
            suggest = "resolution_adaptive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetRawParameterVideoTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: int,
                 codec: str,
                 fps: int,
                 fill_type: Optional[str] = None,
                 gop: Optional[int] = None,
                 height: Optional[int] = None,
                 resolution_adaptive: Optional[str] = None,
                 vcrf: Optional[int] = None,
                 width: Optional[int] = None):
        pulumi.set(__self__, "bitrate", bitrate)
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "fps", fps)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if vcrf is not None:
            pulumi.set(__self__, "vcrf", vcrf)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> int:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def fps(self) -> int:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[str]:
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def gop(self) -> Optional[int]:
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[int]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[str]:
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter
    def vcrf(self) -> Optional[int]:
        return pulumi.get(self, "vcrf")

    @property
    @pulumi.getter
    def width(self) -> Optional[int]:
        return pulumi.get(self, "width")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTimeOffset":
            suggest = "end_time_offset"
        elif key == "rawParameter":
            suggest = "raw_parameter"
        elif key == "startTimeOffset":
            suggest = "start_time_offset"
        elif key == "svgContent":
            suggest = "svg_content"
        elif key == "textContent":
            suggest = "text_content"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 definition: int,
                 end_time_offset: Optional[float] = None,
                 raw_parameter: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter'] = None,
                 start_time_offset: Optional[float] = None,
                 svg_content: Optional[str] = None,
                 text_content: Optional[str] = None):
        pulumi.set(__self__, "definition", definition)
        if end_time_offset is not None:
            pulumi.set(__self__, "end_time_offset", end_time_offset)
        if raw_parameter is not None:
            pulumi.set(__self__, "raw_parameter", raw_parameter)
        if start_time_offset is not None:
            pulumi.set(__self__, "start_time_offset", start_time_offset)
        if svg_content is not None:
            pulumi.set(__self__, "svg_content", svg_content)
        if text_content is not None:
            pulumi.set(__self__, "text_content", text_content)

    @property
    @pulumi.getter
    def definition(self) -> int:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter(name="endTimeOffset")
    def end_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "end_time_offset")

    @property
    @pulumi.getter(name="rawParameter")
    def raw_parameter(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter']:
        return pulumi.get(self, "raw_parameter")

    @property
    @pulumi.getter(name="startTimeOffset")
    def start_time_offset(self) -> Optional[float]:
        return pulumi.get(self, "start_time_offset")

    @property
    @pulumi.getter(name="svgContent")
    def svg_content(self) -> Optional[str]:
        return pulumi.get(self, "svg_content")

    @property
    @pulumi.getter(name="textContent")
    def text_content(self) -> Optional[str]:
        return pulumi.get(self, "text_content")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coordinateOrigin":
            suggest = "coordinate_origin"
        elif key == "imageTemplate":
            suggest = "image_template"
        elif key == "xPos":
            suggest = "x_pos"
        elif key == "yPos":
            suggest = "y_pos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 coordinate_origin: Optional[str] = None,
                 image_template: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate'] = None,
                 x_pos: Optional[str] = None,
                 y_pos: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[str]:
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate']:
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[str]:
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[str]:
        return pulumi.get(self, "y_pos")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageContent":
            suggest = "image_content"
        elif key == "repeatType":
            suggest = "repeat_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_content: 'outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent',
                 height: Optional[str] = None,
                 repeat_type: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "image_content", image_content)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if repeat_type is not None:
            pulumi.set(__self__, "repeat_type", repeat_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="imageContent")
    def image_content(self) -> 'outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent':
        return pulumi.get(self, "image_content")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="repeatType")
    def repeat_type(self) -> Optional[str]:
        return pulumi.get(self, "repeat_type")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosInputInfo":
            suggest = "cos_input_info"
        elif key == "urlInputInfo":
            suggest = "url_input_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_input_info: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo'] = None,
                 url_input_info: Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo'] = None):
        pulumi.set(__self__, "type", type)
        if cos_input_info is not None:
            pulumi.set(__self__, "cos_input_info", cos_input_info)
        if url_input_info is not None:
            pulumi.set(__self__, "url_input_info", url_input_info)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosInputInfo")
    def cos_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo']:
        return pulumi.get(self, "cos_input_info")

    @property
    @pulumi.getter(name="urlInputInfo")
    def url_input_info(self) -> Optional['outputs.WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo']:
        return pulumi.get(self, "url_input_info")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentCosInputInfo(dict):
    def __init__(__self__, *,
                 bucket: str,
                 object: str,
                 region: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "object", object)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def object(self) -> str:
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowMediaProcessTaskTranscodeTaskSetWatermarkSetRawParameterImageTemplateImageContentUrlInputInfo(dict):
    def __init__(__self__, *,
                 url: str):
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class WorkflowOutputStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosOutputStorage":
            suggest = "cos_output_storage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowOutputStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowOutputStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowOutputStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_output_storage: Optional['outputs.WorkflowOutputStorageCosOutputStorage'] = None):
        pulumi.set(__self__, "type", type)
        if cos_output_storage is not None:
            pulumi.set(__self__, "cos_output_storage", cos_output_storage)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosOutputStorage")
    def cos_output_storage(self) -> Optional['outputs.WorkflowOutputStorageCosOutputStorage']:
        return pulumi.get(self, "cos_output_storage")


@pulumi.output_type
class WorkflowOutputStorageCosOutputStorage(dict):
    def __init__(__self__, *,
                 bucket: Optional[str] = None,
                 region: Optional[str] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class WorkflowTaskNotifyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cmqModel":
            suggest = "cmq_model"
        elif key == "cmqRegion":
            suggest = "cmq_region"
        elif key == "notifyMode":
            suggest = "notify_mode"
        elif key == "notifyType":
            suggest = "notify_type"
        elif key == "notifyUrl":
            suggest = "notify_url"
        elif key == "queueName":
            suggest = "queue_name"
        elif key == "topicName":
            suggest = "topic_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowTaskNotifyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowTaskNotifyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowTaskNotifyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cmq_model: Optional[str] = None,
                 cmq_region: Optional[str] = None,
                 notify_mode: Optional[str] = None,
                 notify_type: Optional[str] = None,
                 notify_url: Optional[str] = None,
                 queue_name: Optional[str] = None,
                 topic_name: Optional[str] = None):
        if cmq_model is not None:
            pulumi.set(__self__, "cmq_model", cmq_model)
        if cmq_region is not None:
            pulumi.set(__self__, "cmq_region", cmq_region)
        if notify_mode is not None:
            pulumi.set(__self__, "notify_mode", notify_mode)
        if notify_type is not None:
            pulumi.set(__self__, "notify_type", notify_type)
        if notify_url is not None:
            pulumi.set(__self__, "notify_url", notify_url)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="cmqModel")
    def cmq_model(self) -> Optional[str]:
        return pulumi.get(self, "cmq_model")

    @property
    @pulumi.getter(name="cmqRegion")
    def cmq_region(self) -> Optional[str]:
        return pulumi.get(self, "cmq_region")

    @property
    @pulumi.getter(name="notifyMode")
    def notify_mode(self) -> Optional[str]:
        return pulumi.get(self, "notify_mode")

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> Optional[str]:
        return pulumi.get(self, "notify_type")

    @property
    @pulumi.getter(name="notifyUrl")
    def notify_url(self) -> Optional[str]:
        return pulumi.get(self, "notify_url")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[str]:
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[str]:
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class WorkflowTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosFileUploadTrigger":
            suggest = "cos_file_upload_trigger"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WorkflowTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WorkflowTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WorkflowTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cos_file_upload_trigger: Optional['outputs.WorkflowTriggerCosFileUploadTrigger'] = None):
        pulumi.set(__self__, "type", type)
        if cos_file_upload_trigger is not None:
            pulumi.set(__self__, "cos_file_upload_trigger", cos_file_upload_trigger)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosFileUploadTrigger")
    def cos_file_upload_trigger(self) -> Optional['outputs.WorkflowTriggerCosFileUploadTrigger']:
        return pulumi.get(self, "cos_file_upload_trigger")


@pulumi.output_type
class WorkflowTriggerCosFileUploadTrigger(dict):
    def __init__(__self__, *,
                 bucket: str,
                 region: str,
                 dir: Optional[str] = None,
                 formats: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "region", region)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if formats is not None:
            pulumi.set(__self__, "formats", formats)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def dir(self) -> Optional[str]:
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter
    def formats(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "formats")


