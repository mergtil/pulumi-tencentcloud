# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ZoneAccountVpcSet',
    'ZoneTagSet',
    'ZoneVpcSet',
    'GetRecordsFilterResult',
    'GetRecordsRecordSetResult',
]

@pulumi.output_type
class ZoneAccountVpcSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uniqVpcId":
            suggest = "uniq_vpc_id"
        elif key == "vpcName":
            suggest = "vpc_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneAccountVpcSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneAccountVpcSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneAccountVpcSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: str,
                 uin: str,
                 uniq_vpc_id: str,
                 vpc_name: str):
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "uin", uin)
        pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)
        pulumi.set(__self__, "vpc_name", vpc_name)

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def uin(self) -> str:
        return pulumi.get(self, "uin")

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> str:
        return pulumi.get(self, "uniq_vpc_id")

    @property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> str:
        return pulumi.get(self, "vpc_name")


@pulumi.output_type
class ZoneTagSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagKey":
            suggest = "tag_key"
        elif key == "tagValue":
            suggest = "tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneTagSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneTagSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneTagSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class ZoneVpcSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "uniqVpcId":
            suggest = "uniq_vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneVpcSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneVpcSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneVpcSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: str,
                 uniq_vpc_id: str):
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> str:
        return pulumi.get(self, "uniq_vpc_id")


@pulumi.output_type
class GetRecordsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetRecordsRecordSetResult(dict):
    def __init__(__self__, *,
                 created_on: str,
                 enabled: int,
                 extra: str,
                 mx: int,
                 record_id: str,
                 record_type: str,
                 record_value: str,
                 status: str,
                 sub_domain: str,
                 ttl: int,
                 updated_on: str,
                 weight: int,
                 zone_id: str):
        pulumi.set(__self__, "created_on", created_on)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "extra", extra)
        pulumi.set(__self__, "mx", mx)
        pulumi.set(__self__, "record_id", record_id)
        pulumi.set(__self__, "record_type", record_type)
        pulumi.set(__self__, "record_value", record_value)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "sub_domain", sub_domain)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "updated_on", updated_on)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> str:
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def enabled(self) -> int:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def extra(self) -> str:
        return pulumi.get(self, "extra")

    @property
    @pulumi.getter
    def mx(self) -> int:
        return pulumi.get(self, "mx")

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> str:
        return pulumi.get(self, "record_id")

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> str:
        return pulumi.get(self, "record_type")

    @property
    @pulumi.getter(name="recordValue")
    def record_value(self) -> str:
        return pulumi.get(self, "record_value")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subDomain")
    def sub_domain(self) -> str:
        return pulumi.get(self, "sub_domain")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter(name="updatedOn")
    def updated_on(self) -> str:
        return pulumi.get(self, "updated_on")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")


