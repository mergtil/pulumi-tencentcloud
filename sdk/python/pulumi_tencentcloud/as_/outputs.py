# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'LoadBalancerForwardLoadBalancer',
    'LoadBalancerForwardLoadBalancerTargetAttribute',
    'ScalingConfigDataDisk',
    'ScalingConfigHostNameSettings',
    'ScalingConfigInstanceNameSettings',
    'ScalingGroupForwardBalancerId',
    'ScalingGroupForwardBalancerIdTargetAttribute',
    'GetAdvicesAutoScalingAdviceSetResult',
    'GetAdvicesAutoScalingAdviceSetAdviceResult',
    'GetInstancesFilterResult',
    'GetInstancesInstanceListResult',
    'GetLastActivityActivitySetResult',
    'GetLastActivityActivitySetActivityRelatedInstanceSetResult',
    'GetLastActivityActivitySetDetailedStatusMessageSetResult',
    'GetLastActivityActivitySetInvocationResultSetResult',
    'GetLastActivityActivitySetLifecycleActionResultSetResult',
    'GetScalingConfigsConfigurationListResult',
    'GetScalingConfigsConfigurationListDataDiskResult',
    'GetScalingGroupsScalingGroupListResult',
    'GetScalingGroupsScalingGroupListForwardBalancerIdResult',
    'GetScalingGroupsScalingGroupListForwardBalancerIdTargetAttributeResult',
    'GetScalingPoliciesScalingPolicyListResult',
]

@pulumi.output_type
class LoadBalancerForwardLoadBalancer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listenerId":
            suggest = "listener_id"
        elif key == "loadBalancerId":
            suggest = "load_balancer_id"
        elif key == "targetAttributes":
            suggest = "target_attributes"
        elif key == "locationId":
            suggest = "location_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerForwardLoadBalancer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerForwardLoadBalancer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerForwardLoadBalancer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 listener_id: str,
                 load_balancer_id: str,
                 target_attributes: Sequence['outputs.LoadBalancerForwardLoadBalancerTargetAttribute'],
                 location_id: Optional[str] = None,
                 region: Optional[str] = None):
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "target_attributes", target_attributes)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="targetAttributes")
    def target_attributes(self) -> Sequence['outputs.LoadBalancerForwardLoadBalancerTargetAttribute']:
        return pulumi.get(self, "target_attributes")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[str]:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")


@pulumi.output_type
class LoadBalancerForwardLoadBalancerTargetAttribute(dict):
    def __init__(__self__, *,
                 port: int,
                 weight: int):
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class ScalingConfigDataDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteWithInstance":
            suggest = "delete_with_instance"
        elif key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "snapshotId":
            suggest = "snapshot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScalingConfigDataDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScalingConfigDataDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScalingConfigDataDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_with_instance: Optional[bool] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None,
                 snapshot_id: Optional[str] = None):
        if delete_with_instance is not None:
            pulumi.set(__self__, "delete_with_instance", delete_with_instance)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="deleteWithInstance")
    def delete_with_instance(self) -> Optional[bool]:
        return pulumi.get(self, "delete_with_instance")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_id")


@pulumi.output_type
class ScalingConfigHostNameSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostName":
            suggest = "host_name"
        elif key == "hostNameStyle":
            suggest = "host_name_style"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScalingConfigHostNameSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScalingConfigHostNameSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScalingConfigHostNameSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_name: str,
                 host_name_style: Optional[str] = None):
        pulumi.set(__self__, "host_name", host_name)
        if host_name_style is not None:
            pulumi.set(__self__, "host_name_style", host_name_style)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> str:
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="hostNameStyle")
    def host_name_style(self) -> Optional[str]:
        return pulumi.get(self, "host_name_style")


@pulumi.output_type
class ScalingConfigInstanceNameSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceName":
            suggest = "instance_name"
        elif key == "instanceNameStyle":
            suggest = "instance_name_style"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScalingConfigInstanceNameSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScalingConfigInstanceNameSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScalingConfigInstanceNameSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_name: str,
                 instance_name_style: Optional[str] = None):
        pulumi.set(__self__, "instance_name", instance_name)
        if instance_name_style is not None:
            pulumi.set(__self__, "instance_name_style", instance_name_style)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceNameStyle")
    def instance_name_style(self) -> Optional[str]:
        return pulumi.get(self, "instance_name_style")


@pulumi.output_type
class ScalingGroupForwardBalancerId(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listenerId":
            suggest = "listener_id"
        elif key == "loadBalancerId":
            suggest = "load_balancer_id"
        elif key == "targetAttributes":
            suggest = "target_attributes"
        elif key == "ruleId":
            suggest = "rule_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ScalingGroupForwardBalancerId. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ScalingGroupForwardBalancerId.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ScalingGroupForwardBalancerId.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 listener_id: str,
                 load_balancer_id: str,
                 target_attributes: Sequence['outputs.ScalingGroupForwardBalancerIdTargetAttribute'],
                 rule_id: Optional[str] = None):
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "target_attributes", target_attributes)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="targetAttributes")
    def target_attributes(self) -> Sequence['outputs.ScalingGroupForwardBalancerIdTargetAttribute']:
        return pulumi.get(self, "target_attributes")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[str]:
        return pulumi.get(self, "rule_id")


@pulumi.output_type
class ScalingGroupForwardBalancerIdTargetAttribute(dict):
    def __init__(__self__, *,
                 port: int,
                 weight: int):
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetAdvicesAutoScalingAdviceSetResult(dict):
    def __init__(__self__, *,
                 advices: Sequence['outputs.GetAdvicesAutoScalingAdviceSetAdviceResult'],
                 auto_scaling_group_id: str,
                 level: str):
        pulumi.set(__self__, "advices", advices)
        pulumi.set(__self__, "auto_scaling_group_id", auto_scaling_group_id)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def advices(self) -> Sequence['outputs.GetAdvicesAutoScalingAdviceSetAdviceResult']:
        return pulumi.get(self, "advices")

    @property
    @pulumi.getter(name="autoScalingGroupId")
    def auto_scaling_group_id(self) -> str:
        return pulumi.get(self, "auto_scaling_group_id")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")


@pulumi.output_type
class GetAdvicesAutoScalingAdviceSetAdviceResult(dict):
    def __init__(__self__, *,
                 detail: str,
                 problem: str,
                 solution: str):
        pulumi.set(__self__, "detail", detail)
        pulumi.set(__self__, "problem", problem)
        pulumi.set(__self__, "solution", solution)

    @property
    @pulumi.getter
    def detail(self) -> str:
        return pulumi.get(self, "detail")

    @property
    @pulumi.getter
    def problem(self) -> str:
        return pulumi.get(self, "problem")

    @property
    @pulumi.getter
    def solution(self) -> str:
        return pulumi.get(self, "solution")


@pulumi.output_type
class GetInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetInstancesInstanceListResult(dict):
    def __init__(__self__, *,
                 add_time: str,
                 auto_scaling_group_id: str,
                 auto_scaling_group_name: str,
                 creation_type: str,
                 health_status: str,
                 instance_id: str,
                 instance_type: str,
                 launch_configuration_id: str,
                 launch_configuration_name: str,
                 life_cycle_state: str,
                 protected_from_scale_in: bool,
                 version_number: int,
                 zone: str):
        pulumi.set(__self__, "add_time", add_time)
        pulumi.set(__self__, "auto_scaling_group_id", auto_scaling_group_id)
        pulumi.set(__self__, "auto_scaling_group_name", auto_scaling_group_name)
        pulumi.set(__self__, "creation_type", creation_type)
        pulumi.set(__self__, "health_status", health_status)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "launch_configuration_id", launch_configuration_id)
        pulumi.set(__self__, "launch_configuration_name", launch_configuration_name)
        pulumi.set(__self__, "life_cycle_state", life_cycle_state)
        pulumi.set(__self__, "protected_from_scale_in", protected_from_scale_in)
        pulumi.set(__self__, "version_number", version_number)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="addTime")
    def add_time(self) -> str:
        return pulumi.get(self, "add_time")

    @property
    @pulumi.getter(name="autoScalingGroupId")
    def auto_scaling_group_id(self) -> str:
        return pulumi.get(self, "auto_scaling_group_id")

    @property
    @pulumi.getter(name="autoScalingGroupName")
    def auto_scaling_group_name(self) -> str:
        return pulumi.get(self, "auto_scaling_group_name")

    @property
    @pulumi.getter(name="creationType")
    def creation_type(self) -> str:
        return pulumi.get(self, "creation_type")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> str:
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="launchConfigurationId")
    def launch_configuration_id(self) -> str:
        return pulumi.get(self, "launch_configuration_id")

    @property
    @pulumi.getter(name="launchConfigurationName")
    def launch_configuration_name(self) -> str:
        return pulumi.get(self, "launch_configuration_name")

    @property
    @pulumi.getter(name="lifeCycleState")
    def life_cycle_state(self) -> str:
        return pulumi.get(self, "life_cycle_state")

    @property
    @pulumi.getter(name="protectedFromScaleIn")
    def protected_from_scale_in(self) -> bool:
        return pulumi.get(self, "protected_from_scale_in")

    @property
    @pulumi.getter(name="versionNumber")
    def version_number(self) -> int:
        return pulumi.get(self, "version_number")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetLastActivityActivitySetResult(dict):
    def __init__(__self__, *,
                 activity_id: str,
                 activity_related_instance_sets: Sequence['outputs.GetLastActivityActivitySetActivityRelatedInstanceSetResult'],
                 activity_type: str,
                 auto_scaling_group_id: str,
                 cause: str,
                 created_time: str,
                 description: str,
                 detailed_status_message_sets: Sequence['outputs.GetLastActivityActivitySetDetailedStatusMessageSetResult'],
                 end_time: str,
                 invocation_result_sets: Sequence['outputs.GetLastActivityActivitySetInvocationResultSetResult'],
                 lifecycle_action_result_sets: Sequence['outputs.GetLastActivityActivitySetLifecycleActionResultSetResult'],
                 start_time: str,
                 status_code: str,
                 status_message: str,
                 status_message_simplified: str):
        pulumi.set(__self__, "activity_id", activity_id)
        pulumi.set(__self__, "activity_related_instance_sets", activity_related_instance_sets)
        pulumi.set(__self__, "activity_type", activity_type)
        pulumi.set(__self__, "auto_scaling_group_id", auto_scaling_group_id)
        pulumi.set(__self__, "cause", cause)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "detailed_status_message_sets", detailed_status_message_sets)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "invocation_result_sets", invocation_result_sets)
        pulumi.set(__self__, "lifecycle_action_result_sets", lifecycle_action_result_sets)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "status_message", status_message)
        pulumi.set(__self__, "status_message_simplified", status_message_simplified)

    @property
    @pulumi.getter(name="activityId")
    def activity_id(self) -> str:
        return pulumi.get(self, "activity_id")

    @property
    @pulumi.getter(name="activityRelatedInstanceSets")
    def activity_related_instance_sets(self) -> Sequence['outputs.GetLastActivityActivitySetActivityRelatedInstanceSetResult']:
        return pulumi.get(self, "activity_related_instance_sets")

    @property
    @pulumi.getter(name="activityType")
    def activity_type(self) -> str:
        return pulumi.get(self, "activity_type")

    @property
    @pulumi.getter(name="autoScalingGroupId")
    def auto_scaling_group_id(self) -> str:
        return pulumi.get(self, "auto_scaling_group_id")

    @property
    @pulumi.getter
    def cause(self) -> str:
        return pulumi.get(self, "cause")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="detailedStatusMessageSets")
    def detailed_status_message_sets(self) -> Sequence['outputs.GetLastActivityActivitySetDetailedStatusMessageSetResult']:
        return pulumi.get(self, "detailed_status_message_sets")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="invocationResultSets")
    def invocation_result_sets(self) -> Sequence['outputs.GetLastActivityActivitySetInvocationResultSetResult']:
        return pulumi.get(self, "invocation_result_sets")

    @property
    @pulumi.getter(name="lifecycleActionResultSets")
    def lifecycle_action_result_sets(self) -> Sequence['outputs.GetLastActivityActivitySetLifecycleActionResultSetResult']:
        return pulumi.get(self, "lifecycle_action_result_sets")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> str:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> str:
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="statusMessageSimplified")
    def status_message_simplified(self) -> str:
        return pulumi.get(self, "status_message_simplified")


@pulumi.output_type
class GetLastActivityActivitySetActivityRelatedInstanceSetResult(dict):
    def __init__(__self__, *,
                 instance_id: str,
                 instance_status: str):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_status", instance_status)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> str:
        return pulumi.get(self, "instance_status")


@pulumi.output_type
class GetLastActivityActivitySetDetailedStatusMessageSetResult(dict):
    def __init__(__self__, *,
                 code: str,
                 instance_charge_type: str,
                 instance_id: str,
                 instance_type: str,
                 message: str,
                 subnet_id: str,
                 zone: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> str:
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetLastActivityActivitySetInvocationResultSetResult(dict):
    def __init__(__self__, *,
                 command_id: str,
                 error_message: str,
                 instance_id: str,
                 invocation_id: str,
                 invocation_task_id: str,
                 task_status: str):
        pulumi.set(__self__, "command_id", command_id)
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "invocation_id", invocation_id)
        pulumi.set(__self__, "invocation_task_id", invocation_task_id)
        pulumi.set(__self__, "task_status", task_status)

    @property
    @pulumi.getter(name="commandId")
    def command_id(self) -> str:
        return pulumi.get(self, "command_id")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="invocationId")
    def invocation_id(self) -> str:
        return pulumi.get(self, "invocation_id")

    @property
    @pulumi.getter(name="invocationTaskId")
    def invocation_task_id(self) -> str:
        return pulumi.get(self, "invocation_task_id")

    @property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> str:
        return pulumi.get(self, "task_status")


@pulumi.output_type
class GetLastActivityActivitySetLifecycleActionResultSetResult(dict):
    def __init__(__self__, *,
                 instance_id: str,
                 invocation_id: str,
                 invoke_command_result: str,
                 lifecycle_action_result: str,
                 lifecycle_hook_id: str,
                 notification_result: str,
                 result_reason: str):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "invocation_id", invocation_id)
        pulumi.set(__self__, "invoke_command_result", invoke_command_result)
        pulumi.set(__self__, "lifecycle_action_result", lifecycle_action_result)
        pulumi.set(__self__, "lifecycle_hook_id", lifecycle_hook_id)
        pulumi.set(__self__, "notification_result", notification_result)
        pulumi.set(__self__, "result_reason", result_reason)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="invocationId")
    def invocation_id(self) -> str:
        return pulumi.get(self, "invocation_id")

    @property
    @pulumi.getter(name="invokeCommandResult")
    def invoke_command_result(self) -> str:
        return pulumi.get(self, "invoke_command_result")

    @property
    @pulumi.getter(name="lifecycleActionResult")
    def lifecycle_action_result(self) -> str:
        return pulumi.get(self, "lifecycle_action_result")

    @property
    @pulumi.getter(name="lifecycleHookId")
    def lifecycle_hook_id(self) -> str:
        return pulumi.get(self, "lifecycle_hook_id")

    @property
    @pulumi.getter(name="notificationResult")
    def notification_result(self) -> str:
        return pulumi.get(self, "notification_result")

    @property
    @pulumi.getter(name="resultReason")
    def result_reason(self) -> str:
        return pulumi.get(self, "result_reason")


@pulumi.output_type
class GetScalingConfigsConfigurationListResult(dict):
    def __init__(__self__, *,
                 configuration_id: str,
                 configuration_name: str,
                 create_time: str,
                 data_disks: Sequence['outputs.GetScalingConfigsConfigurationListDataDiskResult'],
                 disk_type_policy: str,
                 enhanced_monitor_service: bool,
                 enhanced_security_service: bool,
                 image_id: str,
                 instance_tags: Mapping[str, Any],
                 instance_types: Sequence[str],
                 internet_charge_type: str,
                 internet_max_bandwidth_out: int,
                 key_ids: Sequence[str],
                 project_id: int,
                 public_ip_assigned: bool,
                 security_group_ids: Sequence[str],
                 status: str,
                 system_disk_size: int,
                 system_disk_type: str,
                 user_data: str):
        pulumi.set(__self__, "configuration_id", configuration_id)
        pulumi.set(__self__, "configuration_name", configuration_name)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "data_disks", data_disks)
        pulumi.set(__self__, "disk_type_policy", disk_type_policy)
        pulumi.set(__self__, "enhanced_monitor_service", enhanced_monitor_service)
        pulumi.set(__self__, "enhanced_security_service", enhanced_security_service)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "instance_tags", instance_tags)
        pulumi.set(__self__, "instance_types", instance_types)
        pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        pulumi.set(__self__, "key_ids", key_ids)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "system_disk_size", system_disk_size)
        pulumi.set(__self__, "system_disk_type", system_disk_type)
        pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="configurationId")
    def configuration_id(self) -> str:
        return pulumi.get(self, "configuration_id")

    @property
    @pulumi.getter(name="configurationName")
    def configuration_name(self) -> str:
        return pulumi.get(self, "configuration_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Sequence['outputs.GetScalingConfigsConfigurationListDataDiskResult']:
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="diskTypePolicy")
    def disk_type_policy(self) -> str:
        return pulumi.get(self, "disk_type_policy")

    @property
    @pulumi.getter(name="enhancedMonitorService")
    def enhanced_monitor_service(self) -> bool:
        return pulumi.get(self, "enhanced_monitor_service")

    @property
    @pulumi.getter(name="enhancedSecurityService")
    def enhanced_security_service(self) -> bool:
        return pulumi.get(self, "enhanced_security_service")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceTags")
    def instance_tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "instance_tags")

    @property
    @pulumi.getter(name="instanceTypes")
    def instance_types(self) -> Sequence[str]:
        return pulumi.get(self, "instance_types")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> str:
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> int:
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Sequence[str]:
        return pulumi.get(self, "key_ids")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> bool:
        return pulumi.get(self, "public_ip_assigned")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> int:
        return pulumi.get(self, "system_disk_size")

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> str:
        return pulumi.get(self, "system_disk_type")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> str:
        return pulumi.get(self, "user_data")


@pulumi.output_type
class GetScalingConfigsConfigurationListDataDiskResult(dict):
    def __init__(__self__, *,
                 delete_with_instance: bool,
                 disk_size: int,
                 disk_type: str,
                 snapshot_id: str):
        pulumi.set(__self__, "delete_with_instance", delete_with_instance)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "snapshot_id", snapshot_id)

    @property
    @pulumi.getter(name="deleteWithInstance")
    def delete_with_instance(self) -> bool:
        return pulumi.get(self, "delete_with_instance")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        return pulumi.get(self, "snapshot_id")


@pulumi.output_type
class GetScalingGroupsScalingGroupListResult(dict):
    def __init__(__self__, *,
                 configuration_id: str,
                 create_time: str,
                 default_cooldown: int,
                 desired_capacity: int,
                 forward_balancer_ids: Sequence['outputs.GetScalingGroupsScalingGroupListForwardBalancerIdResult'],
                 instance_count: int,
                 load_balancer_ids: Sequence[str],
                 max_size: int,
                 min_size: int,
                 multi_zone_subnet_policy: str,
                 project_id: int,
                 retry_policy: str,
                 scaling_group_id: str,
                 scaling_group_name: str,
                 status: str,
                 subnet_ids: Sequence[str],
                 tags: Mapping[str, Any],
                 termination_policies: Sequence[str],
                 vpc_id: str,
                 zones: Sequence[str]):
        pulumi.set(__self__, "configuration_id", configuration_id)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "default_cooldown", default_cooldown)
        pulumi.set(__self__, "desired_capacity", desired_capacity)
        pulumi.set(__self__, "forward_balancer_ids", forward_balancer_ids)
        pulumi.set(__self__, "instance_count", instance_count)
        pulumi.set(__self__, "load_balancer_ids", load_balancer_ids)
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "multi_zone_subnet_policy", multi_zone_subnet_policy)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "retry_policy", retry_policy)
        pulumi.set(__self__, "scaling_group_id", scaling_group_id)
        pulumi.set(__self__, "scaling_group_name", scaling_group_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "termination_policies", termination_policies)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="configurationId")
    def configuration_id(self) -> str:
        return pulumi.get(self, "configuration_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="defaultCooldown")
    def default_cooldown(self) -> int:
        return pulumi.get(self, "default_cooldown")

    @property
    @pulumi.getter(name="desiredCapacity")
    def desired_capacity(self) -> int:
        return pulumi.get(self, "desired_capacity")

    @property
    @pulumi.getter(name="forwardBalancerIds")
    def forward_balancer_ids(self) -> Sequence['outputs.GetScalingGroupsScalingGroupListForwardBalancerIdResult']:
        return pulumi.get(self, "forward_balancer_ids")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="loadBalancerIds")
    def load_balancer_ids(self) -> Sequence[str]:
        return pulumi.get(self, "load_balancer_ids")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> int:
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> int:
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter(name="multiZoneSubnetPolicy")
    def multi_zone_subnet_policy(self) -> str:
        return pulumi.get(self, "multi_zone_subnet_policy")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="retryPolicy")
    def retry_policy(self) -> str:
        return pulumi.get(self, "retry_policy")

    @property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> str:
        return pulumi.get(self, "scaling_group_id")

    @property
    @pulumi.getter(name="scalingGroupName")
    def scaling_group_name(self) -> str:
        return pulumi.get(self, "scaling_group_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="terminationPolicies")
    def termination_policies(self) -> Sequence[str]:
        return pulumi.get(self, "termination_policies")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zones(self) -> Sequence[str]:
        return pulumi.get(self, "zones")


@pulumi.output_type
class GetScalingGroupsScalingGroupListForwardBalancerIdResult(dict):
    def __init__(__self__, *,
                 listener_id: str,
                 load_balancer_id: str,
                 location_id: str,
                 target_attributes: Sequence['outputs.GetScalingGroupsScalingGroupListForwardBalancerIdTargetAttributeResult']):
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "target_attributes", target_attributes)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> str:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> str:
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> str:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter(name="targetAttributes")
    def target_attributes(self) -> Sequence['outputs.GetScalingGroupsScalingGroupListForwardBalancerIdTargetAttributeResult']:
        return pulumi.get(self, "target_attributes")


@pulumi.output_type
class GetScalingGroupsScalingGroupListForwardBalancerIdTargetAttributeResult(dict):
    def __init__(__self__, *,
                 port: int,
                 weight: int):
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetScalingPoliciesScalingPolicyListResult(dict):
    def __init__(__self__, *,
                 adjustment_type: str,
                 adjustment_value: int,
                 comparison_operator: str,
                 continuous_time: int,
                 cooldown: int,
                 metric_name: str,
                 notification_user_group_ids: Sequence[str],
                 period: int,
                 policy_name: str,
                 scaling_group_id: str,
                 statistic: str,
                 threshold: int):
        pulumi.set(__self__, "adjustment_type", adjustment_type)
        pulumi.set(__self__, "adjustment_value", adjustment_value)
        pulumi.set(__self__, "comparison_operator", comparison_operator)
        pulumi.set(__self__, "continuous_time", continuous_time)
        pulumi.set(__self__, "cooldown", cooldown)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "notification_user_group_ids", notification_user_group_ids)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "scaling_group_id", scaling_group_id)
        pulumi.set(__self__, "statistic", statistic)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="adjustmentType")
    def adjustment_type(self) -> str:
        return pulumi.get(self, "adjustment_type")

    @property
    @pulumi.getter(name="adjustmentValue")
    def adjustment_value(self) -> int:
        return pulumi.get(self, "adjustment_value")

    @property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> str:
        return pulumi.get(self, "comparison_operator")

    @property
    @pulumi.getter(name="continuousTime")
    def continuous_time(self) -> int:
        return pulumi.get(self, "continuous_time")

    @property
    @pulumi.getter
    def cooldown(self) -> int:
        return pulumi.get(self, "cooldown")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="notificationUserGroupIds")
    def notification_user_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "notification_user_group_ids")

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="scalingGroupId")
    def scaling_group_id(self) -> str:
        return pulumi.get(self, "scaling_group_id")

    @property
    @pulumi.getter
    def statistic(self) -> str:
        return pulumi.get(self, "statistic")

    @property
    @pulumi.getter
    def threshold(self) -> int:
        return pulumi.get(self, "threshold")


