# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'BatchManifestArgs',
    'BatchManifestLocationArgs',
    'BatchManifestSpecArgs',
    'BatchOperationArgs',
    'BatchOperationCosInitiateRestoreObjectArgs',
    'BatchOperationCosPutObjectCopyArgs',
    'BatchOperationCosPutObjectCopyAccessControlGrantsArgs',
    'BatchOperationCosPutObjectCopyNewObjectMetadataArgs',
    'BatchOperationCosPutObjectCopyNewObjectMetadataUserMetadataArgs',
    'BatchOperationCosPutObjectCopyNewObjectTaggingArgs',
    'BatchReportArgs',
    'BucketCorsRuleArgs',
    'BucketDomainCertificateAttachmentDomainCertificateArgs',
    'BucketDomainCertificateAttachmentDomainCertificateCertificateArgs',
    'BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCertArgs',
    'BucketInventoryDestinationArgs',
    'BucketInventoryDestinationEncryptionArgs',
    'BucketInventoryFilterArgs',
    'BucketInventoryFilterPeriodArgs',
    'BucketInventoryOptionalFieldsArgs',
    'BucketInventoryScheduleArgs',
    'BucketLifecycleRuleArgs',
    'BucketLifecycleRuleExpirationArgs',
    'BucketLifecycleRuleNonCurrentExpirationArgs',
    'BucketLifecycleRuleNonCurrentTransitionArgs',
    'BucketLifecycleRuleTransitionArgs',
    'BucketOriginDomainRuleArgs',
    'BucketOriginPullRuleArgs',
    'BucketReplicaRuleArgs',
    'BucketWebsiteArgs',
]

@pulumi.input_type
class BatchManifestArgs:
    def __init__(__self__, *,
                 location: pulumi.Input['BatchManifestLocationArgs'],
                 spec: pulumi.Input['BatchManifestSpecArgs']):
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input['BatchManifestLocationArgs']:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input['BatchManifestLocationArgs']):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input['BatchManifestSpecArgs']:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input['BatchManifestSpecArgs']):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class BatchManifestLocationArgs:
    def __init__(__self__, *,
                 etag: pulumi.Input[str],
                 object_arn: pulumi.Input[str],
                 object_version_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "etag", etag)
        pulumi.set(__self__, "object_arn", object_arn)
        if object_version_id is not None:
            pulumi.set(__self__, "object_version_id", object_version_id)

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Input[str]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: pulumi.Input[str]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter(name="objectArn")
    def object_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object_arn")

    @object_arn.setter
    def object_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_arn", value)

    @property
    @pulumi.getter(name="objectVersionId")
    def object_version_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "object_version_id")

    @object_version_id.setter
    def object_version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_version_id", value)


@pulumi.input_type
class BatchManifestSpecArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "format", format)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fields", value)


@pulumi.input_type
class BatchOperationArgs:
    def __init__(__self__, *,
                 cos_initiate_restore_object: Optional[pulumi.Input['BatchOperationCosInitiateRestoreObjectArgs']] = None,
                 cos_put_object_copy: Optional[pulumi.Input['BatchOperationCosPutObjectCopyArgs']] = None):
        if cos_initiate_restore_object is not None:
            pulumi.set(__self__, "cos_initiate_restore_object", cos_initiate_restore_object)
        if cos_put_object_copy is not None:
            pulumi.set(__self__, "cos_put_object_copy", cos_put_object_copy)

    @property
    @pulumi.getter(name="cosInitiateRestoreObject")
    def cos_initiate_restore_object(self) -> Optional[pulumi.Input['BatchOperationCosInitiateRestoreObjectArgs']]:
        return pulumi.get(self, "cos_initiate_restore_object")

    @cos_initiate_restore_object.setter
    def cos_initiate_restore_object(self, value: Optional[pulumi.Input['BatchOperationCosInitiateRestoreObjectArgs']]):
        pulumi.set(self, "cos_initiate_restore_object", value)

    @property
    @pulumi.getter(name="cosPutObjectCopy")
    def cos_put_object_copy(self) -> Optional[pulumi.Input['BatchOperationCosPutObjectCopyArgs']]:
        return pulumi.get(self, "cos_put_object_copy")

    @cos_put_object_copy.setter
    def cos_put_object_copy(self, value: Optional[pulumi.Input['BatchOperationCosPutObjectCopyArgs']]):
        pulumi.set(self, "cos_put_object_copy", value)


@pulumi.input_type
class BatchOperationCosInitiateRestoreObjectArgs:
    def __init__(__self__, *,
                 expiration_in_days: pulumi.Input[int],
                 job_tier: pulumi.Input[str]):
        pulumi.set(__self__, "expiration_in_days", expiration_in_days)
        pulumi.set(__self__, "job_tier", job_tier)

    @property
    @pulumi.getter(name="expirationInDays")
    def expiration_in_days(self) -> pulumi.Input[int]:
        return pulumi.get(self, "expiration_in_days")

    @expiration_in_days.setter
    def expiration_in_days(self, value: pulumi.Input[int]):
        pulumi.set(self, "expiration_in_days", value)

    @property
    @pulumi.getter(name="jobTier")
    def job_tier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "job_tier")

    @job_tier.setter
    def job_tier(self, value: pulumi.Input[str]):
        pulumi.set(self, "job_tier", value)


@pulumi.input_type
class BatchOperationCosPutObjectCopyArgs:
    def __init__(__self__, *,
                 target_resource: pulumi.Input[str],
                 access_control_directive: Optional[pulumi.Input[str]] = None,
                 access_control_grants: Optional[pulumi.Input['BatchOperationCosPutObjectCopyAccessControlGrantsArgs']] = None,
                 canned_access_control_list: Optional[pulumi.Input[str]] = None,
                 metadata_directive: Optional[pulumi.Input[str]] = None,
                 modified_since_constraint: Optional[pulumi.Input[int]] = None,
                 new_object_metadata: Optional[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectMetadataArgs']] = None,
                 new_object_taggings: Optional[pulumi.Input[Sequence[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectTaggingArgs']]]] = None,
                 prefix_replace: Optional[pulumi.Input[bool]] = None,
                 resources_prefix: Optional[pulumi.Input[str]] = None,
                 storage_class: Optional[pulumi.Input[str]] = None,
                 tagging_directive: Optional[pulumi.Input[str]] = None,
                 target_key_prefix: Optional[pulumi.Input[str]] = None,
                 unmodified_since_constraint: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "target_resource", target_resource)
        if access_control_directive is not None:
            pulumi.set(__self__, "access_control_directive", access_control_directive)
        if access_control_grants is not None:
            pulumi.set(__self__, "access_control_grants", access_control_grants)
        if canned_access_control_list is not None:
            pulumi.set(__self__, "canned_access_control_list", canned_access_control_list)
        if metadata_directive is not None:
            pulumi.set(__self__, "metadata_directive", metadata_directive)
        if modified_since_constraint is not None:
            pulumi.set(__self__, "modified_since_constraint", modified_since_constraint)
        if new_object_metadata is not None:
            pulumi.set(__self__, "new_object_metadata", new_object_metadata)
        if new_object_taggings is not None:
            pulumi.set(__self__, "new_object_taggings", new_object_taggings)
        if prefix_replace is not None:
            pulumi.set(__self__, "prefix_replace", prefix_replace)
        if resources_prefix is not None:
            pulumi.set(__self__, "resources_prefix", resources_prefix)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)
        if tagging_directive is not None:
            pulumi.set(__self__, "tagging_directive", tagging_directive)
        if target_key_prefix is not None:
            pulumi.set(__self__, "target_key_prefix", target_key_prefix)
        if unmodified_since_constraint is not None:
            pulumi.set(__self__, "unmodified_since_constraint", unmodified_since_constraint)

    @property
    @pulumi.getter(name="targetResource")
    def target_resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target_resource")

    @target_resource.setter
    def target_resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_resource", value)

    @property
    @pulumi.getter(name="accessControlDirective")
    def access_control_directive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_control_directive")

    @access_control_directive.setter
    def access_control_directive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_control_directive", value)

    @property
    @pulumi.getter(name="accessControlGrants")
    def access_control_grants(self) -> Optional[pulumi.Input['BatchOperationCosPutObjectCopyAccessControlGrantsArgs']]:
        return pulumi.get(self, "access_control_grants")

    @access_control_grants.setter
    def access_control_grants(self, value: Optional[pulumi.Input['BatchOperationCosPutObjectCopyAccessControlGrantsArgs']]):
        pulumi.set(self, "access_control_grants", value)

    @property
    @pulumi.getter(name="cannedAccessControlList")
    def canned_access_control_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "canned_access_control_list")

    @canned_access_control_list.setter
    def canned_access_control_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "canned_access_control_list", value)

    @property
    @pulumi.getter(name="metadataDirective")
    def metadata_directive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "metadata_directive")

    @metadata_directive.setter
    def metadata_directive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata_directive", value)

    @property
    @pulumi.getter(name="modifiedSinceConstraint")
    def modified_since_constraint(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "modified_since_constraint")

    @modified_since_constraint.setter
    def modified_since_constraint(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "modified_since_constraint", value)

    @property
    @pulumi.getter(name="newObjectMetadata")
    def new_object_metadata(self) -> Optional[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectMetadataArgs']]:
        return pulumi.get(self, "new_object_metadata")

    @new_object_metadata.setter
    def new_object_metadata(self, value: Optional[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectMetadataArgs']]):
        pulumi.set(self, "new_object_metadata", value)

    @property
    @pulumi.getter(name="newObjectTaggings")
    def new_object_taggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectTaggingArgs']]]]:
        return pulumi.get(self, "new_object_taggings")

    @new_object_taggings.setter
    def new_object_taggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectTaggingArgs']]]]):
        pulumi.set(self, "new_object_taggings", value)

    @property
    @pulumi.getter(name="prefixReplace")
    def prefix_replace(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "prefix_replace")

    @prefix_replace.setter
    def prefix_replace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prefix_replace", value)

    @property
    @pulumi.getter(name="resourcesPrefix")
    def resources_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resources_prefix")

    @resources_prefix.setter
    def resources_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resources_prefix", value)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter(name="taggingDirective")
    def tagging_directive(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tagging_directive")

    @tagging_directive.setter
    def tagging_directive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tagging_directive", value)

    @property
    @pulumi.getter(name="targetKeyPrefix")
    def target_key_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_key_prefix")

    @target_key_prefix.setter
    def target_key_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_key_prefix", value)

    @property
    @pulumi.getter(name="unmodifiedSinceConstraint")
    def unmodified_since_constraint(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "unmodified_since_constraint")

    @unmodified_since_constraint.setter
    def unmodified_since_constraint(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unmodified_since_constraint", value)


@pulumi.input_type
class BatchOperationCosPutObjectCopyAccessControlGrantsArgs:
    def __init__(__self__, *,
                 identifier: pulumi.Input[str],
                 permission: pulumi.Input[str],
                 type_identifier: pulumi.Input[str],
                 display_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "type_identifier", type_identifier)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def permission(self) -> pulumi.Input[str]:
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter(name="typeIdentifier")
    def type_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type_identifier")

    @type_identifier.setter
    def type_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_identifier", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)


@pulumi.input_type
class BatchOperationCosPutObjectCopyNewObjectMetadataArgs:
    def __init__(__self__, *,
                 cache_control: Optional[pulumi.Input[str]] = None,
                 content_disposition: Optional[pulumi.Input[str]] = None,
                 content_encoding: Optional[pulumi.Input[str]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 http_expires_date: Optional[pulumi.Input[str]] = None,
                 sse_algorithm: Optional[pulumi.Input[str]] = None,
                 user_metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectMetadataUserMetadataArgs']]]] = None):
        if cache_control is not None:
            pulumi.set(__self__, "cache_control", cache_control)
        if content_disposition is not None:
            pulumi.set(__self__, "content_disposition", content_disposition)
        if content_encoding is not None:
            pulumi.set(__self__, "content_encoding", content_encoding)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if http_expires_date is not None:
            pulumi.set(__self__, "http_expires_date", http_expires_date)
        if sse_algorithm is not None:
            pulumi.set(__self__, "sse_algorithm", sse_algorithm)
        if user_metadatas is not None:
            pulumi.set(__self__, "user_metadatas", user_metadatas)

    @property
    @pulumi.getter(name="cacheControl")
    def cache_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cache_control")

    @cache_control.setter
    def cache_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_control", value)

    @property
    @pulumi.getter(name="contentDisposition")
    def content_disposition(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_disposition")

    @content_disposition.setter
    def content_disposition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_disposition", value)

    @property
    @pulumi.getter(name="contentEncoding")
    def content_encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_encoding")

    @content_encoding.setter
    def content_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_encoding", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="httpExpiresDate")
    def http_expires_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_expires_date")

    @http_expires_date.setter
    def http_expires_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_expires_date", value)

    @property
    @pulumi.getter(name="sseAlgorithm")
    def sse_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sse_algorithm")

    @sse_algorithm.setter
    def sse_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sse_algorithm", value)

    @property
    @pulumi.getter(name="userMetadatas")
    def user_metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectMetadataUserMetadataArgs']]]]:
        return pulumi.get(self, "user_metadatas")

    @user_metadatas.setter
    def user_metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BatchOperationCosPutObjectCopyNewObjectMetadataUserMetadataArgs']]]]):
        pulumi.set(self, "user_metadatas", value)


@pulumi.input_type
class BatchOperationCosPutObjectCopyNewObjectMetadataUserMetadataArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BatchOperationCosPutObjectCopyNewObjectTaggingArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class BatchReportArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 enabled: pulumi.Input[str],
                 format: pulumi.Input[str],
                 report_scope: pulumi.Input[str],
                 prefix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "report_scope", report_scope)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[str]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[str]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="reportScope")
    def report_scope(self) -> pulumi.Input[str]:
        return pulumi.get(self, "report_scope")

    @report_scope.setter
    def report_scope(self, value: pulumi.Input[str]):
        pulumi.set(self, "report_scope", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class BucketCorsRuleArgs:
    def __init__(__self__, *,
                 allowed_headers: pulumi.Input[Sequence[pulumi.Input[str]]],
                 allowed_methods: pulumi.Input[Sequence[pulumi.Input[str]]],
                 allowed_origins: pulumi.Input[Sequence[pulumi.Input[str]]],
                 expose_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_age_seconds: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "allowed_headers", allowed_headers)
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        if expose_headers is not None:
            pulumi.set(__self__, "expose_headers", expose_headers)
        if max_age_seconds is not None:
            pulumi.set(__self__, "max_age_seconds", max_age_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "allowed_headers")

    @allowed_headers.setter
    def allowed_headers(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_headers", value)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "allowed_methods")

    @allowed_methods.setter
    def allowed_methods(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_methods", value)

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "allowed_origins")

    @allowed_origins.setter
    def allowed_origins(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_origins", value)

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "expose_headers")

    @expose_headers.setter
    def expose_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "expose_headers", value)

    @property
    @pulumi.getter(name="maxAgeSeconds")
    def max_age_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_age_seconds")

    @max_age_seconds.setter
    def max_age_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age_seconds", value)


@pulumi.input_type
class BucketDomainCertificateAttachmentDomainCertificateArgs:
    def __init__(__self__, *,
                 certificate: pulumi.Input['BucketDomainCertificateAttachmentDomainCertificateCertificateArgs'],
                 domain: pulumi.Input[str]):
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Input['BucketDomainCertificateAttachmentDomainCertificateCertificateArgs']:
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: pulumi.Input['BucketDomainCertificateAttachmentDomainCertificateCertificateArgs']):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)


@pulumi.input_type
class BucketDomainCertificateAttachmentDomainCertificateCertificateArgs:
    def __init__(__self__, *,
                 cert_type: pulumi.Input[str],
                 custom_cert: pulumi.Input['BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCertArgs']):
        pulumi.set(__self__, "cert_type", cert_type)
        pulumi.set(__self__, "custom_cert", custom_cert)

    @property
    @pulumi.getter(name="certType")
    def cert_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cert_type")

    @cert_type.setter
    def cert_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "cert_type", value)

    @property
    @pulumi.getter(name="customCert")
    def custom_cert(self) -> pulumi.Input['BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCertArgs']:
        return pulumi.get(self, "custom_cert")

    @custom_cert.setter
    def custom_cert(self, value: pulumi.Input['BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCertArgs']):
        pulumi.set(self, "custom_cert", value)


@pulumi.input_type
class BucketDomainCertificateAttachmentDomainCertificateCertificateCustomCertArgs:
    def __init__(__self__, *,
                 cert: pulumi.Input[str],
                 private_key: pulumi.Input[str]):
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "private_key", private_key)

    @property
    @pulumi.getter
    def cert(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: pulumi.Input[str]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)


@pulumi.input_type
class BucketInventoryDestinationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 format: pulumi.Input[str],
                 account_id: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input['BucketInventoryDestinationEncryptionArgs']] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "format", format)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['BucketInventoryDestinationEncryptionArgs']]:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['BucketInventoryDestinationEncryptionArgs']]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class BucketInventoryDestinationEncryptionArgs:
    def __init__(__self__, *,
                 sse_cos: Optional[pulumi.Input[str]] = None):
        if sse_cos is not None:
            pulumi.set(__self__, "sse_cos", sse_cos)

    @property
    @pulumi.getter(name="sseCos")
    def sse_cos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sse_cos")

    @sse_cos.setter
    def sse_cos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sse_cos", value)


@pulumi.input_type
class BucketInventoryFilterArgs:
    def __init__(__self__, *,
                 period: Optional[pulumi.Input['BucketInventoryFilterPeriodArgs']] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        if period is not None:
            pulumi.set(__self__, "period", period)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input['BucketInventoryFilterPeriodArgs']]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input['BucketInventoryFilterPeriodArgs']]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class BucketInventoryFilterPeriodArgs:
    def __init__(__self__, *,
                 end_time: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None):
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class BucketInventoryOptionalFieldsArgs:
    def __init__(__self__, *,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fields", value)


@pulumi.input_type
class BucketInventoryScheduleArgs:
    def __init__(__self__, *,
                 frequency: pulumi.Input[str]):
        pulumi.set(__self__, "frequency", frequency)

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Input[str]:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: pulumi.Input[str]):
        pulumi.set(self, "frequency", value)


@pulumi.input_type
class BucketLifecycleRuleArgs:
    def __init__(__self__, *,
                 filter_prefix: pulumi.Input[str],
                 expiration: Optional[pulumi.Input['BucketLifecycleRuleExpirationArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 non_current_expiration: Optional[pulumi.Input['BucketLifecycleRuleNonCurrentExpirationArgs']] = None,
                 non_current_transitions: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleNonCurrentTransitionArgs']]]] = None,
                 transitions: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleTransitionArgs']]]] = None):
        pulumi.set(__self__, "filter_prefix", filter_prefix)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if non_current_expiration is not None:
            pulumi.set(__self__, "non_current_expiration", non_current_expiration)
        if non_current_transitions is not None:
            pulumi.set(__self__, "non_current_transitions", non_current_transitions)
        if transitions is not None:
            pulumi.set(__self__, "transitions", transitions)

    @property
    @pulumi.getter(name="filterPrefix")
    def filter_prefix(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_prefix")

    @filter_prefix.setter
    def filter_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_prefix", value)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input['BucketLifecycleRuleExpirationArgs']]:
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input['BucketLifecycleRuleExpirationArgs']]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="nonCurrentExpiration")
    def non_current_expiration(self) -> Optional[pulumi.Input['BucketLifecycleRuleNonCurrentExpirationArgs']]:
        return pulumi.get(self, "non_current_expiration")

    @non_current_expiration.setter
    def non_current_expiration(self, value: Optional[pulumi.Input['BucketLifecycleRuleNonCurrentExpirationArgs']]):
        pulumi.set(self, "non_current_expiration", value)

    @property
    @pulumi.getter(name="nonCurrentTransitions")
    def non_current_transitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleNonCurrentTransitionArgs']]]]:
        return pulumi.get(self, "non_current_transitions")

    @non_current_transitions.setter
    def non_current_transitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleNonCurrentTransitionArgs']]]]):
        pulumi.set(self, "non_current_transitions", value)

    @property
    @pulumi.getter
    def transitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleTransitionArgs']]]]:
        return pulumi.get(self, "transitions")

    @transitions.setter
    def transitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleRuleTransitionArgs']]]]):
        pulumi.set(self, "transitions", value)


@pulumi.input_type
class BucketLifecycleRuleExpirationArgs:
    def __init__(__self__, *,
                 date: Optional[pulumi.Input[str]] = None,
                 days: Optional[pulumi.Input[int]] = None,
                 delete_marker: Optional[pulumi.Input[bool]] = None):
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if delete_marker is not None:
            pulumi.set(__self__, "delete_marker", delete_marker)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter(name="deleteMarker")
    def delete_marker(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_marker")

    @delete_marker.setter
    def delete_marker(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_marker", value)


@pulumi.input_type
class BucketLifecycleRuleNonCurrentExpirationArgs:
    def __init__(__self__, *,
                 non_current_days: Optional[pulumi.Input[int]] = None):
        if non_current_days is not None:
            pulumi.set(__self__, "non_current_days", non_current_days)

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "non_current_days")

    @non_current_days.setter
    def non_current_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "non_current_days", value)


@pulumi.input_type
class BucketLifecycleRuleNonCurrentTransitionArgs:
    def __init__(__self__, *,
                 storage_class: pulumi.Input[str],
                 non_current_days: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "storage_class", storage_class)
        if non_current_days is not None:
            pulumi.set(__self__, "non_current_days", non_current_days)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "non_current_days")

    @non_current_days.setter
    def non_current_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "non_current_days", value)


@pulumi.input_type
class BucketLifecycleRuleTransitionArgs:
    def __init__(__self__, *,
                 storage_class: pulumi.Input[str],
                 date: Optional[pulumi.Input[str]] = None,
                 days: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "storage_class", storage_class)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "days", value)


@pulumi.input_type
class BucketOriginDomainRuleArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "domain", domain)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class BucketOriginPullRuleArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 priority: pulumi.Input[int],
                 custom_http_headers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 follow_http_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 follow_query_string: Optional[pulumi.Input[bool]] = None,
                 follow_redirection: Optional[pulumi.Input[bool]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 sync_back_to_source: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "priority", priority)
        if custom_http_headers is not None:
            pulumi.set(__self__, "custom_http_headers", custom_http_headers)
        if follow_http_headers is not None:
            pulumi.set(__self__, "follow_http_headers", follow_http_headers)
        if follow_query_string is not None:
            pulumi.set(__self__, "follow_query_string", follow_query_string)
        if follow_redirection is not None:
            pulumi.set(__self__, "follow_redirection", follow_redirection)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if sync_back_to_source is not None:
            pulumi.set(__self__, "sync_back_to_source", sync_back_to_source)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="customHttpHeaders")
    def custom_http_headers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "custom_http_headers")

    @custom_http_headers.setter
    def custom_http_headers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "custom_http_headers", value)

    @property
    @pulumi.getter(name="followHttpHeaders")
    def follow_http_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "follow_http_headers")

    @follow_http_headers.setter
    def follow_http_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "follow_http_headers", value)

    @property
    @pulumi.getter(name="followQueryString")
    def follow_query_string(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "follow_query_string")

    @follow_query_string.setter
    def follow_query_string(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "follow_query_string", value)

    @property
    @pulumi.getter(name="followRedirection")
    def follow_redirection(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "follow_redirection")

    @follow_redirection.setter
    def follow_redirection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "follow_redirection", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="syncBackToSource")
    def sync_back_to_source(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sync_back_to_source")

    @sync_back_to_source.setter
    def sync_back_to_source(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sync_back_to_source", value)


@pulumi.input_type
class BucketReplicaRuleArgs:
    def __init__(__self__, *,
                 destination_bucket: pulumi.Input[str],
                 status: pulumi.Input[str],
                 destination_storage_class: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "destination_bucket", destination_bucket)
        pulumi.set(__self__, "status", status)
        if destination_storage_class is not None:
            pulumi.set(__self__, "destination_storage_class", destination_storage_class)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter(name="destinationBucket")
    def destination_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_bucket")

    @destination_bucket.setter
    def destination_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_bucket", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="destinationStorageClass")
    def destination_storage_class(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_storage_class")

    @destination_storage_class.setter
    def destination_storage_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_storage_class", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class BucketWebsiteArgs:
    def __init__(__self__, *,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 error_document: Optional[pulumi.Input[str]] = None,
                 index_document: Optional[pulumi.Input[str]] = None):
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if error_document is not None:
            pulumi.set(__self__, "error_document", error_document)
        if index_document is not None:
            pulumi.set(__self__, "index_document", index_document)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="errorDocument")
    def error_document(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_document")

    @error_document.setter
    def error_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_document", value)

    @property
    @pulumi.getter(name="indexDocument")
    def index_document(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "index_document")

    @index_document.setter
    def index_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_document", value)


