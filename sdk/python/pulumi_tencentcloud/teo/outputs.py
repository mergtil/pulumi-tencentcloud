# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ApplicationProxyIpv6',
    'OriginGroupOriginRecord',
    'OriginGroupOriginRecordPrivateParameter',
    'RuleEngineRule',
    'RuleEngineRuleAction',
    'RuleEngineRuleActionCodeAction',
    'RuleEngineRuleActionCodeActionParameter',
    'RuleEngineRuleActionNormalAction',
    'RuleEngineRuleActionNormalActionParameter',
    'RuleEngineRuleActionRewriteAction',
    'RuleEngineRuleActionRewriteActionParameter',
    'RuleEngineRuleOr',
    'RuleEngineRuleOrAnd',
    'RuleEngineRuleSubRule',
    'RuleEngineRuleSubRuleRule',
    'RuleEngineRuleSubRuleRuleAction',
    'RuleEngineRuleSubRuleRuleActionCodeAction',
    'RuleEngineRuleSubRuleRuleActionCodeActionParameter',
    'RuleEngineRuleSubRuleRuleActionNormalAction',
    'RuleEngineRuleSubRuleRuleActionNormalActionParameter',
    'RuleEngineRuleSubRuleRuleActionRewriteAction',
    'RuleEngineRuleSubRuleRuleActionRewriteActionParameter',
    'RuleEngineRuleSubRuleRuleOr',
    'RuleEngineRuleSubRuleRuleOrAnd',
    'ZoneResource',
    'ZoneResourceSv',
    'ZoneSettingCache',
    'ZoneSettingCacheCache',
    'ZoneSettingCacheFollowOrigin',
    'ZoneSettingCacheKey',
    'ZoneSettingCacheKeyQueryString',
    'ZoneSettingCacheNoCache',
    'ZoneSettingCachePrefresh',
    'ZoneSettingClientIpHeader',
    'ZoneSettingCompression',
    'ZoneSettingForceRedirect',
    'ZoneSettingHttps',
    'ZoneSettingHttpsHsts',
    'ZoneSettingIpv6',
    'ZoneSettingMaxAge',
    'ZoneSettingOfflineCache',
    'ZoneSettingOrigin',
    'ZoneSettingPostMaxSize',
    'ZoneSettingQuic',
    'ZoneSettingSmartRouting',
    'ZoneSettingUpstreamHttp2',
    'ZoneSettingWebSocket',
    'ZoneVanityNameServers',
    'ZoneVanityNameServersIp',
    'GetRuleEngineSettingsActionResult',
    'GetRuleEngineSettingsActionPropertyResult',
    'GetRuleEngineSettingsActionPropertyChoicePropertyResult',
    'GetRuleEngineSettingsActionPropertyChoicePropertyExtraParameterResult',
    'GetRuleEngineSettingsActionPropertyExtraParameterResult',
    'GetZoneAvailablePlansPlanInfoListResult',
]

@pulumi.output_type
class ApplicationProxyIpv6(dict):
    def __init__(__self__, *,
                 switch: str):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")


@pulumi.output_type
class OriginGroupOriginRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateParameters":
            suggest = "private_parameters"
        elif key == "recordId":
            suggest = "record_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OriginGroupOriginRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OriginGroupOriginRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OriginGroupOriginRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 record: str,
                 areas: Optional[Sequence[str]] = None,
                 private: Optional[bool] = None,
                 private_parameters: Optional[Sequence['outputs.OriginGroupOriginRecordPrivateParameter']] = None,
                 record_id: Optional[str] = None,
                 weight: Optional[int] = None):
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "record", record)
        if areas is not None:
            pulumi.set(__self__, "areas", areas)
        if private is not None:
            pulumi.set(__self__, "private", private)
        if private_parameters is not None:
            pulumi.set(__self__, "private_parameters", private_parameters)
        if record_id is not None:
            pulumi.set(__self__, "record_id", record_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def record(self) -> str:
        return pulumi.get(self, "record")

    @property
    @pulumi.getter
    def areas(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "areas")

    @property
    @pulumi.getter
    def private(self) -> Optional[bool]:
        return pulumi.get(self, "private")

    @property
    @pulumi.getter(name="privateParameters")
    def private_parameters(self) -> Optional[Sequence['outputs.OriginGroupOriginRecordPrivateParameter']]:
        return pulumi.get(self, "private_parameters")

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> Optional[str]:
        return pulumi.get(self, "record_id")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class OriginGroupOriginRecordPrivateParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class RuleEngineRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subRules":
            suggest = "sub_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions: Sequence['outputs.RuleEngineRuleAction'],
                 ors: Sequence['outputs.RuleEngineRuleOr'],
                 sub_rules: Optional[Sequence['outputs.RuleEngineRuleSubRule']] = None):
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "ors", ors)
        if sub_rules is not None:
            pulumi.set(__self__, "sub_rules", sub_rules)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.RuleEngineRuleAction']:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def ors(self) -> Sequence['outputs.RuleEngineRuleOr']:
        return pulumi.get(self, "ors")

    @property
    @pulumi.getter(name="subRules")
    def sub_rules(self) -> Optional[Sequence['outputs.RuleEngineRuleSubRule']]:
        return pulumi.get(self, "sub_rules")


@pulumi.output_type
class RuleEngineRuleAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "codeAction":
            suggest = "code_action"
        elif key == "normalAction":
            suggest = "normal_action"
        elif key == "rewriteAction":
            suggest = "rewrite_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRuleAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRuleAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRuleAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code_action: Optional['outputs.RuleEngineRuleActionCodeAction'] = None,
                 normal_action: Optional['outputs.RuleEngineRuleActionNormalAction'] = None,
                 rewrite_action: Optional['outputs.RuleEngineRuleActionRewriteAction'] = None):
        if code_action is not None:
            pulumi.set(__self__, "code_action", code_action)
        if normal_action is not None:
            pulumi.set(__self__, "normal_action", normal_action)
        if rewrite_action is not None:
            pulumi.set(__self__, "rewrite_action", rewrite_action)

    @property
    @pulumi.getter(name="codeAction")
    def code_action(self) -> Optional['outputs.RuleEngineRuleActionCodeAction']:
        return pulumi.get(self, "code_action")

    @property
    @pulumi.getter(name="normalAction")
    def normal_action(self) -> Optional['outputs.RuleEngineRuleActionNormalAction']:
        return pulumi.get(self, "normal_action")

    @property
    @pulumi.getter(name="rewriteAction")
    def rewrite_action(self) -> Optional['outputs.RuleEngineRuleActionRewriteAction']:
        return pulumi.get(self, "rewrite_action")


@pulumi.output_type
class RuleEngineRuleActionCodeAction(dict):
    def __init__(__self__, *,
                 action: str,
                 parameters: Sequence['outputs.RuleEngineRuleActionCodeActionParameter']):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.RuleEngineRuleActionCodeActionParameter']:
        return pulumi.get(self, "parameters")


@pulumi.output_type
class RuleEngineRuleActionCodeActionParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRuleActionCodeActionParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRuleActionCodeActionParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRuleActionCodeActionParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 status_code: int,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> int:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleEngineRuleActionNormalAction(dict):
    def __init__(__self__, *,
                 action: str,
                 parameters: Sequence['outputs.RuleEngineRuleActionNormalActionParameter']):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.RuleEngineRuleActionNormalActionParameter']:
        return pulumi.get(self, "parameters")


@pulumi.output_type
class RuleEngineRuleActionNormalActionParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleEngineRuleActionRewriteAction(dict):
    def __init__(__self__, *,
                 action: str,
                 parameters: Sequence['outputs.RuleEngineRuleActionRewriteActionParameter']):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.RuleEngineRuleActionRewriteActionParameter']:
        return pulumi.get(self, "parameters")


@pulumi.output_type
class RuleEngineRuleActionRewriteActionParameter(dict):
    def __init__(__self__, *,
                 action: str,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleEngineRuleOr(dict):
    def __init__(__self__, *,
                 ands: Sequence['outputs.RuleEngineRuleOrAnd']):
        pulumi.set(__self__, "ands", ands)

    @property
    @pulumi.getter
    def ands(self) -> Sequence['outputs.RuleEngineRuleOrAnd']:
        return pulumi.get(self, "ands")


@pulumi.output_type
class RuleEngineRuleOrAnd(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreCase":
            suggest = "ignore_case"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRuleOrAnd. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRuleOrAnd.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRuleOrAnd.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operator: str,
                 target: str,
                 values: Sequence[str],
                 ignore_case: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "values", values)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_case")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class RuleEngineRuleSubRule(dict):
    def __init__(__self__, *,
                 rules: Sequence['outputs.RuleEngineRuleSubRuleRule'],
                 tags: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "rules", rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.RuleEngineRuleSubRuleRule']:
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class RuleEngineRuleSubRuleRule(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.RuleEngineRuleSubRuleRuleAction'],
                 ors: Sequence['outputs.RuleEngineRuleSubRuleRuleOr']):
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "ors", ors)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.RuleEngineRuleSubRuleRuleAction']:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def ors(self) -> Sequence['outputs.RuleEngineRuleSubRuleRuleOr']:
        return pulumi.get(self, "ors")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "codeAction":
            suggest = "code_action"
        elif key == "normalAction":
            suggest = "normal_action"
        elif key == "rewriteAction":
            suggest = "rewrite_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRuleSubRuleRuleAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRuleSubRuleRuleAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRuleSubRuleRuleAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 code_action: Optional['outputs.RuleEngineRuleSubRuleRuleActionCodeAction'] = None,
                 normal_action: Optional['outputs.RuleEngineRuleSubRuleRuleActionNormalAction'] = None,
                 rewrite_action: Optional['outputs.RuleEngineRuleSubRuleRuleActionRewriteAction'] = None):
        if code_action is not None:
            pulumi.set(__self__, "code_action", code_action)
        if normal_action is not None:
            pulumi.set(__self__, "normal_action", normal_action)
        if rewrite_action is not None:
            pulumi.set(__self__, "rewrite_action", rewrite_action)

    @property
    @pulumi.getter(name="codeAction")
    def code_action(self) -> Optional['outputs.RuleEngineRuleSubRuleRuleActionCodeAction']:
        return pulumi.get(self, "code_action")

    @property
    @pulumi.getter(name="normalAction")
    def normal_action(self) -> Optional['outputs.RuleEngineRuleSubRuleRuleActionNormalAction']:
        return pulumi.get(self, "normal_action")

    @property
    @pulumi.getter(name="rewriteAction")
    def rewrite_action(self) -> Optional['outputs.RuleEngineRuleSubRuleRuleActionRewriteAction']:
        return pulumi.get(self, "rewrite_action")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleActionCodeAction(dict):
    def __init__(__self__, *,
                 action: str,
                 parameters: Sequence['outputs.RuleEngineRuleSubRuleRuleActionCodeActionParameter']):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.RuleEngineRuleSubRuleRuleActionCodeActionParameter']:
        return pulumi.get(self, "parameters")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleActionCodeActionParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRuleSubRuleRuleActionCodeActionParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRuleSubRuleRuleActionCodeActionParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRuleSubRuleRuleActionCodeActionParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 status_code: int,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> int:
        return pulumi.get(self, "status_code")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleActionNormalAction(dict):
    def __init__(__self__, *,
                 action: str,
                 parameters: Sequence['outputs.RuleEngineRuleSubRuleRuleActionNormalActionParameter']):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.RuleEngineRuleSubRuleRuleActionNormalActionParameter']:
        return pulumi.get(self, "parameters")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleActionNormalActionParameter(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleActionRewriteAction(dict):
    def __init__(__self__, *,
                 action: str,
                 parameters: Sequence['outputs.RuleEngineRuleSubRuleRuleActionRewriteActionParameter']):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.RuleEngineRuleSubRuleRuleActionRewriteActionParameter']:
        return pulumi.get(self, "parameters")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleActionRewriteActionParameter(dict):
    def __init__(__self__, *,
                 action: str,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleOr(dict):
    def __init__(__self__, *,
                 ands: Sequence['outputs.RuleEngineRuleSubRuleRuleOrAnd']):
        pulumi.set(__self__, "ands", ands)

    @property
    @pulumi.getter
    def ands(self) -> Sequence['outputs.RuleEngineRuleSubRuleRuleOrAnd']:
        return pulumi.get(self, "ands")


@pulumi.output_type
class RuleEngineRuleSubRuleRuleOrAnd(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreCase":
            suggest = "ignore_case"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleEngineRuleSubRuleRuleOrAnd. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleEngineRuleSubRuleRuleOrAnd.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleEngineRuleSubRuleRuleOrAnd.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operator: str,
                 target: str,
                 values: Sequence[str],
                 ignore_case: Optional[bool] = None,
                 name: Optional[str] = None):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "values", values)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_case")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ZoneResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoRenewFlag":
            suggest = "auto_renew_flag"
        elif key == "createTime":
            suggest = "create_time"
        elif key == "enableTime":
            suggest = "enable_time"
        elif key == "expireTime":
            suggest = "expire_time"
        elif key == "payMode":
            suggest = "pay_mode"
        elif key == "planId":
            suggest = "plan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 area: Optional[str] = None,
                 auto_renew_flag: Optional[int] = None,
                 create_time: Optional[str] = None,
                 enable_time: Optional[str] = None,
                 expire_time: Optional[str] = None,
                 id: Optional[str] = None,
                 pay_mode: Optional[int] = None,
                 plan_id: Optional[str] = None,
                 status: Optional[str] = None,
                 svs: Optional[Sequence['outputs.ZoneResourceSv']] = None):
        if area is not None:
            pulumi.set(__self__, "area", area)
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if enable_time is not None:
            pulumi.set(__self__, "enable_time", enable_time)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pay_mode is not None:
            pulumi.set(__self__, "pay_mode", pay_mode)
        if plan_id is not None:
            pulumi.set(__self__, "plan_id", plan_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if svs is not None:
            pulumi.set(__self__, "svs", svs)

    @property
    @pulumi.getter
    def area(self) -> Optional[str]:
        return pulumi.get(self, "area")

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[int]:
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="enableTime")
    def enable_time(self) -> Optional[str]:
        return pulumi.get(self, "enable_time")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[str]:
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> Optional[int]:
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> Optional[str]:
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def svs(self) -> Optional[Sequence['outputs.ZoneResourceSv']]:
        return pulumi.get(self, "svs")


@pulumi.output_type
class ZoneResourceSv(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ZoneSettingCache(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "followOrigin":
            suggest = "follow_origin"
        elif key == "noCache":
            suggest = "no_cache"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingCache. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingCache.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingCache.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cache: Optional['outputs.ZoneSettingCacheCache'] = None,
                 follow_origin: Optional['outputs.ZoneSettingCacheFollowOrigin'] = None,
                 no_cache: Optional['outputs.ZoneSettingCacheNoCache'] = None):
        if cache is not None:
            pulumi.set(__self__, "cache", cache)
        if follow_origin is not None:
            pulumi.set(__self__, "follow_origin", follow_origin)
        if no_cache is not None:
            pulumi.set(__self__, "no_cache", no_cache)

    @property
    @pulumi.getter
    def cache(self) -> Optional['outputs.ZoneSettingCacheCache']:
        return pulumi.get(self, "cache")

    @property
    @pulumi.getter(name="followOrigin")
    def follow_origin(self) -> Optional['outputs.ZoneSettingCacheFollowOrigin']:
        return pulumi.get(self, "follow_origin")

    @property
    @pulumi.getter(name="noCache")
    def no_cache(self) -> Optional['outputs.ZoneSettingCacheNoCache']:
        return pulumi.get(self, "no_cache")


@pulumi.output_type
class ZoneSettingCacheCache(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cacheTime":
            suggest = "cache_time"
        elif key == "ignoreCacheControl":
            suggest = "ignore_cache_control"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingCacheCache. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingCacheCache.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingCacheCache.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cache_time: Optional[int] = None,
                 ignore_cache_control: Optional[str] = None,
                 switch: Optional[str] = None):
        if cache_time is not None:
            pulumi.set(__self__, "cache_time", cache_time)
        if ignore_cache_control is not None:
            pulumi.set(__self__, "ignore_cache_control", ignore_cache_control)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="cacheTime")
    def cache_time(self) -> Optional[int]:
        return pulumi.get(self, "cache_time")

    @property
    @pulumi.getter(name="ignoreCacheControl")
    def ignore_cache_control(self) -> Optional[str]:
        return pulumi.get(self, "ignore_cache_control")

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingCacheFollowOrigin(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingCacheKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fullUrlCache":
            suggest = "full_url_cache"
        elif key == "ignoreCase":
            suggest = "ignore_case"
        elif key == "queryString":
            suggest = "query_string"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingCacheKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingCacheKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingCacheKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 full_url_cache: Optional[str] = None,
                 ignore_case: Optional[str] = None,
                 query_string: Optional['outputs.ZoneSettingCacheKeyQueryString'] = None):
        if full_url_cache is not None:
            pulumi.set(__self__, "full_url_cache", full_url_cache)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if query_string is not None:
            pulumi.set(__self__, "query_string", query_string)

    @property
    @pulumi.getter(name="fullUrlCache")
    def full_url_cache(self) -> Optional[str]:
        return pulumi.get(self, "full_url_cache")

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[str]:
        return pulumi.get(self, "ignore_case")

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional['outputs.ZoneSettingCacheKeyQueryString']:
        return pulumi.get(self, "query_string")


@pulumi.output_type
class ZoneSettingCacheKeyQueryString(dict):
    def __init__(__self__, *,
                 switch: str,
                 action: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "switch", switch)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ZoneSettingCacheNoCache(dict):
    def __init__(__self__, *,
                 switch: Optional[str] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> Optional[str]:
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingCachePrefresh(dict):
    def __init__(__self__, *,
                 switch: str,
                 percent: Optional[int] = None):
        pulumi.set(__self__, "switch", switch)
        if percent is not None:
            pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def percent(self) -> Optional[int]:
        return pulumi.get(self, "percent")


@pulumi.output_type
class ZoneSettingClientIpHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerName":
            suggest = "header_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingClientIpHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingClientIpHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingClientIpHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 header_name: Optional[str] = None):
        pulumi.set(__self__, "switch", switch)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        return pulumi.get(self, "header_name")


@pulumi.output_type
class ZoneSettingCompression(dict):
    def __init__(__self__, *,
                 switch: str,
                 algorithms: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "switch", switch)
        if algorithms is not None:
            pulumi.set(__self__, "algorithms", algorithms)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def algorithms(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "algorithms")


@pulumi.output_type
class ZoneSettingForceRedirect(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "redirectStatusCode":
            suggest = "redirect_status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingForceRedirect. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingForceRedirect.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingForceRedirect.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 redirect_status_code: Optional[int] = None):
        pulumi.set(__self__, "switch", switch)
        if redirect_status_code is not None:
            pulumi.set(__self__, "redirect_status_code", redirect_status_code)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="redirectStatusCode")
    def redirect_status_code(self) -> Optional[int]:
        return pulumi.get(self, "redirect_status_code")


@pulumi.output_type
class ZoneSettingHttps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ocspStapling":
            suggest = "ocsp_stapling"
        elif key == "tlsVersions":
            suggest = "tls_versions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingHttps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingHttps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingHttps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hsts: Optional['outputs.ZoneSettingHttpsHsts'] = None,
                 http2: Optional[str] = None,
                 ocsp_stapling: Optional[str] = None,
                 tls_versions: Optional[Sequence[str]] = None):
        if hsts is not None:
            pulumi.set(__self__, "hsts", hsts)
        if http2 is not None:
            pulumi.set(__self__, "http2", http2)
        if ocsp_stapling is not None:
            pulumi.set(__self__, "ocsp_stapling", ocsp_stapling)
        if tls_versions is not None:
            pulumi.set(__self__, "tls_versions", tls_versions)

    @property
    @pulumi.getter
    def hsts(self) -> Optional['outputs.ZoneSettingHttpsHsts']:
        return pulumi.get(self, "hsts")

    @property
    @pulumi.getter
    def http2(self) -> Optional[str]:
        return pulumi.get(self, "http2")

    @property
    @pulumi.getter(name="ocspStapling")
    def ocsp_stapling(self) -> Optional[str]:
        return pulumi.get(self, "ocsp_stapling")

    @property
    @pulumi.getter(name="tlsVersions")
    def tls_versions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tls_versions")


@pulumi.output_type
class ZoneSettingHttpsHsts(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeSubDomains":
            suggest = "include_sub_domains"
        elif key == "maxAge":
            suggest = "max_age"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingHttpsHsts. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingHttpsHsts.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingHttpsHsts.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 include_sub_domains: Optional[str] = None,
                 max_age: Optional[int] = None,
                 preload: Optional[str] = None):
        pulumi.set(__self__, "switch", switch)
        if include_sub_domains is not None:
            pulumi.set(__self__, "include_sub_domains", include_sub_domains)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if preload is not None:
            pulumi.set(__self__, "preload", preload)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="includeSubDomains")
    def include_sub_domains(self) -> Optional[str]:
        return pulumi.get(self, "include_sub_domains")

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[int]:
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter
    def preload(self) -> Optional[str]:
        return pulumi.get(self, "preload")


@pulumi.output_type
class ZoneSettingIpv6(dict):
    def __init__(__self__, *,
                 switch: str):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingMaxAge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "followOrigin":
            suggest = "follow_origin"
        elif key == "maxAgeTime":
            suggest = "max_age_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingMaxAge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingMaxAge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingMaxAge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 follow_origin: Optional[str] = None,
                 max_age_time: Optional[int] = None):
        if follow_origin is not None:
            pulumi.set(__self__, "follow_origin", follow_origin)
        if max_age_time is not None:
            pulumi.set(__self__, "max_age_time", max_age_time)

    @property
    @pulumi.getter(name="followOrigin")
    def follow_origin(self) -> Optional[str]:
        return pulumi.get(self, "follow_origin")

    @property
    @pulumi.getter(name="maxAgeTime")
    def max_age_time(self) -> Optional[int]:
        return pulumi.get(self, "max_age_time")


@pulumi.output_type
class ZoneSettingOfflineCache(dict):
    def __init__(__self__, *,
                 switch: str):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingOrigin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupOrigins":
            suggest = "backup_origins"
        elif key == "cosPrivateAccess":
            suggest = "cos_private_access"
        elif key == "originPullProtocol":
            suggest = "origin_pull_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingOrigin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingOrigin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingOrigin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_origins: Optional[Sequence[str]] = None,
                 cos_private_access: Optional[str] = None,
                 origin_pull_protocol: Optional[str] = None,
                 origins: Optional[Sequence[str]] = None):
        if backup_origins is not None:
            pulumi.set(__self__, "backup_origins", backup_origins)
        if cos_private_access is not None:
            pulumi.set(__self__, "cos_private_access", cos_private_access)
        if origin_pull_protocol is not None:
            pulumi.set(__self__, "origin_pull_protocol", origin_pull_protocol)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)

    @property
    @pulumi.getter(name="backupOrigins")
    def backup_origins(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "backup_origins")

    @property
    @pulumi.getter(name="cosPrivateAccess")
    def cos_private_access(self) -> Optional[str]:
        return pulumi.get(self, "cos_private_access")

    @property
    @pulumi.getter(name="originPullProtocol")
    def origin_pull_protocol(self) -> Optional[str]:
        return pulumi.get(self, "origin_pull_protocol")

    @property
    @pulumi.getter
    def origins(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "origins")


@pulumi.output_type
class ZoneSettingPostMaxSize(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxSize":
            suggest = "max_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneSettingPostMaxSize. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneSettingPostMaxSize.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneSettingPostMaxSize.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 switch: str,
                 max_size: Optional[int] = None):
        pulumi.set(__self__, "switch", switch)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[int]:
        return pulumi.get(self, "max_size")


@pulumi.output_type
class ZoneSettingQuic(dict):
    def __init__(__self__, *,
                 switch: str):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingSmartRouting(dict):
    def __init__(__self__, *,
                 switch: str):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingUpstreamHttp2(dict):
    def __init__(__self__, *,
                 switch: str):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")


@pulumi.output_type
class ZoneSettingWebSocket(dict):
    def __init__(__self__, *,
                 switch: str,
                 timeout: Optional[int] = None):
        pulumi.set(__self__, "switch", switch)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class ZoneVanityNameServers(dict):
    def __init__(__self__, *,
                 switch: str,
                 servers: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "switch", switch)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)

    @property
    @pulumi.getter
    def switch(self) -> str:
        return pulumi.get(self, "switch")

    @property
    @pulumi.getter
    def servers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "servers")


@pulumi.output_type
class ZoneVanityNameServersIp(dict):
    def __init__(__self__, *,
                 ipv4: Optional[str] = None,
                 name: Optional[str] = None):
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[str]:
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRuleEngineSettingsActionResult(dict):
    def __init__(__self__, *,
                 action: str,
                 properties: Sequence['outputs.GetRuleEngineSettingsActionPropertyResult']):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "properties", properties)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetRuleEngineSettingsActionPropertyResult']:
        return pulumi.get(self, "properties")


@pulumi.output_type
class GetRuleEngineSettingsActionPropertyResult(dict):
    def __init__(__self__, *,
                 choice_properties: Sequence['outputs.GetRuleEngineSettingsActionPropertyChoicePropertyResult'],
                 choices_values: Sequence[str],
                 extra_parameters: Sequence['outputs.GetRuleEngineSettingsActionPropertyExtraParameterResult'],
                 is_allow_empty: bool,
                 is_multiple: bool,
                 max: int,
                 min: int,
                 name: str,
                 type: str):
        pulumi.set(__self__, "choice_properties", choice_properties)
        pulumi.set(__self__, "choices_values", choices_values)
        pulumi.set(__self__, "extra_parameters", extra_parameters)
        pulumi.set(__self__, "is_allow_empty", is_allow_empty)
        pulumi.set(__self__, "is_multiple", is_multiple)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="choiceProperties")
    def choice_properties(self) -> Sequence['outputs.GetRuleEngineSettingsActionPropertyChoicePropertyResult']:
        return pulumi.get(self, "choice_properties")

    @property
    @pulumi.getter(name="choicesValues")
    def choices_values(self) -> Sequence[str]:
        return pulumi.get(self, "choices_values")

    @property
    @pulumi.getter(name="extraParameters")
    def extra_parameters(self) -> Sequence['outputs.GetRuleEngineSettingsActionPropertyExtraParameterResult']:
        return pulumi.get(self, "extra_parameters")

    @property
    @pulumi.getter(name="isAllowEmpty")
    def is_allow_empty(self) -> bool:
        return pulumi.get(self, "is_allow_empty")

    @property
    @pulumi.getter(name="isMultiple")
    def is_multiple(self) -> bool:
        return pulumi.get(self, "is_multiple")

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRuleEngineSettingsActionPropertyChoicePropertyResult(dict):
    def __init__(__self__, *,
                 choices_values: Sequence[str],
                 extra_parameters: Sequence['outputs.GetRuleEngineSettingsActionPropertyChoicePropertyExtraParameterResult'],
                 is_allow_empty: bool,
                 is_multiple: bool,
                 max: int,
                 min: int,
                 name: str,
                 type: str):
        pulumi.set(__self__, "choices_values", choices_values)
        pulumi.set(__self__, "extra_parameters", extra_parameters)
        pulumi.set(__self__, "is_allow_empty", is_allow_empty)
        pulumi.set(__self__, "is_multiple", is_multiple)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="choicesValues")
    def choices_values(self) -> Sequence[str]:
        return pulumi.get(self, "choices_values")

    @property
    @pulumi.getter(name="extraParameters")
    def extra_parameters(self) -> Sequence['outputs.GetRuleEngineSettingsActionPropertyChoicePropertyExtraParameterResult']:
        return pulumi.get(self, "extra_parameters")

    @property
    @pulumi.getter(name="isAllowEmpty")
    def is_allow_empty(self) -> bool:
        return pulumi.get(self, "is_allow_empty")

    @property
    @pulumi.getter(name="isMultiple")
    def is_multiple(self) -> bool:
        return pulumi.get(self, "is_multiple")

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRuleEngineSettingsActionPropertyChoicePropertyExtraParameterResult(dict):
    def __init__(__self__, *,
                 choices: Sequence[str],
                 id: str,
                 type: str):
        pulumi.set(__self__, "choices", choices)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def choices(self) -> Sequence[str]:
        return pulumi.get(self, "choices")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRuleEngineSettingsActionPropertyExtraParameterResult(dict):
    def __init__(__self__, *,
                 choices: Sequence[str],
                 id: str,
                 type: str):
        pulumi.set(__self__, "choices", choices)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def choices(self) -> Sequence[str]:
        return pulumi.get(self, "choices")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetZoneAvailablePlansPlanInfoListResult(dict):
    def __init__(__self__, *,
                 area: str,
                 currency: str,
                 flux: int,
                 frequency: str,
                 plan_type: str,
                 price: int,
                 request: int,
                 site_number: int):
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "currency", currency)
        pulumi.set(__self__, "flux", flux)
        pulumi.set(__self__, "frequency", frequency)
        pulumi.set(__self__, "plan_type", plan_type)
        pulumi.set(__self__, "price", price)
        pulumi.set(__self__, "request", request)
        pulumi.set(__self__, "site_number", site_number)

    @property
    @pulumi.getter
    def area(self) -> str:
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def currency(self) -> str:
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter
    def flux(self) -> int:
        return pulumi.get(self, "flux")

    @property
    @pulumi.getter
    def frequency(self) -> str:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="planType")
    def plan_type(self) -> str:
        return pulumi.get(self, "plan_type")

    @property
    @pulumi.getter
    def price(self) -> int:
        return pulumi.get(self, "price")

    @property
    @pulumi.getter
    def request(self) -> int:
        return pulumi.get(self, "request")

    @property
    @pulumi.getter(name="siteNumber")
    def site_number(self) -> int:
        return pulumi.get(self, "site_number")


