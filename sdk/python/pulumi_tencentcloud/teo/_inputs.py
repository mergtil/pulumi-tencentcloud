# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ApplicationProxyIpv6Args',
    'OriginGroupOriginRecordArgs',
    'OriginGroupOriginRecordPrivateParameterArgs',
    'RuleEngineRuleArgs',
    'RuleEngineRuleActionArgs',
    'RuleEngineRuleActionCodeActionArgs',
    'RuleEngineRuleActionCodeActionParameterArgs',
    'RuleEngineRuleActionNormalActionArgs',
    'RuleEngineRuleActionNormalActionParameterArgs',
    'RuleEngineRuleActionRewriteActionArgs',
    'RuleEngineRuleActionRewriteActionParameterArgs',
    'RuleEngineRuleOrArgs',
    'RuleEngineRuleOrAndArgs',
    'RuleEngineRuleSubRuleArgs',
    'RuleEngineRuleSubRuleRuleArgs',
    'RuleEngineRuleSubRuleRuleActionArgs',
    'RuleEngineRuleSubRuleRuleActionCodeActionArgs',
    'RuleEngineRuleSubRuleRuleActionCodeActionParameterArgs',
    'RuleEngineRuleSubRuleRuleActionNormalActionArgs',
    'RuleEngineRuleSubRuleRuleActionNormalActionParameterArgs',
    'RuleEngineRuleSubRuleRuleActionRewriteActionArgs',
    'RuleEngineRuleSubRuleRuleActionRewriteActionParameterArgs',
    'RuleEngineRuleSubRuleRuleOrArgs',
    'RuleEngineRuleSubRuleRuleOrAndArgs',
    'ZoneResourceArgs',
    'ZoneResourceSvArgs',
    'ZoneSettingCacheArgs',
    'ZoneSettingCacheCacheArgs',
    'ZoneSettingCacheFollowOriginArgs',
    'ZoneSettingCacheKeyArgs',
    'ZoneSettingCacheKeyQueryStringArgs',
    'ZoneSettingCacheNoCacheArgs',
    'ZoneSettingCachePrefreshArgs',
    'ZoneSettingClientIpHeaderArgs',
    'ZoneSettingCompressionArgs',
    'ZoneSettingForceRedirectArgs',
    'ZoneSettingHttpsArgs',
    'ZoneSettingHttpsHstsArgs',
    'ZoneSettingIpv6Args',
    'ZoneSettingMaxAgeArgs',
    'ZoneSettingOfflineCacheArgs',
    'ZoneSettingOriginArgs',
    'ZoneSettingPostMaxSizeArgs',
    'ZoneSettingQuicArgs',
    'ZoneSettingSmartRoutingArgs',
    'ZoneSettingUpstreamHttp2Args',
    'ZoneSettingWebSocketArgs',
    'ZoneVanityNameServersArgs',
    'ZoneVanityNameServersIpArgs',
]

@pulumi.input_type
class ApplicationProxyIpv6Args:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class OriginGroupOriginRecordArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 record: pulumi.Input[str],
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 private_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['OriginGroupOriginRecordPrivateParameterArgs']]]] = None,
                 record_id: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "record", record)
        if areas is not None:
            pulumi.set(__self__, "areas", areas)
        if private is not None:
            pulumi.set(__self__, "private", private)
        if private_parameters is not None:
            pulumi.set(__self__, "private_parameters", private_parameters)
        if record_id is not None:
            pulumi.set(__self__, "record_id", record_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def record(self) -> pulumi.Input[str]:
        return pulumi.get(self, "record")

    @record.setter
    def record(self, value: pulumi.Input[str]):
        pulumi.set(self, "record", value)

    @property
    @pulumi.getter
    def areas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "areas")

    @areas.setter
    def areas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "areas", value)

    @property
    @pulumi.getter
    def private(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private", value)

    @property
    @pulumi.getter(name="privateParameters")
    def private_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OriginGroupOriginRecordPrivateParameterArgs']]]]:
        return pulumi.get(self, "private_parameters")

    @private_parameters.setter
    def private_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OriginGroupOriginRecordPrivateParameterArgs']]]]):
        pulumi.set(self, "private_parameters", value)

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "record_id")

    @record_id.setter
    def record_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_id", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class OriginGroupOriginRecordPrivateParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RuleEngineRuleArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionArgs']]],
                 ors: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrArgs']]],
                 sub_rules: Optional[pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleArgs']]]] = None):
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "ors", ors)
        if sub_rules is not None:
            pulumi.set(__self__, "sub_rules", sub_rules)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionArgs']]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionArgs']]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def ors(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrArgs']]]:
        return pulumi.get(self, "ors")

    @ors.setter
    def ors(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrArgs']]]):
        pulumi.set(self, "ors", value)

    @property
    @pulumi.getter(name="subRules")
    def sub_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleArgs']]]]:
        return pulumi.get(self, "sub_rules")

    @sub_rules.setter
    def sub_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleArgs']]]]):
        pulumi.set(self, "sub_rules", value)


@pulumi.input_type
class RuleEngineRuleActionArgs:
    def __init__(__self__, *,
                 code_action: Optional[pulumi.Input['RuleEngineRuleActionCodeActionArgs']] = None,
                 normal_action: Optional[pulumi.Input['RuleEngineRuleActionNormalActionArgs']] = None,
                 rewrite_action: Optional[pulumi.Input['RuleEngineRuleActionRewriteActionArgs']] = None):
        if code_action is not None:
            pulumi.set(__self__, "code_action", code_action)
        if normal_action is not None:
            pulumi.set(__self__, "normal_action", normal_action)
        if rewrite_action is not None:
            pulumi.set(__self__, "rewrite_action", rewrite_action)

    @property
    @pulumi.getter(name="codeAction")
    def code_action(self) -> Optional[pulumi.Input['RuleEngineRuleActionCodeActionArgs']]:
        return pulumi.get(self, "code_action")

    @code_action.setter
    def code_action(self, value: Optional[pulumi.Input['RuleEngineRuleActionCodeActionArgs']]):
        pulumi.set(self, "code_action", value)

    @property
    @pulumi.getter(name="normalAction")
    def normal_action(self) -> Optional[pulumi.Input['RuleEngineRuleActionNormalActionArgs']]:
        return pulumi.get(self, "normal_action")

    @normal_action.setter
    def normal_action(self, value: Optional[pulumi.Input['RuleEngineRuleActionNormalActionArgs']]):
        pulumi.set(self, "normal_action", value)

    @property
    @pulumi.getter(name="rewriteAction")
    def rewrite_action(self) -> Optional[pulumi.Input['RuleEngineRuleActionRewriteActionArgs']]:
        return pulumi.get(self, "rewrite_action")

    @rewrite_action.setter
    def rewrite_action(self, value: Optional[pulumi.Input['RuleEngineRuleActionRewriteActionArgs']]):
        pulumi.set(self, "rewrite_action", value)


@pulumi.input_type
class RuleEngineRuleActionCodeActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionCodeActionParameterArgs']]]):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionCodeActionParameterArgs']]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionCodeActionParameterArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RuleEngineRuleActionCodeActionParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 status_code: pulumi.Input[int],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Input[int]:
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleEngineRuleActionNormalActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionNormalActionParameterArgs']]]):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionNormalActionParameterArgs']]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionNormalActionParameterArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RuleEngineRuleActionNormalActionParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleEngineRuleActionRewriteActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionRewriteActionParameterArgs']]]):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionRewriteActionParameterArgs']]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleActionRewriteActionParameterArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RuleEngineRuleActionRewriteActionParameterArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleEngineRuleOrArgs:
    def __init__(__self__, *,
                 ands: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrAndArgs']]]):
        pulumi.set(__self__, "ands", ands)

    @property
    @pulumi.getter
    def ands(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrAndArgs']]]:
        return pulumi.get(self, "ands")

    @ands.setter
    def ands(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleOrAndArgs']]]):
        pulumi.set(self, "ands", value)


@pulumi.input_type
class RuleEngineRuleOrAndArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 target: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]],
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "values", values)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RuleEngineRuleSubRuleArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleArgs']]],
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "rules", rules)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleArgs']]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleArgs']]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionArgs']]],
                 ors: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrArgs']]]):
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "ors", ors)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionArgs']]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionArgs']]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def ors(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrArgs']]]:
        return pulumi.get(self, "ors")

    @ors.setter
    def ors(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrArgs']]]):
        pulumi.set(self, "ors", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionArgs:
    def __init__(__self__, *,
                 code_action: Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionArgs']] = None,
                 normal_action: Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionArgs']] = None,
                 rewrite_action: Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionArgs']] = None):
        if code_action is not None:
            pulumi.set(__self__, "code_action", code_action)
        if normal_action is not None:
            pulumi.set(__self__, "normal_action", normal_action)
        if rewrite_action is not None:
            pulumi.set(__self__, "rewrite_action", rewrite_action)

    @property
    @pulumi.getter(name="codeAction")
    def code_action(self) -> Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionArgs']]:
        return pulumi.get(self, "code_action")

    @code_action.setter
    def code_action(self, value: Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionArgs']]):
        pulumi.set(self, "code_action", value)

    @property
    @pulumi.getter(name="normalAction")
    def normal_action(self) -> Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionArgs']]:
        return pulumi.get(self, "normal_action")

    @normal_action.setter
    def normal_action(self, value: Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionArgs']]):
        pulumi.set(self, "normal_action", value)

    @property
    @pulumi.getter(name="rewriteAction")
    def rewrite_action(self) -> Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionArgs']]:
        return pulumi.get(self, "rewrite_action")

    @rewrite_action.setter
    def rewrite_action(self, value: Optional[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionArgs']]):
        pulumi.set(self, "rewrite_action", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionCodeActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionParameterArgs']]]):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionParameterArgs']]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionCodeActionParameterArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionCodeActionParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 status_code: pulumi.Input[int],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status_code", status_code)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> pulumi.Input[int]:
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: pulumi.Input[int]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionNormalActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionParameterArgs']]]):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionParameterArgs']]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionNormalActionParameterArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionNormalActionParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionRewriteActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 parameters: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionParameterArgs']]]):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionParameterArgs']]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleActionRewriteActionParameterArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleActionRewriteActionParameterArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleOrArgs:
    def __init__(__self__, *,
                 ands: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrAndArgs']]]):
        pulumi.set(__self__, "ands", ands)

    @property
    @pulumi.getter
    def ands(self) -> pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrAndArgs']]]:
        return pulumi.get(self, "ands")

    @ands.setter
    def ands(self, value: pulumi.Input[Sequence[pulumi.Input['RuleEngineRuleSubRuleRuleOrAndArgs']]]):
        pulumi.set(self, "ands", value)


@pulumi.input_type
class RuleEngineRuleSubRuleRuleOrAndArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 target: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]],
                 ignore_case: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "values", values)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ZoneResourceArgs:
    def __init__(__self__, *,
                 area: Optional[pulumi.Input[str]] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 enable_time: Optional[pulumi.Input[str]] = None,
                 expire_time: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 pay_mode: Optional[pulumi.Input[int]] = None,
                 plan_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 svs: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneResourceSvArgs']]]] = None):
        if area is not None:
            pulumi.set(__self__, "area", area)
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if enable_time is not None:
            pulumi.set(__self__, "enable_time", enable_time)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pay_mode is not None:
            pulumi.set(__self__, "pay_mode", pay_mode)
        if plan_id is not None:
            pulumi.set(__self__, "plan_id", plan_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if svs is not None:
            pulumi.set(__self__, "svs", svs)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="enableTime")
    def enable_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_time")

    @enable_time.setter
    def enable_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_time", value)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pay_mode")

    @pay_mode.setter
    def pay_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pay_mode", value)

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plan_id")

    @plan_id.setter
    def plan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def svs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZoneResourceSvArgs']]]]:
        return pulumi.get(self, "svs")

    @svs.setter
    def svs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZoneResourceSvArgs']]]]):
        pulumi.set(self, "svs", value)


@pulumi.input_type
class ZoneResourceSvArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ZoneSettingCacheArgs:
    def __init__(__self__, *,
                 cache: Optional[pulumi.Input['ZoneSettingCacheCacheArgs']] = None,
                 follow_origin: Optional[pulumi.Input['ZoneSettingCacheFollowOriginArgs']] = None,
                 no_cache: Optional[pulumi.Input['ZoneSettingCacheNoCacheArgs']] = None):
        if cache is not None:
            pulumi.set(__self__, "cache", cache)
        if follow_origin is not None:
            pulumi.set(__self__, "follow_origin", follow_origin)
        if no_cache is not None:
            pulumi.set(__self__, "no_cache", no_cache)

    @property
    @pulumi.getter
    def cache(self) -> Optional[pulumi.Input['ZoneSettingCacheCacheArgs']]:
        return pulumi.get(self, "cache")

    @cache.setter
    def cache(self, value: Optional[pulumi.Input['ZoneSettingCacheCacheArgs']]):
        pulumi.set(self, "cache", value)

    @property
    @pulumi.getter(name="followOrigin")
    def follow_origin(self) -> Optional[pulumi.Input['ZoneSettingCacheFollowOriginArgs']]:
        return pulumi.get(self, "follow_origin")

    @follow_origin.setter
    def follow_origin(self, value: Optional[pulumi.Input['ZoneSettingCacheFollowOriginArgs']]):
        pulumi.set(self, "follow_origin", value)

    @property
    @pulumi.getter(name="noCache")
    def no_cache(self) -> Optional[pulumi.Input['ZoneSettingCacheNoCacheArgs']]:
        return pulumi.get(self, "no_cache")

    @no_cache.setter
    def no_cache(self, value: Optional[pulumi.Input['ZoneSettingCacheNoCacheArgs']]):
        pulumi.set(self, "no_cache", value)


@pulumi.input_type
class ZoneSettingCacheCacheArgs:
    def __init__(__self__, *,
                 cache_time: Optional[pulumi.Input[int]] = None,
                 ignore_cache_control: Optional[pulumi.Input[str]] = None,
                 switch: Optional[pulumi.Input[str]] = None):
        if cache_time is not None:
            pulumi.set(__self__, "cache_time", cache_time)
        if ignore_cache_control is not None:
            pulumi.set(__self__, "ignore_cache_control", ignore_cache_control)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter(name="cacheTime")
    def cache_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cache_time")

    @cache_time.setter
    def cache_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_time", value)

    @property
    @pulumi.getter(name="ignoreCacheControl")
    def ignore_cache_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ignore_cache_control")

    @ignore_cache_control.setter
    def ignore_cache_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_cache_control", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingCacheFollowOriginArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingCacheKeyArgs:
    def __init__(__self__, *,
                 full_url_cache: Optional[pulumi.Input[str]] = None,
                 ignore_case: Optional[pulumi.Input[str]] = None,
                 query_string: Optional[pulumi.Input['ZoneSettingCacheKeyQueryStringArgs']] = None):
        if full_url_cache is not None:
            pulumi.set(__self__, "full_url_cache", full_url_cache)
        if ignore_case is not None:
            pulumi.set(__self__, "ignore_case", ignore_case)
        if query_string is not None:
            pulumi.set(__self__, "query_string", query_string)

    @property
    @pulumi.getter(name="fullUrlCache")
    def full_url_cache(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "full_url_cache")

    @full_url_cache.setter
    def full_url_cache(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_url_cache", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[pulumi.Input['ZoneSettingCacheKeyQueryStringArgs']]:
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: Optional[pulumi.Input['ZoneSettingCacheKeyQueryStringArgs']]):
        pulumi.set(self, "query_string", value)


@pulumi.input_type
class ZoneSettingCacheKeyQueryStringArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 action: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "switch", switch)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ZoneSettingCacheNoCacheArgs:
    def __init__(__self__, *,
                 switch: Optional[pulumi.Input[str]] = None):
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingCachePrefreshArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 percent: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if percent is not None:
            pulumi.set(__self__, "percent", percent)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def percent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "percent")

    @percent.setter
    def percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "percent", value)


@pulumi.input_type
class ZoneSettingClientIpHeaderArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 header_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "switch", switch)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_name", value)


@pulumi.input_type
class ZoneSettingCompressionArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "switch", switch)
        if algorithms is not None:
            pulumi.set(__self__, "algorithms", algorithms)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "algorithms")

    @algorithms.setter
    def algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "algorithms", value)


@pulumi.input_type
class ZoneSettingForceRedirectArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 redirect_status_code: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if redirect_status_code is not None:
            pulumi.set(__self__, "redirect_status_code", redirect_status_code)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="redirectStatusCode")
    def redirect_status_code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "redirect_status_code")

    @redirect_status_code.setter
    def redirect_status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "redirect_status_code", value)


@pulumi.input_type
class ZoneSettingHttpsArgs:
    def __init__(__self__, *,
                 hsts: Optional[pulumi.Input['ZoneSettingHttpsHstsArgs']] = None,
                 http2: Optional[pulumi.Input[str]] = None,
                 ocsp_stapling: Optional[pulumi.Input[str]] = None,
                 tls_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if hsts is not None:
            pulumi.set(__self__, "hsts", hsts)
        if http2 is not None:
            pulumi.set(__self__, "http2", http2)
        if ocsp_stapling is not None:
            pulumi.set(__self__, "ocsp_stapling", ocsp_stapling)
        if tls_versions is not None:
            pulumi.set(__self__, "tls_versions", tls_versions)

    @property
    @pulumi.getter
    def hsts(self) -> Optional[pulumi.Input['ZoneSettingHttpsHstsArgs']]:
        return pulumi.get(self, "hsts")

    @hsts.setter
    def hsts(self, value: Optional[pulumi.Input['ZoneSettingHttpsHstsArgs']]):
        pulumi.set(self, "hsts", value)

    @property
    @pulumi.getter
    def http2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http2")

    @http2.setter
    def http2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http2", value)

    @property
    @pulumi.getter(name="ocspStapling")
    def ocsp_stapling(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ocsp_stapling")

    @ocsp_stapling.setter
    def ocsp_stapling(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ocsp_stapling", value)

    @property
    @pulumi.getter(name="tlsVersions")
    def tls_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tls_versions")

    @tls_versions.setter
    def tls_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tls_versions", value)


@pulumi.input_type
class ZoneSettingHttpsHstsArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 include_sub_domains: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input[int]] = None,
                 preload: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "switch", switch)
        if include_sub_domains is not None:
            pulumi.set(__self__, "include_sub_domains", include_sub_domains)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if preload is not None:
            pulumi.set(__self__, "preload", preload)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="includeSubDomains")
    def include_sub_domains(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "include_sub_domains")

    @include_sub_domains.setter
    def include_sub_domains(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_sub_domains", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter
    def preload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preload")

    @preload.setter
    def preload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preload", value)


@pulumi.input_type
class ZoneSettingIpv6Args:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingMaxAgeArgs:
    def __init__(__self__, *,
                 follow_origin: Optional[pulumi.Input[str]] = None,
                 max_age_time: Optional[pulumi.Input[int]] = None):
        if follow_origin is not None:
            pulumi.set(__self__, "follow_origin", follow_origin)
        if max_age_time is not None:
            pulumi.set(__self__, "max_age_time", max_age_time)

    @property
    @pulumi.getter(name="followOrigin")
    def follow_origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "follow_origin")

    @follow_origin.setter
    def follow_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "follow_origin", value)

    @property
    @pulumi.getter(name="maxAgeTime")
    def max_age_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_age_time")

    @max_age_time.setter
    def max_age_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age_time", value)


@pulumi.input_type
class ZoneSettingOfflineCacheArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingOriginArgs:
    def __init__(__self__, *,
                 backup_origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cos_private_access: Optional[pulumi.Input[str]] = None,
                 origin_pull_protocol: Optional[pulumi.Input[str]] = None,
                 origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if backup_origins is not None:
            pulumi.set(__self__, "backup_origins", backup_origins)
        if cos_private_access is not None:
            pulumi.set(__self__, "cos_private_access", cos_private_access)
        if origin_pull_protocol is not None:
            pulumi.set(__self__, "origin_pull_protocol", origin_pull_protocol)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)

    @property
    @pulumi.getter(name="backupOrigins")
    def backup_origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "backup_origins")

    @backup_origins.setter
    def backup_origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backup_origins", value)

    @property
    @pulumi.getter(name="cosPrivateAccess")
    def cos_private_access(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cos_private_access")

    @cos_private_access.setter
    def cos_private_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_private_access", value)

    @property
    @pulumi.getter(name="originPullProtocol")
    def origin_pull_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "origin_pull_protocol")

    @origin_pull_protocol.setter
    def origin_pull_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_pull_protocol", value)

    @property
    @pulumi.getter
    def origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "origins")

    @origins.setter
    def origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "origins", value)


@pulumi.input_type
class ZoneSettingPostMaxSizeArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 max_size: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)


@pulumi.input_type
class ZoneSettingQuicArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingSmartRoutingArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingUpstreamHttp2Args:
    def __init__(__self__, *,
                 switch: pulumi.Input[str]):
        pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)


@pulumi.input_type
class ZoneSettingWebSocketArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 timeout: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "switch", switch)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class ZoneVanityNameServersArgs:
    def __init__(__self__, *,
                 switch: pulumi.Input[str],
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "switch", switch)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[str]:
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[str]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "servers", value)


@pulumi.input_type
class ZoneVanityNameServersIpArgs:
    def __init__(__self__, *,
                 ipv4: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4")

    @ipv4.setter
    def ipv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


