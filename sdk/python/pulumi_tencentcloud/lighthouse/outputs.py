# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'DiskAutoMountConfiguration',
    'DiskDiskChargePrepaid',
    'FirewallRuleFirewallRule',
    'FirewallTemplateTemplateRule',
    'InstanceContainer',
    'InstanceContainerEnv',
    'InstanceContainerPublishPort',
    'InstanceContainerVolume',
    'InstanceLoginConfiguration',
    'RenewDiskRenewDiskChargePrepaid',
    'RenewInstanceInstanceChargePrepaid',
    'GetAllSceneSceneSetResult',
    'GetBundleBundleSetResult',
    'GetBundleBundleSetPriceResult',
    'GetBundleBundleSetPriceInstancePriceResult',
    'GetBundleFilterResult',
    'GetDiskConfigDiskConfigSetResult',
    'GetDiskConfigFilterResult',
    'GetDisksDiskListResult',
    'GetDisksFilterResult',
    'GetFirewallRulesTemplateFirewallRuleSetResult',
    'GetInstanceBlueprintBlueprintInstanceSetResult',
    'GetInstanceBlueprintBlueprintInstanceSetBlueprintResult',
    'GetInstanceBlueprintBlueprintInstanceSetSoftwareSetResult',
    'GetInstanceBlueprintBlueprintInstanceSetSoftwareSetDetailSetResult',
    'GetInstanceDiskNumAttachDetailSetResult',
    'GetInstanceTrafficPackageInstanceTrafficPackageSetResult',
    'GetInstanceTrafficPackageInstanceTrafficPackageSetTrafficPackageSetResult',
    'GetModifyInstanceBundleFilterResult',
    'GetModifyInstanceBundleModifyBundleSetResult',
    'GetModifyInstanceBundleModifyBundleSetBundleResult',
    'GetModifyInstanceBundleModifyBundleSetBundlePriceResult',
    'GetModifyInstanceBundleModifyBundleSetBundlePriceInstancePriceResult',
    'GetModifyInstanceBundleModifyBundleSetModifyPriceResult',
    'GetModifyInstanceBundleModifyBundleSetModifyPriceInstancePriceResult',
    'GetRegionRegionSetResult',
    'GetResetInstanceBlueprintFilterResult',
    'GetResetInstanceBlueprintResetInstanceBlueprintSetResult',
    'GetResetInstanceBlueprintResetInstanceBlueprintSetBlueprintInfoResult',
    'GetSceneSceneSetResult',
    'GetZoneZoneInfoSetResult',
]

@pulumi.output_type
class DiskAutoMountConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "fileSystemType":
            suggest = "file_system_type"
        elif key == "mountPoint":
            suggest = "mount_point"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiskAutoMountConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiskAutoMountConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiskAutoMountConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: str,
                 file_system_type: Optional[str] = None,
                 mount_point: Optional[str] = None):
        pulumi.set(__self__, "instance_id", instance_id)
        if file_system_type is not None:
            pulumi.set(__self__, "file_system_type", file_system_type)
        if mount_point is not None:
            pulumi.set(__self__, "mount_point", mount_point)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="fileSystemType")
    def file_system_type(self) -> Optional[str]:
        return pulumi.get(self, "file_system_type")

    @property
    @pulumi.getter(name="mountPoint")
    def mount_point(self) -> Optional[str]:
        return pulumi.get(self, "mount_point")


@pulumi.output_type
class DiskDiskChargePrepaid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "renewFlag":
            suggest = "renew_flag"
        elif key == "timeUnit":
            suggest = "time_unit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DiskDiskChargePrepaid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DiskDiskChargePrepaid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DiskDiskChargePrepaid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 period: int,
                 renew_flag: Optional[str] = None,
                 time_unit: Optional[str] = None):
        pulumi.set(__self__, "period", period)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)
        if time_unit is not None:
            pulumi.set(__self__, "time_unit", time_unit)

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[str]:
        return pulumi.get(self, "renew_flag")

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> Optional[str]:
        return pulumi.get(self, "time_unit")


@pulumi.output_type
class FirewallRuleFirewallRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrBlock":
            suggest = "cidr_block"
        elif key == "firewallRuleDescription":
            suggest = "firewall_rule_description"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallRuleFirewallRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallRuleFirewallRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallRuleFirewallRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: str,
                 action: Optional[str] = None,
                 cidr_block: Optional[str] = None,
                 firewall_rule_description: Optional[str] = None,
                 port: Optional[str] = None):
        pulumi.set(__self__, "protocol", protocol)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if firewall_rule_description is not None:
            pulumi.set(__self__, "firewall_rule_description", firewall_rule_description)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="firewallRuleDescription")
    def firewall_rule_description(self) -> Optional[str]:
        return pulumi.get(self, "firewall_rule_description")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")


@pulumi.output_type
class FirewallTemplateTemplateRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrBlock":
            suggest = "cidr_block"
        elif key == "firewallRuleDescription":
            suggest = "firewall_rule_description"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallTemplateTemplateRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallTemplateTemplateRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallTemplateTemplateRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: str,
                 action: Optional[str] = None,
                 cidr_block: Optional[str] = None,
                 firewall_rule_description: Optional[str] = None,
                 port: Optional[str] = None):
        pulumi.set(__self__, "protocol", protocol)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if firewall_rule_description is not None:
            pulumi.set(__self__, "firewall_rule_description", firewall_rule_description)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="firewallRuleDescription")
    def firewall_rule_description(self) -> Optional[str]:
        return pulumi.get(self, "firewall_rule_description")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")


@pulumi.output_type
class InstanceContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerImage":
            suggest = "container_image"
        elif key == "containerName":
            suggest = "container_name"
        elif key == "publishPorts":
            suggest = "publish_ports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 command: Optional[str] = None,
                 container_image: Optional[str] = None,
                 container_name: Optional[str] = None,
                 envs: Optional[Sequence['outputs.InstanceContainerEnv']] = None,
                 publish_ports: Optional[Sequence['outputs.InstanceContainerPublishPort']] = None,
                 volumes: Optional[Sequence['outputs.InstanceContainerVolume']] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)
        if container_image is not None:
            pulumi.set(__self__, "container_image", container_image)
        if container_name is not None:
            pulumi.set(__self__, "container_name", container_name)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if publish_ports is not None:
            pulumi.set(__self__, "publish_ports", publish_ports)
        if volumes is not None:
            pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="containerImage")
    def container_image(self) -> Optional[str]:
        return pulumi.get(self, "container_image")

    @property
    @pulumi.getter(name="containerName")
    def container_name(self) -> Optional[str]:
        return pulumi.get(self, "container_name")

    @property
    @pulumi.getter
    def envs(self) -> Optional[Sequence['outputs.InstanceContainerEnv']]:
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter(name="publishPorts")
    def publish_ports(self) -> Optional[Sequence['outputs.InstanceContainerPublishPort']]:
        return pulumi.get(self, "publish_ports")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.InstanceContainerVolume']]:
        return pulumi.get(self, "volumes")


@pulumi.output_type
class InstanceContainerEnv(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class InstanceContainerPublishPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerPort":
            suggest = "container_port"
        elif key == "hostPort":
            suggest = "host_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceContainerPublishPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceContainerPublishPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceContainerPublishPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_port: int,
                 host_port: int,
                 ip: Optional[str] = None,
                 protocol: Optional[str] = None):
        pulumi.set(__self__, "container_port", container_port)
        pulumi.set(__self__, "host_port", host_port)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="containerPort")
    def container_port(self) -> int:
        return pulumi.get(self, "container_port")

    @property
    @pulumi.getter(name="hostPort")
    def host_port(self) -> int:
        return pulumi.get(self, "host_port")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class InstanceContainerVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerPath":
            suggest = "container_path"
        elif key == "hostPath":
            suggest = "host_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceContainerVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceContainerVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceContainerVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_path: str,
                 host_path: str):
        pulumi.set(__self__, "container_path", container_path)
        pulumi.set(__self__, "host_path", host_path)

    @property
    @pulumi.getter(name="containerPath")
    def container_path(self) -> str:
        return pulumi.get(self, "container_path")

    @property
    @pulumi.getter(name="hostPath")
    def host_path(self) -> str:
        return pulumi.get(self, "host_path")


@pulumi.output_type
class InstanceLoginConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoGeneratePassword":
            suggest = "auto_generate_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceLoginConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceLoginConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceLoginConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_generate_password: str,
                 password: Optional[str] = None):
        pulumi.set(__self__, "auto_generate_password", auto_generate_password)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="autoGeneratePassword")
    def auto_generate_password(self) -> str:
        return pulumi.get(self, "auto_generate_password")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")


@pulumi.output_type
class RenewDiskRenewDiskChargePrepaid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "curInstanceDeadline":
            suggest = "cur_instance_deadline"
        elif key == "renewFlag":
            suggest = "renew_flag"
        elif key == "timeUnit":
            suggest = "time_unit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RenewDiskRenewDiskChargePrepaid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RenewDiskRenewDiskChargePrepaid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RenewDiskRenewDiskChargePrepaid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cur_instance_deadline: Optional[str] = None,
                 period: Optional[int] = None,
                 renew_flag: Optional[str] = None,
                 time_unit: Optional[str] = None):
        if cur_instance_deadline is not None:
            pulumi.set(__self__, "cur_instance_deadline", cur_instance_deadline)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)
        if time_unit is not None:
            pulumi.set(__self__, "time_unit", time_unit)

    @property
    @pulumi.getter(name="curInstanceDeadline")
    def cur_instance_deadline(self) -> Optional[str]:
        return pulumi.get(self, "cur_instance_deadline")

    @property
    @pulumi.getter
    def period(self) -> Optional[int]:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[str]:
        return pulumi.get(self, "renew_flag")

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> Optional[str]:
        return pulumi.get(self, "time_unit")


@pulumi.output_type
class RenewInstanceInstanceChargePrepaid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "renewFlag":
            suggest = "renew_flag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RenewInstanceInstanceChargePrepaid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RenewInstanceInstanceChargePrepaid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RenewInstanceInstanceChargePrepaid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 period: int,
                 renew_flag: Optional[str] = None):
        pulumi.set(__self__, "period", period)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[str]:
        return pulumi.get(self, "renew_flag")


@pulumi.output_type
class GetAllSceneSceneSetResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 scene_id: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "scene_id", scene_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="sceneId")
    def scene_id(self) -> str:
        return pulumi.get(self, "scene_id")


@pulumi.output_type
class GetBundleBundleSetResult(dict):
    def __init__(__self__, *,
                 bundle_display_label: str,
                 bundle_id: str,
                 bundle_sales_state: str,
                 bundle_type: str,
                 cpu: int,
                 internet_charge_type: str,
                 internet_max_bandwidth_out: int,
                 memory: int,
                 monthly_traffic: int,
                 prices: Sequence['outputs.GetBundleBundleSetPriceResult'],
                 support_linux_unix_platform: bool,
                 support_windows_platform: bool,
                 system_disk_size: int,
                 system_disk_type: str):
        pulumi.set(__self__, "bundle_display_label", bundle_display_label)
        pulumi.set(__self__, "bundle_id", bundle_id)
        pulumi.set(__self__, "bundle_sales_state", bundle_sales_state)
        pulumi.set(__self__, "bundle_type", bundle_type)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "monthly_traffic", monthly_traffic)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "support_linux_unix_platform", support_linux_unix_platform)
        pulumi.set(__self__, "support_windows_platform", support_windows_platform)
        pulumi.set(__self__, "system_disk_size", system_disk_size)
        pulumi.set(__self__, "system_disk_type", system_disk_type)

    @property
    @pulumi.getter(name="bundleDisplayLabel")
    def bundle_display_label(self) -> str:
        return pulumi.get(self, "bundle_display_label")

    @property
    @pulumi.getter(name="bundleId")
    def bundle_id(self) -> str:
        return pulumi.get(self, "bundle_id")

    @property
    @pulumi.getter(name="bundleSalesState")
    def bundle_sales_state(self) -> str:
        return pulumi.get(self, "bundle_sales_state")

    @property
    @pulumi.getter(name="bundleType")
    def bundle_type(self) -> str:
        return pulumi.get(self, "bundle_type")

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> str:
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> int:
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="monthlyTraffic")
    def monthly_traffic(self) -> int:
        return pulumi.get(self, "monthly_traffic")

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetBundleBundleSetPriceResult']:
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="supportLinuxUnixPlatform")
    def support_linux_unix_platform(self) -> bool:
        return pulumi.get(self, "support_linux_unix_platform")

    @property
    @pulumi.getter(name="supportWindowsPlatform")
    def support_windows_platform(self) -> bool:
        return pulumi.get(self, "support_windows_platform")

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> int:
        return pulumi.get(self, "system_disk_size")

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> str:
        return pulumi.get(self, "system_disk_type")


@pulumi.output_type
class GetBundleBundleSetPriceResult(dict):
    def __init__(__self__, *,
                 instance_prices: Sequence['outputs.GetBundleBundleSetPriceInstancePriceResult']):
        pulumi.set(__self__, "instance_prices", instance_prices)

    @property
    @pulumi.getter(name="instancePrices")
    def instance_prices(self) -> Sequence['outputs.GetBundleBundleSetPriceInstancePriceResult']:
        return pulumi.get(self, "instance_prices")


@pulumi.output_type
class GetBundleBundleSetPriceInstancePriceResult(dict):
    def __init__(__self__, *,
                 currency: str,
                 discount: float,
                 discount_price: float,
                 original_bundle_price: float,
                 original_price: float):
        pulumi.set(__self__, "currency", currency)
        pulumi.set(__self__, "discount", discount)
        pulumi.set(__self__, "discount_price", discount_price)
        pulumi.set(__self__, "original_bundle_price", original_bundle_price)
        pulumi.set(__self__, "original_price", original_price)

    @property
    @pulumi.getter
    def currency(self) -> str:
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter
    def discount(self) -> float:
        return pulumi.get(self, "discount")

    @property
    @pulumi.getter(name="discountPrice")
    def discount_price(self) -> float:
        return pulumi.get(self, "discount_price")

    @property
    @pulumi.getter(name="originalBundlePrice")
    def original_bundle_price(self) -> float:
        return pulumi.get(self, "original_bundle_price")

    @property
    @pulumi.getter(name="originalPrice")
    def original_price(self) -> float:
        return pulumi.get(self, "original_price")


@pulumi.output_type
class GetBundleFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDiskConfigDiskConfigSetResult(dict):
    def __init__(__self__, *,
                 disk_sales_state: str,
                 disk_step_size: int,
                 disk_type: str,
                 max_disk_size: int,
                 min_disk_size: int,
                 zone: str):
        pulumi.set(__self__, "disk_sales_state", disk_sales_state)
        pulumi.set(__self__, "disk_step_size", disk_step_size)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "max_disk_size", max_disk_size)
        pulumi.set(__self__, "min_disk_size", min_disk_size)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="diskSalesState")
    def disk_sales_state(self) -> str:
        return pulumi.get(self, "disk_sales_state")

    @property
    @pulumi.getter(name="diskStepSize")
    def disk_step_size(self) -> int:
        return pulumi.get(self, "disk_step_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="maxDiskSize")
    def max_disk_size(self) -> int:
        return pulumi.get(self, "max_disk_size")

    @property
    @pulumi.getter(name="minDiskSize")
    def min_disk_size(self) -> int:
        return pulumi.get(self, "min_disk_size")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetDiskConfigFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDisksDiskListResult(dict):
    def __init__(__self__, *,
                 attached: bool,
                 created_time: str,
                 delete_with_instance: bool,
                 disk_backup_count: int,
                 disk_backup_quota: int,
                 disk_charge_type: str,
                 disk_id: str,
                 disk_name: str,
                 disk_size: int,
                 disk_state: str,
                 disk_type: str,
                 disk_usage: str,
                 expired_time: str,
                 instance_id: str,
                 isolated_time: str,
                 latest_operation: str,
                 latest_operation_request_id: str,
                 latest_operation_state: str,
                 renew_flag: str,
                 zone: str):
        pulumi.set(__self__, "attached", attached)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "delete_with_instance", delete_with_instance)
        pulumi.set(__self__, "disk_backup_count", disk_backup_count)
        pulumi.set(__self__, "disk_backup_quota", disk_backup_quota)
        pulumi.set(__self__, "disk_charge_type", disk_charge_type)
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "disk_name", disk_name)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_state", disk_state)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "disk_usage", disk_usage)
        pulumi.set(__self__, "expired_time", expired_time)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "isolated_time", isolated_time)
        pulumi.set(__self__, "latest_operation", latest_operation)
        pulumi.set(__self__, "latest_operation_request_id", latest_operation_request_id)
        pulumi.set(__self__, "latest_operation_state", latest_operation_state)
        pulumi.set(__self__, "renew_flag", renew_flag)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def attached(self) -> bool:
        return pulumi.get(self, "attached")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="deleteWithInstance")
    def delete_with_instance(self) -> bool:
        return pulumi.get(self, "delete_with_instance")

    @property
    @pulumi.getter(name="diskBackupCount")
    def disk_backup_count(self) -> int:
        return pulumi.get(self, "disk_backup_count")

    @property
    @pulumi.getter(name="diskBackupQuota")
    def disk_backup_quota(self) -> int:
        return pulumi.get(self, "disk_backup_quota")

    @property
    @pulumi.getter(name="diskChargeType")
    def disk_charge_type(self) -> str:
        return pulumi.get(self, "disk_charge_type")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> str:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> str:
        return pulumi.get(self, "disk_name")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskState")
    def disk_state(self) -> str:
        return pulumi.get(self, "disk_state")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="diskUsage")
    def disk_usage(self) -> str:
        return pulumi.get(self, "disk_usage")

    @property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> str:
        return pulumi.get(self, "expired_time")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="isolatedTime")
    def isolated_time(self) -> str:
        return pulumi.get(self, "isolated_time")

    @property
    @pulumi.getter(name="latestOperation")
    def latest_operation(self) -> str:
        return pulumi.get(self, "latest_operation")

    @property
    @pulumi.getter(name="latestOperationRequestId")
    def latest_operation_request_id(self) -> str:
        return pulumi.get(self, "latest_operation_request_id")

    @property
    @pulumi.getter(name="latestOperationState")
    def latest_operation_state(self) -> str:
        return pulumi.get(self, "latest_operation_state")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> str:
        return pulumi.get(self, "renew_flag")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetDisksFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetFirewallRulesTemplateFirewallRuleSetResult(dict):
    def __init__(__self__, *,
                 action: str,
                 app_type: str,
                 cidr_block: str,
                 firewall_rule_description: str,
                 port: str,
                 protocol: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "app_type", app_type)
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "firewall_rule_description", firewall_rule_description)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="appType")
    def app_type(self) -> str:
        return pulumi.get(self, "app_type")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="firewallRuleDescription")
    def firewall_rule_description(self) -> str:
        return pulumi.get(self, "firewall_rule_description")

    @property
    @pulumi.getter
    def port(self) -> str:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetInstanceBlueprintBlueprintInstanceSetResult(dict):
    def __init__(__self__, *,
                 blueprints: Sequence['outputs.GetInstanceBlueprintBlueprintInstanceSetBlueprintResult'],
                 instance_id: str,
                 software_sets: Sequence['outputs.GetInstanceBlueprintBlueprintInstanceSetSoftwareSetResult']):
        pulumi.set(__self__, "blueprints", blueprints)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "software_sets", software_sets)

    @property
    @pulumi.getter
    def blueprints(self) -> Sequence['outputs.GetInstanceBlueprintBlueprintInstanceSetBlueprintResult']:
        return pulumi.get(self, "blueprints")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="softwareSets")
    def software_sets(self) -> Sequence['outputs.GetInstanceBlueprintBlueprintInstanceSetSoftwareSetResult']:
        return pulumi.get(self, "software_sets")


@pulumi.output_type
class GetInstanceBlueprintBlueprintInstanceSetBlueprintResult(dict):
    def __init__(__self__, *,
                 blueprint_id: str,
                 blueprint_name: str,
                 blueprint_state: str,
                 blueprint_type: str,
                 community_url: str,
                 created_time: str,
                 description: str,
                 display_title: str,
                 display_version: str,
                 docker_version: str,
                 guide_url: str,
                 image_id: str,
                 image_url: str,
                 os_name: str,
                 platform: str,
                 platform_type: str,
                 required_memory_size: int,
                 required_system_disk_size: int,
                 scene_id_sets: Sequence[str],
                 support_automation_tools: bool):
        pulumi.set(__self__, "blueprint_id", blueprint_id)
        pulumi.set(__self__, "blueprint_name", blueprint_name)
        pulumi.set(__self__, "blueprint_state", blueprint_state)
        pulumi.set(__self__, "blueprint_type", blueprint_type)
        pulumi.set(__self__, "community_url", community_url)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_title", display_title)
        pulumi.set(__self__, "display_version", display_version)
        pulumi.set(__self__, "docker_version", docker_version)
        pulumi.set(__self__, "guide_url", guide_url)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "image_url", image_url)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "platform_type", platform_type)
        pulumi.set(__self__, "required_memory_size", required_memory_size)
        pulumi.set(__self__, "required_system_disk_size", required_system_disk_size)
        pulumi.set(__self__, "scene_id_sets", scene_id_sets)
        pulumi.set(__self__, "support_automation_tools", support_automation_tools)

    @property
    @pulumi.getter(name="blueprintId")
    def blueprint_id(self) -> str:
        return pulumi.get(self, "blueprint_id")

    @property
    @pulumi.getter(name="blueprintName")
    def blueprint_name(self) -> str:
        return pulumi.get(self, "blueprint_name")

    @property
    @pulumi.getter(name="blueprintState")
    def blueprint_state(self) -> str:
        return pulumi.get(self, "blueprint_state")

    @property
    @pulumi.getter(name="blueprintType")
    def blueprint_type(self) -> str:
        return pulumi.get(self, "blueprint_type")

    @property
    @pulumi.getter(name="communityUrl")
    def community_url(self) -> str:
        return pulumi.get(self, "community_url")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayTitle")
    def display_title(self) -> str:
        return pulumi.get(self, "display_title")

    @property
    @pulumi.getter(name="displayVersion")
    def display_version(self) -> str:
        return pulumi.get(self, "display_version")

    @property
    @pulumi.getter(name="dockerVersion")
    def docker_version(self) -> str:
        return pulumi.get(self, "docker_version")

    @property
    @pulumi.getter(name="guideUrl")
    def guide_url(self) -> str:
        return pulumi.get(self, "guide_url")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> str:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> str:
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter
    def platform(self) -> str:
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> str:
        return pulumi.get(self, "platform_type")

    @property
    @pulumi.getter(name="requiredMemorySize")
    def required_memory_size(self) -> int:
        return pulumi.get(self, "required_memory_size")

    @property
    @pulumi.getter(name="requiredSystemDiskSize")
    def required_system_disk_size(self) -> int:
        return pulumi.get(self, "required_system_disk_size")

    @property
    @pulumi.getter(name="sceneIdSets")
    def scene_id_sets(self) -> Sequence[str]:
        return pulumi.get(self, "scene_id_sets")

    @property
    @pulumi.getter(name="supportAutomationTools")
    def support_automation_tools(self) -> bool:
        return pulumi.get(self, "support_automation_tools")


@pulumi.output_type
class GetInstanceBlueprintBlueprintInstanceSetSoftwareSetResult(dict):
    def __init__(__self__, *,
                 detail_sets: Sequence['outputs.GetInstanceBlueprintBlueprintInstanceSetSoftwareSetDetailSetResult'],
                 image_url: str,
                 install_dir: str,
                 name: str,
                 version: str):
        pulumi.set(__self__, "detail_sets", detail_sets)
        pulumi.set(__self__, "image_url", image_url)
        pulumi.set(__self__, "install_dir", install_dir)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="detailSets")
    def detail_sets(self) -> Sequence['outputs.GetInstanceBlueprintBlueprintInstanceSetSoftwareSetDetailSetResult']:
        return pulumi.get(self, "detail_sets")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> str:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter(name="installDir")
    def install_dir(self) -> str:
        return pulumi.get(self, "install_dir")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetInstanceBlueprintBlueprintInstanceSetSoftwareSetDetailSetResult(dict):
    def __init__(__self__, *,
                 key: str,
                 title: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetInstanceDiskNumAttachDetailSetResult(dict):
    def __init__(__self__, *,
                 attached_disk_count: int,
                 instance_id: str,
                 max_attach_count: int):
        pulumi.set(__self__, "attached_disk_count", attached_disk_count)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "max_attach_count", max_attach_count)

    @property
    @pulumi.getter(name="attachedDiskCount")
    def attached_disk_count(self) -> int:
        return pulumi.get(self, "attached_disk_count")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="maxAttachCount")
    def max_attach_count(self) -> int:
        return pulumi.get(self, "max_attach_count")


@pulumi.output_type
class GetInstanceTrafficPackageInstanceTrafficPackageSetResult(dict):
    def __init__(__self__, *,
                 instance_id: str,
                 traffic_package_sets: Sequence['outputs.GetInstanceTrafficPackageInstanceTrafficPackageSetTrafficPackageSetResult']):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "traffic_package_sets", traffic_package_sets)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="trafficPackageSets")
    def traffic_package_sets(self) -> Sequence['outputs.GetInstanceTrafficPackageInstanceTrafficPackageSetTrafficPackageSetResult']:
        return pulumi.get(self, "traffic_package_sets")


@pulumi.output_type
class GetInstanceTrafficPackageInstanceTrafficPackageSetTrafficPackageSetResult(dict):
    def __init__(__self__, *,
                 deadline: str,
                 end_time: str,
                 start_time: str,
                 status: str,
                 traffic_overflow: int,
                 traffic_package_id: str,
                 traffic_package_remaining: int,
                 traffic_package_total: int,
                 traffic_used: int):
        pulumi.set(__self__, "deadline", deadline)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "traffic_overflow", traffic_overflow)
        pulumi.set(__self__, "traffic_package_id", traffic_package_id)
        pulumi.set(__self__, "traffic_package_remaining", traffic_package_remaining)
        pulumi.set(__self__, "traffic_package_total", traffic_package_total)
        pulumi.set(__self__, "traffic_used", traffic_used)

    @property
    @pulumi.getter
    def deadline(self) -> str:
        return pulumi.get(self, "deadline")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="trafficOverflow")
    def traffic_overflow(self) -> int:
        return pulumi.get(self, "traffic_overflow")

    @property
    @pulumi.getter(name="trafficPackageId")
    def traffic_package_id(self) -> str:
        return pulumi.get(self, "traffic_package_id")

    @property
    @pulumi.getter(name="trafficPackageRemaining")
    def traffic_package_remaining(self) -> int:
        return pulumi.get(self, "traffic_package_remaining")

    @property
    @pulumi.getter(name="trafficPackageTotal")
    def traffic_package_total(self) -> int:
        return pulumi.get(self, "traffic_package_total")

    @property
    @pulumi.getter(name="trafficUsed")
    def traffic_used(self) -> int:
        return pulumi.get(self, "traffic_used")


@pulumi.output_type
class GetModifyInstanceBundleFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetModifyInstanceBundleModifyBundleSetResult(dict):
    def __init__(__self__, *,
                 bundles: Sequence['outputs.GetModifyInstanceBundleModifyBundleSetBundleResult'],
                 modify_bundle_state: str,
                 modify_prices: Sequence['outputs.GetModifyInstanceBundleModifyBundleSetModifyPriceResult'],
                 not_support_modify_message: str):
        pulumi.set(__self__, "bundles", bundles)
        pulumi.set(__self__, "modify_bundle_state", modify_bundle_state)
        pulumi.set(__self__, "modify_prices", modify_prices)
        pulumi.set(__self__, "not_support_modify_message", not_support_modify_message)

    @property
    @pulumi.getter
    def bundles(self) -> Sequence['outputs.GetModifyInstanceBundleModifyBundleSetBundleResult']:
        return pulumi.get(self, "bundles")

    @property
    @pulumi.getter(name="modifyBundleState")
    def modify_bundle_state(self) -> str:
        return pulumi.get(self, "modify_bundle_state")

    @property
    @pulumi.getter(name="modifyPrices")
    def modify_prices(self) -> Sequence['outputs.GetModifyInstanceBundleModifyBundleSetModifyPriceResult']:
        return pulumi.get(self, "modify_prices")

    @property
    @pulumi.getter(name="notSupportModifyMessage")
    def not_support_modify_message(self) -> str:
        return pulumi.get(self, "not_support_modify_message")


@pulumi.output_type
class GetModifyInstanceBundleModifyBundleSetBundleResult(dict):
    def __init__(__self__, *,
                 bundle_display_label: str,
                 bundle_id: str,
                 bundle_sales_state: str,
                 bundle_type: str,
                 bundle_type_description: str,
                 cpu: int,
                 internet_charge_type: str,
                 internet_max_bandwidth_out: int,
                 memory: int,
                 monthly_traffic: int,
                 prices: Sequence['outputs.GetModifyInstanceBundleModifyBundleSetBundlePriceResult'],
                 support_linux_unix_platform: bool,
                 support_windows_platform: bool,
                 system_disk_size: int,
                 system_disk_type: str):
        pulumi.set(__self__, "bundle_display_label", bundle_display_label)
        pulumi.set(__self__, "bundle_id", bundle_id)
        pulumi.set(__self__, "bundle_sales_state", bundle_sales_state)
        pulumi.set(__self__, "bundle_type", bundle_type)
        pulumi.set(__self__, "bundle_type_description", bundle_type_description)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "monthly_traffic", monthly_traffic)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "support_linux_unix_platform", support_linux_unix_platform)
        pulumi.set(__self__, "support_windows_platform", support_windows_platform)
        pulumi.set(__self__, "system_disk_size", system_disk_size)
        pulumi.set(__self__, "system_disk_type", system_disk_type)

    @property
    @pulumi.getter(name="bundleDisplayLabel")
    def bundle_display_label(self) -> str:
        return pulumi.get(self, "bundle_display_label")

    @property
    @pulumi.getter(name="bundleId")
    def bundle_id(self) -> str:
        return pulumi.get(self, "bundle_id")

    @property
    @pulumi.getter(name="bundleSalesState")
    def bundle_sales_state(self) -> str:
        return pulumi.get(self, "bundle_sales_state")

    @property
    @pulumi.getter(name="bundleType")
    def bundle_type(self) -> str:
        return pulumi.get(self, "bundle_type")

    @property
    @pulumi.getter(name="bundleTypeDescription")
    def bundle_type_description(self) -> str:
        return pulumi.get(self, "bundle_type_description")

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> str:
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> int:
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="monthlyTraffic")
    def monthly_traffic(self) -> int:
        return pulumi.get(self, "monthly_traffic")

    @property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetModifyInstanceBundleModifyBundleSetBundlePriceResult']:
        return pulumi.get(self, "prices")

    @property
    @pulumi.getter(name="supportLinuxUnixPlatform")
    def support_linux_unix_platform(self) -> bool:
        return pulumi.get(self, "support_linux_unix_platform")

    @property
    @pulumi.getter(name="supportWindowsPlatform")
    def support_windows_platform(self) -> bool:
        return pulumi.get(self, "support_windows_platform")

    @property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> int:
        return pulumi.get(self, "system_disk_size")

    @property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> str:
        return pulumi.get(self, "system_disk_type")


@pulumi.output_type
class GetModifyInstanceBundleModifyBundleSetBundlePriceResult(dict):
    def __init__(__self__, *,
                 instance_prices: Sequence['outputs.GetModifyInstanceBundleModifyBundleSetBundlePriceInstancePriceResult']):
        pulumi.set(__self__, "instance_prices", instance_prices)

    @property
    @pulumi.getter(name="instancePrices")
    def instance_prices(self) -> Sequence['outputs.GetModifyInstanceBundleModifyBundleSetBundlePriceInstancePriceResult']:
        return pulumi.get(self, "instance_prices")


@pulumi.output_type
class GetModifyInstanceBundleModifyBundleSetBundlePriceInstancePriceResult(dict):
    def __init__(__self__, *,
                 currency: str,
                 discount: float,
                 discount_price: float,
                 original_bundle_price: float,
                 original_price: float):
        pulumi.set(__self__, "currency", currency)
        pulumi.set(__self__, "discount", discount)
        pulumi.set(__self__, "discount_price", discount_price)
        pulumi.set(__self__, "original_bundle_price", original_bundle_price)
        pulumi.set(__self__, "original_price", original_price)

    @property
    @pulumi.getter
    def currency(self) -> str:
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter
    def discount(self) -> float:
        return pulumi.get(self, "discount")

    @property
    @pulumi.getter(name="discountPrice")
    def discount_price(self) -> float:
        return pulumi.get(self, "discount_price")

    @property
    @pulumi.getter(name="originalBundlePrice")
    def original_bundle_price(self) -> float:
        return pulumi.get(self, "original_bundle_price")

    @property
    @pulumi.getter(name="originalPrice")
    def original_price(self) -> float:
        return pulumi.get(self, "original_price")


@pulumi.output_type
class GetModifyInstanceBundleModifyBundleSetModifyPriceResult(dict):
    def __init__(__self__, *,
                 instance_prices: Sequence['outputs.GetModifyInstanceBundleModifyBundleSetModifyPriceInstancePriceResult']):
        pulumi.set(__self__, "instance_prices", instance_prices)

    @property
    @pulumi.getter(name="instancePrices")
    def instance_prices(self) -> Sequence['outputs.GetModifyInstanceBundleModifyBundleSetModifyPriceInstancePriceResult']:
        return pulumi.get(self, "instance_prices")


@pulumi.output_type
class GetModifyInstanceBundleModifyBundleSetModifyPriceInstancePriceResult(dict):
    def __init__(__self__, *,
                 currency: str,
                 discount: float,
                 discount_price: float,
                 original_bundle_price: float,
                 original_price: float):
        pulumi.set(__self__, "currency", currency)
        pulumi.set(__self__, "discount", discount)
        pulumi.set(__self__, "discount_price", discount_price)
        pulumi.set(__self__, "original_bundle_price", original_bundle_price)
        pulumi.set(__self__, "original_price", original_price)

    @property
    @pulumi.getter
    def currency(self) -> str:
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter
    def discount(self) -> float:
        return pulumi.get(self, "discount")

    @property
    @pulumi.getter(name="discountPrice")
    def discount_price(self) -> float:
        return pulumi.get(self, "discount_price")

    @property
    @pulumi.getter(name="originalBundlePrice")
    def original_bundle_price(self) -> float:
        return pulumi.get(self, "original_bundle_price")

    @property
    @pulumi.getter(name="originalPrice")
    def original_price(self) -> float:
        return pulumi.get(self, "original_price")


@pulumi.output_type
class GetRegionRegionSetResult(dict):
    def __init__(__self__, *,
                 is_china_mainland: bool,
                 region: str,
                 region_name: str,
                 region_state: str):
        pulumi.set(__self__, "is_china_mainland", is_china_mainland)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "region_state", region_state)

    @property
    @pulumi.getter(name="isChinaMainland")
    def is_china_mainland(self) -> bool:
        return pulumi.get(self, "is_china_mainland")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="regionState")
    def region_state(self) -> str:
        return pulumi.get(self, "region_state")


@pulumi.output_type
class GetResetInstanceBlueprintFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetResetInstanceBlueprintResetInstanceBlueprintSetResult(dict):
    def __init__(__self__, *,
                 blueprint_infos: Sequence['outputs.GetResetInstanceBlueprintResetInstanceBlueprintSetBlueprintInfoResult'],
                 is_resettable: bool,
                 non_resettable_message: str):
        pulumi.set(__self__, "blueprint_infos", blueprint_infos)
        pulumi.set(__self__, "is_resettable", is_resettable)
        pulumi.set(__self__, "non_resettable_message", non_resettable_message)

    @property
    @pulumi.getter(name="blueprintInfos")
    def blueprint_infos(self) -> Sequence['outputs.GetResetInstanceBlueprintResetInstanceBlueprintSetBlueprintInfoResult']:
        return pulumi.get(self, "blueprint_infos")

    @property
    @pulumi.getter(name="isResettable")
    def is_resettable(self) -> bool:
        return pulumi.get(self, "is_resettable")

    @property
    @pulumi.getter(name="nonResettableMessage")
    def non_resettable_message(self) -> str:
        return pulumi.get(self, "non_resettable_message")


@pulumi.output_type
class GetResetInstanceBlueprintResetInstanceBlueprintSetBlueprintInfoResult(dict):
    def __init__(__self__, *,
                 blueprint_id: str,
                 blueprint_name: str,
                 blueprint_state: str,
                 blueprint_type: str,
                 community_url: str,
                 created_time: str,
                 description: str,
                 display_title: str,
                 display_version: str,
                 docker_version: str,
                 guide_url: str,
                 image_id: str,
                 image_url: str,
                 os_name: str,
                 platform: str,
                 platform_type: str,
                 required_memory_size: int,
                 required_system_disk_size: int,
                 scene_id_sets: Sequence[str],
                 support_automation_tools: bool):
        pulumi.set(__self__, "blueprint_id", blueprint_id)
        pulumi.set(__self__, "blueprint_name", blueprint_name)
        pulumi.set(__self__, "blueprint_state", blueprint_state)
        pulumi.set(__self__, "blueprint_type", blueprint_type)
        pulumi.set(__self__, "community_url", community_url)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_title", display_title)
        pulumi.set(__self__, "display_version", display_version)
        pulumi.set(__self__, "docker_version", docker_version)
        pulumi.set(__self__, "guide_url", guide_url)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "image_url", image_url)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "platform_type", platform_type)
        pulumi.set(__self__, "required_memory_size", required_memory_size)
        pulumi.set(__self__, "required_system_disk_size", required_system_disk_size)
        pulumi.set(__self__, "scene_id_sets", scene_id_sets)
        pulumi.set(__self__, "support_automation_tools", support_automation_tools)

    @property
    @pulumi.getter(name="blueprintId")
    def blueprint_id(self) -> str:
        return pulumi.get(self, "blueprint_id")

    @property
    @pulumi.getter(name="blueprintName")
    def blueprint_name(self) -> str:
        return pulumi.get(self, "blueprint_name")

    @property
    @pulumi.getter(name="blueprintState")
    def blueprint_state(self) -> str:
        return pulumi.get(self, "blueprint_state")

    @property
    @pulumi.getter(name="blueprintType")
    def blueprint_type(self) -> str:
        return pulumi.get(self, "blueprint_type")

    @property
    @pulumi.getter(name="communityUrl")
    def community_url(self) -> str:
        return pulumi.get(self, "community_url")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayTitle")
    def display_title(self) -> str:
        return pulumi.get(self, "display_title")

    @property
    @pulumi.getter(name="displayVersion")
    def display_version(self) -> str:
        return pulumi.get(self, "display_version")

    @property
    @pulumi.getter(name="dockerVersion")
    def docker_version(self) -> str:
        return pulumi.get(self, "docker_version")

    @property
    @pulumi.getter(name="guideUrl")
    def guide_url(self) -> str:
        return pulumi.get(self, "guide_url")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> str:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> str:
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter
    def platform(self) -> str:
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="platformType")
    def platform_type(self) -> str:
        return pulumi.get(self, "platform_type")

    @property
    @pulumi.getter(name="requiredMemorySize")
    def required_memory_size(self) -> int:
        return pulumi.get(self, "required_memory_size")

    @property
    @pulumi.getter(name="requiredSystemDiskSize")
    def required_system_disk_size(self) -> int:
        return pulumi.get(self, "required_system_disk_size")

    @property
    @pulumi.getter(name="sceneIdSets")
    def scene_id_sets(self) -> Sequence[str]:
        return pulumi.get(self, "scene_id_sets")

    @property
    @pulumi.getter(name="supportAutomationTools")
    def support_automation_tools(self) -> bool:
        return pulumi.get(self, "support_automation_tools")


@pulumi.output_type
class GetSceneSceneSetResult(dict):
    def __init__(__self__, *,
                 description: str,
                 display_name: str,
                 scene_id: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "scene_id", scene_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="sceneId")
    def scene_id(self) -> str:
        return pulumi.get(self, "scene_id")


@pulumi.output_type
class GetZoneZoneInfoSetResult(dict):
    def __init__(__self__, *,
                 instance_display_label: str,
                 zone: str,
                 zone_name: str):
        pulumi.set(__self__, "instance_display_label", instance_display_label)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="instanceDisplayLabel")
    def instance_display_label(self) -> str:
        return pulumi.get(self, "instance_display_label")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        return pulumi.get(self, "zone_name")


