# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MigrateJobArgs', 'MigrateJob']

@pulumi.input_type
class MigrateJobArgs:
    def __init__(__self__, *,
                 dst_info: pulumi.Input['MigrateJobDstInfoArgs'],
                 migrate_option: pulumi.Input['MigrateJobMigrateOptionArgs'],
                 run_mode: pulumi.Input[str],
                 service_id: pulumi.Input[str],
                 src_info: pulumi.Input['MigrateJobSrcInfoArgs'],
                 auto_retry_time_range_minutes: Optional[pulumi.Input[int]] = None,
                 expect_run_time: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MigrateJob resource.
        :param pulumi.Input['MigrateJobDstInfoArgs'] dst_info: DstInfo.
        :param pulumi.Input['MigrateJobMigrateOptionArgs'] migrate_option: Migration job configuration options, used to describe how the task performs migration.
        :param pulumi.Input[str] run_mode: Run Mode. eg:immediate,timed.
        :param pulumi.Input[str] service_id: Migrate service Id from `tencentcloud_dts_migrate_service`.
        :param pulumi.Input['MigrateJobSrcInfoArgs'] src_info: SrcInfo.
        :param pulumi.Input[int] auto_retry_time_range_minutes: AutoRetryTimeRangeMinutes.
        :param pulumi.Input[str] expect_run_time: ExpectRunTime.
        """
        pulumi.set(__self__, "dst_info", dst_info)
        pulumi.set(__self__, "migrate_option", migrate_option)
        pulumi.set(__self__, "run_mode", run_mode)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "src_info", src_info)
        if auto_retry_time_range_minutes is not None:
            pulumi.set(__self__, "auto_retry_time_range_minutes", auto_retry_time_range_minutes)
        if expect_run_time is not None:
            pulumi.set(__self__, "expect_run_time", expect_run_time)

    @property
    @pulumi.getter(name="dstInfo")
    def dst_info(self) -> pulumi.Input['MigrateJobDstInfoArgs']:
        """
        DstInfo.
        """
        return pulumi.get(self, "dst_info")

    @dst_info.setter
    def dst_info(self, value: pulumi.Input['MigrateJobDstInfoArgs']):
        pulumi.set(self, "dst_info", value)

    @property
    @pulumi.getter(name="migrateOption")
    def migrate_option(self) -> pulumi.Input['MigrateJobMigrateOptionArgs']:
        """
        Migration job configuration options, used to describe how the task performs migration.
        """
        return pulumi.get(self, "migrate_option")

    @migrate_option.setter
    def migrate_option(self, value: pulumi.Input['MigrateJobMigrateOptionArgs']):
        pulumi.set(self, "migrate_option", value)

    @property
    @pulumi.getter(name="runMode")
    def run_mode(self) -> pulumi.Input[str]:
        """
        Run Mode. eg:immediate,timed.
        """
        return pulumi.get(self, "run_mode")

    @run_mode.setter
    def run_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "run_mode", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Input[str]:
        """
        Migrate service Id from `tencentcloud_dts_migrate_service`.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="srcInfo")
    def src_info(self) -> pulumi.Input['MigrateJobSrcInfoArgs']:
        """
        SrcInfo.
        """
        return pulumi.get(self, "src_info")

    @src_info.setter
    def src_info(self, value: pulumi.Input['MigrateJobSrcInfoArgs']):
        pulumi.set(self, "src_info", value)

    @property
    @pulumi.getter(name="autoRetryTimeRangeMinutes")
    def auto_retry_time_range_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        AutoRetryTimeRangeMinutes.
        """
        return pulumi.get(self, "auto_retry_time_range_minutes")

    @auto_retry_time_range_minutes.setter
    def auto_retry_time_range_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_retry_time_range_minutes", value)

    @property
    @pulumi.getter(name="expectRunTime")
    def expect_run_time(self) -> Optional[pulumi.Input[str]]:
        """
        ExpectRunTime.
        """
        return pulumi.get(self, "expect_run_time")

    @expect_run_time.setter
    def expect_run_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expect_run_time", value)


@pulumi.input_type
class _MigrateJobState:
    def __init__(__self__, *,
                 auto_retry_time_range_minutes: Optional[pulumi.Input[int]] = None,
                 dst_info: Optional[pulumi.Input['MigrateJobDstInfoArgs']] = None,
                 expect_run_time: Optional[pulumi.Input[str]] = None,
                 migrate_option: Optional[pulumi.Input['MigrateJobMigrateOptionArgs']] = None,
                 run_mode: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 src_info: Optional[pulumi.Input['MigrateJobSrcInfoArgs']] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MigrateJob resources.
        :param pulumi.Input[int] auto_retry_time_range_minutes: AutoRetryTimeRangeMinutes.
        :param pulumi.Input['MigrateJobDstInfoArgs'] dst_info: DstInfo.
        :param pulumi.Input[str] expect_run_time: ExpectRunTime.
        :param pulumi.Input['MigrateJobMigrateOptionArgs'] migrate_option: Migration job configuration options, used to describe how the task performs migration.
        :param pulumi.Input[str] run_mode: Run Mode. eg:immediate,timed.
        :param pulumi.Input[str] service_id: Migrate service Id from `tencentcloud_dts_migrate_service`.
        :param pulumi.Input['MigrateJobSrcInfoArgs'] src_info: SrcInfo.
        :param pulumi.Input[str] status: Migrate job status.
        """
        if auto_retry_time_range_minutes is not None:
            pulumi.set(__self__, "auto_retry_time_range_minutes", auto_retry_time_range_minutes)
        if dst_info is not None:
            pulumi.set(__self__, "dst_info", dst_info)
        if expect_run_time is not None:
            pulumi.set(__self__, "expect_run_time", expect_run_time)
        if migrate_option is not None:
            pulumi.set(__self__, "migrate_option", migrate_option)
        if run_mode is not None:
            pulumi.set(__self__, "run_mode", run_mode)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if src_info is not None:
            pulumi.set(__self__, "src_info", src_info)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="autoRetryTimeRangeMinutes")
    def auto_retry_time_range_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        AutoRetryTimeRangeMinutes.
        """
        return pulumi.get(self, "auto_retry_time_range_minutes")

    @auto_retry_time_range_minutes.setter
    def auto_retry_time_range_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_retry_time_range_minutes", value)

    @property
    @pulumi.getter(name="dstInfo")
    def dst_info(self) -> Optional[pulumi.Input['MigrateJobDstInfoArgs']]:
        """
        DstInfo.
        """
        return pulumi.get(self, "dst_info")

    @dst_info.setter
    def dst_info(self, value: Optional[pulumi.Input['MigrateJobDstInfoArgs']]):
        pulumi.set(self, "dst_info", value)

    @property
    @pulumi.getter(name="expectRunTime")
    def expect_run_time(self) -> Optional[pulumi.Input[str]]:
        """
        ExpectRunTime.
        """
        return pulumi.get(self, "expect_run_time")

    @expect_run_time.setter
    def expect_run_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expect_run_time", value)

    @property
    @pulumi.getter(name="migrateOption")
    def migrate_option(self) -> Optional[pulumi.Input['MigrateJobMigrateOptionArgs']]:
        """
        Migration job configuration options, used to describe how the task performs migration.
        """
        return pulumi.get(self, "migrate_option")

    @migrate_option.setter
    def migrate_option(self, value: Optional[pulumi.Input['MigrateJobMigrateOptionArgs']]):
        pulumi.set(self, "migrate_option", value)

    @property
    @pulumi.getter(name="runMode")
    def run_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Run Mode. eg:immediate,timed.
        """
        return pulumi.get(self, "run_mode")

    @run_mode.setter
    def run_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_mode", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        Migrate service Id from `tencentcloud_dts_migrate_service`.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="srcInfo")
    def src_info(self) -> Optional[pulumi.Input['MigrateJobSrcInfoArgs']]:
        """
        SrcInfo.
        """
        return pulumi.get(self, "src_info")

    @src_info.setter
    def src_info(self, value: Optional[pulumi.Input['MigrateJobSrcInfoArgs']]):
        pulumi.set(self, "src_info", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Migrate job status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class MigrateJob(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_retry_time_range_minutes: Optional[pulumi.Input[int]] = None,
                 dst_info: Optional[pulumi.Input[pulumi.InputType['MigrateJobDstInfoArgs']]] = None,
                 expect_run_time: Optional[pulumi.Input[str]] = None,
                 migrate_option: Optional[pulumi.Input[pulumi.InputType['MigrateJobMigrateOptionArgs']]] = None,
                 run_mode: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 src_info: Optional[pulumi.Input[pulumi.InputType['MigrateJobSrcInfoArgs']]] = None,
                 __props__=None):
        """
        Create a MigrateJob resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_retry_time_range_minutes: AutoRetryTimeRangeMinutes.
        :param pulumi.Input[pulumi.InputType['MigrateJobDstInfoArgs']] dst_info: DstInfo.
        :param pulumi.Input[str] expect_run_time: ExpectRunTime.
        :param pulumi.Input[pulumi.InputType['MigrateJobMigrateOptionArgs']] migrate_option: Migration job configuration options, used to describe how the task performs migration.
        :param pulumi.Input[str] run_mode: Run Mode. eg:immediate,timed.
        :param pulumi.Input[str] service_id: Migrate service Id from `tencentcloud_dts_migrate_service`.
        :param pulumi.Input[pulumi.InputType['MigrateJobSrcInfoArgs']] src_info: SrcInfo.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MigrateJobArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MigrateJob resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MigrateJobArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MigrateJobArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_retry_time_range_minutes: Optional[pulumi.Input[int]] = None,
                 dst_info: Optional[pulumi.Input[pulumi.InputType['MigrateJobDstInfoArgs']]] = None,
                 expect_run_time: Optional[pulumi.Input[str]] = None,
                 migrate_option: Optional[pulumi.Input[pulumi.InputType['MigrateJobMigrateOptionArgs']]] = None,
                 run_mode: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 src_info: Optional[pulumi.Input[pulumi.InputType['MigrateJobSrcInfoArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MigrateJobArgs.__new__(MigrateJobArgs)

            __props__.__dict__["auto_retry_time_range_minutes"] = auto_retry_time_range_minutes
            if dst_info is None and not opts.urn:
                raise TypeError("Missing required property 'dst_info'")
            __props__.__dict__["dst_info"] = dst_info
            __props__.__dict__["expect_run_time"] = expect_run_time
            if migrate_option is None and not opts.urn:
                raise TypeError("Missing required property 'migrate_option'")
            __props__.__dict__["migrate_option"] = migrate_option
            if run_mode is None and not opts.urn:
                raise TypeError("Missing required property 'run_mode'")
            __props__.__dict__["run_mode"] = run_mode
            if service_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_id'")
            __props__.__dict__["service_id"] = service_id
            if src_info is None and not opts.urn:
                raise TypeError("Missing required property 'src_info'")
            __props__.__dict__["src_info"] = src_info
            __props__.__dict__["status"] = None
        super(MigrateJob, __self__).__init__(
            'tencentcloud:Dts/migrateJob:MigrateJob',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_retry_time_range_minutes: Optional[pulumi.Input[int]] = None,
            dst_info: Optional[pulumi.Input[pulumi.InputType['MigrateJobDstInfoArgs']]] = None,
            expect_run_time: Optional[pulumi.Input[str]] = None,
            migrate_option: Optional[pulumi.Input[pulumi.InputType['MigrateJobMigrateOptionArgs']]] = None,
            run_mode: Optional[pulumi.Input[str]] = None,
            service_id: Optional[pulumi.Input[str]] = None,
            src_info: Optional[pulumi.Input[pulumi.InputType['MigrateJobSrcInfoArgs']]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'MigrateJob':
        """
        Get an existing MigrateJob resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_retry_time_range_minutes: AutoRetryTimeRangeMinutes.
        :param pulumi.Input[pulumi.InputType['MigrateJobDstInfoArgs']] dst_info: DstInfo.
        :param pulumi.Input[str] expect_run_time: ExpectRunTime.
        :param pulumi.Input[pulumi.InputType['MigrateJobMigrateOptionArgs']] migrate_option: Migration job configuration options, used to describe how the task performs migration.
        :param pulumi.Input[str] run_mode: Run Mode. eg:immediate,timed.
        :param pulumi.Input[str] service_id: Migrate service Id from `tencentcloud_dts_migrate_service`.
        :param pulumi.Input[pulumi.InputType['MigrateJobSrcInfoArgs']] src_info: SrcInfo.
        :param pulumi.Input[str] status: Migrate job status.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MigrateJobState.__new__(_MigrateJobState)

        __props__.__dict__["auto_retry_time_range_minutes"] = auto_retry_time_range_minutes
        __props__.__dict__["dst_info"] = dst_info
        __props__.__dict__["expect_run_time"] = expect_run_time
        __props__.__dict__["migrate_option"] = migrate_option
        __props__.__dict__["run_mode"] = run_mode
        __props__.__dict__["service_id"] = service_id
        __props__.__dict__["src_info"] = src_info
        __props__.__dict__["status"] = status
        return MigrateJob(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoRetryTimeRangeMinutes")
    def auto_retry_time_range_minutes(self) -> pulumi.Output[Optional[int]]:
        """
        AutoRetryTimeRangeMinutes.
        """
        return pulumi.get(self, "auto_retry_time_range_minutes")

    @property
    @pulumi.getter(name="dstInfo")
    def dst_info(self) -> pulumi.Output['outputs.MigrateJobDstInfo']:
        """
        DstInfo.
        """
        return pulumi.get(self, "dst_info")

    @property
    @pulumi.getter(name="expectRunTime")
    def expect_run_time(self) -> pulumi.Output[str]:
        """
        ExpectRunTime.
        """
        return pulumi.get(self, "expect_run_time")

    @property
    @pulumi.getter(name="migrateOption")
    def migrate_option(self) -> pulumi.Output['outputs.MigrateJobMigrateOption']:
        """
        Migration job configuration options, used to describe how the task performs migration.
        """
        return pulumi.get(self, "migrate_option")

    @property
    @pulumi.getter(name="runMode")
    def run_mode(self) -> pulumi.Output[str]:
        """
        Run Mode. eg:immediate,timed.
        """
        return pulumi.get(self, "run_mode")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[str]:
        """
        Migrate service Id from `tencentcloud_dts_migrate_service`.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="srcInfo")
    def src_info(self) -> pulumi.Output['outputs.MigrateJobSrcInfo']:
        """
        SrcInfo.
        """
        return pulumi.get(self, "src_info")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Migrate job status.
        """
        return pulumi.get(self, "status")

