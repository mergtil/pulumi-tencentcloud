# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ApiGroupBindedGatewayDeployGroupArgs',
    'ApplicationServiceConfigListArgs',
    'ApplicationServiceConfigListHealthCheckArgs',
    'ApplicationServiceConfigListPortArgs',
    'ClusterOperationInfoArgs',
    'ClusterOperationInfoAddInstanceArgs',
    'ClusterOperationInfoDestroyArgs',
    'ClusterOperationInfoInitArgs',
    'DeployContainerGroupAgentProfileListArgs',
    'DeployContainerGroupEnvArgs',
    'DeployContainerGroupEnvValueFromArgs',
    'DeployContainerGroupEnvValueFromFieldRefArgs',
    'DeployContainerGroupEnvValueFromResourceFieldRefArgs',
    'DeployContainerGroupHealthCheckSettingsArgs',
    'DeployContainerGroupHealthCheckSettingsLivenessProbeArgs',
    'DeployContainerGroupHealthCheckSettingsReadinessProbeArgs',
    'DeployContainerGroupSchedulingStrategyArgs',
    'DeployContainerGroupServiceSettingArgs',
    'DeployContainerGroupServiceSettingProtocolPortArgs',
    'DeployContainerGroupVolumeInfoListArgs',
    'DeployContainerGroupVolumeMountInfoListArgs',
    'DeployContainerGroupWarmupSettingArgs',
    'DeployVmGroupAgentProfileListArgs',
    'DeployVmGroupHealthCheckSettingsArgs',
    'DeployVmGroupHealthCheckSettingsLivenessProbeArgs',
    'DeployVmGroupHealthCheckSettingsReadinessProbeArgs',
    'DeployVmGroupWarmupSettingArgs',
    'InstancesAttachmentInstanceAdvancedSettingsArgs',
    'LaneLaneGroupListArgs',
    'LaneRuleRuleTagListArgs',
    'TaskAdvanceSettingsArgs',
    'TaskShardArgumentArgs',
    'TaskTaskRuleArgs',
    'UnitRuleUnitRuleItemListArgs',
    'UnitRuleUnitRuleItemListUnitRuleTagListArgs',
]

@pulumi.input_type
class ApiGroupBindedGatewayDeployGroupArgs:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[str]] = None,
                 application_name: Optional[pulumi.Input[str]] = None,
                 application_type: Optional[pulumi.Input[str]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 deploy_group_id: Optional[pulumi.Input[str]] = None,
                 deploy_group_name: Optional[pulumi.Input[str]] = None,
                 group_status: Optional[pulumi.Input[str]] = None):
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if application_type is not None:
            pulumi.set(__self__, "application_type", application_type)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if deploy_group_id is not None:
            pulumi.set(__self__, "deploy_group_id", deploy_group_id)
        if deploy_group_name is not None:
            pulumi.set(__self__, "deploy_group_name", deploy_group_name)
        if group_status is not None:
            pulumi.set(__self__, "group_status", group_status)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_name")

    @application_name.setter
    def application_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_name", value)

    @property
    @pulumi.getter(name="applicationType")
    def application_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_type")

    @application_type.setter
    def application_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_type", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="deployGroupId")
    def deploy_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deploy_group_id")

    @deploy_group_id.setter
    def deploy_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_group_id", value)

    @property
    @pulumi.getter(name="deployGroupName")
    def deploy_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deploy_group_name")

    @deploy_group_name.setter
    def deploy_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_group_name", value)

    @property
    @pulumi.getter(name="groupStatus")
    def group_status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_status")

    @group_status.setter
    def group_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_status", value)


@pulumi.input_type
class ApplicationServiceConfigListArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 ports: pulumi.Input[Sequence[pulumi.Input['ApplicationServiceConfigListPortArgs']]],
                 health_check: Optional[pulumi.Input['ApplicationServiceConfigListHealthCheckArgs']] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ports", ports)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Input[Sequence[pulumi.Input['ApplicationServiceConfigListPortArgs']]]:
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: pulumi.Input[Sequence[pulumi.Input['ApplicationServiceConfigListPortArgs']]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['ApplicationServiceConfigListHealthCheckArgs']]:
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['ApplicationServiceConfigListHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)


@pulumi.input_type
class ApplicationServiceConfigListHealthCheckArgs:
    def __init__(__self__, *,
                 path: Optional[pulumi.Input[str]] = None):
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class ApplicationServiceConfigListPortArgs:
    def __init__(__self__, *,
                 protocol: pulumi.Input[str],
                 target_port: pulumi.Input[int]):
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "target_port", value)


@pulumi.input_type
class ClusterOperationInfoArgs:
    def __init__(__self__, *,
                 add_instances: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoAddInstanceArgs']]]] = None,
                 destroys: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoDestroyArgs']]]] = None,
                 inits: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoInitArgs']]]] = None):
        if add_instances is not None:
            pulumi.set(__self__, "add_instances", add_instances)
        if destroys is not None:
            pulumi.set(__self__, "destroys", destroys)
        if inits is not None:
            pulumi.set(__self__, "inits", inits)

    @property
    @pulumi.getter(name="addInstances")
    def add_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoAddInstanceArgs']]]]:
        return pulumi.get(self, "add_instances")

    @add_instances.setter
    def add_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoAddInstanceArgs']]]]):
        pulumi.set(self, "add_instances", value)

    @property
    @pulumi.getter
    def destroys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoDestroyArgs']]]]:
        return pulumi.get(self, "destroys")

    @destroys.setter
    def destroys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoDestroyArgs']]]]):
        pulumi.set(self, "destroys", value)

    @property
    @pulumi.getter
    def inits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoInitArgs']]]]:
        return pulumi.get(self, "inits")

    @inits.setter
    def inits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoInitArgs']]]]):
        pulumi.set(self, "inits", value)


@pulumi.input_type
class ClusterOperationInfoAddInstanceArgs:
    def __init__(__self__, *,
                 disabled_reason: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 supported: Optional[pulumi.Input[bool]] = None):
        if disabled_reason is not None:
            pulumi.set(__self__, "disabled_reason", disabled_reason)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if supported is not None:
            pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter(name="disabledReason")
    def disabled_reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disabled_reason")

    @disabled_reason.setter
    def disabled_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disabled_reason", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def supported(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "supported")

    @supported.setter
    def supported(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supported", value)


@pulumi.input_type
class ClusterOperationInfoDestroyArgs:
    def __init__(__self__, *,
                 disabled_reason: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 supported: Optional[pulumi.Input[bool]] = None):
        if disabled_reason is not None:
            pulumi.set(__self__, "disabled_reason", disabled_reason)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if supported is not None:
            pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter(name="disabledReason")
    def disabled_reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disabled_reason")

    @disabled_reason.setter
    def disabled_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disabled_reason", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def supported(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "supported")

    @supported.setter
    def supported(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supported", value)


@pulumi.input_type
class ClusterOperationInfoInitArgs:
    def __init__(__self__, *,
                 disabled_reason: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 supported: Optional[pulumi.Input[bool]] = None):
        if disabled_reason is not None:
            pulumi.set(__self__, "disabled_reason", disabled_reason)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if supported is not None:
            pulumi.set(__self__, "supported", supported)

    @property
    @pulumi.getter(name="disabledReason")
    def disabled_reason(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disabled_reason")

    @disabled_reason.setter
    def disabled_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disabled_reason", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def supported(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "supported")

    @supported.setter
    def supported(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supported", value)


@pulumi.input_type
class DeployContainerGroupAgentProfileListArgs:
    def __init__(__self__, *,
                 agent_type: Optional[pulumi.Input[str]] = None,
                 agent_version: Optional[pulumi.Input[str]] = None):
        if agent_type is not None:
            pulumi.set(__self__, "agent_type", agent_type)
        if agent_version is not None:
            pulumi.set(__self__, "agent_version", agent_version)

    @property
    @pulumi.getter(name="agentType")
    def agent_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "agent_type")

    @agent_type.setter
    def agent_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_type", value)

    @property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "agent_version")

    @agent_version.setter
    def agent_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_version", value)


@pulumi.input_type
class DeployContainerGroupEnvArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None,
                 value_from: Optional[pulumi.Input['DeployContainerGroupEnvValueFromArgs']] = None):
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_from is not None:
            pulumi.set(__self__, "value_from", value_from)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueFrom")
    def value_from(self) -> Optional[pulumi.Input['DeployContainerGroupEnvValueFromArgs']]:
        return pulumi.get(self, "value_from")

    @value_from.setter
    def value_from(self, value: Optional[pulumi.Input['DeployContainerGroupEnvValueFromArgs']]):
        pulumi.set(self, "value_from", value)


@pulumi.input_type
class DeployContainerGroupEnvValueFromArgs:
    def __init__(__self__, *,
                 field_ref: Optional[pulumi.Input['DeployContainerGroupEnvValueFromFieldRefArgs']] = None,
                 resource_field_ref: Optional[pulumi.Input['DeployContainerGroupEnvValueFromResourceFieldRefArgs']] = None):
        if field_ref is not None:
            pulumi.set(__self__, "field_ref", field_ref)
        if resource_field_ref is not None:
            pulumi.set(__self__, "resource_field_ref", resource_field_ref)

    @property
    @pulumi.getter(name="fieldRef")
    def field_ref(self) -> Optional[pulumi.Input['DeployContainerGroupEnvValueFromFieldRefArgs']]:
        return pulumi.get(self, "field_ref")

    @field_ref.setter
    def field_ref(self, value: Optional[pulumi.Input['DeployContainerGroupEnvValueFromFieldRefArgs']]):
        pulumi.set(self, "field_ref", value)

    @property
    @pulumi.getter(name="resourceFieldRef")
    def resource_field_ref(self) -> Optional[pulumi.Input['DeployContainerGroupEnvValueFromResourceFieldRefArgs']]:
        return pulumi.get(self, "resource_field_ref")

    @resource_field_ref.setter
    def resource_field_ref(self, value: Optional[pulumi.Input['DeployContainerGroupEnvValueFromResourceFieldRefArgs']]):
        pulumi.set(self, "resource_field_ref", value)


@pulumi.input_type
class DeployContainerGroupEnvValueFromFieldRefArgs:
    def __init__(__self__, *,
                 field_path: Optional[pulumi.Input[str]] = None):
        if field_path is not None:
            pulumi.set(__self__, "field_path", field_path)

    @property
    @pulumi.getter(name="fieldPath")
    def field_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_path")

    @field_path.setter
    def field_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_path", value)


@pulumi.input_type
class DeployContainerGroupEnvValueFromResourceFieldRefArgs:
    def __init__(__self__, *,
                 resource: Optional[pulumi.Input[str]] = None):
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class DeployContainerGroupHealthCheckSettingsArgs:
    def __init__(__self__, *,
                 liveness_probe: Optional[pulumi.Input['DeployContainerGroupHealthCheckSettingsLivenessProbeArgs']] = None,
                 readiness_probe: Optional[pulumi.Input['DeployContainerGroupHealthCheckSettingsReadinessProbeArgs']] = None):
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['DeployContainerGroupHealthCheckSettingsLivenessProbeArgs']]:
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['DeployContainerGroupHealthCheckSettingsLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['DeployContainerGroupHealthCheckSettingsReadinessProbeArgs']]:
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['DeployContainerGroupHealthCheckSettingsReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)


@pulumi.input_type
class DeployContainerGroupHealthCheckSettingsLivenessProbeArgs:
    def __init__(__self__, *,
                 action_type: pulumi.Input[str],
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "action_type", action_type)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeployContainerGroupHealthCheckSettingsReadinessProbeArgs:
    def __init__(__self__, *,
                 action_type: pulumi.Input[str],
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "action_type", action_type)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeployContainerGroupSchedulingStrategyArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeployContainerGroupServiceSettingArgs:
    def __init__(__self__, *,
                 access_type: pulumi.Input[int],
                 protocol_ports: pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupServiceSettingProtocolPortArgs']]],
                 subnet_id: pulumi.Input[str],
                 allow_delete_service: Optional[pulumi.Input[bool]] = None,
                 disable_service: Optional[pulumi.Input[bool]] = None,
                 headless_service: Optional[pulumi.Input[bool]] = None,
                 open_session_affinity: Optional[pulumi.Input[bool]] = None,
                 session_affinity_timeout_seconds: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "access_type", access_type)
        pulumi.set(__self__, "protocol_ports", protocol_ports)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if allow_delete_service is not None:
            pulumi.set(__self__, "allow_delete_service", allow_delete_service)
        if disable_service is not None:
            pulumi.set(__self__, "disable_service", disable_service)
        if headless_service is not None:
            pulumi.set(__self__, "headless_service", headless_service)
        if open_session_affinity is not None:
            pulumi.set(__self__, "open_session_affinity", open_session_affinity)
        if session_affinity_timeout_seconds is not None:
            pulumi.set(__self__, "session_affinity_timeout_seconds", session_affinity_timeout_seconds)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> pulumi.Input[int]:
        return pulumi.get(self, "access_type")

    @access_type.setter
    def access_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "access_type", value)

    @property
    @pulumi.getter(name="protocolPorts")
    def protocol_ports(self) -> pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupServiceSettingProtocolPortArgs']]]:
        return pulumi.get(self, "protocol_ports")

    @protocol_ports.setter
    def protocol_ports(self, value: pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupServiceSettingProtocolPortArgs']]]):
        pulumi.set(self, "protocol_ports", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="allowDeleteService")
    def allow_delete_service(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_delete_service")

    @allow_delete_service.setter
    def allow_delete_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_delete_service", value)

    @property
    @pulumi.getter(name="disableService")
    def disable_service(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_service")

    @disable_service.setter
    def disable_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_service", value)

    @property
    @pulumi.getter(name="headlessService")
    def headless_service(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "headless_service")

    @headless_service.setter
    def headless_service(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "headless_service", value)

    @property
    @pulumi.getter(name="openSessionAffinity")
    def open_session_affinity(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "open_session_affinity")

    @open_session_affinity.setter
    def open_session_affinity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "open_session_affinity", value)

    @property
    @pulumi.getter(name="sessionAffinityTimeoutSeconds")
    def session_affinity_timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_affinity_timeout_seconds")

    @session_affinity_timeout_seconds.setter
    def session_affinity_timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_affinity_timeout_seconds", value)


@pulumi.input_type
class DeployContainerGroupServiceSettingProtocolPortArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[int],
                 protocol: pulumi.Input[str],
                 target_port: pulumi.Input[int],
                 node_port: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "target_port", target_port)
        if node_port is not None:
            pulumi.set(__self__, "node_port", node_port)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "target_port", value)

    @property
    @pulumi.getter(name="nodePort")
    def node_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "node_port")

    @node_port.setter
    def node_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_port", value)


@pulumi.input_type
class DeployContainerGroupVolumeInfoListArgs:
    def __init__(__self__, *,
                 volume_name: pulumi.Input[str],
                 volume_type: pulumi.Input[str],
                 volume_config: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "volume_name", volume_name)
        pulumi.set(__self__, "volume_type", volume_type)
        if volume_config is not None:
            pulumi.set(__self__, "volume_config", volume_config)

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_name", value)

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_type", value)

    @property
    @pulumi.getter(name="volumeConfig")
    def volume_config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_config")

    @volume_config.setter
    def volume_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_config", value)


@pulumi.input_type
class DeployContainerGroupVolumeMountInfoListArgs:
    def __init__(__self__, *,
                 volume_mount_name: pulumi.Input[str],
                 volume_mount_path: pulumi.Input[str],
                 read_or_write: Optional[pulumi.Input[str]] = None,
                 volume_mount_sub_path: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "volume_mount_name", volume_mount_name)
        pulumi.set(__self__, "volume_mount_path", volume_mount_path)
        if read_or_write is not None:
            pulumi.set(__self__, "read_or_write", read_or_write)
        if volume_mount_sub_path is not None:
            pulumi.set(__self__, "volume_mount_sub_path", volume_mount_sub_path)

    @property
    @pulumi.getter(name="volumeMountName")
    def volume_mount_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "volume_mount_name")

    @volume_mount_name.setter
    def volume_mount_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_mount_name", value)

    @property
    @pulumi.getter(name="volumeMountPath")
    def volume_mount_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "volume_mount_path")

    @volume_mount_path.setter
    def volume_mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_mount_path", value)

    @property
    @pulumi.getter(name="readOrWrite")
    def read_or_write(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "read_or_write")

    @read_or_write.setter
    def read_or_write(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_or_write", value)

    @property
    @pulumi.getter(name="volumeMountSubPath")
    def volume_mount_sub_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_mount_sub_path")

    @volume_mount_sub_path.setter
    def volume_mount_sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_mount_sub_path", value)


@pulumi.input_type
class DeployContainerGroupWarmupSettingArgs:
    def __init__(__self__, *,
                 curvature: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enabled_protection: Optional[pulumi.Input[bool]] = None,
                 warmup_time: Optional[pulumi.Input[int]] = None):
        if curvature is not None:
            pulumi.set(__self__, "curvature", curvature)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enabled_protection is not None:
            pulumi.set(__self__, "enabled_protection", enabled_protection)
        if warmup_time is not None:
            pulumi.set(__self__, "warmup_time", warmup_time)

    @property
    @pulumi.getter
    def curvature(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "curvature")

    @curvature.setter
    def curvature(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "curvature", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="enabledProtection")
    def enabled_protection(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled_protection")

    @enabled_protection.setter
    def enabled_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled_protection", value)

    @property
    @pulumi.getter(name="warmupTime")
    def warmup_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "warmup_time")

    @warmup_time.setter
    def warmup_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "warmup_time", value)


@pulumi.input_type
class DeployVmGroupAgentProfileListArgs:
    def __init__(__self__, *,
                 agent_type: Optional[pulumi.Input[str]] = None,
                 agent_version: Optional[pulumi.Input[str]] = None):
        if agent_type is not None:
            pulumi.set(__self__, "agent_type", agent_type)
        if agent_version is not None:
            pulumi.set(__self__, "agent_version", agent_version)

    @property
    @pulumi.getter(name="agentType")
    def agent_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "agent_type")

    @agent_type.setter
    def agent_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_type", value)

    @property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "agent_version")

    @agent_version.setter
    def agent_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_version", value)


@pulumi.input_type
class DeployVmGroupHealthCheckSettingsArgs:
    def __init__(__self__, *,
                 liveness_probe: Optional[pulumi.Input['DeployVmGroupHealthCheckSettingsLivenessProbeArgs']] = None,
                 readiness_probe: Optional[pulumi.Input['DeployVmGroupHealthCheckSettingsReadinessProbeArgs']] = None):
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['DeployVmGroupHealthCheckSettingsLivenessProbeArgs']]:
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['DeployVmGroupHealthCheckSettingsLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['DeployVmGroupHealthCheckSettingsReadinessProbeArgs']]:
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['DeployVmGroupHealthCheckSettingsReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)


@pulumi.input_type
class DeployVmGroupHealthCheckSettingsLivenessProbeArgs:
    def __init__(__self__, *,
                 action_type: pulumi.Input[str],
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "action_type", action_type)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeployVmGroupHealthCheckSettingsReadinessProbeArgs:
    def __init__(__self__, *,
                 action_type: pulumi.Input[str],
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "action_type", action_type)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DeployVmGroupWarmupSettingArgs:
    def __init__(__self__, *,
                 curvature: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enabled_protection: Optional[pulumi.Input[bool]] = None,
                 warmup_time: Optional[pulumi.Input[int]] = None):
        if curvature is not None:
            pulumi.set(__self__, "curvature", curvature)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enabled_protection is not None:
            pulumi.set(__self__, "enabled_protection", enabled_protection)
        if warmup_time is not None:
            pulumi.set(__self__, "warmup_time", warmup_time)

    @property
    @pulumi.getter
    def curvature(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "curvature")

    @curvature.setter
    def curvature(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "curvature", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="enabledProtection")
    def enabled_protection(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled_protection")

    @enabled_protection.setter
    def enabled_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled_protection", value)

    @property
    @pulumi.getter(name="warmupTime")
    def warmup_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "warmup_time")

    @warmup_time.setter
    def warmup_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "warmup_time", value)


@pulumi.input_type
class InstancesAttachmentInstanceAdvancedSettingsArgs:
    def __init__(__self__, *,
                 docker_graph_path: pulumi.Input[str],
                 mount_target: pulumi.Input[str]):
        pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        pulumi.set(__self__, "mount_target", mount_target)

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "docker_graph_path")

    @docker_graph_path.setter
    def docker_graph_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "docker_graph_path", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_target", value)


@pulumi.input_type
class LaneLaneGroupListArgs:
    def __init__(__self__, *,
                 entrance: pulumi.Input[bool],
                 group_id: pulumi.Input[str],
                 application_id: Optional[pulumi.Input[str]] = None,
                 application_name: Optional[pulumi.Input[str]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[int]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 lane_group_id: Optional[pulumi.Input[str]] = None,
                 lane_id: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 namespace_name: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "entrance", entrance)
        pulumi.set(__self__, "group_id", group_id)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if lane_group_id is not None:
            pulumi.set(__self__, "lane_group_id", lane_group_id)
        if lane_id is not None:
            pulumi.set(__self__, "lane_id", lane_id)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)
        if namespace_name is not None:
            pulumi.set(__self__, "namespace_name", namespace_name)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def entrance(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "entrance")

    @entrance.setter
    def entrance(self, value: pulumi.Input[bool]):
        pulumi.set(self, "entrance", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "application_name")

    @application_name.setter
    def application_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_name", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="laneGroupId")
    def lane_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lane_group_id")

    @lane_group_id.setter
    def lane_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lane_group_id", value)

    @property
    @pulumi.getter(name="laneId")
    def lane_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lane_id")

    @lane_id.setter
    def lane_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lane_id", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace_name")

    @namespace_name.setter
    def namespace_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_name", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class LaneRuleRuleTagListArgs:
    def __init__(__self__, *,
                 tag_name: pulumi.Input[str],
                 tag_operator: pulumi.Input[str],
                 tag_value: pulumi.Input[str],
                 create_time: Optional[pulumi.Input[int]] = None,
                 lane_rule_id: Optional[pulumi.Input[str]] = None,
                 tag_id: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "tag_name", tag_name)
        pulumi.set(__self__, "tag_operator", tag_operator)
        pulumi.set(__self__, "tag_value", tag_value)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if lane_rule_id is not None:
            pulumi.set(__self__, "lane_rule_id", lane_rule_id)
        if tag_id is not None:
            pulumi.set(__self__, "tag_id", tag_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter(name="tagOperator")
    def tag_operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tag_operator")

    @tag_operator.setter
    def tag_operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_operator", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_value", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="laneRuleId")
    def lane_rule_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lane_rule_id")

    @lane_rule_id.setter
    def lane_rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lane_rule_id", value)

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_id")

    @tag_id.setter
    def tag_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_id", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class TaskAdvanceSettingsArgs:
    def __init__(__self__, *,
                 sub_task_concurrency: Optional[pulumi.Input[int]] = None):
        if sub_task_concurrency is not None:
            pulumi.set(__self__, "sub_task_concurrency", sub_task_concurrency)

    @property
    @pulumi.getter(name="subTaskConcurrency")
    def sub_task_concurrency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sub_task_concurrency")

    @sub_task_concurrency.setter
    def sub_task_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sub_task_concurrency", value)


@pulumi.input_type
class TaskShardArgumentArgs:
    def __init__(__self__, *,
                 shard_key: pulumi.Input[int],
                 shard_value: pulumi.Input[str]):
        pulumi.set(__self__, "shard_key", shard_key)
        pulumi.set(__self__, "shard_value", shard_value)

    @property
    @pulumi.getter(name="shardKey")
    def shard_key(self) -> pulumi.Input[int]:
        return pulumi.get(self, "shard_key")

    @shard_key.setter
    def shard_key(self, value: pulumi.Input[int]):
        pulumi.set(self, "shard_key", value)

    @property
    @pulumi.getter(name="shardValue")
    def shard_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "shard_value")

    @shard_value.setter
    def shard_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "shard_value", value)


@pulumi.input_type
class TaskTaskRuleArgs:
    def __init__(__self__, *,
                 rule_type: pulumi.Input[str],
                 expression: Optional[pulumi.Input[str]] = None,
                 repeat_interval: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "rule_type", rule_type)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if repeat_interval is not None:
            pulumi.set(__self__, "repeat_interval", repeat_interval)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_type", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="repeatInterval")
    def repeat_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "repeat_interval")

    @repeat_interval.setter
    def repeat_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "repeat_interval", value)


@pulumi.input_type
class UnitRuleUnitRuleItemListArgs:
    def __init__(__self__, *,
                 dest_namespace_id: pulumi.Input[str],
                 dest_namespace_name: pulumi.Input[str],
                 name: pulumi.Input[str],
                 relationship: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None,
                 unit_rule_id: Optional[pulumi.Input[str]] = None,
                 unit_rule_tag_lists: Optional[pulumi.Input[Sequence[pulumi.Input['UnitRuleUnitRuleItemListUnitRuleTagListArgs']]]] = None):
        pulumi.set(__self__, "dest_namespace_id", dest_namespace_id)
        pulumi.set(__self__, "dest_namespace_name", dest_namespace_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "relationship", relationship)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if unit_rule_id is not None:
            pulumi.set(__self__, "unit_rule_id", unit_rule_id)
        if unit_rule_tag_lists is not None:
            pulumi.set(__self__, "unit_rule_tag_lists", unit_rule_tag_lists)

    @property
    @pulumi.getter(name="destNamespaceId")
    def dest_namespace_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dest_namespace_id")

    @dest_namespace_id.setter
    def dest_namespace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dest_namespace_id", value)

    @property
    @pulumi.getter(name="destNamespaceName")
    def dest_namespace_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dest_namespace_name")

    @dest_namespace_name.setter
    def dest_namespace_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "dest_namespace_name", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def relationship(self) -> pulumi.Input[str]:
        return pulumi.get(self, "relationship")

    @relationship.setter
    def relationship(self, value: pulumi.Input[str]):
        pulumi.set(self, "relationship", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="unitRuleId")
    def unit_rule_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unit_rule_id")

    @unit_rule_id.setter
    def unit_rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit_rule_id", value)

    @property
    @pulumi.getter(name="unitRuleTagLists")
    def unit_rule_tag_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UnitRuleUnitRuleItemListUnitRuleTagListArgs']]]]:
        return pulumi.get(self, "unit_rule_tag_lists")

    @unit_rule_tag_lists.setter
    def unit_rule_tag_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UnitRuleUnitRuleItemListUnitRuleTagListArgs']]]]):
        pulumi.set(self, "unit_rule_tag_lists", value)


@pulumi.input_type
class UnitRuleUnitRuleItemListUnitRuleTagListArgs:
    def __init__(__self__, *,
                 tag_field: pulumi.Input[str],
                 tag_operator: pulumi.Input[str],
                 tag_type: pulumi.Input[str],
                 tag_value: pulumi.Input[str],
                 rule_id: Optional[pulumi.Input[str]] = None,
                 unit_rule_item_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "tag_field", tag_field)
        pulumi.set(__self__, "tag_operator", tag_operator)
        pulumi.set(__self__, "tag_type", tag_type)
        pulumi.set(__self__, "tag_value", tag_value)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if unit_rule_item_id is not None:
            pulumi.set(__self__, "unit_rule_item_id", unit_rule_item_id)

    @property
    @pulumi.getter(name="tagField")
    def tag_field(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tag_field")

    @tag_field.setter
    def tag_field(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_field", value)

    @property
    @pulumi.getter(name="tagOperator")
    def tag_operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tag_operator")

    @tag_operator.setter
    def tag_operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_operator", value)

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tag_type")

    @tag_type.setter
    def tag_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_type", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_value", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="unitRuleItemId")
    def unit_rule_item_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unit_rule_item_id")

    @unit_rule_item_id.setter
    def unit_rule_item_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit_rule_item_id", value)


