# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'BindingObjectDimensionArgs',
    'PolicyGroupBindingObjectArgs',
    'PolicyGroupConditionArgs',
    'PolicyGroupEventConditionArgs',
    'PolicyGroupReceiverArgs',
]

@pulumi.input_type
class BindingObjectDimensionArgs:
    def __init__(__self__, *,
                 dimensions_json: pulumi.Input[str],
                 unique_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "dimensions_json", dimensions_json)
        if unique_id is not None:
            pulumi.set(__self__, "unique_id", unique_id)

    @property
    @pulumi.getter(name="dimensionsJson")
    def dimensions_json(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dimensions_json")

    @dimensions_json.setter
    def dimensions_json(self, value: pulumi.Input[str]):
        pulumi.set(self, "dimensions_json", value)

    @property
    @pulumi.getter(name="uniqueId")
    def unique_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unique_id")

    @unique_id.setter
    def unique_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_id", value)


@pulumi.input_type
class PolicyGroupBindingObjectArgs:
    def __init__(__self__, *,
                 dimensions_json: Optional[pulumi.Input[str]] = None,
                 is_shielded: Optional[pulumi.Input[int]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 unique_id: Optional[pulumi.Input[str]] = None):
        if dimensions_json is not None:
            pulumi.set(__self__, "dimensions_json", dimensions_json)
        if is_shielded is not None:
            pulumi.set(__self__, "is_shielded", is_shielded)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if unique_id is not None:
            pulumi.set(__self__, "unique_id", unique_id)

    @property
    @pulumi.getter(name="dimensionsJson")
    def dimensions_json(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dimensions_json")

    @dimensions_json.setter
    def dimensions_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dimensions_json", value)

    @property
    @pulumi.getter(name="isShielded")
    def is_shielded(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "is_shielded")

    @is_shielded.setter
    def is_shielded(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_shielded", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="uniqueId")
    def unique_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unique_id")

    @unique_id.setter
    def unique_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_id", value)


@pulumi.input_type
class PolicyGroupConditionArgs:
    def __init__(__self__, *,
                 alarm_notify_period: pulumi.Input[int],
                 alarm_notify_type: pulumi.Input[int],
                 metric_id: pulumi.Input[int],
                 calc_period: Optional[pulumi.Input[int]] = None,
                 calc_type: Optional[pulumi.Input[int]] = None,
                 calc_value: Optional[pulumi.Input[float]] = None,
                 continue_period: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "alarm_notify_period", alarm_notify_period)
        pulumi.set(__self__, "alarm_notify_type", alarm_notify_type)
        pulumi.set(__self__, "metric_id", metric_id)
        if calc_period is not None:
            pulumi.set(__self__, "calc_period", calc_period)
        if calc_type is not None:
            pulumi.set(__self__, "calc_type", calc_type)
        if calc_value is not None:
            pulumi.set(__self__, "calc_value", calc_value)
        if continue_period is not None:
            pulumi.set(__self__, "continue_period", continue_period)

    @property
    @pulumi.getter(name="alarmNotifyPeriod")
    def alarm_notify_period(self) -> pulumi.Input[int]:
        return pulumi.get(self, "alarm_notify_period")

    @alarm_notify_period.setter
    def alarm_notify_period(self, value: pulumi.Input[int]):
        pulumi.set(self, "alarm_notify_period", value)

    @property
    @pulumi.getter(name="alarmNotifyType")
    def alarm_notify_type(self) -> pulumi.Input[int]:
        return pulumi.get(self, "alarm_notify_type")

    @alarm_notify_type.setter
    def alarm_notify_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "alarm_notify_type", value)

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "metric_id")

    @metric_id.setter
    def metric_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "metric_id", value)

    @property
    @pulumi.getter(name="calcPeriod")
    def calc_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "calc_period")

    @calc_period.setter
    def calc_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "calc_period", value)

    @property
    @pulumi.getter(name="calcType")
    def calc_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "calc_type")

    @calc_type.setter
    def calc_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "calc_type", value)

    @property
    @pulumi.getter(name="calcValue")
    def calc_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "calc_value")

    @calc_value.setter
    def calc_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "calc_value", value)

    @property
    @pulumi.getter(name="continuePeriod")
    def continue_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "continue_period")

    @continue_period.setter
    def continue_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "continue_period", value)


@pulumi.input_type
class PolicyGroupEventConditionArgs:
    def __init__(__self__, *,
                 alarm_notify_period: pulumi.Input[int],
                 alarm_notify_type: pulumi.Input[int],
                 event_id: pulumi.Input[int]):
        pulumi.set(__self__, "alarm_notify_period", alarm_notify_period)
        pulumi.set(__self__, "alarm_notify_type", alarm_notify_type)
        pulumi.set(__self__, "event_id", event_id)

    @property
    @pulumi.getter(name="alarmNotifyPeriod")
    def alarm_notify_period(self) -> pulumi.Input[int]:
        return pulumi.get(self, "alarm_notify_period")

    @alarm_notify_period.setter
    def alarm_notify_period(self, value: pulumi.Input[int]):
        pulumi.set(self, "alarm_notify_period", value)

    @property
    @pulumi.getter(name="alarmNotifyType")
    def alarm_notify_type(self) -> pulumi.Input[int]:
        return pulumi.get(self, "alarm_notify_type")

    @alarm_notify_type.setter
    def alarm_notify_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "alarm_notify_type", value)

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "event_id")

    @event_id.setter
    def event_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "event_id", value)


@pulumi.input_type
class PolicyGroupReceiverArgs:
    def __init__(__self__, *,
                 end_time: Optional[pulumi.Input[int]] = None,
                 need_send_notice: Optional[pulumi.Input[int]] = None,
                 notify_ways: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 person_interval: Optional[pulumi.Input[int]] = None,
                 receive_language: Optional[pulumi.Input[str]] = None,
                 receiver_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 receiver_type: Optional[pulumi.Input[str]] = None,
                 receiver_user_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 recover_notifies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 round_interval: Optional[pulumi.Input[int]] = None,
                 round_number: Optional[pulumi.Input[int]] = None,
                 send_fors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 uid_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if need_send_notice is not None:
            pulumi.set(__self__, "need_send_notice", need_send_notice)
        if notify_ways is not None:
            pulumi.set(__self__, "notify_ways", notify_ways)
        if person_interval is not None:
            pulumi.set(__self__, "person_interval", person_interval)
        if receive_language is not None:
            pulumi.set(__self__, "receive_language", receive_language)
        if receiver_group_lists is not None:
            pulumi.set(__self__, "receiver_group_lists", receiver_group_lists)
        if receiver_type is not None:
            pulumi.set(__self__, "receiver_type", receiver_type)
        if receiver_user_lists is not None:
            pulumi.set(__self__, "receiver_user_lists", receiver_user_lists)
        if recover_notifies is not None:
            pulumi.set(__self__, "recover_notifies", recover_notifies)
        if round_interval is not None:
            pulumi.set(__self__, "round_interval", round_interval)
        if round_number is not None:
            pulumi.set(__self__, "round_number", round_number)
        if send_fors is not None:
            pulumi.set(__self__, "send_fors", send_fors)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if uid_lists is not None:
            pulumi.set(__self__, "uid_lists", uid_lists)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="needSendNotice")
    def need_send_notice(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "need_send_notice")

    @need_send_notice.setter
    def need_send_notice(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "need_send_notice", value)

    @property
    @pulumi.getter(name="notifyWays")
    def notify_ways(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "notify_ways")

    @notify_ways.setter
    def notify_ways(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "notify_ways", value)

    @property
    @pulumi.getter(name="personInterval")
    def person_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "person_interval")

    @person_interval.setter
    def person_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "person_interval", value)

    @property
    @pulumi.getter(name="receiveLanguage")
    def receive_language(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "receive_language")

    @receive_language.setter
    def receive_language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "receive_language", value)

    @property
    @pulumi.getter(name="receiverGroupLists")
    def receiver_group_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "receiver_group_lists")

    @receiver_group_lists.setter
    def receiver_group_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "receiver_group_lists", value)

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "receiver_type")

    @receiver_type.setter
    def receiver_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "receiver_type", value)

    @property
    @pulumi.getter(name="receiverUserLists")
    def receiver_user_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "receiver_user_lists")

    @receiver_user_lists.setter
    def receiver_user_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "receiver_user_lists", value)

    @property
    @pulumi.getter(name="recoverNotifies")
    def recover_notifies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "recover_notifies")

    @recover_notifies.setter
    def recover_notifies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "recover_notifies", value)

    @property
    @pulumi.getter(name="roundInterval")
    def round_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "round_interval")

    @round_interval.setter
    def round_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "round_interval", value)

    @property
    @pulumi.getter(name="roundNumber")
    def round_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "round_number")

    @round_number.setter
    def round_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "round_number", value)

    @property
    @pulumi.getter(name="sendFors")
    def send_fors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "send_fors")

    @send_fors.setter
    def send_fors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "send_fors", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="uidLists")
    def uid_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "uid_lists")

    @uid_lists.setter
    def uid_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "uid_lists", value)


