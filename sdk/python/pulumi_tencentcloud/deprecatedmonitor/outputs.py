# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'BindingObjectDimension',
    'PolicyGroupBindingObject',
    'PolicyGroupCondition',
    'PolicyGroupEventCondition',
    'PolicyGroupReceiver',
]

@pulumi.output_type
class BindingObjectDimension(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dimensionsJson":
            suggest = "dimensions_json"
        elif key == "uniqueId":
            suggest = "unique_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BindingObjectDimension. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BindingObjectDimension.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BindingObjectDimension.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimensions_json: str,
                 unique_id: Optional[str] = None):
        pulumi.set(__self__, "dimensions_json", dimensions_json)
        if unique_id is not None:
            pulumi.set(__self__, "unique_id", unique_id)

    @property
    @pulumi.getter(name="dimensionsJson")
    def dimensions_json(self) -> str:
        return pulumi.get(self, "dimensions_json")

    @property
    @pulumi.getter(name="uniqueId")
    def unique_id(self) -> Optional[str]:
        return pulumi.get(self, "unique_id")


@pulumi.output_type
class PolicyGroupBindingObject(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dimensionsJson":
            suggest = "dimensions_json"
        elif key == "isShielded":
            suggest = "is_shielded"
        elif key == "uniqueId":
            suggest = "unique_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyGroupBindingObject. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyGroupBindingObject.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyGroupBindingObject.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimensions_json: Optional[str] = None,
                 is_shielded: Optional[int] = None,
                 region: Optional[str] = None,
                 unique_id: Optional[str] = None):
        if dimensions_json is not None:
            pulumi.set(__self__, "dimensions_json", dimensions_json)
        if is_shielded is not None:
            pulumi.set(__self__, "is_shielded", is_shielded)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if unique_id is not None:
            pulumi.set(__self__, "unique_id", unique_id)

    @property
    @pulumi.getter(name="dimensionsJson")
    def dimensions_json(self) -> Optional[str]:
        return pulumi.get(self, "dimensions_json")

    @property
    @pulumi.getter(name="isShielded")
    def is_shielded(self) -> Optional[int]:
        return pulumi.get(self, "is_shielded")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="uniqueId")
    def unique_id(self) -> Optional[str]:
        return pulumi.get(self, "unique_id")


@pulumi.output_type
class PolicyGroupCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alarmNotifyPeriod":
            suggest = "alarm_notify_period"
        elif key == "alarmNotifyType":
            suggest = "alarm_notify_type"
        elif key == "metricId":
            suggest = "metric_id"
        elif key == "calcPeriod":
            suggest = "calc_period"
        elif key == "calcType":
            suggest = "calc_type"
        elif key == "calcValue":
            suggest = "calc_value"
        elif key == "continuePeriod":
            suggest = "continue_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyGroupCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyGroupCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyGroupCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alarm_notify_period: int,
                 alarm_notify_type: int,
                 metric_id: int,
                 calc_period: Optional[int] = None,
                 calc_type: Optional[int] = None,
                 calc_value: Optional[float] = None,
                 continue_period: Optional[int] = None):
        pulumi.set(__self__, "alarm_notify_period", alarm_notify_period)
        pulumi.set(__self__, "alarm_notify_type", alarm_notify_type)
        pulumi.set(__self__, "metric_id", metric_id)
        if calc_period is not None:
            pulumi.set(__self__, "calc_period", calc_period)
        if calc_type is not None:
            pulumi.set(__self__, "calc_type", calc_type)
        if calc_value is not None:
            pulumi.set(__self__, "calc_value", calc_value)
        if continue_period is not None:
            pulumi.set(__self__, "continue_period", continue_period)

    @property
    @pulumi.getter(name="alarmNotifyPeriod")
    def alarm_notify_period(self) -> int:
        return pulumi.get(self, "alarm_notify_period")

    @property
    @pulumi.getter(name="alarmNotifyType")
    def alarm_notify_type(self) -> int:
        return pulumi.get(self, "alarm_notify_type")

    @property
    @pulumi.getter(name="metricId")
    def metric_id(self) -> int:
        return pulumi.get(self, "metric_id")

    @property
    @pulumi.getter(name="calcPeriod")
    def calc_period(self) -> Optional[int]:
        return pulumi.get(self, "calc_period")

    @property
    @pulumi.getter(name="calcType")
    def calc_type(self) -> Optional[int]:
        return pulumi.get(self, "calc_type")

    @property
    @pulumi.getter(name="calcValue")
    def calc_value(self) -> Optional[float]:
        return pulumi.get(self, "calc_value")

    @property
    @pulumi.getter(name="continuePeriod")
    def continue_period(self) -> Optional[int]:
        return pulumi.get(self, "continue_period")


@pulumi.output_type
class PolicyGroupEventCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alarmNotifyPeriod":
            suggest = "alarm_notify_period"
        elif key == "alarmNotifyType":
            suggest = "alarm_notify_type"
        elif key == "eventId":
            suggest = "event_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyGroupEventCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyGroupEventCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyGroupEventCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alarm_notify_period: int,
                 alarm_notify_type: int,
                 event_id: int):
        pulumi.set(__self__, "alarm_notify_period", alarm_notify_period)
        pulumi.set(__self__, "alarm_notify_type", alarm_notify_type)
        pulumi.set(__self__, "event_id", event_id)

    @property
    @pulumi.getter(name="alarmNotifyPeriod")
    def alarm_notify_period(self) -> int:
        return pulumi.get(self, "alarm_notify_period")

    @property
    @pulumi.getter(name="alarmNotifyType")
    def alarm_notify_type(self) -> int:
        return pulumi.get(self, "alarm_notify_type")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> int:
        return pulumi.get(self, "event_id")


@pulumi.output_type
class PolicyGroupReceiver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "needSendNotice":
            suggest = "need_send_notice"
        elif key == "notifyWays":
            suggest = "notify_ways"
        elif key == "personInterval":
            suggest = "person_interval"
        elif key == "receiveLanguage":
            suggest = "receive_language"
        elif key == "receiverGroupLists":
            suggest = "receiver_group_lists"
        elif key == "receiverType":
            suggest = "receiver_type"
        elif key == "receiverUserLists":
            suggest = "receiver_user_lists"
        elif key == "recoverNotifies":
            suggest = "recover_notifies"
        elif key == "roundInterval":
            suggest = "round_interval"
        elif key == "roundNumber":
            suggest = "round_number"
        elif key == "sendFors":
            suggest = "send_fors"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "uidLists":
            suggest = "uid_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyGroupReceiver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyGroupReceiver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyGroupReceiver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: Optional[int] = None,
                 need_send_notice: Optional[int] = None,
                 notify_ways: Optional[Sequence[str]] = None,
                 person_interval: Optional[int] = None,
                 receive_language: Optional[str] = None,
                 receiver_group_lists: Optional[Sequence[int]] = None,
                 receiver_type: Optional[str] = None,
                 receiver_user_lists: Optional[Sequence[int]] = None,
                 recover_notifies: Optional[Sequence[str]] = None,
                 round_interval: Optional[int] = None,
                 round_number: Optional[int] = None,
                 send_fors: Optional[Sequence[str]] = None,
                 start_time: Optional[int] = None,
                 uid_lists: Optional[Sequence[int]] = None):
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if need_send_notice is not None:
            pulumi.set(__self__, "need_send_notice", need_send_notice)
        if notify_ways is not None:
            pulumi.set(__self__, "notify_ways", notify_ways)
        if person_interval is not None:
            pulumi.set(__self__, "person_interval", person_interval)
        if receive_language is not None:
            pulumi.set(__self__, "receive_language", receive_language)
        if receiver_group_lists is not None:
            pulumi.set(__self__, "receiver_group_lists", receiver_group_lists)
        if receiver_type is not None:
            pulumi.set(__self__, "receiver_type", receiver_type)
        if receiver_user_lists is not None:
            pulumi.set(__self__, "receiver_user_lists", receiver_user_lists)
        if recover_notifies is not None:
            pulumi.set(__self__, "recover_notifies", recover_notifies)
        if round_interval is not None:
            pulumi.set(__self__, "round_interval", round_interval)
        if round_number is not None:
            pulumi.set(__self__, "round_number", round_number)
        if send_fors is not None:
            pulumi.set(__self__, "send_fors", send_fors)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if uid_lists is not None:
            pulumi.set(__self__, "uid_lists", uid_lists)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[int]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="needSendNotice")
    def need_send_notice(self) -> Optional[int]:
        return pulumi.get(self, "need_send_notice")

    @property
    @pulumi.getter(name="notifyWays")
    def notify_ways(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "notify_ways")

    @property
    @pulumi.getter(name="personInterval")
    def person_interval(self) -> Optional[int]:
        return pulumi.get(self, "person_interval")

    @property
    @pulumi.getter(name="receiveLanguage")
    def receive_language(self) -> Optional[str]:
        return pulumi.get(self, "receive_language")

    @property
    @pulumi.getter(name="receiverGroupLists")
    def receiver_group_lists(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "receiver_group_lists")

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> Optional[str]:
        return pulumi.get(self, "receiver_type")

    @property
    @pulumi.getter(name="receiverUserLists")
    def receiver_user_lists(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "receiver_user_lists")

    @property
    @pulumi.getter(name="recoverNotifies")
    def recover_notifies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "recover_notifies")

    @property
    @pulumi.getter(name="roundInterval")
    def round_interval(self) -> Optional[int]:
        return pulumi.get(self, "round_interval")

    @property
    @pulumi.getter(name="roundNumber")
    def round_number(self) -> Optional[int]:
        return pulumi.get(self, "round_number")

    @property
    @pulumi.getter(name="sendFors")
    def send_fors(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "send_fors")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[int]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="uidLists")
    def uid_lists(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "uid_lists")


