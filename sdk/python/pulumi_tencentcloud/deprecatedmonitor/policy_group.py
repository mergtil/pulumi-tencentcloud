# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PolicyGroupArgs', 'PolicyGroup']

@pulumi.input_type
class PolicyGroupArgs:
    def __init__(__self__, *,
                 group_name: pulumi.Input[str],
                 policy_view_name: pulumi.Input[str],
                 remark: pulumi.Input[str],
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupConditionArgs']]]] = None,
                 event_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupEventConditionArgs']]]] = None,
                 is_union_rule: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a PolicyGroup resource.
        :param pulumi.Input[str] group_name: Policy group name, length should between 1 and 20.
        :param pulumi.Input[str] policy_view_name: Policy view name, eg:`cvm_device`,`BANDWIDTHPACKAGE`, refer to
               `data.tencentcloud_monitor_policy_conditions(policy_view_name)`.
        :param pulumi.Input[str] remark: Policy group's remark information.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyGroupConditionArgs']]] conditions: A list of threshold rules. Each element contains the following attributes:
        :param pulumi.Input[Sequence[pulumi.Input['PolicyGroupEventConditionArgs']]] event_conditions: A list of event rules. Each element contains the following attributes:
        :param pulumi.Input[int] is_union_rule: The and or relation of indicator alarm rule. Valid values: `0`, `1`. `0` represents or rule (if any rule is met, the
               alarm will be raised), `1` represents and rule (if all rules are met, the alarm will be raised).The default is 0.
        :param pulumi.Input[int] project_id: The project id to which the policy group belongs, default is `0`.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "policy_view_name", policy_view_name)
        pulumi.set(__self__, "remark", remark)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if event_conditions is not None:
            pulumi.set(__self__, "event_conditions", event_conditions)
        if is_union_rule is not None:
            pulumi.set(__self__, "is_union_rule", is_union_rule)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Input[str]:
        """
        Policy group name, length should between 1 and 20.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="policyViewName")
    def policy_view_name(self) -> pulumi.Input[str]:
        """
        Policy view name, eg:`cvm_device`,`BANDWIDTHPACKAGE`, refer to
        `data.tencentcloud_monitor_policy_conditions(policy_view_name)`.
        """
        return pulumi.get(self, "policy_view_name")

    @policy_view_name.setter
    def policy_view_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_view_name", value)

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Input[str]:
        """
        Policy group's remark information.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: pulumi.Input[str]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupConditionArgs']]]]:
        """
        A list of threshold rules. Each element contains the following attributes:
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="eventConditions")
    def event_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupEventConditionArgs']]]]:
        """
        A list of event rules. Each element contains the following attributes:
        """
        return pulumi.get(self, "event_conditions")

    @event_conditions.setter
    def event_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupEventConditionArgs']]]]):
        pulumi.set(self, "event_conditions", value)

    @property
    @pulumi.getter(name="isUnionRule")
    def is_union_rule(self) -> Optional[pulumi.Input[int]]:
        """
        The and or relation of indicator alarm rule. Valid values: `0`, `1`. `0` represents or rule (if any rule is met, the
        alarm will be raised), `1` represents and rule (if all rules are met, the alarm will be raised).The default is 0.
        """
        return pulumi.get(self, "is_union_rule")

    @is_union_rule.setter
    def is_union_rule(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_union_rule", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        The project id to which the policy group belongs, default is `0`.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class _PolicyGroupState:
    def __init__(__self__, *,
                 binding_objects: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupBindingObjectArgs']]]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupConditionArgs']]]] = None,
                 dimension_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 event_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupEventConditionArgs']]]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 is_union_rule: Optional[pulumi.Input[int]] = None,
                 last_edit_uin: Optional[pulumi.Input[str]] = None,
                 policy_view_name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 receivers: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupReceiverArgs']]]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 support_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PolicyGroup resources.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyGroupBindingObjectArgs']]] binding_objects: A list binding objects(list only those in the `provider.region`). Each element contains the following attributes:
        :param pulumi.Input[Sequence[pulumi.Input['PolicyGroupConditionArgs']]] conditions: A list of threshold rules. Each element contains the following attributes:
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dimension_groups: A list of dimensions for this policy group.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyGroupEventConditionArgs']]] event_conditions: A list of event rules. Each element contains the following attributes:
        :param pulumi.Input[str] group_name: Policy group name, length should between 1 and 20.
        :param pulumi.Input[int] is_union_rule: The and or relation of indicator alarm rule. Valid values: `0`, `1`. `0` represents or rule (if any rule is met, the
               alarm will be raised), `1` represents and rule (if all rules are met, the alarm will be raised).The default is 0.
        :param pulumi.Input[str] last_edit_uin: Recently edited user uin.
        :param pulumi.Input[str] policy_view_name: Policy view name, eg:`cvm_device`,`BANDWIDTHPACKAGE`, refer to
               `data.tencentcloud_monitor_policy_conditions(policy_view_name)`.
        :param pulumi.Input[int] project_id: The project id to which the policy group belongs, default is `0`.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyGroupReceiverArgs']]] receivers: A list of receivers. Each element contains the following attributes:
        :param pulumi.Input[str] remark: Policy group's remark information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] support_regions: Support regions this policy group.
        :param pulumi.Input[str] update_time: The policy group update time.
        """
        if binding_objects is not None:
            pulumi.set(__self__, "binding_objects", binding_objects)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if dimension_groups is not None:
            pulumi.set(__self__, "dimension_groups", dimension_groups)
        if event_conditions is not None:
            pulumi.set(__self__, "event_conditions", event_conditions)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if is_union_rule is not None:
            pulumi.set(__self__, "is_union_rule", is_union_rule)
        if last_edit_uin is not None:
            pulumi.set(__self__, "last_edit_uin", last_edit_uin)
        if policy_view_name is not None:
            pulumi.set(__self__, "policy_view_name", policy_view_name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if receivers is not None:
            pulumi.set(__self__, "receivers", receivers)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if support_regions is not None:
            pulumi.set(__self__, "support_regions", support_regions)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="bindingObjects")
    def binding_objects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupBindingObjectArgs']]]]:
        """
        A list binding objects(list only those in the `provider.region`). Each element contains the following attributes:
        """
        return pulumi.get(self, "binding_objects")

    @binding_objects.setter
    def binding_objects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupBindingObjectArgs']]]]):
        pulumi.set(self, "binding_objects", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupConditionArgs']]]]:
        """
        A list of threshold rules. Each element contains the following attributes:
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="dimensionGroups")
    def dimension_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of dimensions for this policy group.
        """
        return pulumi.get(self, "dimension_groups")

    @dimension_groups.setter
    def dimension_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dimension_groups", value)

    @property
    @pulumi.getter(name="eventConditions")
    def event_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupEventConditionArgs']]]]:
        """
        A list of event rules. Each element contains the following attributes:
        """
        return pulumi.get(self, "event_conditions")

    @event_conditions.setter
    def event_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupEventConditionArgs']]]]):
        pulumi.set(self, "event_conditions", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy group name, length should between 1 and 20.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="isUnionRule")
    def is_union_rule(self) -> Optional[pulumi.Input[int]]:
        """
        The and or relation of indicator alarm rule. Valid values: `0`, `1`. `0` represents or rule (if any rule is met, the
        alarm will be raised), `1` represents and rule (if all rules are met, the alarm will be raised).The default is 0.
        """
        return pulumi.get(self, "is_union_rule")

    @is_union_rule.setter
    def is_union_rule(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_union_rule", value)

    @property
    @pulumi.getter(name="lastEditUin")
    def last_edit_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Recently edited user uin.
        """
        return pulumi.get(self, "last_edit_uin")

    @last_edit_uin.setter
    def last_edit_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_edit_uin", value)

    @property
    @pulumi.getter(name="policyViewName")
    def policy_view_name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy view name, eg:`cvm_device`,`BANDWIDTHPACKAGE`, refer to
        `data.tencentcloud_monitor_policy_conditions(policy_view_name)`.
        """
        return pulumi.get(self, "policy_view_name")

    @policy_view_name.setter
    def policy_view_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_view_name", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        The project id to which the policy group belongs, default is `0`.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def receivers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupReceiverArgs']]]]:
        """
        A list of receivers. Each element contains the following attributes:
        """
        return pulumi.get(self, "receivers")

    @receivers.setter
    def receivers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyGroupReceiverArgs']]]]):
        pulumi.set(self, "receivers", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Policy group's remark information.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="supportRegions")
    def support_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Support regions this policy group.
        """
        return pulumi.get(self, "support_regions")

    @support_regions.setter
    def support_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "support_regions", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The policy group update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class PolicyGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupConditionArgs']]]]] = None,
                 event_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupEventConditionArgs']]]]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 is_union_rule: Optional[pulumi.Input[int]] = None,
                 policy_view_name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a PolicyGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupConditionArgs']]]] conditions: A list of threshold rules. Each element contains the following attributes:
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupEventConditionArgs']]]] event_conditions: A list of event rules. Each element contains the following attributes:
        :param pulumi.Input[str] group_name: Policy group name, length should between 1 and 20.
        :param pulumi.Input[int] is_union_rule: The and or relation of indicator alarm rule. Valid values: `0`, `1`. `0` represents or rule (if any rule is met, the
               alarm will be raised), `1` represents and rule (if all rules are met, the alarm will be raised).The default is 0.
        :param pulumi.Input[str] policy_view_name: Policy view name, eg:`cvm_device`,`BANDWIDTHPACKAGE`, refer to
               `data.tencentcloud_monitor_policy_conditions(policy_view_name)`.
        :param pulumi.Input[int] project_id: The project id to which the policy group belongs, default is `0`.
        :param pulumi.Input[str] remark: Policy group's remark information.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PolicyGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PolicyGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PolicyGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupConditionArgs']]]]] = None,
                 event_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupEventConditionArgs']]]]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 is_union_rule: Optional[pulumi.Input[int]] = None,
                 policy_view_name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyGroupArgs.__new__(PolicyGroupArgs)

            __props__.__dict__["conditions"] = conditions
            __props__.__dict__["event_conditions"] = event_conditions
            if group_name is None and not opts.urn:
                raise TypeError("Missing required property 'group_name'")
            __props__.__dict__["group_name"] = group_name
            __props__.__dict__["is_union_rule"] = is_union_rule
            if policy_view_name is None and not opts.urn:
                raise TypeError("Missing required property 'policy_view_name'")
            __props__.__dict__["policy_view_name"] = policy_view_name
            __props__.__dict__["project_id"] = project_id
            if remark is None and not opts.urn:
                raise TypeError("Missing required property 'remark'")
            __props__.__dict__["remark"] = remark
            __props__.__dict__["binding_objects"] = None
            __props__.__dict__["dimension_groups"] = None
            __props__.__dict__["last_edit_uin"] = None
            __props__.__dict__["receivers"] = None
            __props__.__dict__["support_regions"] = None
            __props__.__dict__["update_time"] = None
        super(PolicyGroup, __self__).__init__(
            'tencentcloud:Deprecatedmonitor/policyGroup:PolicyGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            binding_objects: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupBindingObjectArgs']]]]] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupConditionArgs']]]]] = None,
            dimension_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            event_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupEventConditionArgs']]]]] = None,
            group_name: Optional[pulumi.Input[str]] = None,
            is_union_rule: Optional[pulumi.Input[int]] = None,
            last_edit_uin: Optional[pulumi.Input[str]] = None,
            policy_view_name: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            receivers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupReceiverArgs']]]]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            support_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'PolicyGroup':
        """
        Get an existing PolicyGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupBindingObjectArgs']]]] binding_objects: A list binding objects(list only those in the `provider.region`). Each element contains the following attributes:
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupConditionArgs']]]] conditions: A list of threshold rules. Each element contains the following attributes:
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dimension_groups: A list of dimensions for this policy group.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupEventConditionArgs']]]] event_conditions: A list of event rules. Each element contains the following attributes:
        :param pulumi.Input[str] group_name: Policy group name, length should between 1 and 20.
        :param pulumi.Input[int] is_union_rule: The and or relation of indicator alarm rule. Valid values: `0`, `1`. `0` represents or rule (if any rule is met, the
               alarm will be raised), `1` represents and rule (if all rules are met, the alarm will be raised).The default is 0.
        :param pulumi.Input[str] last_edit_uin: Recently edited user uin.
        :param pulumi.Input[str] policy_view_name: Policy view name, eg:`cvm_device`,`BANDWIDTHPACKAGE`, refer to
               `data.tencentcloud_monitor_policy_conditions(policy_view_name)`.
        :param pulumi.Input[int] project_id: The project id to which the policy group belongs, default is `0`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyGroupReceiverArgs']]]] receivers: A list of receivers. Each element contains the following attributes:
        :param pulumi.Input[str] remark: Policy group's remark information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] support_regions: Support regions this policy group.
        :param pulumi.Input[str] update_time: The policy group update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyGroupState.__new__(_PolicyGroupState)

        __props__.__dict__["binding_objects"] = binding_objects
        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["dimension_groups"] = dimension_groups
        __props__.__dict__["event_conditions"] = event_conditions
        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["is_union_rule"] = is_union_rule
        __props__.__dict__["last_edit_uin"] = last_edit_uin
        __props__.__dict__["policy_view_name"] = policy_view_name
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["receivers"] = receivers
        __props__.__dict__["remark"] = remark
        __props__.__dict__["support_regions"] = support_regions
        __props__.__dict__["update_time"] = update_time
        return PolicyGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bindingObjects")
    def binding_objects(self) -> pulumi.Output[Sequence['outputs.PolicyGroupBindingObject']]:
        """
        A list binding objects(list only those in the `provider.region`). Each element contains the following attributes:
        """
        return pulumi.get(self, "binding_objects")

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyGroupCondition']]]:
        """
        A list of threshold rules. Each element contains the following attributes:
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="dimensionGroups")
    def dimension_groups(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of dimensions for this policy group.
        """
        return pulumi.get(self, "dimension_groups")

    @property
    @pulumi.getter(name="eventConditions")
    def event_conditions(self) -> pulumi.Output[Optional[Sequence['outputs.PolicyGroupEventCondition']]]:
        """
        A list of event rules. Each element contains the following attributes:
        """
        return pulumi.get(self, "event_conditions")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[str]:
        """
        Policy group name, length should between 1 and 20.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="isUnionRule")
    def is_union_rule(self) -> pulumi.Output[Optional[int]]:
        """
        The and or relation of indicator alarm rule. Valid values: `0`, `1`. `0` represents or rule (if any rule is met, the
        alarm will be raised), `1` represents and rule (if all rules are met, the alarm will be raised).The default is 0.
        """
        return pulumi.get(self, "is_union_rule")

    @property
    @pulumi.getter(name="lastEditUin")
    def last_edit_uin(self) -> pulumi.Output[str]:
        """
        Recently edited user uin.
        """
        return pulumi.get(self, "last_edit_uin")

    @property
    @pulumi.getter(name="policyViewName")
    def policy_view_name(self) -> pulumi.Output[str]:
        """
        Policy view name, eg:`cvm_device`,`BANDWIDTHPACKAGE`, refer to
        `data.tencentcloud_monitor_policy_conditions(policy_view_name)`.
        """
        return pulumi.get(self, "policy_view_name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        The project id to which the policy group belongs, default is `0`.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def receivers(self) -> pulumi.Output[Sequence['outputs.PolicyGroupReceiver']]:
        """
        A list of receivers. Each element contains the following attributes:
        """
        return pulumi.get(self, "receivers")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[str]:
        """
        Policy group's remark information.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="supportRegions")
    def support_regions(self) -> pulumi.Output[Sequence[str]]:
        """
        Support regions this policy group.
        """
        return pulumi.get(self, "support_regions")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The policy group update time.
        """
        return pulumi.get(self, "update_time")

