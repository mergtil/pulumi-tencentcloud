# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'PlayDomainCertAttachmentDomainInfo',
    'PullStreamTaskWatermarkList',
    'GetDomainsDomainListResult',
]

@pulumi.output_type
class PlayDomainCertAttachmentDomainInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainName":
            suggest = "domain_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlayDomainCertAttachmentDomainInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlayDomainCertAttachmentDomainInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlayDomainCertAttachmentDomainInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_name: str,
                 status: int):
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")


@pulumi.output_type
class PullStreamTaskWatermarkList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pictureUrl":
            suggest = "picture_url"
        elif key == "xPosition":
            suggest = "x_position"
        elif key == "yPosition":
            suggest = "y_position"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PullStreamTaskWatermarkList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PullStreamTaskWatermarkList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PullStreamTaskWatermarkList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 height: int,
                 location: int,
                 picture_url: str,
                 width: int,
                 x_position: int,
                 y_position: int):
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "picture_url", picture_url)
        pulumi.set(__self__, "width", width)
        pulumi.set(__self__, "x_position", x_position)
        pulumi.set(__self__, "y_position", y_position)

    @property
    @pulumi.getter
    def height(self) -> int:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def location(self) -> int:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="pictureUrl")
    def picture_url(self) -> str:
        return pulumi.get(self, "picture_url")

    @property
    @pulumi.getter
    def width(self) -> int:
        return pulumi.get(self, "width")

    @property
    @pulumi.getter(name="xPosition")
    def x_position(self) -> int:
        return pulumi.get(self, "x_position")

    @property
    @pulumi.getter(name="yPosition")
    def y_position(self) -> int:
        return pulumi.get(self, "y_position")


@pulumi.output_type
class GetDomainsDomainListResult(dict):
    def __init__(__self__, *,
                 b_c_name: int,
                 create_time: str,
                 current_c_name: str,
                 is_delay_live: int,
                 is_mini_program_live: int,
                 name: str,
                 play_type: int,
                 rent_expire_time: str,
                 rent_tag: int,
                 status: int,
                 target_domain: str,
                 type: int):
        pulumi.set(__self__, "b_c_name", b_c_name)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "current_c_name", current_c_name)
        pulumi.set(__self__, "is_delay_live", is_delay_live)
        pulumi.set(__self__, "is_mini_program_live", is_mini_program_live)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "play_type", play_type)
        pulumi.set(__self__, "rent_expire_time", rent_expire_time)
        pulumi.set(__self__, "rent_tag", rent_tag)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "target_domain", target_domain)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bCName")
    def b_c_name(self) -> int:
        return pulumi.get(self, "b_c_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="currentCName")
    def current_c_name(self) -> str:
        return pulumi.get(self, "current_c_name")

    @property
    @pulumi.getter(name="isDelayLive")
    def is_delay_live(self) -> int:
        return pulumi.get(self, "is_delay_live")

    @property
    @pulumi.getter(name="isMiniProgramLive")
    def is_mini_program_live(self) -> int:
        return pulumi.get(self, "is_mini_program_live")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="playType")
    def play_type(self) -> int:
        return pulumi.get(self, "play_type")

    @property
    @pulumi.getter(name="rentExpireTime")
    def rent_expire_time(self) -> str:
        return pulumi.get(self, "rent_expire_time")

    @property
    @pulumi.getter(name="rentTag")
    def rent_tag(self) -> int:
        return pulumi.get(self, "rent_tag")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="targetDomain")
    def target_domain(self) -> str:
        return pulumi.get(self, "target_domain")

    @property
    @pulumi.getter
    def type(self) -> int:
        return pulumi.get(self, "type")


