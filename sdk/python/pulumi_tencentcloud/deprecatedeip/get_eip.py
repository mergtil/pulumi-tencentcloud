# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetEipResult',
    'AwaitableGetEipResult',
    'get_eip',
    'get_eip_output',
]

@pulumi.output_type
class GetEipResult:
    """
    A collection of values returned by getEip.
    """
    def __init__(__self__, filters=None, id=None, include_arrears=None, include_blocked=None, public_ip=None, status=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_arrears and not isinstance(include_arrears, bool):
            raise TypeError("Expected argument 'include_arrears' to be a bool")
        pulumi.set(__self__, "include_arrears", include_arrears)
        if include_blocked and not isinstance(include_blocked, bool):
            raise TypeError("Expected argument 'include_blocked' to be a bool")
        pulumi.set(__self__, "include_blocked", include_blocked)
        if public_ip and not isinstance(public_ip, str):
            raise TypeError("Expected argument 'public_ip' to be a str")
        pulumi.set(__self__, "public_ip", public_ip)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetEipFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeArrears")
    def include_arrears(self) -> Optional[bool]:
        return pulumi.get(self, "include_arrears")

    @property
    @pulumi.getter(name="includeBlocked")
    def include_blocked(self) -> Optional[bool]:
        return pulumi.get(self, "include_blocked")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


class AwaitableGetEipResult(GetEipResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEipResult(
            filters=self.filters,
            id=self.id,
            include_arrears=self.include_arrears,
            include_blocked=self.include_blocked,
            public_ip=self.public_ip,
            status=self.status)


def get_eip(filters: Optional[Sequence[pulumi.InputType['GetEipFilterArgs']]] = None,
            include_arrears: Optional[bool] = None,
            include_blocked: Optional[bool] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEipResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['includeArrears'] = include_arrears
    __args__['includeBlocked'] = include_blocked
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Deprecatedeip/getEip:getEip', __args__, opts=opts, typ=GetEipResult).value

    return AwaitableGetEipResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        include_arrears=pulumi.get(__ret__, 'include_arrears'),
        include_blocked=pulumi.get(__ret__, 'include_blocked'),
        public_ip=pulumi.get(__ret__, 'public_ip'),
        status=pulumi.get(__ret__, 'status'))


@_utilities.lift_output_func(get_eip)
def get_eip_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetEipFilterArgs']]]]] = None,
                   include_arrears: Optional[pulumi.Input[Optional[bool]]] = None,
                   include_blocked: Optional[pulumi.Input[Optional[bool]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEipResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
