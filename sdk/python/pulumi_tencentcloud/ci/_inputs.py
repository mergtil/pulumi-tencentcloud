# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'MediaAnimationTemplateContainerArgs',
    'MediaAnimationTemplateTimeIntervalArgs',
    'MediaAnimationTemplateVideoArgs',
    'MediaConcatTemplateConcatTemplateArgs',
    'MediaConcatTemplateConcatTemplateAudioArgs',
    'MediaConcatTemplateConcatTemplateAudioMixArgs',
    'MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs',
    'MediaConcatTemplateConcatTemplateConcatFragmentArgs',
    'MediaConcatTemplateConcatTemplateContainerArgs',
    'MediaConcatTemplateConcatTemplateVideoArgs',
    'MediaPicProcessTemplatePicProcessArgs',
    'MediaSmartCoverTemplateSmartCoverArgs',
    'MediaSnapshotTemplateSnapshotArgs',
    'MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs',
    'MediaSpeechRecognitionTemplateSpeechRecognitionArgs',
    'MediaTranscodeProTemplateAudioArgs',
    'MediaTranscodeProTemplateContainerArgs',
    'MediaTranscodeProTemplateContainerClipConfigArgs',
    'MediaTranscodeProTemplateTimeIntervalArgs',
    'MediaTranscodeProTemplateTransConfigArgs',
    'MediaTranscodeProTemplateVideoArgs',
    'MediaTranscodeTemplateAudioArgs',
    'MediaTranscodeTemplateAudioMixArgs',
    'MediaTranscodeTemplateAudioMixEffectConfigArgs',
    'MediaTranscodeTemplateContainerArgs',
    'MediaTranscodeTemplateContainerClipConfigArgs',
    'MediaTranscodeTemplateTimeIntervalArgs',
    'MediaTranscodeTemplateTransConfigArgs',
    'MediaTranscodeTemplateTransConfigHlsEncryptArgs',
    'MediaTranscodeTemplateVideoArgs',
    'MediaVideoMontageTemplateAudioArgs',
    'MediaVideoMontageTemplateAudioMixArgs',
    'MediaVideoMontageTemplateAudioMixEffectConfigArgs',
    'MediaVideoMontageTemplateContainerArgs',
    'MediaVideoMontageTemplateVideoArgs',
    'MediaVideoProcessTemplateColorEnhanceArgs',
    'MediaVideoProcessTemplateMsSharpenArgs',
    'MediaVoiceSeparateTemplateAudioConfigArgs',
    'MediaWatermarkTemplateWatermarkArgs',
    'MediaWatermarkTemplateWatermarkImageArgs',
    'MediaWatermarkTemplateWatermarkTextArgs',
]

@pulumi.input_type
class MediaAnimationTemplateContainerArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str]):
        pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)


@pulumi.input_type
class MediaAnimationTemplateTimeIntervalArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class MediaAnimationTemplateVideoArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str],
                 animate_frames_per_second: Optional[pulumi.Input[str]] = None,
                 animate_only_keep_key_frame: Optional[pulumi.Input[str]] = None,
                 animate_time_interval_of_frame: Optional[pulumi.Input[str]] = None,
                 fps: Optional[pulumi.Input[str]] = None,
                 height: Optional[pulumi.Input[str]] = None,
                 quality: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "codec", codec)
        if animate_frames_per_second is not None:
            pulumi.set(__self__, "animate_frames_per_second", animate_frames_per_second)
        if animate_only_keep_key_frame is not None:
            pulumi.set(__self__, "animate_only_keep_key_frame", animate_only_keep_key_frame)
        if animate_time_interval_of_frame is not None:
            pulumi.set(__self__, "animate_time_interval_of_frame", animate_time_interval_of_frame)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if quality is not None:
            pulumi.set(__self__, "quality", quality)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="animateFramesPerSecond")
    def animate_frames_per_second(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "animate_frames_per_second")

    @animate_frames_per_second.setter
    def animate_frames_per_second(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "animate_frames_per_second", value)

    @property
    @pulumi.getter(name="animateOnlyKeepKeyFrame")
    def animate_only_keep_key_frame(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "animate_only_keep_key_frame")

    @animate_only_keep_key_frame.setter
    def animate_only_keep_key_frame(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "animate_only_keep_key_frame", value)

    @property
    @pulumi.getter(name="animateTimeIntervalOfFrame")
    def animate_time_interval_of_frame(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "animate_time_interval_of_frame")

    @animate_time_interval_of_frame.setter
    def animate_time_interval_of_frame(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "animate_time_interval_of_frame", value)

    @property
    @pulumi.getter
    def fps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def quality(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quality")

    @quality.setter
    def quality(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quality", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class MediaConcatTemplateConcatTemplateArgs:
    def __init__(__self__, *,
                 concat_fragments: pulumi.Input[Sequence[pulumi.Input['MediaConcatTemplateConcatTemplateConcatFragmentArgs']]],
                 container: pulumi.Input['MediaConcatTemplateConcatTemplateContainerArgs'],
                 audio: Optional[pulumi.Input['MediaConcatTemplateConcatTemplateAudioArgs']] = None,
                 audio_mixes: Optional[pulumi.Input[Sequence[pulumi.Input['MediaConcatTemplateConcatTemplateAudioMixArgs']]]] = None,
                 video: Optional[pulumi.Input['MediaConcatTemplateConcatTemplateVideoArgs']] = None):
        pulumi.set(__self__, "concat_fragments", concat_fragments)
        pulumi.set(__self__, "container", container)
        if audio is not None:
            pulumi.set(__self__, "audio", audio)
        if audio_mixes is not None:
            pulumi.set(__self__, "audio_mixes", audio_mixes)
        if video is not None:
            pulumi.set(__self__, "video", video)

    @property
    @pulumi.getter(name="concatFragments")
    def concat_fragments(self) -> pulumi.Input[Sequence[pulumi.Input['MediaConcatTemplateConcatTemplateConcatFragmentArgs']]]:
        return pulumi.get(self, "concat_fragments")

    @concat_fragments.setter
    def concat_fragments(self, value: pulumi.Input[Sequence[pulumi.Input['MediaConcatTemplateConcatTemplateConcatFragmentArgs']]]):
        pulumi.set(self, "concat_fragments", value)

    @property
    @pulumi.getter
    def container(self) -> pulumi.Input['MediaConcatTemplateConcatTemplateContainerArgs']:
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: pulumi.Input['MediaConcatTemplateConcatTemplateContainerArgs']):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def audio(self) -> Optional[pulumi.Input['MediaConcatTemplateConcatTemplateAudioArgs']]:
        return pulumi.get(self, "audio")

    @audio.setter
    def audio(self, value: Optional[pulumi.Input['MediaConcatTemplateConcatTemplateAudioArgs']]):
        pulumi.set(self, "audio", value)

    @property
    @pulumi.getter(name="audioMixes")
    def audio_mixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MediaConcatTemplateConcatTemplateAudioMixArgs']]]]:
        return pulumi.get(self, "audio_mixes")

    @audio_mixes.setter
    def audio_mixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MediaConcatTemplateConcatTemplateAudioMixArgs']]]]):
        pulumi.set(self, "audio_mixes", value)

    @property
    @pulumi.getter
    def video(self) -> Optional[pulumi.Input['MediaConcatTemplateConcatTemplateVideoArgs']]:
        return pulumi.get(self, "video")

    @video.setter
    def video(self, value: Optional[pulumi.Input['MediaConcatTemplateConcatTemplateVideoArgs']]):
        pulumi.set(self, "video", value)


@pulumi.input_type
class MediaConcatTemplateConcatTemplateAudioArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str],
                 bitrate: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[str]] = None,
                 samplerate: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "codec", codec)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if samplerate is not None:
            pulumi.set(__self__, "samplerate", samplerate)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def samplerate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "samplerate")

    @samplerate.setter
    def samplerate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "samplerate", value)


@pulumi.input_type
class MediaConcatTemplateConcatTemplateAudioMixArgs:
    def __init__(__self__, *,
                 audio_source: pulumi.Input[str],
                 effect_config: Optional[pulumi.Input['MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs']] = None,
                 mix_mode: Optional[pulumi.Input[str]] = None,
                 replace: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "audio_source", audio_source)
        if effect_config is not None:
            pulumi.set(__self__, "effect_config", effect_config)
        if mix_mode is not None:
            pulumi.set(__self__, "mix_mode", mix_mode)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="audioSource")
    def audio_source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "audio_source")

    @audio_source.setter
    def audio_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "audio_source", value)

    @property
    @pulumi.getter(name="effectConfig")
    def effect_config(self) -> Optional[pulumi.Input['MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs']]:
        return pulumi.get(self, "effect_config")

    @effect_config.setter
    def effect_config(self, value: Optional[pulumi.Input['MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs']]):
        pulumi.set(self, "effect_config", value)

    @property
    @pulumi.getter(name="mixMode")
    def mix_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mix_mode")

    @mix_mode.setter
    def mix_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mix_mode", value)

    @property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replace")

    @replace.setter
    def replace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replace", value)


@pulumi.input_type
class MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs:
    def __init__(__self__, *,
                 bgm_fade_time: Optional[pulumi.Input[str]] = None,
                 enable_bgm_fade: Optional[pulumi.Input[str]] = None,
                 enable_end_fadeout: Optional[pulumi.Input[str]] = None,
                 enable_start_fadein: Optional[pulumi.Input[str]] = None,
                 end_fadeout_time: Optional[pulumi.Input[str]] = None,
                 start_fadein_time: Optional[pulumi.Input[str]] = None):
        if bgm_fade_time is not None:
            pulumi.set(__self__, "bgm_fade_time", bgm_fade_time)
        if enable_bgm_fade is not None:
            pulumi.set(__self__, "enable_bgm_fade", enable_bgm_fade)
        if enable_end_fadeout is not None:
            pulumi.set(__self__, "enable_end_fadeout", enable_end_fadeout)
        if enable_start_fadein is not None:
            pulumi.set(__self__, "enable_start_fadein", enable_start_fadein)
        if end_fadeout_time is not None:
            pulumi.set(__self__, "end_fadeout_time", end_fadeout_time)
        if start_fadein_time is not None:
            pulumi.set(__self__, "start_fadein_time", start_fadein_time)

    @property
    @pulumi.getter(name="bgmFadeTime")
    def bgm_fade_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bgm_fade_time")

    @bgm_fade_time.setter
    def bgm_fade_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgm_fade_time", value)

    @property
    @pulumi.getter(name="enableBgmFade")
    def enable_bgm_fade(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_bgm_fade")

    @enable_bgm_fade.setter
    def enable_bgm_fade(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_bgm_fade", value)

    @property
    @pulumi.getter(name="enableEndFadeout")
    def enable_end_fadeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_end_fadeout")

    @enable_end_fadeout.setter
    def enable_end_fadeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_end_fadeout", value)

    @property
    @pulumi.getter(name="enableStartFadein")
    def enable_start_fadein(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_start_fadein")

    @enable_start_fadein.setter
    def enable_start_fadein(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_start_fadein", value)

    @property
    @pulumi.getter(name="endFadeoutTime")
    def end_fadeout_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_fadeout_time")

    @end_fadeout_time.setter
    def end_fadeout_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_fadeout_time", value)

    @property
    @pulumi.getter(name="startFadeinTime")
    def start_fadein_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_fadein_time")

    @start_fadein_time.setter
    def start_fadein_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_fadein_time", value)


@pulumi.input_type
class MediaConcatTemplateConcatTemplateConcatFragmentArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class MediaConcatTemplateConcatTemplateContainerArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str]):
        pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)


@pulumi.input_type
class MediaConcatTemplateConcatTemplateVideoArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str],
                 bitrate: Optional[pulumi.Input[str]] = None,
                 crf: Optional[pulumi.Input[str]] = None,
                 fps: Optional[pulumi.Input[str]] = None,
                 height: Optional[pulumi.Input[str]] = None,
                 remove: Optional[pulumi.Input[str]] = None,
                 rotate: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "codec", codec)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if crf is not None:
            pulumi.set(__self__, "crf", crf)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if rotate is not None:
            pulumi.set(__self__, "rotate", rotate)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def crf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "crf")

    @crf.setter
    def crf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "crf", value)

    @property
    @pulumi.getter
    def fps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def remove(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove")

    @remove.setter
    def remove(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove", value)

    @property
    @pulumi.getter
    def rotate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rotate")

    @rotate.setter
    def rotate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rotate", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class MediaPicProcessTemplatePicProcessArgs:
    def __init__(__self__, *,
                 process_rule: pulumi.Input[str],
                 is_pic_info: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "process_rule", process_rule)
        if is_pic_info is not None:
            pulumi.set(__self__, "is_pic_info", is_pic_info)

    @property
    @pulumi.getter(name="processRule")
    def process_rule(self) -> pulumi.Input[str]:
        return pulumi.get(self, "process_rule")

    @process_rule.setter
    def process_rule(self, value: pulumi.Input[str]):
        pulumi.set(self, "process_rule", value)

    @property
    @pulumi.getter(name="isPicInfo")
    def is_pic_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_pic_info")

    @is_pic_info.setter
    def is_pic_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_pic_info", value)


@pulumi.input_type
class MediaSmartCoverTemplateSmartCoverArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 count: Optional[pulumi.Input[str]] = None,
                 delete_duplicates: Optional[pulumi.Input[str]] = None,
                 height: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format", format)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if delete_duplicates is not None:
            pulumi.set(__self__, "delete_duplicates", delete_duplicates)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="deleteDuplicates")
    def delete_duplicates(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delete_duplicates")

    @delete_duplicates.setter
    def delete_duplicates(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_duplicates", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class MediaSnapshotTemplateSnapshotArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[str],
                 black_level: Optional[pulumi.Input[str]] = None,
                 ci_param: Optional[pulumi.Input[str]] = None,
                 height: Optional[pulumi.Input[str]] = None,
                 is_check_black: Optional[pulumi.Input[str]] = None,
                 is_check_count: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 pixel_black_threshold: Optional[pulumi.Input[str]] = None,
                 snapshot_out_mode: Optional[pulumi.Input[str]] = None,
                 sprite_snapshot_config: Optional[pulumi.Input['MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs']] = None,
                 start: Optional[pulumi.Input[str]] = None,
                 time_interval: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "count", count)
        if black_level is not None:
            pulumi.set(__self__, "black_level", black_level)
        if ci_param is not None:
            pulumi.set(__self__, "ci_param", ci_param)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if is_check_black is not None:
            pulumi.set(__self__, "is_check_black", is_check_black)
        if is_check_count is not None:
            pulumi.set(__self__, "is_check_count", is_check_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if pixel_black_threshold is not None:
            pulumi.set(__self__, "pixel_black_threshold", pixel_black_threshold)
        if snapshot_out_mode is not None:
            pulumi.set(__self__, "snapshot_out_mode", snapshot_out_mode)
        if sprite_snapshot_config is not None:
            pulumi.set(__self__, "sprite_snapshot_config", sprite_snapshot_config)
        if start is not None:
            pulumi.set(__self__, "start", start)
        if time_interval is not None:
            pulumi.set(__self__, "time_interval", time_interval)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[str]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[str]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="blackLevel")
    def black_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "black_level")

    @black_level.setter
    def black_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "black_level", value)

    @property
    @pulumi.getter(name="ciParam")
    def ci_param(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ci_param")

    @ci_param.setter
    def ci_param(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ci_param", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="isCheckBlack")
    def is_check_black(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_check_black")

    @is_check_black.setter
    def is_check_black(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_check_black", value)

    @property
    @pulumi.getter(name="isCheckCount")
    def is_check_count(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_check_count")

    @is_check_count.setter
    def is_check_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_check_count", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="pixelBlackThreshold")
    def pixel_black_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pixel_black_threshold")

    @pixel_black_threshold.setter
    def pixel_black_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pixel_black_threshold", value)

    @property
    @pulumi.getter(name="snapshotOutMode")
    def snapshot_out_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_out_mode")

    @snapshot_out_mode.setter
    def snapshot_out_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_out_mode", value)

    @property
    @pulumi.getter(name="spriteSnapshotConfig")
    def sprite_snapshot_config(self) -> Optional[pulumi.Input['MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs']]:
        return pulumi.get(self, "sprite_snapshot_config")

    @sprite_snapshot_config.setter
    def sprite_snapshot_config(self, value: Optional[pulumi.Input['MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs']]):
        pulumi.set(self, "sprite_snapshot_config", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)

    @property
    @pulumi.getter(name="timeInterval")
    def time_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_interval")

    @time_interval.setter
    def time_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_interval", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 columns: pulumi.Input[str],
                 lines: pulumi.Input[str],
                 cell_height: Optional[pulumi.Input[str]] = None,
                 cell_width: Optional[pulumi.Input[str]] = None,
                 margin: Optional[pulumi.Input[str]] = None,
                 padding: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "lines", lines)
        if cell_height is not None:
            pulumi.set(__self__, "cell_height", cell_height)
        if cell_width is not None:
            pulumi.set(__self__, "cell_width", cell_width)
        if margin is not None:
            pulumi.set(__self__, "margin", margin)
        if padding is not None:
            pulumi.set(__self__, "padding", padding)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def columns(self) -> pulumi.Input[str]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: pulumi.Input[str]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def lines(self) -> pulumi.Input[str]:
        return pulumi.get(self, "lines")

    @lines.setter
    def lines(self, value: pulumi.Input[str]):
        pulumi.set(self, "lines", value)

    @property
    @pulumi.getter(name="cellHeight")
    def cell_height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cell_height")

    @cell_height.setter
    def cell_height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_height", value)

    @property
    @pulumi.getter(name="cellWidth")
    def cell_width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cell_width")

    @cell_width.setter
    def cell_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_width", value)

    @property
    @pulumi.getter
    def margin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "margin")

    @margin.setter
    def margin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "margin", value)

    @property
    @pulumi.getter
    def padding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "padding")

    @padding.setter
    def padding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "padding", value)


@pulumi.input_type
class MediaSpeechRecognitionTemplateSpeechRecognitionArgs:
    def __init__(__self__, *,
                 channel_num: pulumi.Input[str],
                 engine_model_type: pulumi.Input[str],
                 convert_num_mode: Optional[pulumi.Input[str]] = None,
                 filter_dirty: Optional[pulumi.Input[str]] = None,
                 filter_modal: Optional[pulumi.Input[str]] = None,
                 filter_punc: Optional[pulumi.Input[str]] = None,
                 output_file_type: Optional[pulumi.Input[str]] = None,
                 res_text_format: Optional[pulumi.Input[str]] = None,
                 speaker_diarization: Optional[pulumi.Input[str]] = None,
                 speaker_number: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "channel_num", channel_num)
        pulumi.set(__self__, "engine_model_type", engine_model_type)
        if convert_num_mode is not None:
            pulumi.set(__self__, "convert_num_mode", convert_num_mode)
        if filter_dirty is not None:
            pulumi.set(__self__, "filter_dirty", filter_dirty)
        if filter_modal is not None:
            pulumi.set(__self__, "filter_modal", filter_modal)
        if filter_punc is not None:
            pulumi.set(__self__, "filter_punc", filter_punc)
        if output_file_type is not None:
            pulumi.set(__self__, "output_file_type", output_file_type)
        if res_text_format is not None:
            pulumi.set(__self__, "res_text_format", res_text_format)
        if speaker_diarization is not None:
            pulumi.set(__self__, "speaker_diarization", speaker_diarization)
        if speaker_number is not None:
            pulumi.set(__self__, "speaker_number", speaker_number)

    @property
    @pulumi.getter(name="channelNum")
    def channel_num(self) -> pulumi.Input[str]:
        return pulumi.get(self, "channel_num")

    @channel_num.setter
    def channel_num(self, value: pulumi.Input[str]):
        pulumi.set(self, "channel_num", value)

    @property
    @pulumi.getter(name="engineModelType")
    def engine_model_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "engine_model_type")

    @engine_model_type.setter
    def engine_model_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "engine_model_type", value)

    @property
    @pulumi.getter(name="convertNumMode")
    def convert_num_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "convert_num_mode")

    @convert_num_mode.setter
    def convert_num_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "convert_num_mode", value)

    @property
    @pulumi.getter(name="filterDirty")
    def filter_dirty(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_dirty")

    @filter_dirty.setter
    def filter_dirty(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_dirty", value)

    @property
    @pulumi.getter(name="filterModal")
    def filter_modal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_modal")

    @filter_modal.setter
    def filter_modal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_modal", value)

    @property
    @pulumi.getter(name="filterPunc")
    def filter_punc(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_punc")

    @filter_punc.setter
    def filter_punc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_punc", value)

    @property
    @pulumi.getter(name="outputFileType")
    def output_file_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_file_type")

    @output_file_type.setter
    def output_file_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_file_type", value)

    @property
    @pulumi.getter(name="resTextFormat")
    def res_text_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "res_text_format")

    @res_text_format.setter
    def res_text_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "res_text_format", value)

    @property
    @pulumi.getter(name="speakerDiarization")
    def speaker_diarization(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "speaker_diarization")

    @speaker_diarization.setter
    def speaker_diarization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speaker_diarization", value)

    @property
    @pulumi.getter(name="speakerNumber")
    def speaker_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "speaker_number")

    @speaker_number.setter
    def speaker_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speaker_number", value)


@pulumi.input_type
class MediaTranscodeProTemplateAudioArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str],
                 remove: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "codec", codec)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter
    def remove(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove")

    @remove.setter
    def remove(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove", value)


@pulumi.input_type
class MediaTranscodeProTemplateContainerArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 clip_config: Optional[pulumi.Input['MediaTranscodeProTemplateContainerClipConfigArgs']] = None):
        pulumi.set(__self__, "format", format)
        if clip_config is not None:
            pulumi.set(__self__, "clip_config", clip_config)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="clipConfig")
    def clip_config(self) -> Optional[pulumi.Input['MediaTranscodeProTemplateContainerClipConfigArgs']]:
        return pulumi.get(self, "clip_config")

    @clip_config.setter
    def clip_config(self, value: Optional[pulumi.Input['MediaTranscodeProTemplateContainerClipConfigArgs']]):
        pulumi.set(self, "clip_config", value)


@pulumi.input_type
class MediaTranscodeProTemplateContainerClipConfigArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[str]] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)


@pulumi.input_type
class MediaTranscodeProTemplateTimeIntervalArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class MediaTranscodeProTemplateTransConfigArgs:
    def __init__(__self__, *,
                 adj_dar_method: Optional[pulumi.Input[str]] = None,
                 audio_bitrate_adj_method: Optional[pulumi.Input[str]] = None,
                 delete_metadata: Optional[pulumi.Input[str]] = None,
                 is_check_audio_bitrate: Optional[pulumi.Input[str]] = None,
                 is_check_reso: Optional[pulumi.Input[str]] = None,
                 is_check_video_bitrate: Optional[pulumi.Input[str]] = None,
                 is_hdr2_sdr: Optional[pulumi.Input[str]] = None,
                 reso_adj_method: Optional[pulumi.Input[str]] = None,
                 video_bitrate_adj_method: Optional[pulumi.Input[str]] = None):
        if adj_dar_method is not None:
            pulumi.set(__self__, "adj_dar_method", adj_dar_method)
        if audio_bitrate_adj_method is not None:
            pulumi.set(__self__, "audio_bitrate_adj_method", audio_bitrate_adj_method)
        if delete_metadata is not None:
            pulumi.set(__self__, "delete_metadata", delete_metadata)
        if is_check_audio_bitrate is not None:
            pulumi.set(__self__, "is_check_audio_bitrate", is_check_audio_bitrate)
        if is_check_reso is not None:
            pulumi.set(__self__, "is_check_reso", is_check_reso)
        if is_check_video_bitrate is not None:
            pulumi.set(__self__, "is_check_video_bitrate", is_check_video_bitrate)
        if is_hdr2_sdr is not None:
            pulumi.set(__self__, "is_hdr2_sdr", is_hdr2_sdr)
        if reso_adj_method is not None:
            pulumi.set(__self__, "reso_adj_method", reso_adj_method)
        if video_bitrate_adj_method is not None:
            pulumi.set(__self__, "video_bitrate_adj_method", video_bitrate_adj_method)

    @property
    @pulumi.getter(name="adjDarMethod")
    def adj_dar_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adj_dar_method")

    @adj_dar_method.setter
    def adj_dar_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adj_dar_method", value)

    @property
    @pulumi.getter(name="audioBitrateAdjMethod")
    def audio_bitrate_adj_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "audio_bitrate_adj_method")

    @audio_bitrate_adj_method.setter
    def audio_bitrate_adj_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audio_bitrate_adj_method", value)

    @property
    @pulumi.getter(name="deleteMetadata")
    def delete_metadata(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delete_metadata")

    @delete_metadata.setter
    def delete_metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_metadata", value)

    @property
    @pulumi.getter(name="isCheckAudioBitrate")
    def is_check_audio_bitrate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_check_audio_bitrate")

    @is_check_audio_bitrate.setter
    def is_check_audio_bitrate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_check_audio_bitrate", value)

    @property
    @pulumi.getter(name="isCheckReso")
    def is_check_reso(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_check_reso")

    @is_check_reso.setter
    def is_check_reso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_check_reso", value)

    @property
    @pulumi.getter(name="isCheckVideoBitrate")
    def is_check_video_bitrate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_check_video_bitrate")

    @is_check_video_bitrate.setter
    def is_check_video_bitrate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_check_video_bitrate", value)

    @property
    @pulumi.getter(name="isHdr2Sdr")
    def is_hdr2_sdr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_hdr2_sdr")

    @is_hdr2_sdr.setter
    def is_hdr2_sdr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_hdr2_sdr", value)

    @property
    @pulumi.getter(name="resoAdjMethod")
    def reso_adj_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reso_adj_method")

    @reso_adj_method.setter
    def reso_adj_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reso_adj_method", value)

    @property
    @pulumi.getter(name="videoBitrateAdjMethod")
    def video_bitrate_adj_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "video_bitrate_adj_method")

    @video_bitrate_adj_method.setter
    def video_bitrate_adj_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "video_bitrate_adj_method", value)


@pulumi.input_type
class MediaTranscodeProTemplateVideoArgs:
    def __init__(__self__, *,
                 bitrate: Optional[pulumi.Input[str]] = None,
                 codec: Optional[pulumi.Input[str]] = None,
                 fps: Optional[pulumi.Input[str]] = None,
                 height: Optional[pulumi.Input[str]] = None,
                 interlaced: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 rotate: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if interlaced is not None:
            pulumi.set(__self__, "interlaced", interlaced)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if rotate is not None:
            pulumi.set(__self__, "rotate", rotate)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter
    def fps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def interlaced(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interlaced")

    @interlaced.setter
    def interlaced(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interlaced", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter
    def rotate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rotate")

    @rotate.setter
    def rotate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rotate", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class MediaTranscodeTemplateAudioArgs:
    def __init__(__self__, *,
                 bitrate: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[str]] = None,
                 codec: Optional[pulumi.Input[str]] = None,
                 keep_two_tracks: Optional[pulumi.Input[str]] = None,
                 remove: Optional[pulumi.Input[str]] = None,
                 sample_format: Optional[pulumi.Input[str]] = None,
                 samplerate: Optional[pulumi.Input[str]] = None,
                 switch_track: Optional[pulumi.Input[str]] = None):
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if keep_two_tracks is not None:
            pulumi.set(__self__, "keep_two_tracks", keep_two_tracks)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if sample_format is not None:
            pulumi.set(__self__, "sample_format", sample_format)
        if samplerate is not None:
            pulumi.set(__self__, "samplerate", samplerate)
        if switch_track is not None:
            pulumi.set(__self__, "switch_track", switch_track)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="keepTwoTracks")
    def keep_two_tracks(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keep_two_tracks")

    @keep_two_tracks.setter
    def keep_two_tracks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keep_two_tracks", value)

    @property
    @pulumi.getter
    def remove(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove")

    @remove.setter
    def remove(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove", value)

    @property
    @pulumi.getter(name="sampleFormat")
    def sample_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sample_format")

    @sample_format.setter
    def sample_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sample_format", value)

    @property
    @pulumi.getter
    def samplerate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "samplerate")

    @samplerate.setter
    def samplerate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "samplerate", value)

    @property
    @pulumi.getter(name="switchTrack")
    def switch_track(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "switch_track")

    @switch_track.setter
    def switch_track(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switch_track", value)


@pulumi.input_type
class MediaTranscodeTemplateAudioMixArgs:
    def __init__(__self__, *,
                 audio_source: pulumi.Input[str],
                 effect_config: Optional[pulumi.Input['MediaTranscodeTemplateAudioMixEffectConfigArgs']] = None,
                 mix_mode: Optional[pulumi.Input[str]] = None,
                 replace: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "audio_source", audio_source)
        if effect_config is not None:
            pulumi.set(__self__, "effect_config", effect_config)
        if mix_mode is not None:
            pulumi.set(__self__, "mix_mode", mix_mode)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="audioSource")
    def audio_source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "audio_source")

    @audio_source.setter
    def audio_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "audio_source", value)

    @property
    @pulumi.getter(name="effectConfig")
    def effect_config(self) -> Optional[pulumi.Input['MediaTranscodeTemplateAudioMixEffectConfigArgs']]:
        return pulumi.get(self, "effect_config")

    @effect_config.setter
    def effect_config(self, value: Optional[pulumi.Input['MediaTranscodeTemplateAudioMixEffectConfigArgs']]):
        pulumi.set(self, "effect_config", value)

    @property
    @pulumi.getter(name="mixMode")
    def mix_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mix_mode")

    @mix_mode.setter
    def mix_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mix_mode", value)

    @property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replace")

    @replace.setter
    def replace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replace", value)


@pulumi.input_type
class MediaTranscodeTemplateAudioMixEffectConfigArgs:
    def __init__(__self__, *,
                 bgm_fade_time: Optional[pulumi.Input[str]] = None,
                 enable_bgm_fade: Optional[pulumi.Input[str]] = None,
                 enable_end_fadeout: Optional[pulumi.Input[str]] = None,
                 enable_start_fadein: Optional[pulumi.Input[str]] = None,
                 end_fadeout_time: Optional[pulumi.Input[str]] = None,
                 start_fadein_time: Optional[pulumi.Input[str]] = None):
        if bgm_fade_time is not None:
            pulumi.set(__self__, "bgm_fade_time", bgm_fade_time)
        if enable_bgm_fade is not None:
            pulumi.set(__self__, "enable_bgm_fade", enable_bgm_fade)
        if enable_end_fadeout is not None:
            pulumi.set(__self__, "enable_end_fadeout", enable_end_fadeout)
        if enable_start_fadein is not None:
            pulumi.set(__self__, "enable_start_fadein", enable_start_fadein)
        if end_fadeout_time is not None:
            pulumi.set(__self__, "end_fadeout_time", end_fadeout_time)
        if start_fadein_time is not None:
            pulumi.set(__self__, "start_fadein_time", start_fadein_time)

    @property
    @pulumi.getter(name="bgmFadeTime")
    def bgm_fade_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bgm_fade_time")

    @bgm_fade_time.setter
    def bgm_fade_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgm_fade_time", value)

    @property
    @pulumi.getter(name="enableBgmFade")
    def enable_bgm_fade(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_bgm_fade")

    @enable_bgm_fade.setter
    def enable_bgm_fade(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_bgm_fade", value)

    @property
    @pulumi.getter(name="enableEndFadeout")
    def enable_end_fadeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_end_fadeout")

    @enable_end_fadeout.setter
    def enable_end_fadeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_end_fadeout", value)

    @property
    @pulumi.getter(name="enableStartFadein")
    def enable_start_fadein(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_start_fadein")

    @enable_start_fadein.setter
    def enable_start_fadein(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_start_fadein", value)

    @property
    @pulumi.getter(name="endFadeoutTime")
    def end_fadeout_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_fadeout_time")

    @end_fadeout_time.setter
    def end_fadeout_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_fadeout_time", value)

    @property
    @pulumi.getter(name="startFadeinTime")
    def start_fadein_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_fadein_time")

    @start_fadein_time.setter
    def start_fadein_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_fadein_time", value)


@pulumi.input_type
class MediaTranscodeTemplateContainerArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 clip_config: Optional[pulumi.Input['MediaTranscodeTemplateContainerClipConfigArgs']] = None):
        pulumi.set(__self__, "format", format)
        if clip_config is not None:
            pulumi.set(__self__, "clip_config", clip_config)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="clipConfig")
    def clip_config(self) -> Optional[pulumi.Input['MediaTranscodeTemplateContainerClipConfigArgs']]:
        return pulumi.get(self, "clip_config")

    @clip_config.setter
    def clip_config(self, value: Optional[pulumi.Input['MediaTranscodeTemplateContainerClipConfigArgs']]):
        pulumi.set(self, "clip_config", value)


@pulumi.input_type
class MediaTranscodeTemplateContainerClipConfigArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[str]] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)


@pulumi.input_type
class MediaTranscodeTemplateTimeIntervalArgs:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class MediaTranscodeTemplateTransConfigArgs:
    def __init__(__self__, *,
                 adj_dar_method: Optional[pulumi.Input[str]] = None,
                 audio_bitrate_adj_method: Optional[pulumi.Input[str]] = None,
                 delete_metadata: Optional[pulumi.Input[str]] = None,
                 hls_encrypt: Optional[pulumi.Input['MediaTranscodeTemplateTransConfigHlsEncryptArgs']] = None,
                 is_check_audio_bitrate: Optional[pulumi.Input[str]] = None,
                 is_check_reso: Optional[pulumi.Input[str]] = None,
                 is_check_video_bitrate: Optional[pulumi.Input[str]] = None,
                 is_hdr2_sdr: Optional[pulumi.Input[str]] = None,
                 reso_adj_method: Optional[pulumi.Input[str]] = None,
                 video_bitrate_adj_method: Optional[pulumi.Input[str]] = None):
        if adj_dar_method is not None:
            pulumi.set(__self__, "adj_dar_method", adj_dar_method)
        if audio_bitrate_adj_method is not None:
            pulumi.set(__self__, "audio_bitrate_adj_method", audio_bitrate_adj_method)
        if delete_metadata is not None:
            pulumi.set(__self__, "delete_metadata", delete_metadata)
        if hls_encrypt is not None:
            pulumi.set(__self__, "hls_encrypt", hls_encrypt)
        if is_check_audio_bitrate is not None:
            pulumi.set(__self__, "is_check_audio_bitrate", is_check_audio_bitrate)
        if is_check_reso is not None:
            pulumi.set(__self__, "is_check_reso", is_check_reso)
        if is_check_video_bitrate is not None:
            pulumi.set(__self__, "is_check_video_bitrate", is_check_video_bitrate)
        if is_hdr2_sdr is not None:
            pulumi.set(__self__, "is_hdr2_sdr", is_hdr2_sdr)
        if reso_adj_method is not None:
            pulumi.set(__self__, "reso_adj_method", reso_adj_method)
        if video_bitrate_adj_method is not None:
            pulumi.set(__self__, "video_bitrate_adj_method", video_bitrate_adj_method)

    @property
    @pulumi.getter(name="adjDarMethod")
    def adj_dar_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adj_dar_method")

    @adj_dar_method.setter
    def adj_dar_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adj_dar_method", value)

    @property
    @pulumi.getter(name="audioBitrateAdjMethod")
    def audio_bitrate_adj_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "audio_bitrate_adj_method")

    @audio_bitrate_adj_method.setter
    def audio_bitrate_adj_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audio_bitrate_adj_method", value)

    @property
    @pulumi.getter(name="deleteMetadata")
    def delete_metadata(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delete_metadata")

    @delete_metadata.setter
    def delete_metadata(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_metadata", value)

    @property
    @pulumi.getter(name="hlsEncrypt")
    def hls_encrypt(self) -> Optional[pulumi.Input['MediaTranscodeTemplateTransConfigHlsEncryptArgs']]:
        return pulumi.get(self, "hls_encrypt")

    @hls_encrypt.setter
    def hls_encrypt(self, value: Optional[pulumi.Input['MediaTranscodeTemplateTransConfigHlsEncryptArgs']]):
        pulumi.set(self, "hls_encrypt", value)

    @property
    @pulumi.getter(name="isCheckAudioBitrate")
    def is_check_audio_bitrate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_check_audio_bitrate")

    @is_check_audio_bitrate.setter
    def is_check_audio_bitrate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_check_audio_bitrate", value)

    @property
    @pulumi.getter(name="isCheckReso")
    def is_check_reso(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_check_reso")

    @is_check_reso.setter
    def is_check_reso(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_check_reso", value)

    @property
    @pulumi.getter(name="isCheckVideoBitrate")
    def is_check_video_bitrate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_check_video_bitrate")

    @is_check_video_bitrate.setter
    def is_check_video_bitrate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_check_video_bitrate", value)

    @property
    @pulumi.getter(name="isHdr2Sdr")
    def is_hdr2_sdr(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_hdr2_sdr")

    @is_hdr2_sdr.setter
    def is_hdr2_sdr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_hdr2_sdr", value)

    @property
    @pulumi.getter(name="resoAdjMethod")
    def reso_adj_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reso_adj_method")

    @reso_adj_method.setter
    def reso_adj_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reso_adj_method", value)

    @property
    @pulumi.getter(name="videoBitrateAdjMethod")
    def video_bitrate_adj_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "video_bitrate_adj_method")

    @video_bitrate_adj_method.setter
    def video_bitrate_adj_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "video_bitrate_adj_method", value)


@pulumi.input_type
class MediaTranscodeTemplateTransConfigHlsEncryptArgs:
    def __init__(__self__, *,
                 is_hls_encrypt: Optional[pulumi.Input[str]] = None,
                 uri_key: Optional[pulumi.Input[str]] = None):
        if is_hls_encrypt is not None:
            pulumi.set(__self__, "is_hls_encrypt", is_hls_encrypt)
        if uri_key is not None:
            pulumi.set(__self__, "uri_key", uri_key)

    @property
    @pulumi.getter(name="isHlsEncrypt")
    def is_hls_encrypt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_hls_encrypt")

    @is_hls_encrypt.setter
    def is_hls_encrypt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_hls_encrypt", value)

    @property
    @pulumi.getter(name="uriKey")
    def uri_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri_key")

    @uri_key.setter
    def uri_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri_key", value)


@pulumi.input_type
class MediaTranscodeTemplateVideoArgs:
    def __init__(__self__, *,
                 bitrate: Optional[pulumi.Input[str]] = None,
                 bufsize: Optional[pulumi.Input[str]] = None,
                 codec: Optional[pulumi.Input[str]] = None,
                 crf: Optional[pulumi.Input[str]] = None,
                 fps: Optional[pulumi.Input[str]] = None,
                 gop: Optional[pulumi.Input[str]] = None,
                 height: Optional[pulumi.Input[str]] = None,
                 long_short_mode: Optional[pulumi.Input[str]] = None,
                 maxrate: Optional[pulumi.Input[str]] = None,
                 pixfmt: Optional[pulumi.Input[str]] = None,
                 preset: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 remove: Optional[pulumi.Input[str]] = None,
                 rotate: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if bufsize is not None:
            pulumi.set(__self__, "bufsize", bufsize)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if crf is not None:
            pulumi.set(__self__, "crf", crf)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if long_short_mode is not None:
            pulumi.set(__self__, "long_short_mode", long_short_mode)
        if maxrate is not None:
            pulumi.set(__self__, "maxrate", maxrate)
        if pixfmt is not None:
            pulumi.set(__self__, "pixfmt", pixfmt)
        if preset is not None:
            pulumi.set(__self__, "preset", preset)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if rotate is not None:
            pulumi.set(__self__, "rotate", rotate)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def bufsize(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bufsize")

    @bufsize.setter
    def bufsize(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bufsize", value)

    @property
    @pulumi.getter
    def codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter
    def crf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "crf")

    @crf.setter
    def crf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "crf", value)

    @property
    @pulumi.getter
    def fps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter
    def gop(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gop")

    @gop.setter
    def gop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gop", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="longShortMode")
    def long_short_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "long_short_mode")

    @long_short_mode.setter
    def long_short_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "long_short_mode", value)

    @property
    @pulumi.getter
    def maxrate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maxrate")

    @maxrate.setter
    def maxrate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maxrate", value)

    @property
    @pulumi.getter
    def pixfmt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pixfmt")

    @pixfmt.setter
    def pixfmt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pixfmt", value)

    @property
    @pulumi.getter
    def preset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preset")

    @preset.setter
    def preset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preset", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter
    def remove(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove")

    @remove.setter
    def remove(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove", value)

    @property
    @pulumi.getter
    def rotate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rotate")

    @rotate.setter
    def rotate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rotate", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class MediaVideoMontageTemplateAudioArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str],
                 bitrate: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[str]] = None,
                 remove: Optional[pulumi.Input[str]] = None,
                 samplerate: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "codec", codec)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if samplerate is not None:
            pulumi.set(__self__, "samplerate", samplerate)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def remove(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove")

    @remove.setter
    def remove(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove", value)

    @property
    @pulumi.getter
    def samplerate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "samplerate")

    @samplerate.setter
    def samplerate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "samplerate", value)


@pulumi.input_type
class MediaVideoMontageTemplateAudioMixArgs:
    def __init__(__self__, *,
                 audio_source: pulumi.Input[str],
                 effect_config: Optional[pulumi.Input['MediaVideoMontageTemplateAudioMixEffectConfigArgs']] = None,
                 mix_mode: Optional[pulumi.Input[str]] = None,
                 replace: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "audio_source", audio_source)
        if effect_config is not None:
            pulumi.set(__self__, "effect_config", effect_config)
        if mix_mode is not None:
            pulumi.set(__self__, "mix_mode", mix_mode)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="audioSource")
    def audio_source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "audio_source")

    @audio_source.setter
    def audio_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "audio_source", value)

    @property
    @pulumi.getter(name="effectConfig")
    def effect_config(self) -> Optional[pulumi.Input['MediaVideoMontageTemplateAudioMixEffectConfigArgs']]:
        return pulumi.get(self, "effect_config")

    @effect_config.setter
    def effect_config(self, value: Optional[pulumi.Input['MediaVideoMontageTemplateAudioMixEffectConfigArgs']]):
        pulumi.set(self, "effect_config", value)

    @property
    @pulumi.getter(name="mixMode")
    def mix_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mix_mode")

    @mix_mode.setter
    def mix_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mix_mode", value)

    @property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replace")

    @replace.setter
    def replace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replace", value)


@pulumi.input_type
class MediaVideoMontageTemplateAudioMixEffectConfigArgs:
    def __init__(__self__, *,
                 bgm_fade_time: Optional[pulumi.Input[str]] = None,
                 enable_bgm_fade: Optional[pulumi.Input[str]] = None,
                 enable_end_fadeout: Optional[pulumi.Input[str]] = None,
                 enable_start_fadein: Optional[pulumi.Input[str]] = None,
                 end_fadeout_time: Optional[pulumi.Input[str]] = None,
                 start_fadein_time: Optional[pulumi.Input[str]] = None):
        if bgm_fade_time is not None:
            pulumi.set(__self__, "bgm_fade_time", bgm_fade_time)
        if enable_bgm_fade is not None:
            pulumi.set(__self__, "enable_bgm_fade", enable_bgm_fade)
        if enable_end_fadeout is not None:
            pulumi.set(__self__, "enable_end_fadeout", enable_end_fadeout)
        if enable_start_fadein is not None:
            pulumi.set(__self__, "enable_start_fadein", enable_start_fadein)
        if end_fadeout_time is not None:
            pulumi.set(__self__, "end_fadeout_time", end_fadeout_time)
        if start_fadein_time is not None:
            pulumi.set(__self__, "start_fadein_time", start_fadein_time)

    @property
    @pulumi.getter(name="bgmFadeTime")
    def bgm_fade_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bgm_fade_time")

    @bgm_fade_time.setter
    def bgm_fade_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgm_fade_time", value)

    @property
    @pulumi.getter(name="enableBgmFade")
    def enable_bgm_fade(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_bgm_fade")

    @enable_bgm_fade.setter
    def enable_bgm_fade(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_bgm_fade", value)

    @property
    @pulumi.getter(name="enableEndFadeout")
    def enable_end_fadeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_end_fadeout")

    @enable_end_fadeout.setter
    def enable_end_fadeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_end_fadeout", value)

    @property
    @pulumi.getter(name="enableStartFadein")
    def enable_start_fadein(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable_start_fadein")

    @enable_start_fadein.setter
    def enable_start_fadein(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_start_fadein", value)

    @property
    @pulumi.getter(name="endFadeoutTime")
    def end_fadeout_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_fadeout_time")

    @end_fadeout_time.setter
    def end_fadeout_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_fadeout_time", value)

    @property
    @pulumi.getter(name="startFadeinTime")
    def start_fadein_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_fadein_time")

    @start_fadein_time.setter
    def start_fadein_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_fadein_time", value)


@pulumi.input_type
class MediaVideoMontageTemplateContainerArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str]):
        pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)


@pulumi.input_type
class MediaVideoMontageTemplateVideoArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str],
                 bitrate: Optional[pulumi.Input[str]] = None,
                 crf: Optional[pulumi.Input[str]] = None,
                 fps: Optional[pulumi.Input[str]] = None,
                 height: Optional[pulumi.Input[str]] = None,
                 remove: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "codec", codec)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if crf is not None:
            pulumi.set(__self__, "crf", crf)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def crf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "crf")

    @crf.setter
    def crf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "crf", value)

    @property
    @pulumi.getter
    def fps(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def remove(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove")

    @remove.setter
    def remove(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class MediaVideoProcessTemplateColorEnhanceArgs:
    def __init__(__self__, *,
                 contrast: Optional[pulumi.Input[str]] = None,
                 correction: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[str]] = None,
                 saturation: Optional[pulumi.Input[str]] = None):
        if contrast is not None:
            pulumi.set(__self__, "contrast", contrast)
        if correction is not None:
            pulumi.set(__self__, "correction", correction)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if saturation is not None:
            pulumi.set(__self__, "saturation", saturation)

    @property
    @pulumi.getter
    def contrast(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "contrast")

    @contrast.setter
    def contrast(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contrast", value)

    @property
    @pulumi.getter
    def correction(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "correction")

    @correction.setter
    def correction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "correction", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def saturation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "saturation")

    @saturation.setter
    def saturation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saturation", value)


@pulumi.input_type
class MediaVideoProcessTemplateMsSharpenArgs:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[str]] = None,
                 sharpen_level: Optional[pulumi.Input[str]] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if sharpen_level is not None:
            pulumi.set(__self__, "sharpen_level", sharpen_level)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="sharpenLevel")
    def sharpen_level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sharpen_level")

    @sharpen_level.setter
    def sharpen_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sharpen_level", value)


@pulumi.input_type
class MediaVoiceSeparateTemplateAudioConfigArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str],
                 bitrate: Optional[pulumi.Input[str]] = None,
                 channels: Optional[pulumi.Input[str]] = None,
                 samplerate: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "codec", codec)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if samplerate is not None:
            pulumi.set(__self__, "samplerate", samplerate)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bitrate")

    @bitrate.setter
    def bitrate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bitrate", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def samplerate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "samplerate")

    @samplerate.setter
    def samplerate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "samplerate", value)


@pulumi.input_type
class MediaWatermarkTemplateWatermarkArgs:
    def __init__(__self__, *,
                 dx: pulumi.Input[str],
                 dy: pulumi.Input[str],
                 loc_mode: pulumi.Input[str],
                 pos: pulumi.Input[str],
                 type: pulumi.Input[str],
                 end_time: Optional[pulumi.Input[str]] = None,
                 image: Optional[pulumi.Input['MediaWatermarkTemplateWatermarkImageArgs']] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input['MediaWatermarkTemplateWatermarkTextArgs']] = None):
        pulumi.set(__self__, "dx", dx)
        pulumi.set(__self__, "dy", dy)
        pulumi.set(__self__, "loc_mode", loc_mode)
        pulumi.set(__self__, "pos", pos)
        pulumi.set(__self__, "type", type)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def dx(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dx")

    @dx.setter
    def dx(self, value: pulumi.Input[str]):
        pulumi.set(self, "dx", value)

    @property
    @pulumi.getter
    def dy(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dy")

    @dy.setter
    def dy(self, value: pulumi.Input[str]):
        pulumi.set(self, "dy", value)

    @property
    @pulumi.getter(name="locMode")
    def loc_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "loc_mode")

    @loc_mode.setter
    def loc_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "loc_mode", value)

    @property
    @pulumi.getter
    def pos(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pos")

    @pos.setter
    def pos(self, value: pulumi.Input[str]):
        pulumi.set(self, "pos", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter
    def image(self) -> Optional[pulumi.Input['MediaWatermarkTemplateWatermarkImageArgs']]:
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: Optional[pulumi.Input['MediaWatermarkTemplateWatermarkImageArgs']]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input['MediaWatermarkTemplateWatermarkTextArgs']]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input['MediaWatermarkTemplateWatermarkTextArgs']]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class MediaWatermarkTemplateWatermarkImageArgs:
    def __init__(__self__, *,
                 background: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 transparency: pulumi.Input[str],
                 url: pulumi.Input[str],
                 height: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "background", background)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "transparency", transparency)
        pulumi.set(__self__, "url", url)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def background(self) -> pulumi.Input[str]:
        return pulumi.get(self, "background")

    @background.setter
    def background(self, value: pulumi.Input[str]):
        pulumi.set(self, "background", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def transparency(self) -> pulumi.Input[str]:
        return pulumi.get(self, "transparency")

    @transparency.setter
    def transparency(self, value: pulumi.Input[str]):
        pulumi.set(self, "transparency", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class MediaWatermarkTemplateWatermarkTextArgs:
    def __init__(__self__, *,
                 font_color: pulumi.Input[str],
                 font_size: pulumi.Input[str],
                 font_type: pulumi.Input[str],
                 text: pulumi.Input[str],
                 transparency: pulumi.Input[str]):
        pulumi.set(__self__, "font_color", font_color)
        pulumi.set(__self__, "font_size", font_size)
        pulumi.set(__self__, "font_type", font_type)
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "transparency", transparency)

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "font_color")

    @font_color.setter
    def font_color(self, value: pulumi.Input[str]):
        pulumi.set(self, "font_color", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> pulumi.Input[str]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: pulumi.Input[str]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "font_type")

    @font_type.setter
    def font_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "font_type", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def transparency(self) -> pulumi.Input[str]:
        return pulumi.get(self, "transparency")

    @transparency.setter
    def transparency(self, value: pulumi.Input[str]):
        pulumi.set(self, "transparency", value)


