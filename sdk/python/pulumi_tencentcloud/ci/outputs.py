# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'MediaAnimationTemplateContainer',
    'MediaAnimationTemplateTimeInterval',
    'MediaAnimationTemplateVideo',
    'MediaConcatTemplateConcatTemplate',
    'MediaConcatTemplateConcatTemplateAudio',
    'MediaConcatTemplateConcatTemplateAudioMix',
    'MediaConcatTemplateConcatTemplateAudioMixEffectConfig',
    'MediaConcatTemplateConcatTemplateConcatFragment',
    'MediaConcatTemplateConcatTemplateContainer',
    'MediaConcatTemplateConcatTemplateVideo',
    'MediaPicProcessTemplatePicProcess',
    'MediaSmartCoverTemplateSmartCover',
    'MediaSnapshotTemplateSnapshot',
    'MediaSnapshotTemplateSnapshotSpriteSnapshotConfig',
    'MediaSpeechRecognitionTemplateSpeechRecognition',
    'MediaTranscodeProTemplateAudio',
    'MediaTranscodeProTemplateContainer',
    'MediaTranscodeProTemplateContainerClipConfig',
    'MediaTranscodeProTemplateTimeInterval',
    'MediaTranscodeProTemplateTransConfig',
    'MediaTranscodeProTemplateVideo',
    'MediaTranscodeTemplateAudio',
    'MediaTranscodeTemplateAudioMix',
    'MediaTranscodeTemplateAudioMixEffectConfig',
    'MediaTranscodeTemplateContainer',
    'MediaTranscodeTemplateContainerClipConfig',
    'MediaTranscodeTemplateTimeInterval',
    'MediaTranscodeTemplateTransConfig',
    'MediaTranscodeTemplateTransConfigHlsEncrypt',
    'MediaTranscodeTemplateVideo',
    'MediaVideoMontageTemplateAudio',
    'MediaVideoMontageTemplateAudioMix',
    'MediaVideoMontageTemplateAudioMixEffectConfig',
    'MediaVideoMontageTemplateContainer',
    'MediaVideoMontageTemplateVideo',
    'MediaVideoProcessTemplateColorEnhance',
    'MediaVideoProcessTemplateMsSharpen',
    'MediaVoiceSeparateTemplateAudioConfig',
    'MediaWatermarkTemplateWatermark',
    'MediaWatermarkTemplateWatermarkImage',
    'MediaWatermarkTemplateWatermarkText',
]

@pulumi.output_type
class MediaAnimationTemplateContainer(dict):
    def __init__(__self__, *,
                 format: str):
        pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")


@pulumi.output_type
class MediaAnimationTemplateTimeInterval(dict):
    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 start: Optional[str] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")


@pulumi.output_type
class MediaAnimationTemplateVideo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "animateFramesPerSecond":
            suggest = "animate_frames_per_second"
        elif key == "animateOnlyKeepKeyFrame":
            suggest = "animate_only_keep_key_frame"
        elif key == "animateTimeIntervalOfFrame":
            suggest = "animate_time_interval_of_frame"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaAnimationTemplateVideo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaAnimationTemplateVideo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaAnimationTemplateVideo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 codec: str,
                 animate_frames_per_second: Optional[str] = None,
                 animate_only_keep_key_frame: Optional[str] = None,
                 animate_time_interval_of_frame: Optional[str] = None,
                 fps: Optional[str] = None,
                 height: Optional[str] = None,
                 quality: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "codec", codec)
        if animate_frames_per_second is not None:
            pulumi.set(__self__, "animate_frames_per_second", animate_frames_per_second)
        if animate_only_keep_key_frame is not None:
            pulumi.set(__self__, "animate_only_keep_key_frame", animate_only_keep_key_frame)
        if animate_time_interval_of_frame is not None:
            pulumi.set(__self__, "animate_time_interval_of_frame", animate_time_interval_of_frame)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if quality is not None:
            pulumi.set(__self__, "quality", quality)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="animateFramesPerSecond")
    def animate_frames_per_second(self) -> Optional[str]:
        return pulumi.get(self, "animate_frames_per_second")

    @property
    @pulumi.getter(name="animateOnlyKeepKeyFrame")
    def animate_only_keep_key_frame(self) -> Optional[str]:
        return pulumi.get(self, "animate_only_keep_key_frame")

    @property
    @pulumi.getter(name="animateTimeIntervalOfFrame")
    def animate_time_interval_of_frame(self) -> Optional[str]:
        return pulumi.get(self, "animate_time_interval_of_frame")

    @property
    @pulumi.getter
    def fps(self) -> Optional[str]:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def quality(self) -> Optional[str]:
        return pulumi.get(self, "quality")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class MediaConcatTemplateConcatTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "concatFragments":
            suggest = "concat_fragments"
        elif key == "audioMixes":
            suggest = "audio_mixes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaConcatTemplateConcatTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaConcatTemplateConcatTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaConcatTemplateConcatTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 concat_fragments: Sequence['outputs.MediaConcatTemplateConcatTemplateConcatFragment'],
                 container: 'outputs.MediaConcatTemplateConcatTemplateContainer',
                 audio: Optional['outputs.MediaConcatTemplateConcatTemplateAudio'] = None,
                 audio_mixes: Optional[Sequence['outputs.MediaConcatTemplateConcatTemplateAudioMix']] = None,
                 video: Optional['outputs.MediaConcatTemplateConcatTemplateVideo'] = None):
        pulumi.set(__self__, "concat_fragments", concat_fragments)
        pulumi.set(__self__, "container", container)
        if audio is not None:
            pulumi.set(__self__, "audio", audio)
        if audio_mixes is not None:
            pulumi.set(__self__, "audio_mixes", audio_mixes)
        if video is not None:
            pulumi.set(__self__, "video", video)

    @property
    @pulumi.getter(name="concatFragments")
    def concat_fragments(self) -> Sequence['outputs.MediaConcatTemplateConcatTemplateConcatFragment']:
        return pulumi.get(self, "concat_fragments")

    @property
    @pulumi.getter
    def container(self) -> 'outputs.MediaConcatTemplateConcatTemplateContainer':
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def audio(self) -> Optional['outputs.MediaConcatTemplateConcatTemplateAudio']:
        return pulumi.get(self, "audio")

    @property
    @pulumi.getter(name="audioMixes")
    def audio_mixes(self) -> Optional[Sequence['outputs.MediaConcatTemplateConcatTemplateAudioMix']]:
        return pulumi.get(self, "audio_mixes")

    @property
    @pulumi.getter
    def video(self) -> Optional['outputs.MediaConcatTemplateConcatTemplateVideo']:
        return pulumi.get(self, "video")


@pulumi.output_type
class MediaConcatTemplateConcatTemplateAudio(dict):
    def __init__(__self__, *,
                 codec: str,
                 bitrate: Optional[str] = None,
                 channels: Optional[str] = None,
                 samplerate: Optional[str] = None):
        pulumi.set(__self__, "codec", codec)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if samplerate is not None:
            pulumi.set(__self__, "samplerate", samplerate)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[str]:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def channels(self) -> Optional[str]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def samplerate(self) -> Optional[str]:
        return pulumi.get(self, "samplerate")


@pulumi.output_type
class MediaConcatTemplateConcatTemplateAudioMix(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioSource":
            suggest = "audio_source"
        elif key == "effectConfig":
            suggest = "effect_config"
        elif key == "mixMode":
            suggest = "mix_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaConcatTemplateConcatTemplateAudioMix. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaConcatTemplateConcatTemplateAudioMix.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaConcatTemplateConcatTemplateAudioMix.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio_source: str,
                 effect_config: Optional['outputs.MediaConcatTemplateConcatTemplateAudioMixEffectConfig'] = None,
                 mix_mode: Optional[str] = None,
                 replace: Optional[str] = None):
        pulumi.set(__self__, "audio_source", audio_source)
        if effect_config is not None:
            pulumi.set(__self__, "effect_config", effect_config)
        if mix_mode is not None:
            pulumi.set(__self__, "mix_mode", mix_mode)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="audioSource")
    def audio_source(self) -> str:
        return pulumi.get(self, "audio_source")

    @property
    @pulumi.getter(name="effectConfig")
    def effect_config(self) -> Optional['outputs.MediaConcatTemplateConcatTemplateAudioMixEffectConfig']:
        return pulumi.get(self, "effect_config")

    @property
    @pulumi.getter(name="mixMode")
    def mix_mode(self) -> Optional[str]:
        return pulumi.get(self, "mix_mode")

    @property
    @pulumi.getter
    def replace(self) -> Optional[str]:
        return pulumi.get(self, "replace")


@pulumi.output_type
class MediaConcatTemplateConcatTemplateAudioMixEffectConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bgmFadeTime":
            suggest = "bgm_fade_time"
        elif key == "enableBgmFade":
            suggest = "enable_bgm_fade"
        elif key == "enableEndFadeout":
            suggest = "enable_end_fadeout"
        elif key == "enableStartFadein":
            suggest = "enable_start_fadein"
        elif key == "endFadeoutTime":
            suggest = "end_fadeout_time"
        elif key == "startFadeinTime":
            suggest = "start_fadein_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaConcatTemplateConcatTemplateAudioMixEffectConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaConcatTemplateConcatTemplateAudioMixEffectConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaConcatTemplateConcatTemplateAudioMixEffectConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bgm_fade_time: Optional[str] = None,
                 enable_bgm_fade: Optional[str] = None,
                 enable_end_fadeout: Optional[str] = None,
                 enable_start_fadein: Optional[str] = None,
                 end_fadeout_time: Optional[str] = None,
                 start_fadein_time: Optional[str] = None):
        if bgm_fade_time is not None:
            pulumi.set(__self__, "bgm_fade_time", bgm_fade_time)
        if enable_bgm_fade is not None:
            pulumi.set(__self__, "enable_bgm_fade", enable_bgm_fade)
        if enable_end_fadeout is not None:
            pulumi.set(__self__, "enable_end_fadeout", enable_end_fadeout)
        if enable_start_fadein is not None:
            pulumi.set(__self__, "enable_start_fadein", enable_start_fadein)
        if end_fadeout_time is not None:
            pulumi.set(__self__, "end_fadeout_time", end_fadeout_time)
        if start_fadein_time is not None:
            pulumi.set(__self__, "start_fadein_time", start_fadein_time)

    @property
    @pulumi.getter(name="bgmFadeTime")
    def bgm_fade_time(self) -> Optional[str]:
        return pulumi.get(self, "bgm_fade_time")

    @property
    @pulumi.getter(name="enableBgmFade")
    def enable_bgm_fade(self) -> Optional[str]:
        return pulumi.get(self, "enable_bgm_fade")

    @property
    @pulumi.getter(name="enableEndFadeout")
    def enable_end_fadeout(self) -> Optional[str]:
        return pulumi.get(self, "enable_end_fadeout")

    @property
    @pulumi.getter(name="enableStartFadein")
    def enable_start_fadein(self) -> Optional[str]:
        return pulumi.get(self, "enable_start_fadein")

    @property
    @pulumi.getter(name="endFadeoutTime")
    def end_fadeout_time(self) -> Optional[str]:
        return pulumi.get(self, "end_fadeout_time")

    @property
    @pulumi.getter(name="startFadeinTime")
    def start_fadein_time(self) -> Optional[str]:
        return pulumi.get(self, "start_fadein_time")


@pulumi.output_type
class MediaConcatTemplateConcatTemplateConcatFragment(dict):
    def __init__(__self__, *,
                 mode: str,
                 url: str):
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class MediaConcatTemplateConcatTemplateContainer(dict):
    def __init__(__self__, *,
                 format: str):
        pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")


@pulumi.output_type
class MediaConcatTemplateConcatTemplateVideo(dict):
    def __init__(__self__, *,
                 codec: str,
                 bitrate: Optional[str] = None,
                 crf: Optional[str] = None,
                 fps: Optional[str] = None,
                 height: Optional[str] = None,
                 remove: Optional[str] = None,
                 rotate: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "codec", codec)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if crf is not None:
            pulumi.set(__self__, "crf", crf)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if rotate is not None:
            pulumi.set(__self__, "rotate", rotate)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[str]:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def crf(self) -> Optional[str]:
        return pulumi.get(self, "crf")

    @property
    @pulumi.getter
    def fps(self) -> Optional[str]:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def remove(self) -> Optional[str]:
        return pulumi.get(self, "remove")

    @property
    @pulumi.getter
    def rotate(self) -> Optional[str]:
        return pulumi.get(self, "rotate")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class MediaPicProcessTemplatePicProcess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "processRule":
            suggest = "process_rule"
        elif key == "isPicInfo":
            suggest = "is_pic_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaPicProcessTemplatePicProcess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaPicProcessTemplatePicProcess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaPicProcessTemplatePicProcess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 process_rule: str,
                 is_pic_info: Optional[str] = None):
        pulumi.set(__self__, "process_rule", process_rule)
        if is_pic_info is not None:
            pulumi.set(__self__, "is_pic_info", is_pic_info)

    @property
    @pulumi.getter(name="processRule")
    def process_rule(self) -> str:
        return pulumi.get(self, "process_rule")

    @property
    @pulumi.getter(name="isPicInfo")
    def is_pic_info(self) -> Optional[str]:
        return pulumi.get(self, "is_pic_info")


@pulumi.output_type
class MediaSmartCoverTemplateSmartCover(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteDuplicates":
            suggest = "delete_duplicates"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaSmartCoverTemplateSmartCover. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaSmartCoverTemplateSmartCover.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaSmartCoverTemplateSmartCover.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format: str,
                 count: Optional[str] = None,
                 delete_duplicates: Optional[str] = None,
                 height: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "format", format)
        if count is not None:
            pulumi.set(__self__, "count", count)
        if delete_duplicates is not None:
            pulumi.set(__self__, "delete_duplicates", delete_duplicates)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def count(self) -> Optional[str]:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="deleteDuplicates")
    def delete_duplicates(self) -> Optional[str]:
        return pulumi.get(self, "delete_duplicates")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class MediaSnapshotTemplateSnapshot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blackLevel":
            suggest = "black_level"
        elif key == "ciParam":
            suggest = "ci_param"
        elif key == "isCheckBlack":
            suggest = "is_check_black"
        elif key == "isCheckCount":
            suggest = "is_check_count"
        elif key == "pixelBlackThreshold":
            suggest = "pixel_black_threshold"
        elif key == "snapshotOutMode":
            suggest = "snapshot_out_mode"
        elif key == "spriteSnapshotConfig":
            suggest = "sprite_snapshot_config"
        elif key == "timeInterval":
            suggest = "time_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaSnapshotTemplateSnapshot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaSnapshotTemplateSnapshot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaSnapshotTemplateSnapshot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: str,
                 black_level: Optional[str] = None,
                 ci_param: Optional[str] = None,
                 height: Optional[str] = None,
                 is_check_black: Optional[str] = None,
                 is_check_count: Optional[str] = None,
                 mode: Optional[str] = None,
                 pixel_black_threshold: Optional[str] = None,
                 snapshot_out_mode: Optional[str] = None,
                 sprite_snapshot_config: Optional['outputs.MediaSnapshotTemplateSnapshotSpriteSnapshotConfig'] = None,
                 start: Optional[str] = None,
                 time_interval: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "count", count)
        if black_level is not None:
            pulumi.set(__self__, "black_level", black_level)
        if ci_param is not None:
            pulumi.set(__self__, "ci_param", ci_param)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if is_check_black is not None:
            pulumi.set(__self__, "is_check_black", is_check_black)
        if is_check_count is not None:
            pulumi.set(__self__, "is_check_count", is_check_count)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if pixel_black_threshold is not None:
            pulumi.set(__self__, "pixel_black_threshold", pixel_black_threshold)
        if snapshot_out_mode is not None:
            pulumi.set(__self__, "snapshot_out_mode", snapshot_out_mode)
        if sprite_snapshot_config is not None:
            pulumi.set(__self__, "sprite_snapshot_config", sprite_snapshot_config)
        if start is not None:
            pulumi.set(__self__, "start", start)
        if time_interval is not None:
            pulumi.set(__self__, "time_interval", time_interval)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def count(self) -> str:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="blackLevel")
    def black_level(self) -> Optional[str]:
        return pulumi.get(self, "black_level")

    @property
    @pulumi.getter(name="ciParam")
    def ci_param(self) -> Optional[str]:
        return pulumi.get(self, "ci_param")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="isCheckBlack")
    def is_check_black(self) -> Optional[str]:
        return pulumi.get(self, "is_check_black")

    @property
    @pulumi.getter(name="isCheckCount")
    def is_check_count(self) -> Optional[str]:
        return pulumi.get(self, "is_check_count")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="pixelBlackThreshold")
    def pixel_black_threshold(self) -> Optional[str]:
        return pulumi.get(self, "pixel_black_threshold")

    @property
    @pulumi.getter(name="snapshotOutMode")
    def snapshot_out_mode(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_out_mode")

    @property
    @pulumi.getter(name="spriteSnapshotConfig")
    def sprite_snapshot_config(self) -> Optional['outputs.MediaSnapshotTemplateSnapshotSpriteSnapshotConfig']:
        return pulumi.get(self, "sprite_snapshot_config")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")

    @property
    @pulumi.getter(name="timeInterval")
    def time_interval(self) -> Optional[str]:
        return pulumi.get(self, "time_interval")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class MediaSnapshotTemplateSnapshotSpriteSnapshotConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cellHeight":
            suggest = "cell_height"
        elif key == "cellWidth":
            suggest = "cell_width"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaSnapshotTemplateSnapshotSpriteSnapshotConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaSnapshotTemplateSnapshotSpriteSnapshotConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaSnapshotTemplateSnapshotSpriteSnapshotConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: str,
                 columns: str,
                 lines: str,
                 cell_height: Optional[str] = None,
                 cell_width: Optional[str] = None,
                 margin: Optional[str] = None,
                 padding: Optional[str] = None):
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "lines", lines)
        if cell_height is not None:
            pulumi.set(__self__, "cell_height", cell_height)
        if cell_width is not None:
            pulumi.set(__self__, "cell_width", cell_width)
        if margin is not None:
            pulumi.set(__self__, "margin", margin)
        if padding is not None:
            pulumi.set(__self__, "padding", padding)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def columns(self) -> str:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def lines(self) -> str:
        return pulumi.get(self, "lines")

    @property
    @pulumi.getter(name="cellHeight")
    def cell_height(self) -> Optional[str]:
        return pulumi.get(self, "cell_height")

    @property
    @pulumi.getter(name="cellWidth")
    def cell_width(self) -> Optional[str]:
        return pulumi.get(self, "cell_width")

    @property
    @pulumi.getter
    def margin(self) -> Optional[str]:
        return pulumi.get(self, "margin")

    @property
    @pulumi.getter
    def padding(self) -> Optional[str]:
        return pulumi.get(self, "padding")


@pulumi.output_type
class MediaSpeechRecognitionTemplateSpeechRecognition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "channelNum":
            suggest = "channel_num"
        elif key == "engineModelType":
            suggest = "engine_model_type"
        elif key == "convertNumMode":
            suggest = "convert_num_mode"
        elif key == "filterDirty":
            suggest = "filter_dirty"
        elif key == "filterModal":
            suggest = "filter_modal"
        elif key == "filterPunc":
            suggest = "filter_punc"
        elif key == "outputFileType":
            suggest = "output_file_type"
        elif key == "resTextFormat":
            suggest = "res_text_format"
        elif key == "speakerDiarization":
            suggest = "speaker_diarization"
        elif key == "speakerNumber":
            suggest = "speaker_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaSpeechRecognitionTemplateSpeechRecognition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaSpeechRecognitionTemplateSpeechRecognition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaSpeechRecognitionTemplateSpeechRecognition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel_num: str,
                 engine_model_type: str,
                 convert_num_mode: Optional[str] = None,
                 filter_dirty: Optional[str] = None,
                 filter_modal: Optional[str] = None,
                 filter_punc: Optional[str] = None,
                 output_file_type: Optional[str] = None,
                 res_text_format: Optional[str] = None,
                 speaker_diarization: Optional[str] = None,
                 speaker_number: Optional[str] = None):
        pulumi.set(__self__, "channel_num", channel_num)
        pulumi.set(__self__, "engine_model_type", engine_model_type)
        if convert_num_mode is not None:
            pulumi.set(__self__, "convert_num_mode", convert_num_mode)
        if filter_dirty is not None:
            pulumi.set(__self__, "filter_dirty", filter_dirty)
        if filter_modal is not None:
            pulumi.set(__self__, "filter_modal", filter_modal)
        if filter_punc is not None:
            pulumi.set(__self__, "filter_punc", filter_punc)
        if output_file_type is not None:
            pulumi.set(__self__, "output_file_type", output_file_type)
        if res_text_format is not None:
            pulumi.set(__self__, "res_text_format", res_text_format)
        if speaker_diarization is not None:
            pulumi.set(__self__, "speaker_diarization", speaker_diarization)
        if speaker_number is not None:
            pulumi.set(__self__, "speaker_number", speaker_number)

    @property
    @pulumi.getter(name="channelNum")
    def channel_num(self) -> str:
        return pulumi.get(self, "channel_num")

    @property
    @pulumi.getter(name="engineModelType")
    def engine_model_type(self) -> str:
        return pulumi.get(self, "engine_model_type")

    @property
    @pulumi.getter(name="convertNumMode")
    def convert_num_mode(self) -> Optional[str]:
        return pulumi.get(self, "convert_num_mode")

    @property
    @pulumi.getter(name="filterDirty")
    def filter_dirty(self) -> Optional[str]:
        return pulumi.get(self, "filter_dirty")

    @property
    @pulumi.getter(name="filterModal")
    def filter_modal(self) -> Optional[str]:
        return pulumi.get(self, "filter_modal")

    @property
    @pulumi.getter(name="filterPunc")
    def filter_punc(self) -> Optional[str]:
        return pulumi.get(self, "filter_punc")

    @property
    @pulumi.getter(name="outputFileType")
    def output_file_type(self) -> Optional[str]:
        return pulumi.get(self, "output_file_type")

    @property
    @pulumi.getter(name="resTextFormat")
    def res_text_format(self) -> Optional[str]:
        return pulumi.get(self, "res_text_format")

    @property
    @pulumi.getter(name="speakerDiarization")
    def speaker_diarization(self) -> Optional[str]:
        return pulumi.get(self, "speaker_diarization")

    @property
    @pulumi.getter(name="speakerNumber")
    def speaker_number(self) -> Optional[str]:
        return pulumi.get(self, "speaker_number")


@pulumi.output_type
class MediaTranscodeProTemplateAudio(dict):
    def __init__(__self__, *,
                 codec: str,
                 remove: Optional[str] = None):
        pulumi.set(__self__, "codec", codec)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def remove(self) -> Optional[str]:
        return pulumi.get(self, "remove")


@pulumi.output_type
class MediaTranscodeProTemplateContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clipConfig":
            suggest = "clip_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaTranscodeProTemplateContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaTranscodeProTemplateContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaTranscodeProTemplateContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format: str,
                 clip_config: Optional['outputs.MediaTranscodeProTemplateContainerClipConfig'] = None):
        pulumi.set(__self__, "format", format)
        if clip_config is not None:
            pulumi.set(__self__, "clip_config", clip_config)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="clipConfig")
    def clip_config(self) -> Optional['outputs.MediaTranscodeProTemplateContainerClipConfig']:
        return pulumi.get(self, "clip_config")


@pulumi.output_type
class MediaTranscodeProTemplateContainerClipConfig(dict):
    def __init__(__self__, *,
                 duration: Optional[str] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        return pulumi.get(self, "duration")


@pulumi.output_type
class MediaTranscodeProTemplateTimeInterval(dict):
    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 start: Optional[str] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")


@pulumi.output_type
class MediaTranscodeProTemplateTransConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adjDarMethod":
            suggest = "adj_dar_method"
        elif key == "audioBitrateAdjMethod":
            suggest = "audio_bitrate_adj_method"
        elif key == "deleteMetadata":
            suggest = "delete_metadata"
        elif key == "isCheckAudioBitrate":
            suggest = "is_check_audio_bitrate"
        elif key == "isCheckReso":
            suggest = "is_check_reso"
        elif key == "isCheckVideoBitrate":
            suggest = "is_check_video_bitrate"
        elif key == "isHdr2Sdr":
            suggest = "is_hdr2_sdr"
        elif key == "resoAdjMethod":
            suggest = "reso_adj_method"
        elif key == "videoBitrateAdjMethod":
            suggest = "video_bitrate_adj_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaTranscodeProTemplateTransConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaTranscodeProTemplateTransConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaTranscodeProTemplateTransConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adj_dar_method: Optional[str] = None,
                 audio_bitrate_adj_method: Optional[str] = None,
                 delete_metadata: Optional[str] = None,
                 is_check_audio_bitrate: Optional[str] = None,
                 is_check_reso: Optional[str] = None,
                 is_check_video_bitrate: Optional[str] = None,
                 is_hdr2_sdr: Optional[str] = None,
                 reso_adj_method: Optional[str] = None,
                 video_bitrate_adj_method: Optional[str] = None):
        if adj_dar_method is not None:
            pulumi.set(__self__, "adj_dar_method", adj_dar_method)
        if audio_bitrate_adj_method is not None:
            pulumi.set(__self__, "audio_bitrate_adj_method", audio_bitrate_adj_method)
        if delete_metadata is not None:
            pulumi.set(__self__, "delete_metadata", delete_metadata)
        if is_check_audio_bitrate is not None:
            pulumi.set(__self__, "is_check_audio_bitrate", is_check_audio_bitrate)
        if is_check_reso is not None:
            pulumi.set(__self__, "is_check_reso", is_check_reso)
        if is_check_video_bitrate is not None:
            pulumi.set(__self__, "is_check_video_bitrate", is_check_video_bitrate)
        if is_hdr2_sdr is not None:
            pulumi.set(__self__, "is_hdr2_sdr", is_hdr2_sdr)
        if reso_adj_method is not None:
            pulumi.set(__self__, "reso_adj_method", reso_adj_method)
        if video_bitrate_adj_method is not None:
            pulumi.set(__self__, "video_bitrate_adj_method", video_bitrate_adj_method)

    @property
    @pulumi.getter(name="adjDarMethod")
    def adj_dar_method(self) -> Optional[str]:
        return pulumi.get(self, "adj_dar_method")

    @property
    @pulumi.getter(name="audioBitrateAdjMethod")
    def audio_bitrate_adj_method(self) -> Optional[str]:
        return pulumi.get(self, "audio_bitrate_adj_method")

    @property
    @pulumi.getter(name="deleteMetadata")
    def delete_metadata(self) -> Optional[str]:
        return pulumi.get(self, "delete_metadata")

    @property
    @pulumi.getter(name="isCheckAudioBitrate")
    def is_check_audio_bitrate(self) -> Optional[str]:
        return pulumi.get(self, "is_check_audio_bitrate")

    @property
    @pulumi.getter(name="isCheckReso")
    def is_check_reso(self) -> Optional[str]:
        return pulumi.get(self, "is_check_reso")

    @property
    @pulumi.getter(name="isCheckVideoBitrate")
    def is_check_video_bitrate(self) -> Optional[str]:
        return pulumi.get(self, "is_check_video_bitrate")

    @property
    @pulumi.getter(name="isHdr2Sdr")
    def is_hdr2_sdr(self) -> Optional[str]:
        return pulumi.get(self, "is_hdr2_sdr")

    @property
    @pulumi.getter(name="resoAdjMethod")
    def reso_adj_method(self) -> Optional[str]:
        return pulumi.get(self, "reso_adj_method")

    @property
    @pulumi.getter(name="videoBitrateAdjMethod")
    def video_bitrate_adj_method(self) -> Optional[str]:
        return pulumi.get(self, "video_bitrate_adj_method")


@pulumi.output_type
class MediaTranscodeProTemplateVideo(dict):
    def __init__(__self__, *,
                 bitrate: Optional[str] = None,
                 codec: Optional[str] = None,
                 fps: Optional[str] = None,
                 height: Optional[str] = None,
                 interlaced: Optional[str] = None,
                 profile: Optional[str] = None,
                 rotate: Optional[str] = None,
                 width: Optional[str] = None):
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if interlaced is not None:
            pulumi.set(__self__, "interlaced", interlaced)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if rotate is not None:
            pulumi.set(__self__, "rotate", rotate)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[str]:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def codec(self) -> Optional[str]:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def fps(self) -> Optional[str]:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def interlaced(self) -> Optional[str]:
        return pulumi.get(self, "interlaced")

    @property
    @pulumi.getter
    def profile(self) -> Optional[str]:
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter
    def rotate(self) -> Optional[str]:
        return pulumi.get(self, "rotate")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class MediaTranscodeTemplateAudio(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keepTwoTracks":
            suggest = "keep_two_tracks"
        elif key == "sampleFormat":
            suggest = "sample_format"
        elif key == "switchTrack":
            suggest = "switch_track"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaTranscodeTemplateAudio. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaTranscodeTemplateAudio.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaTranscodeTemplateAudio.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: Optional[str] = None,
                 channels: Optional[str] = None,
                 codec: Optional[str] = None,
                 keep_two_tracks: Optional[str] = None,
                 remove: Optional[str] = None,
                 sample_format: Optional[str] = None,
                 samplerate: Optional[str] = None,
                 switch_track: Optional[str] = None):
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if keep_two_tracks is not None:
            pulumi.set(__self__, "keep_two_tracks", keep_two_tracks)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if sample_format is not None:
            pulumi.set(__self__, "sample_format", sample_format)
        if samplerate is not None:
            pulumi.set(__self__, "samplerate", samplerate)
        if switch_track is not None:
            pulumi.set(__self__, "switch_track", switch_track)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[str]:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def channels(self) -> Optional[str]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def codec(self) -> Optional[str]:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter(name="keepTwoTracks")
    def keep_two_tracks(self) -> Optional[str]:
        return pulumi.get(self, "keep_two_tracks")

    @property
    @pulumi.getter
    def remove(self) -> Optional[str]:
        return pulumi.get(self, "remove")

    @property
    @pulumi.getter(name="sampleFormat")
    def sample_format(self) -> Optional[str]:
        return pulumi.get(self, "sample_format")

    @property
    @pulumi.getter
    def samplerate(self) -> Optional[str]:
        return pulumi.get(self, "samplerate")

    @property
    @pulumi.getter(name="switchTrack")
    def switch_track(self) -> Optional[str]:
        return pulumi.get(self, "switch_track")


@pulumi.output_type
class MediaTranscodeTemplateAudioMix(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioSource":
            suggest = "audio_source"
        elif key == "effectConfig":
            suggest = "effect_config"
        elif key == "mixMode":
            suggest = "mix_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaTranscodeTemplateAudioMix. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaTranscodeTemplateAudioMix.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaTranscodeTemplateAudioMix.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio_source: str,
                 effect_config: Optional['outputs.MediaTranscodeTemplateAudioMixEffectConfig'] = None,
                 mix_mode: Optional[str] = None,
                 replace: Optional[str] = None):
        pulumi.set(__self__, "audio_source", audio_source)
        if effect_config is not None:
            pulumi.set(__self__, "effect_config", effect_config)
        if mix_mode is not None:
            pulumi.set(__self__, "mix_mode", mix_mode)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="audioSource")
    def audio_source(self) -> str:
        return pulumi.get(self, "audio_source")

    @property
    @pulumi.getter(name="effectConfig")
    def effect_config(self) -> Optional['outputs.MediaTranscodeTemplateAudioMixEffectConfig']:
        return pulumi.get(self, "effect_config")

    @property
    @pulumi.getter(name="mixMode")
    def mix_mode(self) -> Optional[str]:
        return pulumi.get(self, "mix_mode")

    @property
    @pulumi.getter
    def replace(self) -> Optional[str]:
        return pulumi.get(self, "replace")


@pulumi.output_type
class MediaTranscodeTemplateAudioMixEffectConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bgmFadeTime":
            suggest = "bgm_fade_time"
        elif key == "enableBgmFade":
            suggest = "enable_bgm_fade"
        elif key == "enableEndFadeout":
            suggest = "enable_end_fadeout"
        elif key == "enableStartFadein":
            suggest = "enable_start_fadein"
        elif key == "endFadeoutTime":
            suggest = "end_fadeout_time"
        elif key == "startFadeinTime":
            suggest = "start_fadein_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaTranscodeTemplateAudioMixEffectConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaTranscodeTemplateAudioMixEffectConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaTranscodeTemplateAudioMixEffectConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bgm_fade_time: Optional[str] = None,
                 enable_bgm_fade: Optional[str] = None,
                 enable_end_fadeout: Optional[str] = None,
                 enable_start_fadein: Optional[str] = None,
                 end_fadeout_time: Optional[str] = None,
                 start_fadein_time: Optional[str] = None):
        if bgm_fade_time is not None:
            pulumi.set(__self__, "bgm_fade_time", bgm_fade_time)
        if enable_bgm_fade is not None:
            pulumi.set(__self__, "enable_bgm_fade", enable_bgm_fade)
        if enable_end_fadeout is not None:
            pulumi.set(__self__, "enable_end_fadeout", enable_end_fadeout)
        if enable_start_fadein is not None:
            pulumi.set(__self__, "enable_start_fadein", enable_start_fadein)
        if end_fadeout_time is not None:
            pulumi.set(__self__, "end_fadeout_time", end_fadeout_time)
        if start_fadein_time is not None:
            pulumi.set(__self__, "start_fadein_time", start_fadein_time)

    @property
    @pulumi.getter(name="bgmFadeTime")
    def bgm_fade_time(self) -> Optional[str]:
        return pulumi.get(self, "bgm_fade_time")

    @property
    @pulumi.getter(name="enableBgmFade")
    def enable_bgm_fade(self) -> Optional[str]:
        return pulumi.get(self, "enable_bgm_fade")

    @property
    @pulumi.getter(name="enableEndFadeout")
    def enable_end_fadeout(self) -> Optional[str]:
        return pulumi.get(self, "enable_end_fadeout")

    @property
    @pulumi.getter(name="enableStartFadein")
    def enable_start_fadein(self) -> Optional[str]:
        return pulumi.get(self, "enable_start_fadein")

    @property
    @pulumi.getter(name="endFadeoutTime")
    def end_fadeout_time(self) -> Optional[str]:
        return pulumi.get(self, "end_fadeout_time")

    @property
    @pulumi.getter(name="startFadeinTime")
    def start_fadein_time(self) -> Optional[str]:
        return pulumi.get(self, "start_fadein_time")


@pulumi.output_type
class MediaTranscodeTemplateContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clipConfig":
            suggest = "clip_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaTranscodeTemplateContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaTranscodeTemplateContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaTranscodeTemplateContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 format: str,
                 clip_config: Optional['outputs.MediaTranscodeTemplateContainerClipConfig'] = None):
        pulumi.set(__self__, "format", format)
        if clip_config is not None:
            pulumi.set(__self__, "clip_config", clip_config)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="clipConfig")
    def clip_config(self) -> Optional['outputs.MediaTranscodeTemplateContainerClipConfig']:
        return pulumi.get(self, "clip_config")


@pulumi.output_type
class MediaTranscodeTemplateContainerClipConfig(dict):
    def __init__(__self__, *,
                 duration: Optional[str] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        return pulumi.get(self, "duration")


@pulumi.output_type
class MediaTranscodeTemplateTimeInterval(dict):
    def __init__(__self__, *,
                 duration: Optional[str] = None,
                 start: Optional[str] = None):
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def duration(self) -> Optional[str]:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        return pulumi.get(self, "start")


@pulumi.output_type
class MediaTranscodeTemplateTransConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adjDarMethod":
            suggest = "adj_dar_method"
        elif key == "audioBitrateAdjMethod":
            suggest = "audio_bitrate_adj_method"
        elif key == "deleteMetadata":
            suggest = "delete_metadata"
        elif key == "hlsEncrypt":
            suggest = "hls_encrypt"
        elif key == "isCheckAudioBitrate":
            suggest = "is_check_audio_bitrate"
        elif key == "isCheckReso":
            suggest = "is_check_reso"
        elif key == "isCheckVideoBitrate":
            suggest = "is_check_video_bitrate"
        elif key == "isHdr2Sdr":
            suggest = "is_hdr2_sdr"
        elif key == "resoAdjMethod":
            suggest = "reso_adj_method"
        elif key == "videoBitrateAdjMethod":
            suggest = "video_bitrate_adj_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaTranscodeTemplateTransConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaTranscodeTemplateTransConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaTranscodeTemplateTransConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adj_dar_method: Optional[str] = None,
                 audio_bitrate_adj_method: Optional[str] = None,
                 delete_metadata: Optional[str] = None,
                 hls_encrypt: Optional['outputs.MediaTranscodeTemplateTransConfigHlsEncrypt'] = None,
                 is_check_audio_bitrate: Optional[str] = None,
                 is_check_reso: Optional[str] = None,
                 is_check_video_bitrate: Optional[str] = None,
                 is_hdr2_sdr: Optional[str] = None,
                 reso_adj_method: Optional[str] = None,
                 video_bitrate_adj_method: Optional[str] = None):
        if adj_dar_method is not None:
            pulumi.set(__self__, "adj_dar_method", adj_dar_method)
        if audio_bitrate_adj_method is not None:
            pulumi.set(__self__, "audio_bitrate_adj_method", audio_bitrate_adj_method)
        if delete_metadata is not None:
            pulumi.set(__self__, "delete_metadata", delete_metadata)
        if hls_encrypt is not None:
            pulumi.set(__self__, "hls_encrypt", hls_encrypt)
        if is_check_audio_bitrate is not None:
            pulumi.set(__self__, "is_check_audio_bitrate", is_check_audio_bitrate)
        if is_check_reso is not None:
            pulumi.set(__self__, "is_check_reso", is_check_reso)
        if is_check_video_bitrate is not None:
            pulumi.set(__self__, "is_check_video_bitrate", is_check_video_bitrate)
        if is_hdr2_sdr is not None:
            pulumi.set(__self__, "is_hdr2_sdr", is_hdr2_sdr)
        if reso_adj_method is not None:
            pulumi.set(__self__, "reso_adj_method", reso_adj_method)
        if video_bitrate_adj_method is not None:
            pulumi.set(__self__, "video_bitrate_adj_method", video_bitrate_adj_method)

    @property
    @pulumi.getter(name="adjDarMethod")
    def adj_dar_method(self) -> Optional[str]:
        return pulumi.get(self, "adj_dar_method")

    @property
    @pulumi.getter(name="audioBitrateAdjMethod")
    def audio_bitrate_adj_method(self) -> Optional[str]:
        return pulumi.get(self, "audio_bitrate_adj_method")

    @property
    @pulumi.getter(name="deleteMetadata")
    def delete_metadata(self) -> Optional[str]:
        return pulumi.get(self, "delete_metadata")

    @property
    @pulumi.getter(name="hlsEncrypt")
    def hls_encrypt(self) -> Optional['outputs.MediaTranscodeTemplateTransConfigHlsEncrypt']:
        return pulumi.get(self, "hls_encrypt")

    @property
    @pulumi.getter(name="isCheckAudioBitrate")
    def is_check_audio_bitrate(self) -> Optional[str]:
        return pulumi.get(self, "is_check_audio_bitrate")

    @property
    @pulumi.getter(name="isCheckReso")
    def is_check_reso(self) -> Optional[str]:
        return pulumi.get(self, "is_check_reso")

    @property
    @pulumi.getter(name="isCheckVideoBitrate")
    def is_check_video_bitrate(self) -> Optional[str]:
        return pulumi.get(self, "is_check_video_bitrate")

    @property
    @pulumi.getter(name="isHdr2Sdr")
    def is_hdr2_sdr(self) -> Optional[str]:
        return pulumi.get(self, "is_hdr2_sdr")

    @property
    @pulumi.getter(name="resoAdjMethod")
    def reso_adj_method(self) -> Optional[str]:
        return pulumi.get(self, "reso_adj_method")

    @property
    @pulumi.getter(name="videoBitrateAdjMethod")
    def video_bitrate_adj_method(self) -> Optional[str]:
        return pulumi.get(self, "video_bitrate_adj_method")


@pulumi.output_type
class MediaTranscodeTemplateTransConfigHlsEncrypt(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHlsEncrypt":
            suggest = "is_hls_encrypt"
        elif key == "uriKey":
            suggest = "uri_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaTranscodeTemplateTransConfigHlsEncrypt. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaTranscodeTemplateTransConfigHlsEncrypt.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaTranscodeTemplateTransConfigHlsEncrypt.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_hls_encrypt: Optional[str] = None,
                 uri_key: Optional[str] = None):
        if is_hls_encrypt is not None:
            pulumi.set(__self__, "is_hls_encrypt", is_hls_encrypt)
        if uri_key is not None:
            pulumi.set(__self__, "uri_key", uri_key)

    @property
    @pulumi.getter(name="isHlsEncrypt")
    def is_hls_encrypt(self) -> Optional[str]:
        return pulumi.get(self, "is_hls_encrypt")

    @property
    @pulumi.getter(name="uriKey")
    def uri_key(self) -> Optional[str]:
        return pulumi.get(self, "uri_key")


@pulumi.output_type
class MediaTranscodeTemplateVideo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "longShortMode":
            suggest = "long_short_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaTranscodeTemplateVideo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaTranscodeTemplateVideo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaTranscodeTemplateVideo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bitrate: Optional[str] = None,
                 bufsize: Optional[str] = None,
                 codec: Optional[str] = None,
                 crf: Optional[str] = None,
                 fps: Optional[str] = None,
                 gop: Optional[str] = None,
                 height: Optional[str] = None,
                 long_short_mode: Optional[str] = None,
                 maxrate: Optional[str] = None,
                 pixfmt: Optional[str] = None,
                 preset: Optional[str] = None,
                 profile: Optional[str] = None,
                 remove: Optional[str] = None,
                 rotate: Optional[str] = None,
                 width: Optional[str] = None):
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if bufsize is not None:
            pulumi.set(__self__, "bufsize", bufsize)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if crf is not None:
            pulumi.set(__self__, "crf", crf)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if long_short_mode is not None:
            pulumi.set(__self__, "long_short_mode", long_short_mode)
        if maxrate is not None:
            pulumi.set(__self__, "maxrate", maxrate)
        if pixfmt is not None:
            pulumi.set(__self__, "pixfmt", pixfmt)
        if preset is not None:
            pulumi.set(__self__, "preset", preset)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if rotate is not None:
            pulumi.set(__self__, "rotate", rotate)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[str]:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def bufsize(self) -> Optional[str]:
        return pulumi.get(self, "bufsize")

    @property
    @pulumi.getter
    def codec(self) -> Optional[str]:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def crf(self) -> Optional[str]:
        return pulumi.get(self, "crf")

    @property
    @pulumi.getter
    def fps(self) -> Optional[str]:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter
    def gop(self) -> Optional[str]:
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="longShortMode")
    def long_short_mode(self) -> Optional[str]:
        return pulumi.get(self, "long_short_mode")

    @property
    @pulumi.getter
    def maxrate(self) -> Optional[str]:
        return pulumi.get(self, "maxrate")

    @property
    @pulumi.getter
    def pixfmt(self) -> Optional[str]:
        return pulumi.get(self, "pixfmt")

    @property
    @pulumi.getter
    def preset(self) -> Optional[str]:
        return pulumi.get(self, "preset")

    @property
    @pulumi.getter
    def profile(self) -> Optional[str]:
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter
    def remove(self) -> Optional[str]:
        return pulumi.get(self, "remove")

    @property
    @pulumi.getter
    def rotate(self) -> Optional[str]:
        return pulumi.get(self, "rotate")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class MediaVideoMontageTemplateAudio(dict):
    def __init__(__self__, *,
                 codec: str,
                 bitrate: Optional[str] = None,
                 channels: Optional[str] = None,
                 remove: Optional[str] = None,
                 samplerate: Optional[str] = None):
        pulumi.set(__self__, "codec", codec)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if samplerate is not None:
            pulumi.set(__self__, "samplerate", samplerate)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[str]:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def channels(self) -> Optional[str]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def remove(self) -> Optional[str]:
        return pulumi.get(self, "remove")

    @property
    @pulumi.getter
    def samplerate(self) -> Optional[str]:
        return pulumi.get(self, "samplerate")


@pulumi.output_type
class MediaVideoMontageTemplateAudioMix(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "audioSource":
            suggest = "audio_source"
        elif key == "effectConfig":
            suggest = "effect_config"
        elif key == "mixMode":
            suggest = "mix_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaVideoMontageTemplateAudioMix. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaVideoMontageTemplateAudioMix.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaVideoMontageTemplateAudioMix.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audio_source: str,
                 effect_config: Optional['outputs.MediaVideoMontageTemplateAudioMixEffectConfig'] = None,
                 mix_mode: Optional[str] = None,
                 replace: Optional[str] = None):
        pulumi.set(__self__, "audio_source", audio_source)
        if effect_config is not None:
            pulumi.set(__self__, "effect_config", effect_config)
        if mix_mode is not None:
            pulumi.set(__self__, "mix_mode", mix_mode)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter(name="audioSource")
    def audio_source(self) -> str:
        return pulumi.get(self, "audio_source")

    @property
    @pulumi.getter(name="effectConfig")
    def effect_config(self) -> Optional['outputs.MediaVideoMontageTemplateAudioMixEffectConfig']:
        return pulumi.get(self, "effect_config")

    @property
    @pulumi.getter(name="mixMode")
    def mix_mode(self) -> Optional[str]:
        return pulumi.get(self, "mix_mode")

    @property
    @pulumi.getter
    def replace(self) -> Optional[str]:
        return pulumi.get(self, "replace")


@pulumi.output_type
class MediaVideoMontageTemplateAudioMixEffectConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bgmFadeTime":
            suggest = "bgm_fade_time"
        elif key == "enableBgmFade":
            suggest = "enable_bgm_fade"
        elif key == "enableEndFadeout":
            suggest = "enable_end_fadeout"
        elif key == "enableStartFadein":
            suggest = "enable_start_fadein"
        elif key == "endFadeoutTime":
            suggest = "end_fadeout_time"
        elif key == "startFadeinTime":
            suggest = "start_fadein_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaVideoMontageTemplateAudioMixEffectConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaVideoMontageTemplateAudioMixEffectConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaVideoMontageTemplateAudioMixEffectConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bgm_fade_time: Optional[str] = None,
                 enable_bgm_fade: Optional[str] = None,
                 enable_end_fadeout: Optional[str] = None,
                 enable_start_fadein: Optional[str] = None,
                 end_fadeout_time: Optional[str] = None,
                 start_fadein_time: Optional[str] = None):
        if bgm_fade_time is not None:
            pulumi.set(__self__, "bgm_fade_time", bgm_fade_time)
        if enable_bgm_fade is not None:
            pulumi.set(__self__, "enable_bgm_fade", enable_bgm_fade)
        if enable_end_fadeout is not None:
            pulumi.set(__self__, "enable_end_fadeout", enable_end_fadeout)
        if enable_start_fadein is not None:
            pulumi.set(__self__, "enable_start_fadein", enable_start_fadein)
        if end_fadeout_time is not None:
            pulumi.set(__self__, "end_fadeout_time", end_fadeout_time)
        if start_fadein_time is not None:
            pulumi.set(__self__, "start_fadein_time", start_fadein_time)

    @property
    @pulumi.getter(name="bgmFadeTime")
    def bgm_fade_time(self) -> Optional[str]:
        return pulumi.get(self, "bgm_fade_time")

    @property
    @pulumi.getter(name="enableBgmFade")
    def enable_bgm_fade(self) -> Optional[str]:
        return pulumi.get(self, "enable_bgm_fade")

    @property
    @pulumi.getter(name="enableEndFadeout")
    def enable_end_fadeout(self) -> Optional[str]:
        return pulumi.get(self, "enable_end_fadeout")

    @property
    @pulumi.getter(name="enableStartFadein")
    def enable_start_fadein(self) -> Optional[str]:
        return pulumi.get(self, "enable_start_fadein")

    @property
    @pulumi.getter(name="endFadeoutTime")
    def end_fadeout_time(self) -> Optional[str]:
        return pulumi.get(self, "end_fadeout_time")

    @property
    @pulumi.getter(name="startFadeinTime")
    def start_fadein_time(self) -> Optional[str]:
        return pulumi.get(self, "start_fadein_time")


@pulumi.output_type
class MediaVideoMontageTemplateContainer(dict):
    def __init__(__self__, *,
                 format: str):
        pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")


@pulumi.output_type
class MediaVideoMontageTemplateVideo(dict):
    def __init__(__self__, *,
                 codec: str,
                 bitrate: Optional[str] = None,
                 crf: Optional[str] = None,
                 fps: Optional[str] = None,
                 height: Optional[str] = None,
                 remove: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "codec", codec)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if crf is not None:
            pulumi.set(__self__, "crf", crf)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[str]:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def crf(self) -> Optional[str]:
        return pulumi.get(self, "crf")

    @property
    @pulumi.getter
    def fps(self) -> Optional[str]:
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def remove(self) -> Optional[str]:
        return pulumi.get(self, "remove")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class MediaVideoProcessTemplateColorEnhance(dict):
    def __init__(__self__, *,
                 contrast: Optional[str] = None,
                 correction: Optional[str] = None,
                 enable: Optional[str] = None,
                 saturation: Optional[str] = None):
        if contrast is not None:
            pulumi.set(__self__, "contrast", contrast)
        if correction is not None:
            pulumi.set(__self__, "correction", correction)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if saturation is not None:
            pulumi.set(__self__, "saturation", saturation)

    @property
    @pulumi.getter
    def contrast(self) -> Optional[str]:
        return pulumi.get(self, "contrast")

    @property
    @pulumi.getter
    def correction(self) -> Optional[str]:
        return pulumi.get(self, "correction")

    @property
    @pulumi.getter
    def enable(self) -> Optional[str]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def saturation(self) -> Optional[str]:
        return pulumi.get(self, "saturation")


@pulumi.output_type
class MediaVideoProcessTemplateMsSharpen(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sharpenLevel":
            suggest = "sharpen_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaVideoProcessTemplateMsSharpen. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaVideoProcessTemplateMsSharpen.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaVideoProcessTemplateMsSharpen.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable: Optional[str] = None,
                 sharpen_level: Optional[str] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if sharpen_level is not None:
            pulumi.set(__self__, "sharpen_level", sharpen_level)

    @property
    @pulumi.getter
    def enable(self) -> Optional[str]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="sharpenLevel")
    def sharpen_level(self) -> Optional[str]:
        return pulumi.get(self, "sharpen_level")


@pulumi.output_type
class MediaVoiceSeparateTemplateAudioConfig(dict):
    def __init__(__self__, *,
                 codec: str,
                 bitrate: Optional[str] = None,
                 channels: Optional[str] = None,
                 samplerate: Optional[str] = None):
        pulumi.set(__self__, "codec", codec)
        if bitrate is not None:
            pulumi.set(__self__, "bitrate", bitrate)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if samplerate is not None:
            pulumi.set(__self__, "samplerate", samplerate)

    @property
    @pulumi.getter
    def codec(self) -> str:
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def bitrate(self) -> Optional[str]:
        return pulumi.get(self, "bitrate")

    @property
    @pulumi.getter
    def channels(self) -> Optional[str]:
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def samplerate(self) -> Optional[str]:
        return pulumi.get(self, "samplerate")


@pulumi.output_type
class MediaWatermarkTemplateWatermark(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "locMode":
            suggest = "loc_mode"
        elif key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaWatermarkTemplateWatermark. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaWatermarkTemplateWatermark.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaWatermarkTemplateWatermark.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dx: str,
                 dy: str,
                 loc_mode: str,
                 pos: str,
                 type: str,
                 end_time: Optional[str] = None,
                 image: Optional['outputs.MediaWatermarkTemplateWatermarkImage'] = None,
                 start_time: Optional[str] = None,
                 text: Optional['outputs.MediaWatermarkTemplateWatermarkText'] = None):
        pulumi.set(__self__, "dx", dx)
        pulumi.set(__self__, "dy", dy)
        pulumi.set(__self__, "loc_mode", loc_mode)
        pulumi.set(__self__, "pos", pos)
        pulumi.set(__self__, "type", type)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if image is not None:
            pulumi.set(__self__, "image", image)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def dx(self) -> str:
        return pulumi.get(self, "dx")

    @property
    @pulumi.getter
    def dy(self) -> str:
        return pulumi.get(self, "dy")

    @property
    @pulumi.getter(name="locMode")
    def loc_mode(self) -> str:
        return pulumi.get(self, "loc_mode")

    @property
    @pulumi.getter
    def pos(self) -> str:
        return pulumi.get(self, "pos")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def image(self) -> Optional['outputs.MediaWatermarkTemplateWatermarkImage']:
        return pulumi.get(self, "image")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def text(self) -> Optional['outputs.MediaWatermarkTemplateWatermarkText']:
        return pulumi.get(self, "text")


@pulumi.output_type
class MediaWatermarkTemplateWatermarkImage(dict):
    def __init__(__self__, *,
                 background: str,
                 mode: str,
                 transparency: str,
                 url: str,
                 height: Optional[str] = None,
                 width: Optional[str] = None):
        pulumi.set(__self__, "background", background)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "transparency", transparency)
        pulumi.set(__self__, "url", url)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def background(self) -> str:
        return pulumi.get(self, "background")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def transparency(self) -> str:
        return pulumi.get(self, "transparency")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def height(self) -> Optional[str]:
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def width(self) -> Optional[str]:
        return pulumi.get(self, "width")


@pulumi.output_type
class MediaWatermarkTemplateWatermarkText(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fontColor":
            suggest = "font_color"
        elif key == "fontSize":
            suggest = "font_size"
        elif key == "fontType":
            suggest = "font_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MediaWatermarkTemplateWatermarkText. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MediaWatermarkTemplateWatermarkText.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MediaWatermarkTemplateWatermarkText.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 font_color: str,
                 font_size: str,
                 font_type: str,
                 text: str,
                 transparency: str):
        pulumi.set(__self__, "font_color", font_color)
        pulumi.set(__self__, "font_size", font_size)
        pulumi.set(__self__, "font_type", font_type)
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "transparency", transparency)

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> str:
        return pulumi.get(self, "font_color")

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> str:
        return pulumi.get(self, "font_size")

    @property
    @pulumi.getter(name="fontType")
    def font_type(self) -> str:
        return pulumi.get(self, "font_type")

    @property
    @pulumi.getter
    def text(self) -> str:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def transparency(self) -> str:
        return pulumi.get(self, "transparency")


