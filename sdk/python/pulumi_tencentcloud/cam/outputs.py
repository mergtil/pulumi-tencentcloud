# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetGroupMembershipsMembershipListResult',
    'GetGroupPolicyAttachmentsGroupPolicyAttachmentListResult',
    'GetGroupsGroupListResult',
    'GetPoliciesPolicyListResult',
    'GetRolePolicyAttachmentsRolePolicyAttachmentListResult',
    'GetRolesRoleListResult',
    'GetSamlProvidersProviderListResult',
    'GetUserPolicyAttachmentsUserPolicyAttachmentListResult',
    'GetUsersUserListResult',
]

@pulumi.output_type
class GetGroupMembershipsMembershipListResult(dict):
    def __init__(__self__, *,
                 group_id: str,
                 user_ids: Sequence[str],
                 user_names: Sequence[str]):
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "user_ids", user_ids)
        pulumi.set(__self__, "user_names", user_names)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Sequence[str]:
        warnings.warn("""It has been deprecated from version 1.59.5. Use `user_names` instead.""", DeprecationWarning)
        pulumi.log.warn("""user_ids is deprecated: It has been deprecated from version 1.59.5. Use `user_names` instead.""")

        return pulumi.get(self, "user_ids")

    @property
    @pulumi.getter(name="userNames")
    def user_names(self) -> Sequence[str]:
        return pulumi.get(self, "user_names")


@pulumi.output_type
class GetGroupPolicyAttachmentsGroupPolicyAttachmentListResult(dict):
    def __init__(__self__, *,
                 create_mode: int,
                 create_time: str,
                 group_id: str,
                 policy_id: str,
                 policy_name: str,
                 policy_type: str):
        pulumi.set(__self__, "create_mode", create_mode)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> int:
        return pulumi.get(self, "create_mode")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetGroupsGroupListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 group_id: str,
                 name: str,
                 remark: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "remark", remark)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")


@pulumi.output_type
class GetPoliciesPolicyListResult(dict):
    def __init__(__self__, *,
                 attachments: int,
                 create_mode: int,
                 create_time: str,
                 description: str,
                 name: str,
                 policy_id: str,
                 service_type: str,
                 type: int):
        pulumi.set(__self__, "attachments", attachments)
        pulumi.set(__self__, "create_mode", create_mode)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def attachments(self) -> int:
        return pulumi.get(self, "attachments")

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> int:
        return pulumi.get(self, "create_mode")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> str:
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter
    def type(self) -> int:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRolePolicyAttachmentsRolePolicyAttachmentListResult(dict):
    def __init__(__self__, *,
                 create_mode: int,
                 create_time: str,
                 policy_id: str,
                 policy_name: str,
                 policy_type: str,
                 role_id: str):
        pulumi.set(__self__, "create_mode", create_mode)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "role_id", role_id)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> int:
        return pulumi.get(self, "create_mode")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> str:
        return pulumi.get(self, "role_id")


@pulumi.output_type
class GetRolesRoleListResult(dict):
    def __init__(__self__, *,
                 console_login: bool,
                 create_time: str,
                 description: str,
                 document: str,
                 name: str,
                 role_id: str,
                 update_time: str):
        pulumi.set(__self__, "console_login", console_login)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "document", document)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="consoleLogin")
    def console_login(self) -> bool:
        return pulumi.get(self, "console_login")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def document(self) -> str:
        return pulumi.get(self, "document")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> str:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetSamlProvidersProviderListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 description: str,
                 modify_time: str,
                 name: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserPolicyAttachmentsUserPolicyAttachmentListResult(dict):
    def __init__(__self__, *,
                 create_mode: int,
                 create_time: str,
                 policy_id: str,
                 policy_name: str,
                 policy_type: str,
                 user_id: str,
                 user_name: str):
        pulumi.set(__self__, "create_mode", create_mode)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "policy_type", policy_type)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> int:
        return pulumi.get(self, "create_mode")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> str:
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        warnings.warn("""It has been deprecated from version 1.59.6. Use `user_name` instead.""", DeprecationWarning)
        pulumi.log.warn("""user_id is deprecated: It has been deprecated from version 1.59.6. Use `user_name` instead.""")

        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetUsersUserListResult(dict):
    def __init__(__self__, *,
                 country_code: str,
                 email: str,
                 name: str,
                 phone_num: str,
                 remark: str,
                 uid: int,
                 uin: int,
                 user_id: str,
                 console_login: Optional[bool] = None):
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phone_num", phone_num)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "uid", uid)
        pulumi.set(__self__, "uin", uin)
        pulumi.set(__self__, "user_id", user_id)
        if console_login is not None:
            pulumi.set(__self__, "console_login", console_login)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="phoneNum")
    def phone_num(self) -> str:
        return pulumi.get(self, "phone_num")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def uid(self) -> int:
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter
    def uin(self) -> int:
        return pulumi.get(self, "uin")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="consoleLogin")
    def console_login(self) -> Optional[bool]:
        return pulumi.get(self, "console_login")


