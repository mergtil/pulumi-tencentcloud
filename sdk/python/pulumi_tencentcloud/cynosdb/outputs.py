# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AccountPrivilegesDatabasePrivilege',
    'AccountPrivilegesTablePrivilege',
    'AuditLogFileFilter',
    'ClusterDatabasesUserHostPrivilege',
    'ClusterParamItem',
    'ClusterRoGroupAddr',
    'ClusterRoGroupInstance',
    'ClusterRwGroupAddr',
    'ClusterRwGroupInstance',
    'ExportInstanceErrorLogsErrorLogItemExport',
    'InstanceParamInstanceParamList',
    'ParamTemplateParamList',
    'ProxyEndPointInstanceWeight',
    'ProxyProxyZone',
    'ProxyRoInstance',
    'RollBackClusterRollbackDatabase',
    'RollBackClusterRollbackTable',
    'RollBackClusterRollbackTableTable',
    'GetAccountAllGrantPrivilegesAccountResult',
    'GetAccountAllGrantPrivilegesDatabasePrivilegeResult',
    'GetAccountAllGrantPrivilegesTablePrivilegeResult',
    'GetAccountsAccountSetResult',
    'GetAuditLogsFilterResult',
    'GetAuditLogsItemResult',
    'GetClusterDetailDatabasesDbInfoResult',
    'GetClusterDetailDatabasesDbInfoUserHostPrivilegeResult',
    'GetClusterInstanceGroupsInstanceGrpInfoListResult',
    'GetClusterInstanceGroupsInstanceGrpInfoListInstanceSetResult',
    'GetClusterInstanceGroupsInstanceGrpInfoListInstanceSetResourceTagResult',
    'GetClusterInstanceGroupsInstanceGrpInfoListInstanceSetTaskResult',
    'GetClusterParamLogsClusterParamLogResult',
    'GetClusterParamsItemResult',
    'GetClusterTableResult',
    'GetClustersClusterListResult',
    'GetDescribeInstanceErrorLogsErrorLogResult',
    'GetDescribeInstanceSlowQueriesBinlogResult',
    'GetInstanceSlowQueriesSlowQueryResult',
    'GetInstancesInstanceListResult',
    'GetParamTemplatesItemResult',
    'GetParamTemplatesItemParamInfoSetResult',
    'GetProjectSecurityGroupsGroupResult',
    'GetProjectSecurityGroupsGroupInboundResult',
    'GetProjectSecurityGroupsGroupOutboundResult',
    'GetProxyNodeFilterResult',
    'GetProxyNodeProxyNodeInfoResult',
    'GetResourcePackageListResourcePackageListResult',
    'GetResourcePackageListResourcePackageListBindInstanceInfoResult',
    'GetResourcePackageSaleSpecsDetailResult',
    'GetRollbackTimeRangeRollbackTimeRangeResult',
    'GetZoneConfigListResult',
    'GetZoneConfigListZoneStockInfoResult',
    'GetZoneRegionSetResult',
    'GetZoneRegionSetModuleResult',
    'GetZoneRegionSetZoneSetResult',
]

@pulumi.output_type
class AccountPrivilegesDatabasePrivilege(dict):
    def __init__(__self__, *,
                 db: str,
                 privileges: Sequence[str]):
        pulumi.set(__self__, "db", db)
        pulumi.set(__self__, "privileges", privileges)

    @property
    @pulumi.getter
    def db(self) -> str:
        return pulumi.get(self, "db")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        return pulumi.get(self, "privileges")


@pulumi.output_type
class AccountPrivilegesTablePrivilege(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccountPrivilegesTablePrivilege. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccountPrivilegesTablePrivilege.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccountPrivilegesTablePrivilege.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db: str,
                 privileges: Sequence[str],
                 table_name: str):
        pulumi.set(__self__, "db", db)
        pulumi.set(__self__, "privileges", privileges)
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter
    def db(self) -> str:
        return pulumi.get(self, "db")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        return pulumi.get(self, "table_name")


@pulumi.output_type
class AuditLogFileFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "affectRows":
            suggest = "affect_rows"
        elif key == "dbNames":
            suggest = "db_names"
        elif key == "execTime":
            suggest = "exec_time"
        elif key == "policyNames":
            suggest = "policy_names"
        elif key == "sentRows":
            suggest = "sent_rows"
        elif key == "sqlType":
            suggest = "sql_type"
        elif key == "sqlTypes":
            suggest = "sql_types"
        elif key == "tableNames":
            suggest = "table_names"
        elif key == "threadIds":
            suggest = "thread_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditLogFileFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditLogFileFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditLogFileFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 affect_rows: Optional[int] = None,
                 db_names: Optional[Sequence[str]] = None,
                 exec_time: Optional[int] = None,
                 hosts: Optional[Sequence[str]] = None,
                 policy_names: Optional[Sequence[str]] = None,
                 sent_rows: Optional[int] = None,
                 sql: Optional[str] = None,
                 sql_type: Optional[str] = None,
                 sql_types: Optional[Sequence[str]] = None,
                 sqls: Optional[Sequence[str]] = None,
                 table_names: Optional[Sequence[str]] = None,
                 thread_ids: Optional[Sequence[str]] = None,
                 users: Optional[Sequence[str]] = None):
        if affect_rows is not None:
            pulumi.set(__self__, "affect_rows", affect_rows)
        if db_names is not None:
            pulumi.set(__self__, "db_names", db_names)
        if exec_time is not None:
            pulumi.set(__self__, "exec_time", exec_time)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)
        if sent_rows is not None:
            pulumi.set(__self__, "sent_rows", sent_rows)
        if sql is not None:
            pulumi.set(__self__, "sql", sql)
        if sql_type is not None:
            pulumi.set(__self__, "sql_type", sql_type)
        if sql_types is not None:
            pulumi.set(__self__, "sql_types", sql_types)
        if sqls is not None:
            pulumi.set(__self__, "sqls", sqls)
        if table_names is not None:
            pulumi.set(__self__, "table_names", table_names)
        if thread_ids is not None:
            pulumi.set(__self__, "thread_ids", thread_ids)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="affectRows")
    def affect_rows(self) -> Optional[int]:
        return pulumi.get(self, "affect_rows")

    @property
    @pulumi.getter(name="dbNames")
    def db_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "db_names")

    @property
    @pulumi.getter(name="execTime")
    def exec_time(self) -> Optional[int]:
        return pulumi.get(self, "exec_time")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policy_names")

    @property
    @pulumi.getter(name="sentRows")
    def sent_rows(self) -> Optional[int]:
        return pulumi.get(self, "sent_rows")

    @property
    @pulumi.getter
    def sql(self) -> Optional[str]:
        return pulumi.get(self, "sql")

    @property
    @pulumi.getter(name="sqlType")
    def sql_type(self) -> Optional[str]:
        return pulumi.get(self, "sql_type")

    @property
    @pulumi.getter(name="sqlTypes")
    def sql_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "sql_types")

    @property
    @pulumi.getter
    def sqls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "sqls")

    @property
    @pulumi.getter(name="tableNames")
    def table_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "table_names")

    @property
    @pulumi.getter(name="threadIds")
    def thread_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "thread_ids")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "users")


@pulumi.output_type
class ClusterDatabasesUserHostPrivilege(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbHost":
            suggest = "db_host"
        elif key == "dbPrivilege":
            suggest = "db_privilege"
        elif key == "dbUserName":
            suggest = "db_user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterDatabasesUserHostPrivilege. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterDatabasesUserHostPrivilege.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterDatabasesUserHostPrivilege.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_host: str,
                 db_privilege: str,
                 db_user_name: str):
        pulumi.set(__self__, "db_host", db_host)
        pulumi.set(__self__, "db_privilege", db_privilege)
        pulumi.set(__self__, "db_user_name", db_user_name)

    @property
    @pulumi.getter(name="dbHost")
    def db_host(self) -> str:
        return pulumi.get(self, "db_host")

    @property
    @pulumi.getter(name="dbPrivilege")
    def db_privilege(self) -> str:
        return pulumi.get(self, "db_privilege")

    @property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> str:
        return pulumi.get(self, "db_user_name")


@pulumi.output_type
class ClusterParamItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentValue":
            suggest = "current_value"
        elif key == "oldValue":
            suggest = "old_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterParamItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterParamItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterParamItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_value: str,
                 name: str,
                 old_value: Optional[str] = None):
        pulumi.set(__self__, "current_value", current_value)
        pulumi.set(__self__, "name", name)
        if old_value is not None:
            pulumi.set(__self__, "old_value", old_value)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> str:
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> Optional[str]:
        return pulumi.get(self, "old_value")


@pulumi.output_type
class ClusterRoGroupAddr(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 port: Optional[int] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class ClusterRoGroupInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "instanceName":
            suggest = "instance_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterRoGroupInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterRoGroupInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterRoGroupInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: Optional[str] = None,
                 instance_name: Optional[str] = None):
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        return pulumi.get(self, "instance_name")


@pulumi.output_type
class ClusterRwGroupAddr(dict):
    def __init__(__self__, *,
                 ip: Optional[str] = None,
                 port: Optional[int] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


@pulumi.output_type
class ClusterRwGroupInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "instanceName":
            suggest = "instance_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterRwGroupInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterRwGroupInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterRwGroupInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: Optional[str] = None,
                 instance_name: Optional[str] = None):
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        return pulumi.get(self, "instance_name")


@pulumi.output_type
class ExportInstanceErrorLogsErrorLogItemExport(dict):
    def __init__(__self__, *,
                 content: Optional[str] = None,
                 level: Optional[str] = None,
                 timestamp: Optional[str] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[str]:
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class InstanceParamInstanceParamList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentValue":
            suggest = "current_value"
        elif key == "paramName":
            suggest = "param_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceParamInstanceParamList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceParamInstanceParamList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceParamInstanceParamList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_value: str,
                 param_name: str):
        pulumi.set(__self__, "current_value", current_value)
        pulumi.set(__self__, "param_name", param_name)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> str:
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        return pulumi.get(self, "param_name")


@pulumi.output_type
class ParamTemplateParamList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentValue":
            suggest = "current_value"
        elif key == "paramName":
            suggest = "param_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ParamTemplateParamList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ParamTemplateParamList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ParamTemplateParamList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_value: Optional[str] = None,
                 param_name: Optional[str] = None):
        if current_value is not None:
            pulumi.set(__self__, "current_value", current_value)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> Optional[str]:
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        return pulumi.get(self, "param_name")


@pulumi.output_type
class ProxyEndPointInstanceWeight(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxyEndPointInstanceWeight. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxyEndPointInstanceWeight.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxyEndPointInstanceWeight.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: str,
                 weight: int):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class ProxyProxyZone(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "proxyNodeCount":
            suggest = "proxy_node_count"
        elif key == "proxyNodeZone":
            suggest = "proxy_node_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxyProxyZone. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxyProxyZone.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxyProxyZone.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 proxy_node_count: Optional[int] = None,
                 proxy_node_zone: Optional[str] = None):
        if proxy_node_count is not None:
            pulumi.set(__self__, "proxy_node_count", proxy_node_count)
        if proxy_node_zone is not None:
            pulumi.set(__self__, "proxy_node_zone", proxy_node_zone)

    @property
    @pulumi.getter(name="proxyNodeCount")
    def proxy_node_count(self) -> Optional[int]:
        return pulumi.get(self, "proxy_node_count")

    @property
    @pulumi.getter(name="proxyNodeZone")
    def proxy_node_zone(self) -> Optional[str]:
        return pulumi.get(self, "proxy_node_zone")


@pulumi.output_type
class ProxyRoInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxyRoInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxyRoInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxyRoInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: Optional[str] = None,
                 weight: Optional[int] = None):
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class RollBackClusterRollbackDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newDatabase":
            suggest = "new_database"
        elif key == "oldDatabase":
            suggest = "old_database"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RollBackClusterRollbackDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RollBackClusterRollbackDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RollBackClusterRollbackDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_database: str,
                 old_database: str):
        pulumi.set(__self__, "new_database", new_database)
        pulumi.set(__self__, "old_database", old_database)

    @property
    @pulumi.getter(name="newDatabase")
    def new_database(self) -> str:
        return pulumi.get(self, "new_database")

    @property
    @pulumi.getter(name="oldDatabase")
    def old_database(self) -> str:
        return pulumi.get(self, "old_database")


@pulumi.output_type
class RollBackClusterRollbackTable(dict):
    def __init__(__self__, *,
                 database: str,
                 tables: Sequence['outputs.RollBackClusterRollbackTableTable']):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def tables(self) -> Sequence['outputs.RollBackClusterRollbackTableTable']:
        return pulumi.get(self, "tables")


@pulumi.output_type
class RollBackClusterRollbackTableTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newTable":
            suggest = "new_table"
        elif key == "oldTable":
            suggest = "old_table"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RollBackClusterRollbackTableTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RollBackClusterRollbackTableTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RollBackClusterRollbackTableTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_table: str,
                 old_table: str):
        pulumi.set(__self__, "new_table", new_table)
        pulumi.set(__self__, "old_table", old_table)

    @property
    @pulumi.getter(name="newTable")
    def new_table(self) -> str:
        return pulumi.get(self, "new_table")

    @property
    @pulumi.getter(name="oldTable")
    def old_table(self) -> str:
        return pulumi.get(self, "old_table")


@pulumi.output_type
class GetAccountAllGrantPrivilegesAccountResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 host: Optional[str] = None):
        pulumi.set(__self__, "account_name", account_name)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")


@pulumi.output_type
class GetAccountAllGrantPrivilegesDatabasePrivilegeResult(dict):
    def __init__(__self__, *,
                 db: str,
                 privileges: Sequence[str]):
        pulumi.set(__self__, "db", db)
        pulumi.set(__self__, "privileges", privileges)

    @property
    @pulumi.getter
    def db(self) -> str:
        return pulumi.get(self, "db")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        return pulumi.get(self, "privileges")


@pulumi.output_type
class GetAccountAllGrantPrivilegesTablePrivilegeResult(dict):
    def __init__(__self__, *,
                 db: str,
                 privileges: Sequence[str],
                 table_name: str):
        pulumi.set(__self__, "db", db)
        pulumi.set(__self__, "privileges", privileges)
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter
    def db(self) -> str:
        return pulumi.get(self, "db")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        return pulumi.get(self, "table_name")


@pulumi.output_type
class GetAccountsAccountSetResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 create_time: str,
                 description: str,
                 host: str,
                 max_user_connections: int,
                 update_time: str):
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "max_user_connections", max_user_connections)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="maxUserConnections")
    def max_user_connections(self) -> int:
        return pulumi.get(self, "max_user_connections")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetAuditLogsFilterResult(dict):
    def __init__(__self__, *,
                 affect_rows: Optional[int] = None,
                 db_names: Optional[Sequence[str]] = None,
                 exec_time: Optional[int] = None,
                 hosts: Optional[Sequence[str]] = None,
                 policy_names: Optional[Sequence[str]] = None,
                 sent_rows: Optional[int] = None,
                 sql: Optional[str] = None,
                 sql_type: Optional[str] = None,
                 sql_types: Optional[Sequence[str]] = None,
                 sqls: Optional[Sequence[str]] = None,
                 table_names: Optional[Sequence[str]] = None,
                 thread_ids: Optional[Sequence[str]] = None,
                 users: Optional[Sequence[str]] = None):
        if affect_rows is not None:
            pulumi.set(__self__, "affect_rows", affect_rows)
        if db_names is not None:
            pulumi.set(__self__, "db_names", db_names)
        if exec_time is not None:
            pulumi.set(__self__, "exec_time", exec_time)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)
        if sent_rows is not None:
            pulumi.set(__self__, "sent_rows", sent_rows)
        if sql is not None:
            pulumi.set(__self__, "sql", sql)
        if sql_type is not None:
            pulumi.set(__self__, "sql_type", sql_type)
        if sql_types is not None:
            pulumi.set(__self__, "sql_types", sql_types)
        if sqls is not None:
            pulumi.set(__self__, "sqls", sqls)
        if table_names is not None:
            pulumi.set(__self__, "table_names", table_names)
        if thread_ids is not None:
            pulumi.set(__self__, "thread_ids", thread_ids)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="affectRows")
    def affect_rows(self) -> Optional[int]:
        return pulumi.get(self, "affect_rows")

    @property
    @pulumi.getter(name="dbNames")
    def db_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "db_names")

    @property
    @pulumi.getter(name="execTime")
    def exec_time(self) -> Optional[int]:
        return pulumi.get(self, "exec_time")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policy_names")

    @property
    @pulumi.getter(name="sentRows")
    def sent_rows(self) -> Optional[int]:
        return pulumi.get(self, "sent_rows")

    @property
    @pulumi.getter
    def sql(self) -> Optional[str]:
        return pulumi.get(self, "sql")

    @property
    @pulumi.getter(name="sqlType")
    def sql_type(self) -> Optional[str]:
        return pulumi.get(self, "sql_type")

    @property
    @pulumi.getter(name="sqlTypes")
    def sql_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "sql_types")

    @property
    @pulumi.getter
    def sqls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "sqls")

    @property
    @pulumi.getter(name="tableNames")
    def table_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "table_names")

    @property
    @pulumi.getter(name="threadIds")
    def thread_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "thread_ids")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "users")


@pulumi.output_type
class GetAuditLogsItemResult(dict):
    def __init__(__self__, *,
                 affect_rows: int,
                 db_name: str,
                 err_code: int,
                 exec_time: int,
                 host: str,
                 instance_name: str,
                 policy_name: str,
                 sent_rows: int,
                 sql: str,
                 sql_type: str,
                 table_name: str,
                 thread_id: int,
                 timestamp: str,
                 user: str):
        pulumi.set(__self__, "affect_rows", affect_rows)
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "err_code", err_code)
        pulumi.set(__self__, "exec_time", exec_time)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "sent_rows", sent_rows)
        pulumi.set(__self__, "sql", sql)
        pulumi.set(__self__, "sql_type", sql_type)
        pulumi.set(__self__, "table_name", table_name)
        pulumi.set(__self__, "thread_id", thread_id)
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="affectRows")
    def affect_rows(self) -> int:
        return pulumi.get(self, "affect_rows")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="errCode")
    def err_code(self) -> int:
        return pulumi.get(self, "err_code")

    @property
    @pulumi.getter(name="execTime")
    def exec_time(self) -> int:
        return pulumi.get(self, "exec_time")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="sentRows")
    def sent_rows(self) -> int:
        return pulumi.get(self, "sent_rows")

    @property
    @pulumi.getter
    def sql(self) -> str:
        return pulumi.get(self, "sql")

    @property
    @pulumi.getter(name="sqlType")
    def sql_type(self) -> str:
        return pulumi.get(self, "sql_type")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="threadId")
    def thread_id(self) -> int:
        return pulumi.get(self, "thread_id")

    @property
    @pulumi.getter
    def timestamp(self) -> str:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


@pulumi.output_type
class GetClusterDetailDatabasesDbInfoResult(dict):
    def __init__(__self__, *,
                 app_id: int,
                 character_set: str,
                 cluster_id: str,
                 collate_rule: str,
                 create_time: str,
                 db_id: int,
                 db_name: str,
                 description: str,
                 status: str,
                 uin: str,
                 update_time: str,
                 user_host_privileges: Sequence['outputs.GetClusterDetailDatabasesDbInfoUserHostPrivilegeResult']):
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "character_set", character_set)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "collate_rule", collate_rule)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "db_id", db_id)
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "uin", uin)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "user_host_privileges", user_host_privileges)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> int:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> str:
        return pulumi.get(self, "character_set")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="collateRule")
    def collate_rule(self) -> str:
        return pulumi.get(self, "collate_rule")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dbId")
    def db_id(self) -> int:
        return pulumi.get(self, "db_id")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def uin(self) -> str:
        return pulumi.get(self, "uin")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="userHostPrivileges")
    def user_host_privileges(self) -> Sequence['outputs.GetClusterDetailDatabasesDbInfoUserHostPrivilegeResult']:
        return pulumi.get(self, "user_host_privileges")


@pulumi.output_type
class GetClusterDetailDatabasesDbInfoUserHostPrivilegeResult(dict):
    def __init__(__self__, *,
                 db_host: str,
                 db_privilege: str,
                 db_user_name: str):
        pulumi.set(__self__, "db_host", db_host)
        pulumi.set(__self__, "db_privilege", db_privilege)
        pulumi.set(__self__, "db_user_name", db_user_name)

    @property
    @pulumi.getter(name="dbHost")
    def db_host(self) -> str:
        return pulumi.get(self, "db_host")

    @property
    @pulumi.getter(name="dbPrivilege")
    def db_privilege(self) -> str:
        return pulumi.get(self, "db_privilege")

    @property
    @pulumi.getter(name="dbUserName")
    def db_user_name(self) -> str:
        return pulumi.get(self, "db_user_name")


@pulumi.output_type
class GetClusterInstanceGroupsInstanceGrpInfoListResult(dict):
    def __init__(__self__, *,
                 app_id: int,
                 cluster_id: str,
                 created_time: str,
                 deleted_time: str,
                 instance_grp_id: str,
                 instance_sets: Sequence['outputs.GetClusterInstanceGroupsInstanceGrpInfoListInstanceSetResult'],
                 status: str,
                 type: str,
                 updated_time: str,
                 vip: str,
                 vport: int,
                 wan_domain: str,
                 wan_ip: str,
                 wan_port: int,
                 wan_status: str):
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "deleted_time", deleted_time)
        pulumi.set(__self__, "instance_grp_id", instance_grp_id)
        pulumi.set(__self__, "instance_sets", instance_sets)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_time", updated_time)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "vport", vport)
        pulumi.set(__self__, "wan_domain", wan_domain)
        pulumi.set(__self__, "wan_ip", wan_ip)
        pulumi.set(__self__, "wan_port", wan_port)
        pulumi.set(__self__, "wan_status", wan_status)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> int:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="deletedTime")
    def deleted_time(self) -> str:
        return pulumi.get(self, "deleted_time")

    @property
    @pulumi.getter(name="instanceGrpId")
    def instance_grp_id(self) -> str:
        return pulumi.get(self, "instance_grp_id")

    @property
    @pulumi.getter(name="instanceSets")
    def instance_sets(self) -> Sequence['outputs.GetClusterInstanceGroupsInstanceGrpInfoListInstanceSetResult']:
        return pulumi.get(self, "instance_sets")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> str:
        return pulumi.get(self, "updated_time")

    @property
    @pulumi.getter
    def vip(self) -> str:
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter
    def vport(self) -> int:
        return pulumi.get(self, "vport")

    @property
    @pulumi.getter(name="wanDomain")
    def wan_domain(self) -> str:
        return pulumi.get(self, "wan_domain")

    @property
    @pulumi.getter(name="wanIp")
    def wan_ip(self) -> str:
        return pulumi.get(self, "wan_ip")

    @property
    @pulumi.getter(name="wanPort")
    def wan_port(self) -> int:
        return pulumi.get(self, "wan_port")

    @property
    @pulumi.getter(name="wanStatus")
    def wan_status(self) -> str:
        return pulumi.get(self, "wan_status")


@pulumi.output_type
class GetClusterInstanceGroupsInstanceGrpInfoListInstanceSetResult(dict):
    def __init__(__self__, *,
                 app_id: int,
                 business_type: str,
                 cluster_id: str,
                 cluster_name: str,
                 cpu: int,
                 create_time: str,
                 cynos_version: str,
                 db_type: str,
                 db_version: str,
                 destroy_deadline_text: str,
                 destroy_time: str,
                 instance_id: str,
                 instance_name: str,
                 instance_role: str,
                 instance_type: str,
                 is_freeze: str,
                 isolate_time: str,
                 max_cpu: float,
                 memory: int,
                 min_cpu: float,
                 net_type: int,
                 pay_mode: int,
                 period_end_time: str,
                 physical_zone: str,
                 processing_task: str,
                 project_id: int,
                 region: str,
                 renew_flag: int,
                 resource_tags: Sequence['outputs.GetClusterInstanceGroupsInstanceGrpInfoListInstanceSetResourceTagResult'],
                 serverless_status: str,
                 status: str,
                 status_desc: str,
                 storage: int,
                 storage_id: str,
                 storage_pay_mode: int,
                 subnet_id: str,
                 tasks: Sequence['outputs.GetClusterInstanceGroupsInstanceGrpInfoListInstanceSetTaskResult'],
                 uin: str,
                 update_time: str,
                 vip: str,
                 vpc_id: str,
                 vport: int,
                 wan_domain: str,
                 wan_ip: str,
                 wan_port: int,
                 wan_status: str,
                 zone: str):
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "business_type", business_type)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "cynos_version", cynos_version)
        pulumi.set(__self__, "db_type", db_type)
        pulumi.set(__self__, "db_version", db_version)
        pulumi.set(__self__, "destroy_deadline_text", destroy_deadline_text)
        pulumi.set(__self__, "destroy_time", destroy_time)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_role", instance_role)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "is_freeze", is_freeze)
        pulumi.set(__self__, "isolate_time", isolate_time)
        pulumi.set(__self__, "max_cpu", max_cpu)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "min_cpu", min_cpu)
        pulumi.set(__self__, "net_type", net_type)
        pulumi.set(__self__, "pay_mode", pay_mode)
        pulumi.set(__self__, "period_end_time", period_end_time)
        pulumi.set(__self__, "physical_zone", physical_zone)
        pulumi.set(__self__, "processing_task", processing_task)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "renew_flag", renew_flag)
        pulumi.set(__self__, "resource_tags", resource_tags)
        pulumi.set(__self__, "serverless_status", serverless_status)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_desc", status_desc)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "storage_id", storage_id)
        pulumi.set(__self__, "storage_pay_mode", storage_pay_mode)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tasks", tasks)
        pulumi.set(__self__, "uin", uin)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vport", vport)
        pulumi.set(__self__, "wan_domain", wan_domain)
        pulumi.set(__self__, "wan_ip", wan_ip)
        pulumi.set(__self__, "wan_port", wan_port)
        pulumi.set(__self__, "wan_status", wan_status)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> int:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="businessType")
    def business_type(self) -> str:
        return pulumi.get(self, "business_type")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="cynosVersion")
    def cynos_version(self) -> str:
        return pulumi.get(self, "cynos_version")

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> str:
        return pulumi.get(self, "db_type")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> str:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="destroyDeadlineText")
    def destroy_deadline_text(self) -> str:
        return pulumi.get(self, "destroy_deadline_text")

    @property
    @pulumi.getter(name="destroyTime")
    def destroy_time(self) -> str:
        return pulumi.get(self, "destroy_time")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceRole")
    def instance_role(self) -> str:
        return pulumi.get(self, "instance_role")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="isFreeze")
    def is_freeze(self) -> str:
        return pulumi.get(self, "is_freeze")

    @property
    @pulumi.getter(name="isolateTime")
    def isolate_time(self) -> str:
        return pulumi.get(self, "isolate_time")

    @property
    @pulumi.getter(name="maxCpu")
    def max_cpu(self) -> float:
        return pulumi.get(self, "max_cpu")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="minCpu")
    def min_cpu(self) -> float:
        return pulumi.get(self, "min_cpu")

    @property
    @pulumi.getter(name="netType")
    def net_type(self) -> int:
        return pulumi.get(self, "net_type")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> int:
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter(name="periodEndTime")
    def period_end_time(self) -> str:
        return pulumi.get(self, "period_end_time")

    @property
    @pulumi.getter(name="physicalZone")
    def physical_zone(self) -> str:
        return pulumi.get(self, "physical_zone")

    @property
    @pulumi.getter(name="processingTask")
    def processing_task(self) -> str:
        return pulumi.get(self, "processing_task")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> int:
        return pulumi.get(self, "renew_flag")

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Sequence['outputs.GetClusterInstanceGroupsInstanceGrpInfoListInstanceSetResourceTagResult']:
        return pulumi.get(self, "resource_tags")

    @property
    @pulumi.getter(name="serverlessStatus")
    def serverless_status(self) -> str:
        return pulumi.get(self, "serverless_status")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDesc")
    def status_desc(self) -> str:
        return pulumi.get(self, "status_desc")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="storageId")
    def storage_id(self) -> str:
        return pulumi.get(self, "storage_id")

    @property
    @pulumi.getter(name="storagePayMode")
    def storage_pay_mode(self) -> int:
        return pulumi.get(self, "storage_pay_mode")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetClusterInstanceGroupsInstanceGrpInfoListInstanceSetTaskResult']:
        return pulumi.get(self, "tasks")

    @property
    @pulumi.getter
    def uin(self) -> str:
        return pulumi.get(self, "uin")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def vip(self) -> str:
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def vport(self) -> int:
        return pulumi.get(self, "vport")

    @property
    @pulumi.getter(name="wanDomain")
    def wan_domain(self) -> str:
        return pulumi.get(self, "wan_domain")

    @property
    @pulumi.getter(name="wanIp")
    def wan_ip(self) -> str:
        return pulumi.get(self, "wan_ip")

    @property
    @pulumi.getter(name="wanPort")
    def wan_port(self) -> int:
        return pulumi.get(self, "wan_port")

    @property
    @pulumi.getter(name="wanStatus")
    def wan_status(self) -> str:
        return pulumi.get(self, "wan_status")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetClusterInstanceGroupsInstanceGrpInfoListInstanceSetResourceTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetClusterInstanceGroupsInstanceGrpInfoListInstanceSetTaskResult(dict):
    def __init__(__self__, *,
                 object_id: str,
                 object_type: str,
                 task_id: int,
                 task_status: str,
                 task_type: str):
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "object_type", object_type)
        pulumi.set(__self__, "task_id", task_id)
        pulumi.set(__self__, "task_status", task_status)
        pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> str:
        return pulumi.get(self, "object_id")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> int:
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> str:
        return pulumi.get(self, "task_status")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        return pulumi.get(self, "task_type")


@pulumi.output_type
class GetClusterParamLogsClusterParamLogResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 create_time: str,
                 current_value: str,
                 instance_id: str,
                 param_name: str,
                 status: str,
                 update_time: str,
                 update_value: str):
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "current_value", current_value)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "update_value", update_value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> str:
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="updateValue")
    def update_value(self) -> str:
        return pulumi.get(self, "update_value")


@pulumi.output_type
class GetClusterParamsItemResult(dict):
    def __init__(__self__, *,
                 current_value: str,
                 default: str,
                 description: str,
                 enum_values: Sequence[str],
                 func: str,
                 is_func: bool,
                 is_global: int,
                 match_type: str,
                 match_value: str,
                 max: str,
                 min: str,
                 need_reboot: int,
                 param_name: str,
                 param_type: str):
        pulumi.set(__self__, "current_value", current_value)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enum_values", enum_values)
        pulumi.set(__self__, "func", func)
        pulumi.set(__self__, "is_func", is_func)
        pulumi.set(__self__, "is_global", is_global)
        pulumi.set(__self__, "match_type", match_type)
        pulumi.set(__self__, "match_value", match_value)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "need_reboot", need_reboot)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "param_type", param_type)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> str:
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumValues")
    def enum_values(self) -> Sequence[str]:
        return pulumi.get(self, "enum_values")

    @property
    @pulumi.getter
    def func(self) -> str:
        return pulumi.get(self, "func")

    @property
    @pulumi.getter(name="isFunc")
    def is_func(self) -> bool:
        return pulumi.get(self, "is_func")

    @property
    @pulumi.getter(name="isGlobal")
    def is_global(self) -> int:
        return pulumi.get(self, "is_global")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> str:
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchValue")
    def match_value(self) -> str:
        return pulumi.get(self, "match_value")

    @property
    @pulumi.getter
    def max(self) -> str:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> str:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="needReboot")
    def need_reboot(self) -> int:
        return pulumi.get(self, "need_reboot")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramType")
    def param_type(self) -> str:
        return pulumi.get(self, "param_type")


@pulumi.output_type
class GetClusterTableResult(dict):
    def __init__(__self__, *,
                 database: str,
                 tables: Sequence[str]):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def tables(self) -> Sequence[str]:
        return pulumi.get(self, "tables")


@pulumi.output_type
class GetClustersClusterListResult(dict):
    def __init__(__self__, *,
                 auto_renew_flag: int,
                 available_zone: str,
                 charge_type: str,
                 cluster_id: str,
                 cluster_limit: int,
                 cluster_name: str,
                 cluster_status: str,
                 create_time: str,
                 db_type: str,
                 db_version: str,
                 port: int,
                 project_id: int,
                 subnet_id: str,
                 vpc_id: str):
        pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        pulumi.set(__self__, "available_zone", available_zone)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_limit", cluster_limit)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_status", cluster_status)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "db_type", db_type)
        pulumi.set(__self__, "db_version", db_version)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> int:
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="availableZone")
    def available_zone(self) -> str:
        return pulumi.get(self, "available_zone")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterLimit")
    def cluster_limit(self) -> int:
        return pulumi.get(self, "cluster_limit")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterStatus")
    def cluster_status(self) -> str:
        return pulumi.get(self, "cluster_status")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> str:
        return pulumi.get(self, "db_type")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> str:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetDescribeInstanceErrorLogsErrorLogResult(dict):
    def __init__(__self__, *,
                 content: str,
                 level: str,
                 timestamp: int):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def timestamp(self) -> int:
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class GetDescribeInstanceSlowQueriesBinlogResult(dict):
    def __init__(__self__, *,
                 binlog_id: int,
                 file_name: str,
                 file_size: int,
                 finish_time: str,
                 start_time: str):
        pulumi.set(__self__, "binlog_id", binlog_id)
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "file_size", file_size)
        pulumi.set(__self__, "finish_time", finish_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="binlogId")
    def binlog_id(self) -> int:
        return pulumi.get(self, "binlog_id")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> int:
        return pulumi.get(self, "file_size")

    @property
    @pulumi.getter(name="finishTime")
    def finish_time(self) -> str:
        return pulumi.get(self, "finish_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetInstanceSlowQueriesSlowQueryResult(dict):
    def __init__(__self__, *,
                 database: str,
                 lock_time: float,
                 query_time: float,
                 rows_examined: int,
                 rows_sent: int,
                 sql_md5: str,
                 sql_template: str,
                 sql_text: str,
                 timestamp: int,
                 user_host: str,
                 user_name: str):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "lock_time", lock_time)
        pulumi.set(__self__, "query_time", query_time)
        pulumi.set(__self__, "rows_examined", rows_examined)
        pulumi.set(__self__, "rows_sent", rows_sent)
        pulumi.set(__self__, "sql_md5", sql_md5)
        pulumi.set(__self__, "sql_template", sql_template)
        pulumi.set(__self__, "sql_text", sql_text)
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "user_host", user_host)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="lockTime")
    def lock_time(self) -> float:
        return pulumi.get(self, "lock_time")

    @property
    @pulumi.getter(name="queryTime")
    def query_time(self) -> float:
        return pulumi.get(self, "query_time")

    @property
    @pulumi.getter(name="rowsExamined")
    def rows_examined(self) -> int:
        return pulumi.get(self, "rows_examined")

    @property
    @pulumi.getter(name="rowsSent")
    def rows_sent(self) -> int:
        return pulumi.get(self, "rows_sent")

    @property
    @pulumi.getter(name="sqlMd5")
    def sql_md5(self) -> str:
        return pulumi.get(self, "sql_md5")

    @property
    @pulumi.getter(name="sqlTemplate")
    def sql_template(self) -> str:
        return pulumi.get(self, "sql_template")

    @property
    @pulumi.getter(name="sqlText")
    def sql_text(self) -> str:
        return pulumi.get(self, "sql_text")

    @property
    @pulumi.getter
    def timestamp(self) -> int:
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter(name="userHost")
    def user_host(self) -> str:
        return pulumi.get(self, "user_host")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetInstancesInstanceListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 instance_cpu_core: int,
                 instance_memory_size: int,
                 instance_name: str,
                 instance_status: str,
                 instance_storage_size: int,
                 instance_type: str,
                 cluster_id: Optional[str] = None,
                 instance_id: Optional[str] = None):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "instance_cpu_core", instance_cpu_core)
        pulumi.set(__self__, "instance_memory_size", instance_memory_size)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_status", instance_status)
        pulumi.set(__self__, "instance_storage_size", instance_storage_size)
        pulumi.set(__self__, "instance_type", instance_type)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="instanceCpuCore")
    def instance_cpu_core(self) -> int:
        return pulumi.get(self, "instance_cpu_core")

    @property
    @pulumi.getter(name="instanceMemorySize")
    def instance_memory_size(self) -> int:
        return pulumi.get(self, "instance_memory_size")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceStatus")
    def instance_status(self) -> str:
        return pulumi.get(self, "instance_status")

    @property
    @pulumi.getter(name="instanceStorageSize")
    def instance_storage_size(self) -> int:
        return pulumi.get(self, "instance_storage_size")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")


@pulumi.output_type
class GetParamTemplatesItemResult(dict):
    def __init__(__self__, *,
                 db_mode: str,
                 engine_version: str,
                 id: int,
                 param_info_sets: Sequence['outputs.GetParamTemplatesItemParamInfoSetResult'],
                 template_description: str,
                 template_name: str):
        pulumi.set(__self__, "db_mode", db_mode)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "param_info_sets", param_info_sets)
        pulumi.set(__self__, "template_description", template_description)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="dbMode")
    def db_mode(self) -> str:
        return pulumi.get(self, "db_mode")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="paramInfoSets")
    def param_info_sets(self) -> Sequence['outputs.GetParamTemplatesItemParamInfoSetResult']:
        return pulumi.get(self, "param_info_sets")

    @property
    @pulumi.getter(name="templateDescription")
    def template_description(self) -> str:
        return pulumi.get(self, "template_description")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class GetParamTemplatesItemParamInfoSetResult(dict):
    def __init__(__self__, *,
                 current_value: str,
                 default: str,
                 description: str,
                 enum_values: Sequence[str],
                 max: str,
                 min: str,
                 need_reboot: int,
                 param_name: str,
                 param_type: str):
        pulumi.set(__self__, "current_value", current_value)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enum_values", enum_values)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "need_reboot", need_reboot)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "param_type", param_type)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> str:
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter
    def default(self) -> str:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumValues")
    def enum_values(self) -> Sequence[str]:
        return pulumi.get(self, "enum_values")

    @property
    @pulumi.getter
    def max(self) -> str:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> str:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="needReboot")
    def need_reboot(self) -> int:
        return pulumi.get(self, "need_reboot")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="paramType")
    def param_type(self) -> str:
        return pulumi.get(self, "param_type")


@pulumi.output_type
class GetProjectSecurityGroupsGroupResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 inbounds: Sequence['outputs.GetProjectSecurityGroupsGroupInboundResult'],
                 outbounds: Sequence['outputs.GetProjectSecurityGroupsGroupOutboundResult'],
                 project_id: int,
                 security_group_id: str,
                 security_group_name: str,
                 security_group_remark: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "inbounds", inbounds)
        pulumi.set(__self__, "outbounds", outbounds)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)
        pulumi.set(__self__, "security_group_remark", security_group_remark)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def inbounds(self) -> Sequence['outputs.GetProjectSecurityGroupsGroupInboundResult']:
        return pulumi.get(self, "inbounds")

    @property
    @pulumi.getter
    def outbounds(self) -> Sequence['outputs.GetProjectSecurityGroupsGroupOutboundResult']:
        return pulumi.get(self, "outbounds")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        return pulumi.get(self, "security_group_name")

    @property
    @pulumi.getter(name="securityGroupRemark")
    def security_group_remark(self) -> str:
        return pulumi.get(self, "security_group_remark")


@pulumi.output_type
class GetProjectSecurityGroupsGroupInboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 address_module: str,
                 cidr_ip: str,
                 desc: str,
                 id: str,
                 ip_protocol: str,
                 port_range: str,
                 service_module: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "address_module", address_module)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "desc", desc)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)
        pulumi.set(__self__, "service_module", service_module)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="addressModule")
    def address_module(self) -> str:
        return pulumi.get(self, "address_module")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter
    def desc(self) -> str:
        return pulumi.get(self, "desc")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter(name="serviceModule")
    def service_module(self) -> str:
        return pulumi.get(self, "service_module")


@pulumi.output_type
class GetProjectSecurityGroupsGroupOutboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 address_module: str,
                 cidr_ip: str,
                 desc: str,
                 id: str,
                 ip_protocol: str,
                 port_range: str,
                 service_module: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "address_module", address_module)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "desc", desc)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)
        pulumi.set(__self__, "service_module", service_module)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="addressModule")
    def address_module(self) -> str:
        return pulumi.get(self, "address_module")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter
    def desc(self) -> str:
        return pulumi.get(self, "desc")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter(name="serviceModule")
    def service_module(self) -> str:
        return pulumi.get(self, "service_module")


@pulumi.output_type
class GetProxyNodeFilterResult(dict):
    def __init__(__self__, *,
                 names: Sequence[str],
                 values: Sequence[str],
                 exact_match: Optional[bool] = None,
                 name: Optional[str] = None,
                 operator: Optional[str] = None):
        pulumi.set(__self__, "names", names)
        pulumi.set(__self__, "values", values)
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)

    @property
    @pulumi.getter
    def names(self) -> Sequence[str]:
        return pulumi.get(self, "names")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[bool]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        return pulumi.get(self, "operator")


@pulumi.output_type
class GetProxyNodeProxyNodeInfoResult(dict):
    def __init__(__self__, *,
                 app_id: int,
                 cluster_id: str,
                 cpu: int,
                 mem: int,
                 proxy_group_id: str,
                 proxy_node_connections: int,
                 proxy_node_id: str,
                 region: str,
                 status: str,
                 zone: str):
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "mem", mem)
        pulumi.set(__self__, "proxy_group_id", proxy_group_id)
        pulumi.set(__self__, "proxy_node_connections", proxy_node_connections)
        pulumi.set(__self__, "proxy_node_id", proxy_node_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> int:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def mem(self) -> int:
        return pulumi.get(self, "mem")

    @property
    @pulumi.getter(name="proxyGroupId")
    def proxy_group_id(self) -> str:
        return pulumi.get(self, "proxy_group_id")

    @property
    @pulumi.getter(name="proxyNodeConnections")
    def proxy_node_connections(self) -> int:
        return pulumi.get(self, "proxy_node_connections")

    @property
    @pulumi.getter(name="proxyNodeId")
    def proxy_node_id(self) -> str:
        return pulumi.get(self, "proxy_node_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetResourcePackageListResourcePackageListResult(dict):
    def __init__(__self__, *,
                 app_id: int,
                 bind_instance_infos: Sequence['outputs.GetResourcePackageListResourcePackageListBindInstanceInfoResult'],
                 expire_time: str,
                 has_quota: bool,
                 package_id: str,
                 package_name: str,
                 package_region: str,
                 package_total_spec: float,
                 package_type: str,
                 package_used_spec: float,
                 start_time: str,
                 status: str):
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "bind_instance_infos", bind_instance_infos)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "has_quota", has_quota)
        pulumi.set(__self__, "package_id", package_id)
        pulumi.set(__self__, "package_name", package_name)
        pulumi.set(__self__, "package_region", package_region)
        pulumi.set(__self__, "package_total_spec", package_total_spec)
        pulumi.set(__self__, "package_type", package_type)
        pulumi.set(__self__, "package_used_spec", package_used_spec)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> int:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="bindInstanceInfos")
    def bind_instance_infos(self) -> Sequence['outputs.GetResourcePackageListResourcePackageListBindInstanceInfoResult']:
        return pulumi.get(self, "bind_instance_infos")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="hasQuota")
    def has_quota(self) -> bool:
        return pulumi.get(self, "has_quota")

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> str:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> str:
        return pulumi.get(self, "package_name")

    @property
    @pulumi.getter(name="packageRegion")
    def package_region(self) -> str:
        return pulumi.get(self, "package_region")

    @property
    @pulumi.getter(name="packageTotalSpec")
    def package_total_spec(self) -> float:
        return pulumi.get(self, "package_total_spec")

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> str:
        return pulumi.get(self, "package_type")

    @property
    @pulumi.getter(name="packageUsedSpec")
    def package_used_spec(self) -> float:
        return pulumi.get(self, "package_used_spec")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetResourcePackageListResourcePackageListBindInstanceInfoResult(dict):
    def __init__(__self__, *,
                 instance_id: str,
                 instance_region: str,
                 instance_type: str):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_region", instance_region)
        pulumi.set(__self__, "instance_type", instance_type)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceRegion")
    def instance_region(self) -> str:
        return pulumi.get(self, "instance_region")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        return pulumi.get(self, "instance_type")


@pulumi.output_type
class GetResourcePackageSaleSpecsDetailResult(dict):
    def __init__(__self__, *,
                 expire_day: int,
                 max_package_spec: float,
                 min_package_spec: float,
                 package_region: str,
                 package_type: str,
                 package_version: str):
        pulumi.set(__self__, "expire_day", expire_day)
        pulumi.set(__self__, "max_package_spec", max_package_spec)
        pulumi.set(__self__, "min_package_spec", min_package_spec)
        pulumi.set(__self__, "package_region", package_region)
        pulumi.set(__self__, "package_type", package_type)
        pulumi.set(__self__, "package_version", package_version)

    @property
    @pulumi.getter(name="expireDay")
    def expire_day(self) -> int:
        return pulumi.get(self, "expire_day")

    @property
    @pulumi.getter(name="maxPackageSpec")
    def max_package_spec(self) -> float:
        return pulumi.get(self, "max_package_spec")

    @property
    @pulumi.getter(name="minPackageSpec")
    def min_package_spec(self) -> float:
        return pulumi.get(self, "min_package_spec")

    @property
    @pulumi.getter(name="packageRegion")
    def package_region(self) -> str:
        return pulumi.get(self, "package_region")

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> str:
        return pulumi.get(self, "package_type")

    @property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> str:
        return pulumi.get(self, "package_version")


@pulumi.output_type
class GetRollbackTimeRangeRollbackTimeRangeResult(dict):
    def __init__(__self__, *,
                 time_range_end: str,
                 time_range_start: str):
        pulumi.set(__self__, "time_range_end", time_range_end)
        pulumi.set(__self__, "time_range_start", time_range_start)

    @property
    @pulumi.getter(name="timeRangeEnd")
    def time_range_end(self) -> str:
        return pulumi.get(self, "time_range_end")

    @property
    @pulumi.getter(name="timeRangeStart")
    def time_range_start(self) -> str:
        return pulumi.get(self, "time_range_start")


@pulumi.output_type
class GetZoneConfigListResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 machine_type: str,
                 max_io_bandwidth: int,
                 max_storage_size: int,
                 memory: int,
                 min_storage_size: int,
                 zone_stock_infos: Sequence['outputs.GetZoneConfigListZoneStockInfoResult']):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "max_io_bandwidth", max_io_bandwidth)
        pulumi.set(__self__, "max_storage_size", max_storage_size)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "min_storage_size", min_storage_size)
        pulumi.set(__self__, "zone_stock_infos", zone_stock_infos)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter(name="maxIoBandwidth")
    def max_io_bandwidth(self) -> int:
        return pulumi.get(self, "max_io_bandwidth")

    @property
    @pulumi.getter(name="maxStorageSize")
    def max_storage_size(self) -> int:
        return pulumi.get(self, "max_storage_size")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="minStorageSize")
    def min_storage_size(self) -> int:
        return pulumi.get(self, "min_storage_size")

    @property
    @pulumi.getter(name="zoneStockInfos")
    def zone_stock_infos(self) -> Sequence['outputs.GetZoneConfigListZoneStockInfoResult']:
        return pulumi.get(self, "zone_stock_infos")


@pulumi.output_type
class GetZoneConfigListZoneStockInfoResult(dict):
    def __init__(__self__, *,
                 has_stock: bool,
                 zone: str):
        pulumi.set(__self__, "has_stock", has_stock)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="hasStock")
    def has_stock(self) -> bool:
        return pulumi.get(self, "has_stock")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetZoneRegionSetResult(dict):
    def __init__(__self__, *,
                 db_type: str,
                 modules: Sequence['outputs.GetZoneRegionSetModuleResult'],
                 region: str,
                 region_id: int,
                 region_zh: str,
                 zone_sets: Sequence['outputs.GetZoneRegionSetZoneSetResult']):
        pulumi.set(__self__, "db_type", db_type)
        pulumi.set(__self__, "modules", modules)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_zh", region_zh)
        pulumi.set(__self__, "zone_sets", zone_sets)

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> str:
        return pulumi.get(self, "db_type")

    @property
    @pulumi.getter
    def modules(self) -> Sequence['outputs.GetZoneRegionSetModuleResult']:
        return pulumi.get(self, "modules")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionZh")
    def region_zh(self) -> str:
        return pulumi.get(self, "region_zh")

    @property
    @pulumi.getter(name="zoneSets")
    def zone_sets(self) -> Sequence['outputs.GetZoneRegionSetZoneSetResult']:
        return pulumi.get(self, "zone_sets")


@pulumi.output_type
class GetZoneRegionSetModuleResult(dict):
    def __init__(__self__, *,
                 is_disable: str,
                 module_name: str):
        pulumi.set(__self__, "is_disable", is_disable)
        pulumi.set(__self__, "module_name", module_name)

    @property
    @pulumi.getter(name="isDisable")
    def is_disable(self) -> str:
        return pulumi.get(self, "is_disable")

    @property
    @pulumi.getter(name="moduleName")
    def module_name(self) -> str:
        return pulumi.get(self, "module_name")


@pulumi.output_type
class GetZoneRegionSetZoneSetResult(dict):
    def __init__(__self__, *,
                 has_permission: bool,
                 is_support_normal: int,
                 is_support_serverless: int,
                 is_whole_rdma_zone: str,
                 physical_zone: str,
                 zone: str,
                 zone_id: int,
                 zone_zh: str):
        pulumi.set(__self__, "has_permission", has_permission)
        pulumi.set(__self__, "is_support_normal", is_support_normal)
        pulumi.set(__self__, "is_support_serverless", is_support_serverless)
        pulumi.set(__self__, "is_whole_rdma_zone", is_whole_rdma_zone)
        pulumi.set(__self__, "physical_zone", physical_zone)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_zh", zone_zh)

    @property
    @pulumi.getter(name="hasPermission")
    def has_permission(self) -> bool:
        return pulumi.get(self, "has_permission")

    @property
    @pulumi.getter(name="isSupportNormal")
    def is_support_normal(self) -> int:
        return pulumi.get(self, "is_support_normal")

    @property
    @pulumi.getter(name="isSupportServerless")
    def is_support_serverless(self) -> int:
        return pulumi.get(self, "is_support_serverless")

    @property
    @pulumi.getter(name="isWholeRdmaZone")
    def is_whole_rdma_zone(self) -> str:
        return pulumi.get(self, "is_whole_rdma_zone")

    @property
    @pulumi.getter(name="physicalZone")
    def physical_zone(self) -> str:
        return pulumi.get(self, "physical_zone")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneZh")
    def zone_zh(self) -> str:
        return pulumi.get(self, "zone_zh")


