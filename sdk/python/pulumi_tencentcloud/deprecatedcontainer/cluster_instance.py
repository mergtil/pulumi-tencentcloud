# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ClusterInstanceArgs', 'ClusterInstance']

@pulumi.input_type
class ClusterInstanceArgs:
    def __init__(__self__, *,
                 bandwidth: pulumi.Input[int],
                 bandwidth_type: pulumi.Input[str],
                 cluster_id: pulumi.Input[str],
                 is_vpc_gateway: pulumi.Input[int],
                 root_size: pulumi.Input[int],
                 storage_size: pulumi.Input[int],
                 subnet_id: pulumi.Input[str],
                 zone_id: pulumi.Input[str],
                 cpu: Optional[pulumi.Input[int]] = None,
                 cvm_type: Optional[pulumi.Input[str]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 mem: Optional[pulumi.Input[int]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 require_wan_ip: Optional[pulumi.Input[int]] = None,
                 root_type: Optional[pulumi.Input[str]] = None,
                 sg_id: Optional[pulumi.Input[str]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 user_script: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ClusterInstance resource.
        :param pulumi.Input[int] bandwidth: The network bandwidth of the node.
        :param pulumi.Input[str] bandwidth_type: The network type of the node.
        :param pulumi.Input[str] cluster_id: The id of the cluster.
        :param pulumi.Input[int] is_vpc_gateway: Describe whether the node enable the gateway capability.
        :param pulumi.Input[int] root_size: The size of the root volume.
        :param pulumi.Input[int] storage_size: The size of the data volume.
        :param pulumi.Input[str] subnet_id: The subnet id which the node stays in.
        :param pulumi.Input[str] zone_id: The zone which the node stays in.
        :param pulumi.Input[int] cpu: The cpu of the node.
        :param pulumi.Input[str] cvm_type: The type of node needed by cvm.
        :param pulumi.Input[str] docker_graph_path: The docker graph path is going to mounted.
        :param pulumi.Input[str] instance_name: The name ot node.
        :param pulumi.Input[str] instance_type: The instance type of the node needed by cvm.
        :param pulumi.Input[str] key_id: The key_id of each node(if using key pair to access).
        :param pulumi.Input[int] mem: The memory of the node.
        :param pulumi.Input[str] mount_target: The path which volume is going to be mounted.
        :param pulumi.Input[str] password: The password of each node.
        :param pulumi.Input[int] period: The puchase duration of the node needed by cvm.
        :param pulumi.Input[int] require_wan_ip: Indicate whether wan ip is needed.
        :param pulumi.Input[str] root_type: The type of the root volume. see more from CVM.
        :param pulumi.Input[str] sg_id: The security group id.
        :param pulumi.Input[str] storage_type: The type of the data volume. see more from CVM.
        :param pulumi.Input[int] unschedulable: Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
        :param pulumi.Input[str] user_script: User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
               CCS api documents.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "bandwidth_type", bandwidth_type)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "is_vpc_gateway", is_vpc_gateway)
        pulumi.set(__self__, "root_size", root_size)
        pulumi.set(__self__, "storage_size", storage_size)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "zone_id", zone_id)
        if cpu is not None:
            warnings.warn("""It has been deprecated from version 1.16.0. Set 'instance_type' instead.""", DeprecationWarning)
            pulumi.log.warn("""cpu is deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.""")
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if cvm_type is not None:
            pulumi.set(__self__, "cvm_type", cvm_type)
        if docker_graph_path is not None:
            pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if mem is not None:
            warnings.warn("""It has been deprecated from version 1.16.0. Set 'instance_type' instead.""", DeprecationWarning)
            pulumi.log.warn("""mem is deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.""")
        if mem is not None:
            pulumi.set(__self__, "mem", mem)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if require_wan_ip is not None:
            pulumi.set(__self__, "require_wan_ip", require_wan_ip)
        if root_type is not None:
            pulumi.set(__self__, "root_type", root_type)
        if sg_id is not None:
            pulumi.set(__self__, "sg_id", sg_id)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if unschedulable is not None:
            pulumi.set(__self__, "unschedulable", unschedulable)
        if user_script is not None:
            pulumi.set(__self__, "user_script", user_script)

    @property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Input[int]:
        """
        The network bandwidth of the node.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: pulumi.Input[int]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter(name="bandwidthType")
    def bandwidth_type(self) -> pulumi.Input[str]:
        """
        The network type of the node.
        """
        return pulumi.get(self, "bandwidth_type")

    @bandwidth_type.setter
    def bandwidth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "bandwidth_type", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        The id of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="isVpcGateway")
    def is_vpc_gateway(self) -> pulumi.Input[int]:
        """
        Describe whether the node enable the gateway capability.
        """
        return pulumi.get(self, "is_vpc_gateway")

    @is_vpc_gateway.setter
    def is_vpc_gateway(self, value: pulumi.Input[int]):
        pulumi.set(self, "is_vpc_gateway", value)

    @property
    @pulumi.getter(name="rootSize")
    def root_size(self) -> pulumi.Input[int]:
        """
        The size of the root volume.
        """
        return pulumi.get(self, "root_size")

    @root_size.setter
    def root_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "root_size", value)

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> pulumi.Input[int]:
        """
        The size of the data volume.
        """
        return pulumi.get(self, "storage_size")

    @storage_size.setter
    def storage_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage_size", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        The subnet id which the node stays in.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        The zone which the node stays in.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        The cpu of the node.
        """
        warnings.warn("""It has been deprecated from version 1.16.0. Set 'instance_type' instead.""", DeprecationWarning)
        pulumi.log.warn("""cpu is deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.""")

        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="cvmType")
    def cvm_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of node needed by cvm.
        """
        return pulumi.get(self, "cvm_type")

    @cvm_type.setter
    def cvm_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cvm_type", value)

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> Optional[pulumi.Input[str]]:
        """
        The docker graph path is going to mounted.
        """
        return pulumi.get(self, "docker_graph_path")

    @docker_graph_path.setter
    def docker_graph_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_graph_path", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name ot node.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type of the node needed by cvm.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The key_id of each node(if using key pair to access).
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter
    def mem(self) -> Optional[pulumi.Input[int]]:
        """
        The memory of the node.
        """
        warnings.warn("""It has been deprecated from version 1.16.0. Set 'instance_type' instead.""", DeprecationWarning)
        pulumi.log.warn("""mem is deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.""")

        return pulumi.get(self, "mem")

    @mem.setter
    def mem(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        The path which volume is going to be mounted.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of each node.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        The puchase duration of the node needed by cvm.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="requireWanIp")
    def require_wan_ip(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate whether wan ip is needed.
        """
        return pulumi.get(self, "require_wan_ip")

    @require_wan_ip.setter
    def require_wan_ip(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "require_wan_ip", value)

    @property
    @pulumi.getter(name="rootType")
    def root_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the root volume. see more from CVM.
        """
        return pulumi.get(self, "root_type")

    @root_type.setter
    def root_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_type", value)

    @property
    @pulumi.getter(name="sgId")
    def sg_id(self) -> Optional[pulumi.Input[str]]:
        """
        The security group id.
        """
        return pulumi.get(self, "sg_id")

    @sg_id.setter
    def sg_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sg_id", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the data volume. see more from CVM.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter
    def unschedulable(self) -> Optional[pulumi.Input[int]]:
        """
        Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
        """
        return pulumi.get(self, "unschedulable")

    @unschedulable.setter
    def unschedulable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unschedulable", value)

    @property
    @pulumi.getter(name="userScript")
    def user_script(self) -> Optional[pulumi.Input[str]]:
        """
        User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
        CCS api documents.
        """
        return pulumi.get(self, "user_script")

    @user_script.setter
    def user_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_script", value)


@pulumi.input_type
class _ClusterInstanceState:
    def __init__(__self__, *,
                 abnormal_reason: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 bandwidth_type: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 cvm_type: Optional[pulumi.Input[str]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 is_normal: Optional[pulumi.Input[int]] = None,
                 is_vpc_gateway: Optional[pulumi.Input[int]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 lan_ip: Optional[pulumi.Input[str]] = None,
                 mem: Optional[pulumi.Input[int]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 require_wan_ip: Optional[pulumi.Input[int]] = None,
                 root_size: Optional[pulumi.Input[int]] = None,
                 root_type: Optional[pulumi.Input[str]] = None,
                 sg_id: Optional[pulumi.Input[str]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 user_script: Optional[pulumi.Input[str]] = None,
                 wan_ip: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ClusterInstance resources.
        :param pulumi.Input[str] abnormal_reason: Describe the reason when node is in abnormal state(if it was).
        :param pulumi.Input[int] bandwidth: The network bandwidth of the node.
        :param pulumi.Input[str] bandwidth_type: The network type of the node.
        :param pulumi.Input[str] cluster_id: The id of the cluster.
        :param pulumi.Input[int] cpu: The cpu of the node.
        :param pulumi.Input[str] cvm_type: The type of node needed by cvm.
        :param pulumi.Input[str] docker_graph_path: The docker graph path is going to mounted.
        :param pulumi.Input[str] instance_id: An id identify the node, provided by cvm.
        :param pulumi.Input[str] instance_name: The name ot node.
        :param pulumi.Input[str] instance_type: The instance type of the node needed by cvm.
        :param pulumi.Input[int] is_normal: Describe whether the node is normal.
        :param pulumi.Input[int] is_vpc_gateway: Describe whether the node enable the gateway capability.
        :param pulumi.Input[str] key_id: The key_id of each node(if using key pair to access).
        :param pulumi.Input[str] lan_ip: Describe the lan ip of the node.
        :param pulumi.Input[int] mem: The memory of the node.
        :param pulumi.Input[str] mount_target: The path which volume is going to be mounted.
        :param pulumi.Input[str] password: The password of each node.
        :param pulumi.Input[int] period: The puchase duration of the node needed by cvm.
        :param pulumi.Input[int] require_wan_ip: Indicate whether wan ip is needed.
        :param pulumi.Input[int] root_size: The size of the root volume.
        :param pulumi.Input[str] root_type: The type of the root volume. see more from CVM.
        :param pulumi.Input[str] sg_id: The security group id.
        :param pulumi.Input[int] storage_size: The size of the data volume.
        :param pulumi.Input[str] storage_type: The type of the data volume. see more from CVM.
        :param pulumi.Input[str] subnet_id: The subnet id which the node stays in.
        :param pulumi.Input[int] unschedulable: Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
        :param pulumi.Input[str] user_script: User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
               CCS api documents.
        :param pulumi.Input[str] wan_ip: Describe the wan ip of the node.
        :param pulumi.Input[str] zone_id: The zone which the node stays in.
        """
        if abnormal_reason is not None:
            pulumi.set(__self__, "abnormal_reason", abnormal_reason)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if bandwidth_type is not None:
            pulumi.set(__self__, "bandwidth_type", bandwidth_type)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cpu is not None:
            warnings.warn("""It has been deprecated from version 1.16.0. Set 'instance_type' instead.""", DeprecationWarning)
            pulumi.log.warn("""cpu is deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.""")
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if cvm_type is not None:
            pulumi.set(__self__, "cvm_type", cvm_type)
        if docker_graph_path is not None:
            pulumi.set(__self__, "docker_graph_path", docker_graph_path)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if is_normal is not None:
            pulumi.set(__self__, "is_normal", is_normal)
        if is_vpc_gateway is not None:
            pulumi.set(__self__, "is_vpc_gateway", is_vpc_gateway)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if lan_ip is not None:
            pulumi.set(__self__, "lan_ip", lan_ip)
        if mem is not None:
            warnings.warn("""It has been deprecated from version 1.16.0. Set 'instance_type' instead.""", DeprecationWarning)
            pulumi.log.warn("""mem is deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.""")
        if mem is not None:
            pulumi.set(__self__, "mem", mem)
        if mount_target is not None:
            pulumi.set(__self__, "mount_target", mount_target)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if require_wan_ip is not None:
            pulumi.set(__self__, "require_wan_ip", require_wan_ip)
        if root_size is not None:
            pulumi.set(__self__, "root_size", root_size)
        if root_type is not None:
            pulumi.set(__self__, "root_type", root_type)
        if sg_id is not None:
            pulumi.set(__self__, "sg_id", sg_id)
        if storage_size is not None:
            pulumi.set(__self__, "storage_size", storage_size)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if unschedulable is not None:
            pulumi.set(__self__, "unschedulable", unschedulable)
        if user_script is not None:
            pulumi.set(__self__, "user_script", user_script)
        if wan_ip is not None:
            pulumi.set(__self__, "wan_ip", wan_ip)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="abnormalReason")
    def abnormal_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Describe the reason when node is in abnormal state(if it was).
        """
        return pulumi.get(self, "abnormal_reason")

    @abnormal_reason.setter
    def abnormal_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "abnormal_reason", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        The network bandwidth of the node.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter(name="bandwidthType")
    def bandwidth_type(self) -> Optional[pulumi.Input[str]]:
        """
        The network type of the node.
        """
        return pulumi.get(self, "bandwidth_type")

    @bandwidth_type.setter
    def bandwidth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_type", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        The cpu of the node.
        """
        warnings.warn("""It has been deprecated from version 1.16.0. Set 'instance_type' instead.""", DeprecationWarning)
        pulumi.log.warn("""cpu is deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.""")

        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="cvmType")
    def cvm_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of node needed by cvm.
        """
        return pulumi.get(self, "cvm_type")

    @cvm_type.setter
    def cvm_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cvm_type", value)

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> Optional[pulumi.Input[str]]:
        """
        The docker graph path is going to mounted.
        """
        return pulumi.get(self, "docker_graph_path")

    @docker_graph_path.setter
    def docker_graph_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "docker_graph_path", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        An id identify the node, provided by cvm.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name ot node.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The instance type of the node needed by cvm.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="isNormal")
    def is_normal(self) -> Optional[pulumi.Input[int]]:
        """
        Describe whether the node is normal.
        """
        return pulumi.get(self, "is_normal")

    @is_normal.setter
    def is_normal(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_normal", value)

    @property
    @pulumi.getter(name="isVpcGateway")
    def is_vpc_gateway(self) -> Optional[pulumi.Input[int]]:
        """
        Describe whether the node enable the gateway capability.
        """
        return pulumi.get(self, "is_vpc_gateway")

    @is_vpc_gateway.setter
    def is_vpc_gateway(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_vpc_gateway", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The key_id of each node(if using key pair to access).
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="lanIp")
    def lan_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Describe the lan ip of the node.
        """
        return pulumi.get(self, "lan_ip")

    @lan_ip.setter
    def lan_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lan_ip", value)

    @property
    @pulumi.getter
    def mem(self) -> Optional[pulumi.Input[int]]:
        """
        The memory of the node.
        """
        warnings.warn("""It has been deprecated from version 1.16.0. Set 'instance_type' instead.""", DeprecationWarning)
        pulumi.log.warn("""mem is deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.""")

        return pulumi.get(self, "mem")

    @mem.setter
    def mem(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem", value)

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> Optional[pulumi.Input[str]]:
        """
        The path which volume is going to be mounted.
        """
        return pulumi.get(self, "mount_target")

    @mount_target.setter
    def mount_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_target", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of each node.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        The puchase duration of the node needed by cvm.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="requireWanIp")
    def require_wan_ip(self) -> Optional[pulumi.Input[int]]:
        """
        Indicate whether wan ip is needed.
        """
        return pulumi.get(self, "require_wan_ip")

    @require_wan_ip.setter
    def require_wan_ip(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "require_wan_ip", value)

    @property
    @pulumi.getter(name="rootSize")
    def root_size(self) -> Optional[pulumi.Input[int]]:
        """
        The size of the root volume.
        """
        return pulumi.get(self, "root_size")

    @root_size.setter
    def root_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_size", value)

    @property
    @pulumi.getter(name="rootType")
    def root_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the root volume. see more from CVM.
        """
        return pulumi.get(self, "root_type")

    @root_type.setter
    def root_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_type", value)

    @property
    @pulumi.getter(name="sgId")
    def sg_id(self) -> Optional[pulumi.Input[str]]:
        """
        The security group id.
        """
        return pulumi.get(self, "sg_id")

    @sg_id.setter
    def sg_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sg_id", value)

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> Optional[pulumi.Input[int]]:
        """
        The size of the data volume.
        """
        return pulumi.get(self, "storage_size")

    @storage_size.setter
    def storage_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_size", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the data volume. see more from CVM.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The subnet id which the node stays in.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def unschedulable(self) -> Optional[pulumi.Input[int]]:
        """
        Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
        """
        return pulumi.get(self, "unschedulable")

    @unschedulable.setter
    def unschedulable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unschedulable", value)

    @property
    @pulumi.getter(name="userScript")
    def user_script(self) -> Optional[pulumi.Input[str]]:
        """
        User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
        CCS api documents.
        """
        return pulumi.get(self, "user_script")

    @user_script.setter
    def user_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_script", value)

    @property
    @pulumi.getter(name="wanIp")
    def wan_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Describe the wan ip of the node.
        """
        return pulumi.get(self, "wan_ip")

    @wan_ip.setter
    def wan_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_ip", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        The zone which the node stays in.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class ClusterInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 bandwidth_type: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 cvm_type: Optional[pulumi.Input[str]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 is_vpc_gateway: Optional[pulumi.Input[int]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 mem: Optional[pulumi.Input[int]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 require_wan_ip: Optional[pulumi.Input[int]] = None,
                 root_size: Optional[pulumi.Input[int]] = None,
                 root_type: Optional[pulumi.Input[str]] = None,
                 sg_id: Optional[pulumi.Input[str]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 user_script: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ClusterInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] bandwidth: The network bandwidth of the node.
        :param pulumi.Input[str] bandwidth_type: The network type of the node.
        :param pulumi.Input[str] cluster_id: The id of the cluster.
        :param pulumi.Input[int] cpu: The cpu of the node.
        :param pulumi.Input[str] cvm_type: The type of node needed by cvm.
        :param pulumi.Input[str] docker_graph_path: The docker graph path is going to mounted.
        :param pulumi.Input[str] instance_name: The name ot node.
        :param pulumi.Input[str] instance_type: The instance type of the node needed by cvm.
        :param pulumi.Input[int] is_vpc_gateway: Describe whether the node enable the gateway capability.
        :param pulumi.Input[str] key_id: The key_id of each node(if using key pair to access).
        :param pulumi.Input[int] mem: The memory of the node.
        :param pulumi.Input[str] mount_target: The path which volume is going to be mounted.
        :param pulumi.Input[str] password: The password of each node.
        :param pulumi.Input[int] period: The puchase duration of the node needed by cvm.
        :param pulumi.Input[int] require_wan_ip: Indicate whether wan ip is needed.
        :param pulumi.Input[int] root_size: The size of the root volume.
        :param pulumi.Input[str] root_type: The type of the root volume. see more from CVM.
        :param pulumi.Input[str] sg_id: The security group id.
        :param pulumi.Input[int] storage_size: The size of the data volume.
        :param pulumi.Input[str] storage_type: The type of the data volume. see more from CVM.
        :param pulumi.Input[str] subnet_id: The subnet id which the node stays in.
        :param pulumi.Input[int] unschedulable: Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
        :param pulumi.Input[str] user_script: User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
               CCS api documents.
        :param pulumi.Input[str] zone_id: The zone which the node stays in.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ClusterInstance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ClusterInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 bandwidth_type: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 cvm_type: Optional[pulumi.Input[str]] = None,
                 docker_graph_path: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 is_vpc_gateway: Optional[pulumi.Input[int]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 mem: Optional[pulumi.Input[int]] = None,
                 mount_target: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 require_wan_ip: Optional[pulumi.Input[int]] = None,
                 root_size: Optional[pulumi.Input[int]] = None,
                 root_type: Optional[pulumi.Input[str]] = None,
                 sg_id: Optional[pulumi.Input[str]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 user_script: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterInstanceArgs.__new__(ClusterInstanceArgs)

            if bandwidth is None and not opts.urn:
                raise TypeError("Missing required property 'bandwidth'")
            __props__.__dict__["bandwidth"] = bandwidth
            if bandwidth_type is None and not opts.urn:
                raise TypeError("Missing required property 'bandwidth_type'")
            __props__.__dict__["bandwidth_type"] = bandwidth_type
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if cpu is not None and not opts.urn:
                warnings.warn("""It has been deprecated from version 1.16.0. Set 'instance_type' instead.""", DeprecationWarning)
                pulumi.log.warn("""cpu is deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.""")
            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["cvm_type"] = cvm_type
            __props__.__dict__["docker_graph_path"] = docker_graph_path
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["instance_type"] = instance_type
            if is_vpc_gateway is None and not opts.urn:
                raise TypeError("Missing required property 'is_vpc_gateway'")
            __props__.__dict__["is_vpc_gateway"] = is_vpc_gateway
            __props__.__dict__["key_id"] = key_id
            if mem is not None and not opts.urn:
                warnings.warn("""It has been deprecated from version 1.16.0. Set 'instance_type' instead.""", DeprecationWarning)
                pulumi.log.warn("""mem is deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.""")
            __props__.__dict__["mem"] = mem
            __props__.__dict__["mount_target"] = mount_target
            __props__.__dict__["password"] = password
            __props__.__dict__["period"] = period
            __props__.__dict__["require_wan_ip"] = require_wan_ip
            if root_size is None and not opts.urn:
                raise TypeError("Missing required property 'root_size'")
            __props__.__dict__["root_size"] = root_size
            __props__.__dict__["root_type"] = root_type
            __props__.__dict__["sg_id"] = sg_id
            if storage_size is None and not opts.urn:
                raise TypeError("Missing required property 'storage_size'")
            __props__.__dict__["storage_size"] = storage_size
            __props__.__dict__["storage_type"] = storage_type
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["unschedulable"] = unschedulable
            __props__.__dict__["user_script"] = user_script
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["abnormal_reason"] = None
            __props__.__dict__["instance_id"] = None
            __props__.__dict__["is_normal"] = None
            __props__.__dict__["lan_ip"] = None
            __props__.__dict__["wan_ip"] = None
        super(ClusterInstance, __self__).__init__(
            'tencentcloud:Deprecatedcontainer/clusterInstance:ClusterInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            abnormal_reason: Optional[pulumi.Input[str]] = None,
            bandwidth: Optional[pulumi.Input[int]] = None,
            bandwidth_type: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            cpu: Optional[pulumi.Input[int]] = None,
            cvm_type: Optional[pulumi.Input[str]] = None,
            docker_graph_path: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            instance_type: Optional[pulumi.Input[str]] = None,
            is_normal: Optional[pulumi.Input[int]] = None,
            is_vpc_gateway: Optional[pulumi.Input[int]] = None,
            key_id: Optional[pulumi.Input[str]] = None,
            lan_ip: Optional[pulumi.Input[str]] = None,
            mem: Optional[pulumi.Input[int]] = None,
            mount_target: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            period: Optional[pulumi.Input[int]] = None,
            require_wan_ip: Optional[pulumi.Input[int]] = None,
            root_size: Optional[pulumi.Input[int]] = None,
            root_type: Optional[pulumi.Input[str]] = None,
            sg_id: Optional[pulumi.Input[str]] = None,
            storage_size: Optional[pulumi.Input[int]] = None,
            storage_type: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            unschedulable: Optional[pulumi.Input[int]] = None,
            user_script: Optional[pulumi.Input[str]] = None,
            wan_ip: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'ClusterInstance':
        """
        Get an existing ClusterInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] abnormal_reason: Describe the reason when node is in abnormal state(if it was).
        :param pulumi.Input[int] bandwidth: The network bandwidth of the node.
        :param pulumi.Input[str] bandwidth_type: The network type of the node.
        :param pulumi.Input[str] cluster_id: The id of the cluster.
        :param pulumi.Input[int] cpu: The cpu of the node.
        :param pulumi.Input[str] cvm_type: The type of node needed by cvm.
        :param pulumi.Input[str] docker_graph_path: The docker graph path is going to mounted.
        :param pulumi.Input[str] instance_id: An id identify the node, provided by cvm.
        :param pulumi.Input[str] instance_name: The name ot node.
        :param pulumi.Input[str] instance_type: The instance type of the node needed by cvm.
        :param pulumi.Input[int] is_normal: Describe whether the node is normal.
        :param pulumi.Input[int] is_vpc_gateway: Describe whether the node enable the gateway capability.
        :param pulumi.Input[str] key_id: The key_id of each node(if using key pair to access).
        :param pulumi.Input[str] lan_ip: Describe the lan ip of the node.
        :param pulumi.Input[int] mem: The memory of the node.
        :param pulumi.Input[str] mount_target: The path which volume is going to be mounted.
        :param pulumi.Input[str] password: The password of each node.
        :param pulumi.Input[int] period: The puchase duration of the node needed by cvm.
        :param pulumi.Input[int] require_wan_ip: Indicate whether wan ip is needed.
        :param pulumi.Input[int] root_size: The size of the root volume.
        :param pulumi.Input[str] root_type: The type of the root volume. see more from CVM.
        :param pulumi.Input[str] sg_id: The security group id.
        :param pulumi.Input[int] storage_size: The size of the data volume.
        :param pulumi.Input[str] storage_type: The type of the data volume. see more from CVM.
        :param pulumi.Input[str] subnet_id: The subnet id which the node stays in.
        :param pulumi.Input[int] unschedulable: Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
        :param pulumi.Input[str] user_script: User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
               CCS api documents.
        :param pulumi.Input[str] wan_ip: Describe the wan ip of the node.
        :param pulumi.Input[str] zone_id: The zone which the node stays in.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterInstanceState.__new__(_ClusterInstanceState)

        __props__.__dict__["abnormal_reason"] = abnormal_reason
        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["bandwidth_type"] = bandwidth_type
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["cvm_type"] = cvm_type
        __props__.__dict__["docker_graph_path"] = docker_graph_path
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["instance_type"] = instance_type
        __props__.__dict__["is_normal"] = is_normal
        __props__.__dict__["is_vpc_gateway"] = is_vpc_gateway
        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["lan_ip"] = lan_ip
        __props__.__dict__["mem"] = mem
        __props__.__dict__["mount_target"] = mount_target
        __props__.__dict__["password"] = password
        __props__.__dict__["period"] = period
        __props__.__dict__["require_wan_ip"] = require_wan_ip
        __props__.__dict__["root_size"] = root_size
        __props__.__dict__["root_type"] = root_type
        __props__.__dict__["sg_id"] = sg_id
        __props__.__dict__["storage_size"] = storage_size
        __props__.__dict__["storage_type"] = storage_type
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["unschedulable"] = unschedulable
        __props__.__dict__["user_script"] = user_script
        __props__.__dict__["wan_ip"] = wan_ip
        __props__.__dict__["zone_id"] = zone_id
        return ClusterInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="abnormalReason")
    def abnormal_reason(self) -> pulumi.Output[str]:
        """
        Describe the reason when node is in abnormal state(if it was).
        """
        return pulumi.get(self, "abnormal_reason")

    @property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[int]:
        """
        The network bandwidth of the node.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="bandwidthType")
    def bandwidth_type(self) -> pulumi.Output[str]:
        """
        The network type of the node.
        """
        return pulumi.get(self, "bandwidth_type")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        The id of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[Optional[int]]:
        """
        The cpu of the node.
        """
        warnings.warn("""It has been deprecated from version 1.16.0. Set 'instance_type' instead.""", DeprecationWarning)
        pulumi.log.warn("""cpu is deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.""")

        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="cvmType")
    def cvm_type(self) -> pulumi.Output[Optional[str]]:
        """
        The type of node needed by cvm.
        """
        return pulumi.get(self, "cvm_type")

    @property
    @pulumi.getter(name="dockerGraphPath")
    def docker_graph_path(self) -> pulumi.Output[Optional[str]]:
        """
        The docker graph path is going to mounted.
        """
        return pulumi.get(self, "docker_graph_path")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        An id identify the node, provided by cvm.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name ot node.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Output[Optional[str]]:
        """
        The instance type of the node needed by cvm.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="isNormal")
    def is_normal(self) -> pulumi.Output[int]:
        """
        Describe whether the node is normal.
        """
        return pulumi.get(self, "is_normal")

    @property
    @pulumi.getter(name="isVpcGateway")
    def is_vpc_gateway(self) -> pulumi.Output[int]:
        """
        Describe whether the node enable the gateway capability.
        """
        return pulumi.get(self, "is_vpc_gateway")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[Optional[str]]:
        """
        The key_id of each node(if using key pair to access).
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="lanIp")
    def lan_ip(self) -> pulumi.Output[str]:
        """
        Describe the lan ip of the node.
        """
        return pulumi.get(self, "lan_ip")

    @property
    @pulumi.getter
    def mem(self) -> pulumi.Output[Optional[int]]:
        """
        The memory of the node.
        """
        warnings.warn("""It has been deprecated from version 1.16.0. Set 'instance_type' instead.""", DeprecationWarning)
        pulumi.log.warn("""mem is deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.""")

        return pulumi.get(self, "mem")

    @property
    @pulumi.getter(name="mountTarget")
    def mount_target(self) -> pulumi.Output[Optional[str]]:
        """
        The path which volume is going to be mounted.
        """
        return pulumi.get(self, "mount_target")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        The password of each node.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[int]]:
        """
        The puchase duration of the node needed by cvm.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="requireWanIp")
    def require_wan_ip(self) -> pulumi.Output[Optional[int]]:
        """
        Indicate whether wan ip is needed.
        """
        return pulumi.get(self, "require_wan_ip")

    @property
    @pulumi.getter(name="rootSize")
    def root_size(self) -> pulumi.Output[int]:
        """
        The size of the root volume.
        """
        return pulumi.get(self, "root_size")

    @property
    @pulumi.getter(name="rootType")
    def root_type(self) -> pulumi.Output[Optional[str]]:
        """
        The type of the root volume. see more from CVM.
        """
        return pulumi.get(self, "root_type")

    @property
    @pulumi.getter(name="sgId")
    def sg_id(self) -> pulumi.Output[Optional[str]]:
        """
        The security group id.
        """
        return pulumi.get(self, "sg_id")

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> pulumi.Output[int]:
        """
        The size of the data volume.
        """
        return pulumi.get(self, "storage_size")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Output[Optional[str]]:
        """
        The type of the data volume. see more from CVM.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        The subnet id which the node stays in.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def unschedulable(self) -> pulumi.Output[Optional[int]]:
        """
        Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
        """
        return pulumi.get(self, "unschedulable")

    @property
    @pulumi.getter(name="userScript")
    def user_script(self) -> pulumi.Output[Optional[str]]:
        """
        User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
        CCS api documents.
        """
        return pulumi.get(self, "user_script")

    @property
    @pulumi.getter(name="wanIp")
    def wan_ip(self) -> pulumi.Output[str]:
        """
        Describe the wan ip of the node.
        """
        return pulumi.get(self, "wan_ip")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        The zone which the node stays in.
        """
        return pulumi.get(self, "zone_id")

