# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BusinessIntelligenceInstanceResourceTag',
    'ConfigInstanceParamParamList',
    'ConfigInstanceRoGroupWeightPair',
    'GeneralCloudInstanceResourceTag',
    'MigrationMigrateDbSet',
    'MigrationRenameRestore',
    'MigrationSource',
    'MigrationTarget',
    'PublishSubscribeDatabaseTuple',
    'RestoreInstanceEncryption',
    'RestoreInstanceRenameRestore',
    'RollbackInstanceEncryption',
    'RollbackInstanceRenameRestore',
    'StartXeventEventConfig',
    'GetAccountDbAttachmentsListResult',
    'GetAccountsListResult',
    'GetBackupCommandsListResult',
    'GetBackupUploadSizeCosUploadBackupFileSetResult',
    'GetBackupsListResult',
    'GetBasicInstancesInstanceListResult',
    'GetDbsDbListResult',
    'GetInsAttributeTdeConfigResult',
    'GetInstanceParamRecordsItemResult',
    'GetInstancesInstanceListResult',
    'GetProjectSecurityGroupsSecurityGroupSetResult',
    'GetProjectSecurityGroupsSecurityGroupSetInboundSetResult',
    'GetProjectSecurityGroupsSecurityGroupSetOutboundSetResult',
    'GetPublishSubscribesPublishSubscribeListResult',
    'GetPublishSubscribesPublishSubscribeListDatabaseTupleResult',
    'GetQueryXeventEventResult',
    'GetReadonlyGroupsListResult',
    'GetRegionsRegionSetResult',
    'GetRollbackTimeDetailResult',
    'GetSlowlogsSlowlogResult',
    'GetZoneConfigZoneListResult',
    'GetZoneConfigZoneListSpecinfoListResult',
]

@pulumi.output_type
class BusinessIntelligenceInstanceResourceTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagKey":
            suggest = "tag_key"
        elif key == "tagValue":
            suggest = "tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BusinessIntelligenceInstanceResourceTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BusinessIntelligenceInstanceResourceTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BusinessIntelligenceInstanceResourceTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_key: Optional[str] = None,
                 tag_value: Optional[str] = None):
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_value is not None:
            pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[str]:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[str]:
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class ConfigInstanceParamParamList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentValue":
            suggest = "current_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigInstanceParamParamList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigInstanceParamParamList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigInstanceParamParamList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_value: Optional[str] = None,
                 name: Optional[str] = None):
        if current_value is not None:
            pulumi.set(__self__, "current_value", current_value)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> Optional[str]:
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ConfigInstanceRoGroupWeightPair(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "readOnlyInstanceId":
            suggest = "read_only_instance_id"
        elif key == "readOnlyWeight":
            suggest = "read_only_weight"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigInstanceRoGroupWeightPair. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigInstanceRoGroupWeightPair.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigInstanceRoGroupWeightPair.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 read_only_instance_id: str,
                 read_only_weight: int):
        pulumi.set(__self__, "read_only_instance_id", read_only_instance_id)
        pulumi.set(__self__, "read_only_weight", read_only_weight)

    @property
    @pulumi.getter(name="readOnlyInstanceId")
    def read_only_instance_id(self) -> str:
        return pulumi.get(self, "read_only_instance_id")

    @property
    @pulumi.getter(name="readOnlyWeight")
    def read_only_weight(self) -> int:
        return pulumi.get(self, "read_only_weight")


@pulumi.output_type
class GeneralCloudInstanceResourceTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagKey":
            suggest = "tag_key"
        elif key == "tagValue":
            suggest = "tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GeneralCloudInstanceResourceTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GeneralCloudInstanceResourceTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GeneralCloudInstanceResourceTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_key: Optional[str] = None,
                 tag_value: Optional[str] = None):
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_value is not None:
            pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[str]:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[str]:
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class MigrationMigrateDbSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbName":
            suggest = "db_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationMigrateDbSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationMigrateDbSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationMigrateDbSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_name: Optional[str] = None):
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[str]:
        return pulumi.get(self, "db_name")


@pulumi.output_type
class MigrationRenameRestore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newName":
            suggest = "new_name"
        elif key == "oldName":
            suggest = "old_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationRenameRestore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationRenameRestore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationRenameRestore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_name: Optional[str] = None,
                 old_name: Optional[str] = None):
        if new_name is not None:
            pulumi.set(__self__, "new_name", new_name)
        if old_name is not None:
            pulumi.set(__self__, "old_name", old_name)

    @property
    @pulumi.getter(name="newName")
    def new_name(self) -> Optional[str]:
        return pulumi.get(self, "new_name")

    @property
    @pulumi.getter(name="oldName")
    def old_name(self) -> Optional[str]:
        return pulumi.get(self, "old_name")


@pulumi.output_type
class MigrationSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cvmId":
            suggest = "cvm_id"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "urlPassword":
            suggest = "url_password"
        elif key == "userName":
            suggest = "user_name"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cvm_id: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 ip: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[int] = None,
                 subnet_id: Optional[str] = None,
                 url_password: Optional[str] = None,
                 urls: Optional[Sequence[str]] = None,
                 user_name: Optional[str] = None,
                 vpc_id: Optional[str] = None):
        if cvm_id is not None:
            pulumi.set(__self__, "cvm_id", cvm_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if url_password is not None:
            pulumi.set(__self__, "url_password", url_password)
        if urls is not None:
            pulumi.set(__self__, "urls", urls)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="cvmId")
    def cvm_id(self) -> Optional[str]:
        return pulumi.get(self, "cvm_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="urlPassword")
    def url_password(self) -> Optional[str]:
        return pulumi.get(self, "url_password")

    @property
    @pulumi.getter
    def urls(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "urls")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class MigrationTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: Optional[str] = None,
                 password: Optional[str] = None,
                 user_name: Optional[str] = None):
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[str]:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class PublishSubscribeDatabaseTuple(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publishDatabase":
            suggest = "publish_database"
        elif key == "subscribeDatabase":
            suggest = "subscribe_database"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PublishSubscribeDatabaseTuple. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PublishSubscribeDatabaseTuple.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PublishSubscribeDatabaseTuple.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 publish_database: str,
                 subscribe_database: str):
        pulumi.set(__self__, "publish_database", publish_database)
        pulumi.set(__self__, "subscribe_database", subscribe_database)

    @property
    @pulumi.getter(name="publishDatabase")
    def publish_database(self) -> str:
        return pulumi.get(self, "publish_database")

    @property
    @pulumi.getter(name="subscribeDatabase")
    def subscribe_database(self) -> str:
        return pulumi.get(self, "subscribe_database")


@pulumi.output_type
class RestoreInstanceEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbName":
            suggest = "db_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RestoreInstanceEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RestoreInstanceEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RestoreInstanceEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_name: Optional[str] = None,
                 status: Optional[str] = None):
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[str]:
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class RestoreInstanceRenameRestore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newName":
            suggest = "new_name"
        elif key == "oldName":
            suggest = "old_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RestoreInstanceRenameRestore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RestoreInstanceRenameRestore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RestoreInstanceRenameRestore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_name: str,
                 old_name: str):
        pulumi.set(__self__, "new_name", new_name)
        pulumi.set(__self__, "old_name", old_name)

    @property
    @pulumi.getter(name="newName")
    def new_name(self) -> str:
        return pulumi.get(self, "new_name")

    @property
    @pulumi.getter(name="oldName")
    def old_name(self) -> str:
        return pulumi.get(self, "old_name")


@pulumi.output_type
class RollbackInstanceEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbName":
            suggest = "db_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RollbackInstanceEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RollbackInstanceEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RollbackInstanceEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_name: Optional[str] = None,
                 status: Optional[str] = None):
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[str]:
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class RollbackInstanceRenameRestore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newName":
            suggest = "new_name"
        elif key == "oldName":
            suggest = "old_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RollbackInstanceRenameRestore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RollbackInstanceRenameRestore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RollbackInstanceRenameRestore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_name: str,
                 old_name: str):
        pulumi.set(__self__, "new_name", new_name)
        pulumi.set(__self__, "old_name", old_name)

    @property
    @pulumi.getter(name="newName")
    def new_name(self) -> str:
        return pulumi.get(self, "new_name")

    @property
    @pulumi.getter(name="oldName")
    def old_name(self) -> str:
        return pulumi.get(self, "old_name")


@pulumi.output_type
class StartXeventEventConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventType":
            suggest = "event_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StartXeventEventConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StartXeventEventConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StartXeventEventConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_type: str,
                 threshold: int):
        pulumi.set(__self__, "event_type", event_type)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> str:
        return pulumi.get(self, "event_type")

    @property
    @pulumi.getter
    def threshold(self) -> int:
        return pulumi.get(self, "threshold")


@pulumi.output_type
class GetAccountDbAttachmentsListResult(dict):
    def __init__(__self__, *,
                 account_name: str,
                 db_name: str,
                 instance_id: str,
                 privilege: str):
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "privilege", privilege)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> str:
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def privilege(self) -> str:
        return pulumi.get(self, "privilege")


@pulumi.output_type
class GetAccountsListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 instance_id: str,
                 name: str,
                 remark: str,
                 status: int,
                 update_time: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetBackupCommandsListResult(dict):
    def __init__(__self__, *,
                 command: str,
                 request_id: str):
        pulumi.set(__self__, "command", command)
        pulumi.set(__self__, "request_id", request_id)

    @property
    @pulumi.getter
    def command(self) -> str:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")


@pulumi.output_type
class GetBackupUploadSizeCosUploadBackupFileSetResult(dict):
    def __init__(__self__, *,
                 file_name: str,
                 size: int):
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetBackupsListResult(dict):
    def __init__(__self__, *,
                 db_lists: Sequence[str],
                 end_time: str,
                 file_name: str,
                 id: str,
                 instance_id: str,
                 internet_url: str,
                 intranet_url: str,
                 size: int,
                 start_time: str,
                 status: int,
                 strategy: int,
                 trigger_model: int):
        pulumi.set(__self__, "db_lists", db_lists)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "internet_url", internet_url)
        pulumi.set(__self__, "intranet_url", intranet_url)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "strategy", strategy)
        pulumi.set(__self__, "trigger_model", trigger_model)

    @property
    @pulumi.getter(name="dbLists")
    def db_lists(self) -> Sequence[str]:
        return pulumi.get(self, "db_lists")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="internetUrl")
    def internet_url(self) -> str:
        return pulumi.get(self, "internet_url")

    @property
    @pulumi.getter(name="intranetUrl")
    def intranet_url(self) -> str:
        return pulumi.get(self, "intranet_url")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def strategy(self) -> int:
        return pulumi.get(self, "strategy")

    @property
    @pulumi.getter(name="triggerModel")
    def trigger_model(self) -> int:
        return pulumi.get(self, "trigger_model")


@pulumi.output_type
class GetBasicInstancesInstanceListResult(dict):
    def __init__(__self__, *,
                 availability_zone: str,
                 charge_type: str,
                 cpu: int,
                 create_time: str,
                 engine_version: str,
                 id: str,
                 memory: int,
                 name: str,
                 project_id: int,
                 status: int,
                 storage: int,
                 subnet_id: str,
                 tags: Mapping[str, Any],
                 used_storage: int,
                 vip: str,
                 vpc_id: str,
                 vport: int):
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "used_storage", used_storage)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vport", vport)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="usedStorage")
    def used_storage(self) -> int:
        return pulumi.get(self, "used_storage")

    @property
    @pulumi.getter
    def vip(self) -> str:
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def vport(self) -> int:
        return pulumi.get(self, "vport")


@pulumi.output_type
class GetDbsDbListResult(dict):
    def __init__(__self__, *,
                 charset: str,
                 create_time: str,
                 instance_id: str,
                 name: str,
                 remark: str,
                 status: str):
        pulumi.set(__self__, "charset", charset)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def charset(self) -> str:
        return pulumi.get(self, "charset")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetInsAttributeTdeConfigResult(dict):
    def __init__(__self__, *,
                 certificate_attribution: str,
                 encryption: str,
                 quote_uin: str):
        pulumi.set(__self__, "certificate_attribution", certificate_attribution)
        pulumi.set(__self__, "encryption", encryption)
        pulumi.set(__self__, "quote_uin", quote_uin)

    @property
    @pulumi.getter(name="certificateAttribution")
    def certificate_attribution(self) -> str:
        return pulumi.get(self, "certificate_attribution")

    @property
    @pulumi.getter
    def encryption(self) -> str:
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="quoteUin")
    def quote_uin(self) -> str:
        return pulumi.get(self, "quote_uin")


@pulumi.output_type
class GetInstanceParamRecordsItemResult(dict):
    def __init__(__self__, *,
                 instance_id: str,
                 modify_time: str,
                 new_value: str,
                 old_value: str,
                 param_name: str,
                 status: int):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "old_value", old_value)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> str:
        return pulumi.get(self, "new_value")

    @property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> str:
        return pulumi.get(self, "old_value")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetInstancesInstanceListResult(dict):
    def __init__(__self__, *,
                 availability_zone: str,
                 charge_type: str,
                 create_time: str,
                 engine_version: str,
                 ha_type: str,
                 id: str,
                 memory: int,
                 name: str,
                 project_id: int,
                 ro_flag: str,
                 status: int,
                 storage: int,
                 subnet_id: str,
                 tags: Mapping[str, Any],
                 used_storage: int,
                 vip: str,
                 vpc_id: str,
                 vport: int):
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "ha_type", ha_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "ro_flag", ro_flag)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "used_storage", used_storage)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vport", vport)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="haType")
    def ha_type(self) -> str:
        return pulumi.get(self, "ha_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="roFlag")
    def ro_flag(self) -> str:
        return pulumi.get(self, "ro_flag")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="usedStorage")
    def used_storage(self) -> int:
        return pulumi.get(self, "used_storage")

    @property
    @pulumi.getter
    def vip(self) -> str:
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def vport(self) -> int:
        return pulumi.get(self, "vport")


@pulumi.output_type
class GetProjectSecurityGroupsSecurityGroupSetResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 inbound_sets: Sequence['outputs.GetProjectSecurityGroupsSecurityGroupSetInboundSetResult'],
                 outbound_sets: Sequence['outputs.GetProjectSecurityGroupsSecurityGroupSetOutboundSetResult'],
                 project_id: int,
                 security_group_id: str,
                 security_group_name: str,
                 security_group_remark: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "inbound_sets", inbound_sets)
        pulumi.set(__self__, "outbound_sets", outbound_sets)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)
        pulumi.set(__self__, "security_group_remark", security_group_remark)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="inboundSets")
    def inbound_sets(self) -> Sequence['outputs.GetProjectSecurityGroupsSecurityGroupSetInboundSetResult']:
        return pulumi.get(self, "inbound_sets")

    @property
    @pulumi.getter(name="outboundSets")
    def outbound_sets(self) -> Sequence['outputs.GetProjectSecurityGroupsSecurityGroupSetOutboundSetResult']:
        return pulumi.get(self, "outbound_sets")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        return pulumi.get(self, "security_group_name")

    @property
    @pulumi.getter(name="securityGroupRemark")
    def security_group_remark(self) -> str:
        return pulumi.get(self, "security_group_remark")


@pulumi.output_type
class GetProjectSecurityGroupsSecurityGroupSetInboundSetResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 dir: str,
                 ip_protocol: str,
                 port_range: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "dir", dir)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter
    def dir(self) -> str:
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        return pulumi.get(self, "port_range")


@pulumi.output_type
class GetProjectSecurityGroupsSecurityGroupSetOutboundSetResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 dir: str,
                 ip_protocol: str,
                 port_range: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "dir", dir)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter
    def dir(self) -> str:
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        return pulumi.get(self, "port_range")


@pulumi.output_type
class GetPublishSubscribesPublishSubscribeListResult(dict):
    def __init__(__self__, *,
                 database_tuples: Sequence['outputs.GetPublishSubscribesPublishSubscribeListDatabaseTupleResult'],
                 publish_instance_id: str,
                 publish_instance_ip: str,
                 publish_instance_name: str,
                 publish_subscribe_id: int,
                 publish_subscribe_name: str,
                 subscribe_instance_id: str,
                 subscribe_instance_ip: str,
                 subscribe_instance_name: str):
        pulumi.set(__self__, "database_tuples", database_tuples)
        pulumi.set(__self__, "publish_instance_id", publish_instance_id)
        pulumi.set(__self__, "publish_instance_ip", publish_instance_ip)
        pulumi.set(__self__, "publish_instance_name", publish_instance_name)
        pulumi.set(__self__, "publish_subscribe_id", publish_subscribe_id)
        pulumi.set(__self__, "publish_subscribe_name", publish_subscribe_name)
        pulumi.set(__self__, "subscribe_instance_id", subscribe_instance_id)
        pulumi.set(__self__, "subscribe_instance_ip", subscribe_instance_ip)
        pulumi.set(__self__, "subscribe_instance_name", subscribe_instance_name)

    @property
    @pulumi.getter(name="databaseTuples")
    def database_tuples(self) -> Sequence['outputs.GetPublishSubscribesPublishSubscribeListDatabaseTupleResult']:
        return pulumi.get(self, "database_tuples")

    @property
    @pulumi.getter(name="publishInstanceId")
    def publish_instance_id(self) -> str:
        return pulumi.get(self, "publish_instance_id")

    @property
    @pulumi.getter(name="publishInstanceIp")
    def publish_instance_ip(self) -> str:
        return pulumi.get(self, "publish_instance_ip")

    @property
    @pulumi.getter(name="publishInstanceName")
    def publish_instance_name(self) -> str:
        return pulumi.get(self, "publish_instance_name")

    @property
    @pulumi.getter(name="publishSubscribeId")
    def publish_subscribe_id(self) -> int:
        return pulumi.get(self, "publish_subscribe_id")

    @property
    @pulumi.getter(name="publishSubscribeName")
    def publish_subscribe_name(self) -> str:
        return pulumi.get(self, "publish_subscribe_name")

    @property
    @pulumi.getter(name="subscribeInstanceId")
    def subscribe_instance_id(self) -> str:
        return pulumi.get(self, "subscribe_instance_id")

    @property
    @pulumi.getter(name="subscribeInstanceIp")
    def subscribe_instance_ip(self) -> str:
        return pulumi.get(self, "subscribe_instance_ip")

    @property
    @pulumi.getter(name="subscribeInstanceName")
    def subscribe_instance_name(self) -> str:
        return pulumi.get(self, "subscribe_instance_name")


@pulumi.output_type
class GetPublishSubscribesPublishSubscribeListDatabaseTupleResult(dict):
    def __init__(__self__, *,
                 last_sync_time: str,
                 publish_database: str,
                 status: str,
                 subscribe_database: str):
        pulumi.set(__self__, "last_sync_time", last_sync_time)
        pulumi.set(__self__, "publish_database", publish_database)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subscribe_database", subscribe_database)

    @property
    @pulumi.getter(name="lastSyncTime")
    def last_sync_time(self) -> str:
        return pulumi.get(self, "last_sync_time")

    @property
    @pulumi.getter(name="publishDatabase")
    def publish_database(self) -> str:
        return pulumi.get(self, "publish_database")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subscribeDatabase")
    def subscribe_database(self) -> str:
        return pulumi.get(self, "subscribe_database")


@pulumi.output_type
class GetQueryXeventEventResult(dict):
    def __init__(__self__, *,
                 end_time: str,
                 event_type: str,
                 external_addr: str,
                 file_name: str,
                 id: int,
                 internal_addr: str,
                 size: int,
                 start_time: str,
                 status: int):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "event_type", event_type)
        pulumi.set(__self__, "external_addr", external_addr)
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "internal_addr", internal_addr)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> str:
        return pulumi.get(self, "event_type")

    @property
    @pulumi.getter(name="externalAddr")
    def external_addr(self) -> str:
        return pulumi.get(self, "external_addr")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalAddr")
    def internal_addr(self) -> str:
        return pulumi.get(self, "internal_addr")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetReadonlyGroupsListResult(dict):
    def __init__(__self__, *,
                 id: str,
                 is_offline_delay: int,
                 master_instance_id: str,
                 max_delay_time: int,
                 min_instances: int,
                 name: str,
                 readonly_instance_sets: Sequence[str],
                 status: int,
                 vip: str,
                 vport: int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_offline_delay", is_offline_delay)
        pulumi.set(__self__, "master_instance_id", master_instance_id)
        pulumi.set(__self__, "max_delay_time", max_delay_time)
        pulumi.set(__self__, "min_instances", min_instances)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "readonly_instance_sets", readonly_instance_sets)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "vport", vport)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isOfflineDelay")
    def is_offline_delay(self) -> int:
        return pulumi.get(self, "is_offline_delay")

    @property
    @pulumi.getter(name="masterInstanceId")
    def master_instance_id(self) -> str:
        return pulumi.get(self, "master_instance_id")

    @property
    @pulumi.getter(name="maxDelayTime")
    def max_delay_time(self) -> int:
        return pulumi.get(self, "max_delay_time")

    @property
    @pulumi.getter(name="minInstances")
    def min_instances(self) -> int:
        return pulumi.get(self, "min_instances")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="readonlyInstanceSets")
    def readonly_instance_sets(self) -> Sequence[str]:
        return pulumi.get(self, "readonly_instance_sets")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def vip(self) -> str:
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter
    def vport(self) -> int:
        return pulumi.get(self, "vport")


@pulumi.output_type
class GetRegionsRegionSetResult(dict):
    def __init__(__self__, *,
                 region: str,
                 region_id: int,
                 region_name: str,
                 region_state: str):
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "region_state", region_state)

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="regionState")
    def region_state(self) -> str:
        return pulumi.get(self, "region_state")


@pulumi.output_type
class GetRollbackTimeDetailResult(dict):
    def __init__(__self__, *,
                 db_name: str,
                 end_time: str,
                 start_time: str):
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetSlowlogsSlowlogResult(dict):
    def __init__(__self__, *,
                 count: int,
                 end_time: str,
                 external_addr: str,
                 id: int,
                 internal_addr: str,
                 size: int,
                 start_time: str,
                 status: int):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "external_addr", external_addr)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "internal_addr", internal_addr)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def count(self) -> int:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="externalAddr")
    def external_addr(self) -> str:
        return pulumi.get(self, "external_addr")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalAddr")
    def internal_addr(self) -> str:
        return pulumi.get(self, "internal_addr")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetZoneConfigZoneListResult(dict):
    def __init__(__self__, *,
                 availability_zone: str,
                 specinfo_lists: Sequence['outputs.GetZoneConfigZoneListSpecinfoListResult'],
                 zone_id: int):
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "specinfo_lists", specinfo_lists)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="specinfoLists")
    def specinfo_lists(self) -> Sequence['outputs.GetZoneConfigZoneListSpecinfoListResult']:
        return pulumi.get(self, "specinfo_lists")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetZoneConfigZoneListSpecinfoListResult(dict):
    def __init__(__self__, *,
                 charge_type: str,
                 cpu: int,
                 db_version: str,
                 db_version_name: str,
                 machine_type: str,
                 max_storage_size: int,
                 memory: int,
                 min_storage_size: int,
                 qps: int,
                 spec_id: int):
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "db_version", db_version)
        pulumi.set(__self__, "db_version_name", db_version_name)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "max_storage_size", max_storage_size)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "min_storage_size", min_storage_size)
        pulumi.set(__self__, "qps", qps)
        pulumi.set(__self__, "spec_id", spec_id)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> str:
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="dbVersionName")
    def db_version_name(self) -> str:
        return pulumi.get(self, "db_version_name")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter(name="maxStorageSize")
    def max_storage_size(self) -> int:
        return pulumi.get(self, "max_storage_size")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="minStorageSize")
    def min_storage_size(self) -> int:
        return pulumi.get(self, "min_storage_size")

    @property
    @pulumi.getter
    def qps(self) -> int:
        return pulumi.get(self, "qps")

    @property
    @pulumi.getter(name="specId")
    def spec_id(self) -> int:
        return pulumi.get(self, "spec_id")


