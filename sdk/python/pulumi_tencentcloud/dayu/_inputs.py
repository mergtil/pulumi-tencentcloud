# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'CcHttpPolicyRuleListArgs',
    'CcHttpsPolicyRuleListArgs',
    'CcPolicyV2CcBlackWhiteIpArgs',
    'CcPolicyV2CcGeoIpPolicyArgs',
    'CcPolicyV2CcPrecisionPolicyArgs',
    'CcPolicyV2CcPrecisionPolicyPolicyArgs',
    'CcPolicyV2CcPrecisionReqLimitArgs',
    'CcPolicyV2CcPrecisionReqLimitPolicyArgs',
    'CcPolicyV2ThresholdArgs',
    'DdosIpAttachmentV2BoundIpListArgs',
    'DdosPolicyDropOptionArgs',
    'DdosPolicyPacketFilterArgs',
    'DdosPolicyPortFilterArgs',
    'DdosPolicyV2AclArgs',
    'DdosPolicyV2BlackWhiteIpArgs',
    'DdosPolicyV2DdosConnectLimitArgs',
    'DdosPolicyV2DdosGeoIpBlockConfigArgs',
    'DdosPolicyV2DdosSpeedLimitConfigArgs',
    'DdosPolicyV2PacketFilterArgs',
    'DdosPolicyV2ProtocolBlockConfigArgs',
    'DdosPolicyWatermarkFilterArgs',
    'DdosPolicyWatermarkKeyArgs',
    'L4RuleSourceListArgs',
    'L4RuleV2RulesArgs',
    'L4RuleV2RulesSourceListArgs',
    'L7RuleV2RuleArgs',
    'L7RuleV2RuleSourceListArgs',
]

@pulumi.input_type
class CcHttpPolicyRuleListArgs:
    def __init__(__self__, *,
                 operator: Optional[pulumi.Input[str]] = None,
                 skey: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if skey is not None:
            pulumi.set(__self__, "skey", skey)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def skey(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "skey")

    @skey.setter
    def skey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "skey", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CcHttpsPolicyRuleListArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 skey: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "skey", skey)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def skey(self) -> pulumi.Input[str]:
        return pulumi.get(self, "skey")

    @skey.setter
    def skey(self, value: pulumi.Input[str]):
        pulumi.set(self, "skey", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CcPolicyV2CcBlackWhiteIpArgs:
    def __init__(__self__, *,
                 black_white_ip: pulumi.Input[str],
                 domain: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 type: pulumi.Input[str],
                 create_time: Optional[pulumi.Input[str]] = None,
                 modify_time: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "black_white_ip", black_white_ip)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "type", type)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if modify_time is not None:
            pulumi.set(__self__, "modify_time", modify_time)

    @property
    @pulumi.getter(name="blackWhiteIp")
    def black_white_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "black_white_ip")

    @black_white_ip.setter
    def black_white_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "black_white_ip", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "modify_time")

    @modify_time.setter
    def modify_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modify_time", value)


@pulumi.input_type
class CcPolicyV2CcGeoIpPolicyArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 domain: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 region_type: pulumi.Input[str],
                 area_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 modify_time: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "region_type", region_type)
        if area_lists is not None:
            pulumi.set(__self__, "area_lists", area_lists)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if modify_time is not None:
            pulumi.set(__self__, "modify_time", modify_time)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="regionType")
    def region_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region_type")

    @region_type.setter
    def region_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "region_type", value)

    @property
    @pulumi.getter(name="areaLists")
    def area_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "area_lists")

    @area_lists.setter
    def area_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "area_lists", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "modify_time")

    @modify_time.setter
    def modify_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modify_time", value)


@pulumi.input_type
class CcPolicyV2CcPrecisionPolicyArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 ip: pulumi.Input[str],
                 policy_action: pulumi.Input[str],
                 policys: pulumi.Input[Sequence[pulumi.Input['CcPolicyV2CcPrecisionPolicyPolicyArgs']]],
                 protocol: pulumi.Input[str],
                 policy_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "policy_action", policy_action)
        pulumi.set(__self__, "policys", policys)
        pulumi.set(__self__, "protocol", protocol)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="policyAction")
    def policy_action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "policy_action")

    @policy_action.setter
    def policy_action(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_action", value)

    @property
    @pulumi.getter
    def policys(self) -> pulumi.Input[Sequence[pulumi.Input['CcPolicyV2CcPrecisionPolicyPolicyArgs']]]:
        return pulumi.get(self, "policys")

    @policys.setter
    def policys(self, value: pulumi.Input[Sequence[pulumi.Input['CcPolicyV2CcPrecisionPolicyPolicyArgs']]]):
        pulumi.set(self, "policys", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)


@pulumi.input_type
class CcPolicyV2CcPrecisionPolicyPolicyArgs:
    def __init__(__self__, *,
                 field_name: pulumi.Input[str],
                 field_type: pulumi.Input[str],
                 value: pulumi.Input[str],
                 value_operator: pulumi.Input[str]):
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "field_type", field_type)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_operator", value_operator)

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_name")

    @field_name.setter
    def field_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_name", value)

    @property
    @pulumi.getter(name="fieldType")
    def field_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_type")

    @field_type.setter
    def field_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueOperator")
    def value_operator(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value_operator")

    @value_operator.setter
    def value_operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "value_operator", value)


@pulumi.input_type
class CcPolicyV2CcPrecisionReqLimitArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 level: pulumi.Input[str],
                 policys: pulumi.Input[Sequence[pulumi.Input['CcPolicyV2CcPrecisionReqLimitPolicyArgs']]],
                 protocol: pulumi.Input[str],
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "policys", policys)
        pulumi.set(__self__, "protocol", protocol)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def level(self) -> pulumi.Input[str]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: pulumi.Input[str]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def policys(self) -> pulumi.Input[Sequence[pulumi.Input['CcPolicyV2CcPrecisionReqLimitPolicyArgs']]]:
        return pulumi.get(self, "policys")

    @policys.setter
    def policys(self, value: pulumi.Input[Sequence[pulumi.Input['CcPolicyV2CcPrecisionReqLimitPolicyArgs']]]):
        pulumi.set(self, "policys", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class CcPolicyV2CcPrecisionReqLimitPolicyArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 execute_duration: pulumi.Input[int],
                 mode: pulumi.Input[str],
                 period: pulumi.Input[int],
                 request_num: pulumi.Input[int],
                 cookie: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 user_agent: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "execute_duration", execute_duration)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "request_num", request_num)
        if cookie is not None:
            pulumi.set(__self__, "cookie", cookie)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="executeDuration")
    def execute_duration(self) -> pulumi.Input[int]:
        return pulumi.get(self, "execute_duration")

    @execute_duration.setter
    def execute_duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "execute_duration", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def period(self) -> pulumi.Input[int]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: pulumi.Input[int]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="requestNum")
    def request_num(self) -> pulumi.Input[int]:
        return pulumi.get(self, "request_num")

    @request_num.setter
    def request_num(self, value: pulumi.Input[int]):
        pulumi.set(self, "request_num", value)

    @property
    @pulumi.getter
    def cookie(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cookie")

    @cookie.setter
    def cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_agent")

    @user_agent.setter
    def user_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_agent", value)


@pulumi.input_type
class CcPolicyV2ThresholdArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 threshold: pulumi.Input[int]):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class DdosIpAttachmentV2BoundIpListArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 biz_type: Optional[pulumi.Input[str]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ip", ip)
        if biz_type is not None:
            pulumi.set(__self__, "biz_type", biz_type)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="bizType")
    def biz_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "biz_type")

    @biz_type.setter
    def biz_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "biz_type", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)


@pulumi.input_type
class DdosPolicyDropOptionArgs:
    def __init__(__self__, *,
                 bad_conn_threshold: pulumi.Input[int],
                 check_sync_conn: pulumi.Input[bool],
                 conn_timeout: pulumi.Input[int],
                 d_conn_limit: pulumi.Input[int],
                 d_new_limit: pulumi.Input[int],
                 drop_abroad: pulumi.Input[bool],
                 drop_icmp: pulumi.Input[bool],
                 drop_other: pulumi.Input[bool],
                 drop_tcp: pulumi.Input[bool],
                 drop_udp: pulumi.Input[bool],
                 icmp_mbps_limit: pulumi.Input[int],
                 null_conn_enable: pulumi.Input[bool],
                 other_mbps_limit: pulumi.Input[int],
                 s_conn_limit: pulumi.Input[int],
                 s_new_limit: pulumi.Input[int],
                 syn_limit: pulumi.Input[int],
                 tcp_mbps_limit: pulumi.Input[int],
                 udp_mbps_limit: pulumi.Input[int],
                 syn_rate: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bad_conn_threshold", bad_conn_threshold)
        pulumi.set(__self__, "check_sync_conn", check_sync_conn)
        pulumi.set(__self__, "conn_timeout", conn_timeout)
        pulumi.set(__self__, "d_conn_limit", d_conn_limit)
        pulumi.set(__self__, "d_new_limit", d_new_limit)
        pulumi.set(__self__, "drop_abroad", drop_abroad)
        pulumi.set(__self__, "drop_icmp", drop_icmp)
        pulumi.set(__self__, "drop_other", drop_other)
        pulumi.set(__self__, "drop_tcp", drop_tcp)
        pulumi.set(__self__, "drop_udp", drop_udp)
        pulumi.set(__self__, "icmp_mbps_limit", icmp_mbps_limit)
        pulumi.set(__self__, "null_conn_enable", null_conn_enable)
        pulumi.set(__self__, "other_mbps_limit", other_mbps_limit)
        pulumi.set(__self__, "s_conn_limit", s_conn_limit)
        pulumi.set(__self__, "s_new_limit", s_new_limit)
        pulumi.set(__self__, "syn_limit", syn_limit)
        pulumi.set(__self__, "tcp_mbps_limit", tcp_mbps_limit)
        pulumi.set(__self__, "udp_mbps_limit", udp_mbps_limit)
        if syn_rate is not None:
            pulumi.set(__self__, "syn_rate", syn_rate)

    @property
    @pulumi.getter(name="badConnThreshold")
    def bad_conn_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bad_conn_threshold")

    @bad_conn_threshold.setter
    def bad_conn_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "bad_conn_threshold", value)

    @property
    @pulumi.getter(name="checkSyncConn")
    def check_sync_conn(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "check_sync_conn")

    @check_sync_conn.setter
    def check_sync_conn(self, value: pulumi.Input[bool]):
        pulumi.set(self, "check_sync_conn", value)

    @property
    @pulumi.getter(name="connTimeout")
    def conn_timeout(self) -> pulumi.Input[int]:
        return pulumi.get(self, "conn_timeout")

    @conn_timeout.setter
    def conn_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "conn_timeout", value)

    @property
    @pulumi.getter(name="dConnLimit")
    def d_conn_limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "d_conn_limit")

    @d_conn_limit.setter
    def d_conn_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "d_conn_limit", value)

    @property
    @pulumi.getter(name="dNewLimit")
    def d_new_limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "d_new_limit")

    @d_new_limit.setter
    def d_new_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "d_new_limit", value)

    @property
    @pulumi.getter(name="dropAbroad")
    def drop_abroad(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "drop_abroad")

    @drop_abroad.setter
    def drop_abroad(self, value: pulumi.Input[bool]):
        pulumi.set(self, "drop_abroad", value)

    @property
    @pulumi.getter(name="dropIcmp")
    def drop_icmp(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "drop_icmp")

    @drop_icmp.setter
    def drop_icmp(self, value: pulumi.Input[bool]):
        pulumi.set(self, "drop_icmp", value)

    @property
    @pulumi.getter(name="dropOther")
    def drop_other(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "drop_other")

    @drop_other.setter
    def drop_other(self, value: pulumi.Input[bool]):
        pulumi.set(self, "drop_other", value)

    @property
    @pulumi.getter(name="dropTcp")
    def drop_tcp(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "drop_tcp")

    @drop_tcp.setter
    def drop_tcp(self, value: pulumi.Input[bool]):
        pulumi.set(self, "drop_tcp", value)

    @property
    @pulumi.getter(name="dropUdp")
    def drop_udp(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "drop_udp")

    @drop_udp.setter
    def drop_udp(self, value: pulumi.Input[bool]):
        pulumi.set(self, "drop_udp", value)

    @property
    @pulumi.getter(name="icmpMbpsLimit")
    def icmp_mbps_limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "icmp_mbps_limit")

    @icmp_mbps_limit.setter
    def icmp_mbps_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "icmp_mbps_limit", value)

    @property
    @pulumi.getter(name="nullConnEnable")
    def null_conn_enable(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "null_conn_enable")

    @null_conn_enable.setter
    def null_conn_enable(self, value: pulumi.Input[bool]):
        pulumi.set(self, "null_conn_enable", value)

    @property
    @pulumi.getter(name="otherMbpsLimit")
    def other_mbps_limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "other_mbps_limit")

    @other_mbps_limit.setter
    def other_mbps_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "other_mbps_limit", value)

    @property
    @pulumi.getter(name="sConnLimit")
    def s_conn_limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "s_conn_limit")

    @s_conn_limit.setter
    def s_conn_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "s_conn_limit", value)

    @property
    @pulumi.getter(name="sNewLimit")
    def s_new_limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "s_new_limit")

    @s_new_limit.setter
    def s_new_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "s_new_limit", value)

    @property
    @pulumi.getter(name="synLimit")
    def syn_limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "syn_limit")

    @syn_limit.setter
    def syn_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "syn_limit", value)

    @property
    @pulumi.getter(name="tcpMbpsLimit")
    def tcp_mbps_limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tcp_mbps_limit")

    @tcp_mbps_limit.setter
    def tcp_mbps_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "tcp_mbps_limit", value)

    @property
    @pulumi.getter(name="udpMbpsLimit")
    def udp_mbps_limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "udp_mbps_limit")

    @udp_mbps_limit.setter
    def udp_mbps_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "udp_mbps_limit", value)

    @property
    @pulumi.getter(name="synRate")
    def syn_rate(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "syn_rate")

    @syn_rate.setter
    def syn_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "syn_rate", value)


@pulumi.input_type
class DdosPolicyPacketFilterArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 d_end_port: Optional[pulumi.Input[int]] = None,
                 d_start_port: Optional[pulumi.Input[int]] = None,
                 depth: Optional[pulumi.Input[int]] = None,
                 is_include: Optional[pulumi.Input[bool]] = None,
                 match_begin: Optional[pulumi.Input[str]] = None,
                 match_str: Optional[pulumi.Input[str]] = None,
                 match_type: Optional[pulumi.Input[str]] = None,
                 offset: Optional[pulumi.Input[int]] = None,
                 pkt_length_max: Optional[pulumi.Input[int]] = None,
                 pkt_length_min: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 s_end_port: Optional[pulumi.Input[int]] = None,
                 s_start_port: Optional[pulumi.Input[int]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if d_end_port is not None:
            pulumi.set(__self__, "d_end_port", d_end_port)
        if d_start_port is not None:
            pulumi.set(__self__, "d_start_port", d_start_port)
        if depth is not None:
            pulumi.set(__self__, "depth", depth)
        if is_include is not None:
            pulumi.set(__self__, "is_include", is_include)
        if match_begin is not None:
            pulumi.set(__self__, "match_begin", match_begin)
        if match_str is not None:
            pulumi.set(__self__, "match_str", match_str)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if pkt_length_max is not None:
            pulumi.set(__self__, "pkt_length_max", pkt_length_max)
        if pkt_length_min is not None:
            pulumi.set(__self__, "pkt_length_min", pkt_length_min)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if s_end_port is not None:
            pulumi.set(__self__, "s_end_port", s_end_port)
        if s_start_port is not None:
            pulumi.set(__self__, "s_start_port", s_start_port)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="dEndPort")
    def d_end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "d_end_port")

    @d_end_port.setter
    def d_end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "d_end_port", value)

    @property
    @pulumi.getter(name="dStartPort")
    def d_start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "d_start_port")

    @d_start_port.setter
    def d_start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "d_start_port", value)

    @property
    @pulumi.getter
    def depth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "depth")

    @depth.setter
    def depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "depth", value)

    @property
    @pulumi.getter(name="isInclude")
    def is_include(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_include")

    @is_include.setter
    def is_include(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_include", value)

    @property
    @pulumi.getter(name="matchBegin")
    def match_begin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_begin")

    @match_begin.setter
    def match_begin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_begin", value)

    @property
    @pulumi.getter(name="matchStr")
    def match_str(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_str")

    @match_str.setter
    def match_str(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_str", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter
    def offset(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter(name="pktLengthMax")
    def pkt_length_max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pkt_length_max")

    @pkt_length_max.setter
    def pkt_length_max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pkt_length_max", value)

    @property
    @pulumi.getter(name="pktLengthMin")
    def pkt_length_min(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pkt_length_min")

    @pkt_length_min.setter
    def pkt_length_min(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pkt_length_min", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="sEndPort")
    def s_end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "s_end_port")

    @s_end_port.setter
    def s_end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "s_end_port", value)

    @property
    @pulumi.getter(name="sStartPort")
    def s_start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "s_start_port")

    @s_start_port.setter
    def s_start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "s_start_port", value)


@pulumi.input_type
class DdosPolicyPortFilterArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 end_port: Optional[pulumi.Input[int]] = None,
                 kind: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 start_port: Optional[pulumi.Input[int]] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if end_port is not None:
            pulumi.set(__self__, "end_port", end_port)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if start_port is not None:
            pulumi.set(__self__, "start_port", start_port)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_port")

    @end_port.setter
    def end_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_port", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="startPort")
    def start_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_port")

    @start_port.setter
    def start_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_port", value)


@pulumi.input_type
class DdosPolicyV2AclArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 d_port_end: pulumi.Input[int],
                 d_port_start: pulumi.Input[int],
                 forward_protocol: pulumi.Input[str],
                 priority: pulumi.Input[int],
                 s_port_end: pulumi.Input[int],
                 s_port_start: pulumi.Input[int]):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "d_port_end", d_port_end)
        pulumi.set(__self__, "d_port_start", d_port_start)
        pulumi.set(__self__, "forward_protocol", forward_protocol)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "s_port_end", s_port_end)
        pulumi.set(__self__, "s_port_start", s_port_start)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="dPortEnd")
    def d_port_end(self) -> pulumi.Input[int]:
        return pulumi.get(self, "d_port_end")

    @d_port_end.setter
    def d_port_end(self, value: pulumi.Input[int]):
        pulumi.set(self, "d_port_end", value)

    @property
    @pulumi.getter(name="dPortStart")
    def d_port_start(self) -> pulumi.Input[int]:
        return pulumi.get(self, "d_port_start")

    @d_port_start.setter
    def d_port_start(self, value: pulumi.Input[int]):
        pulumi.set(self, "d_port_start", value)

    @property
    @pulumi.getter(name="forwardProtocol")
    def forward_protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "forward_protocol")

    @forward_protocol.setter
    def forward_protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "forward_protocol", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="sPortEnd")
    def s_port_end(self) -> pulumi.Input[int]:
        return pulumi.get(self, "s_port_end")

    @s_port_end.setter
    def s_port_end(self, value: pulumi.Input[int]):
        pulumi.set(self, "s_port_end", value)

    @property
    @pulumi.getter(name="sPortStart")
    def s_port_start(self) -> pulumi.Input[int]:
        return pulumi.get(self, "s_port_start")

    @s_port_start.setter
    def s_port_start(self, value: pulumi.Input[int]):
        pulumi.set(self, "s_port_start", value)


@pulumi.input_type
class DdosPolicyV2BlackWhiteIpArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 ip_type: pulumi.Input[str]):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "ip_type", ip_type)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="ipType")
    def ip_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip_type")

    @ip_type.setter
    def ip_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_type", value)


@pulumi.input_type
class DdosPolicyV2DdosConnectLimitArgs:
    def __init__(__self__, *,
                 bad_conn_threshold: pulumi.Input[int],
                 conn_timeout: pulumi.Input[int],
                 dst_conn_limit: pulumi.Input[int],
                 dst_new_limit: pulumi.Input[int],
                 null_conn_enable: pulumi.Input[int],
                 sd_conn_limit: pulumi.Input[int],
                 sd_new_limit: pulumi.Input[int],
                 syn_limit: pulumi.Input[int],
                 syn_rate: pulumi.Input[int]):
        pulumi.set(__self__, "bad_conn_threshold", bad_conn_threshold)
        pulumi.set(__self__, "conn_timeout", conn_timeout)
        pulumi.set(__self__, "dst_conn_limit", dst_conn_limit)
        pulumi.set(__self__, "dst_new_limit", dst_new_limit)
        pulumi.set(__self__, "null_conn_enable", null_conn_enable)
        pulumi.set(__self__, "sd_conn_limit", sd_conn_limit)
        pulumi.set(__self__, "sd_new_limit", sd_new_limit)
        pulumi.set(__self__, "syn_limit", syn_limit)
        pulumi.set(__self__, "syn_rate", syn_rate)

    @property
    @pulumi.getter(name="badConnThreshold")
    def bad_conn_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bad_conn_threshold")

    @bad_conn_threshold.setter
    def bad_conn_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "bad_conn_threshold", value)

    @property
    @pulumi.getter(name="connTimeout")
    def conn_timeout(self) -> pulumi.Input[int]:
        return pulumi.get(self, "conn_timeout")

    @conn_timeout.setter
    def conn_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "conn_timeout", value)

    @property
    @pulumi.getter(name="dstConnLimit")
    def dst_conn_limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dst_conn_limit")

    @dst_conn_limit.setter
    def dst_conn_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "dst_conn_limit", value)

    @property
    @pulumi.getter(name="dstNewLimit")
    def dst_new_limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "dst_new_limit")

    @dst_new_limit.setter
    def dst_new_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "dst_new_limit", value)

    @property
    @pulumi.getter(name="nullConnEnable")
    def null_conn_enable(self) -> pulumi.Input[int]:
        return pulumi.get(self, "null_conn_enable")

    @null_conn_enable.setter
    def null_conn_enable(self, value: pulumi.Input[int]):
        pulumi.set(self, "null_conn_enable", value)

    @property
    @pulumi.getter(name="sdConnLimit")
    def sd_conn_limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sd_conn_limit")

    @sd_conn_limit.setter
    def sd_conn_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "sd_conn_limit", value)

    @property
    @pulumi.getter(name="sdNewLimit")
    def sd_new_limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sd_new_limit")

    @sd_new_limit.setter
    def sd_new_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "sd_new_limit", value)

    @property
    @pulumi.getter(name="synLimit")
    def syn_limit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "syn_limit")

    @syn_limit.setter
    def syn_limit(self, value: pulumi.Input[int]):
        pulumi.set(self, "syn_limit", value)

    @property
    @pulumi.getter(name="synRate")
    def syn_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "syn_rate")

    @syn_rate.setter
    def syn_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "syn_rate", value)


@pulumi.input_type
class DdosPolicyV2DdosGeoIpBlockConfigArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 area_lists: pulumi.Input[Sequence[pulumi.Input[int]]],
                 region_type: pulumi.Input[str]):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "area_lists", area_lists)
        pulumi.set(__self__, "region_type", region_type)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="areaLists")
    def area_lists(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        return pulumi.get(self, "area_lists")

    @area_lists.setter
    def area_lists(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "area_lists", value)

    @property
    @pulumi.getter(name="regionType")
    def region_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region_type")

    @region_type.setter
    def region_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "region_type", value)


@pulumi.input_type
class DdosPolicyV2DdosSpeedLimitConfigArgs:
    def __init__(__self__, *,
                 bandwidth: pulumi.Input[int],
                 dst_port_list: pulumi.Input[str],
                 mode: pulumi.Input[int],
                 packet_rate: pulumi.Input[int],
                 protocol_list: pulumi.Input[str]):
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "dst_port_list", dst_port_list)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "packet_rate", packet_rate)
        pulumi.set(__self__, "protocol_list", protocol_list)

    @property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Input[int]:
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: pulumi.Input[int]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter(name="dstPortList")
    def dst_port_list(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dst_port_list")

    @dst_port_list.setter
    def dst_port_list(self, value: pulumi.Input[str]):
        pulumi.set(self, "dst_port_list", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[int]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[int]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="packetRate")
    def packet_rate(self) -> pulumi.Input[int]:
        return pulumi.get(self, "packet_rate")

    @packet_rate.setter
    def packet_rate(self, value: pulumi.Input[int]):
        pulumi.set(self, "packet_rate", value)

    @property
    @pulumi.getter(name="protocolList")
    def protocol_list(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol_list")

    @protocol_list.setter
    def protocol_list(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol_list", value)


@pulumi.input_type
class DdosPolicyV2PacketFilterArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 d_port_end: pulumi.Input[int],
                 d_port_start: pulumi.Input[int],
                 depth: pulumi.Input[int],
                 depth2: pulumi.Input[int],
                 is_not: pulumi.Input[int],
                 is_not2: pulumi.Input[int],
                 match_begin: pulumi.Input[str],
                 match_begin2: pulumi.Input[str],
                 match_logic: pulumi.Input[str],
                 match_type: pulumi.Input[str],
                 match_type2: pulumi.Input[str],
                 offset: pulumi.Input[int],
                 offset2: pulumi.Input[int],
                 pktlen_max: pulumi.Input[int],
                 pktlen_min: pulumi.Input[int],
                 protocol: pulumi.Input[str],
                 s_port_end: pulumi.Input[int],
                 s_port_start: pulumi.Input[int],
                 str: pulumi.Input[str],
                 str2: pulumi.Input[str]):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "d_port_end", d_port_end)
        pulumi.set(__self__, "d_port_start", d_port_start)
        pulumi.set(__self__, "depth", depth)
        pulumi.set(__self__, "depth2", depth2)
        pulumi.set(__self__, "is_not", is_not)
        pulumi.set(__self__, "is_not2", is_not2)
        pulumi.set(__self__, "match_begin", match_begin)
        pulumi.set(__self__, "match_begin2", match_begin2)
        pulumi.set(__self__, "match_logic", match_logic)
        pulumi.set(__self__, "match_type", match_type)
        pulumi.set(__self__, "match_type2", match_type2)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "offset2", offset2)
        pulumi.set(__self__, "pktlen_max", pktlen_max)
        pulumi.set(__self__, "pktlen_min", pktlen_min)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "s_port_end", s_port_end)
        pulumi.set(__self__, "s_port_start", s_port_start)
        pulumi.set(__self__, "str", str)
        pulumi.set(__self__, "str2", str2)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="dPortEnd")
    def d_port_end(self) -> pulumi.Input[int]:
        return pulumi.get(self, "d_port_end")

    @d_port_end.setter
    def d_port_end(self, value: pulumi.Input[int]):
        pulumi.set(self, "d_port_end", value)

    @property
    @pulumi.getter(name="dPortStart")
    def d_port_start(self) -> pulumi.Input[int]:
        return pulumi.get(self, "d_port_start")

    @d_port_start.setter
    def d_port_start(self, value: pulumi.Input[int]):
        pulumi.set(self, "d_port_start", value)

    @property
    @pulumi.getter
    def depth(self) -> pulumi.Input[int]:
        return pulumi.get(self, "depth")

    @depth.setter
    def depth(self, value: pulumi.Input[int]):
        pulumi.set(self, "depth", value)

    @property
    @pulumi.getter
    def depth2(self) -> pulumi.Input[int]:
        return pulumi.get(self, "depth2")

    @depth2.setter
    def depth2(self, value: pulumi.Input[int]):
        pulumi.set(self, "depth2", value)

    @property
    @pulumi.getter(name="isNot")
    def is_not(self) -> pulumi.Input[int]:
        return pulumi.get(self, "is_not")

    @is_not.setter
    def is_not(self, value: pulumi.Input[int]):
        pulumi.set(self, "is_not", value)

    @property
    @pulumi.getter(name="isNot2")
    def is_not2(self) -> pulumi.Input[int]:
        return pulumi.get(self, "is_not2")

    @is_not2.setter
    def is_not2(self, value: pulumi.Input[int]):
        pulumi.set(self, "is_not2", value)

    @property
    @pulumi.getter(name="matchBegin")
    def match_begin(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_begin")

    @match_begin.setter
    def match_begin(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_begin", value)

    @property
    @pulumi.getter(name="matchBegin2")
    def match_begin2(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_begin2")

    @match_begin2.setter
    def match_begin2(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_begin2", value)

    @property
    @pulumi.getter(name="matchLogic")
    def match_logic(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_logic")

    @match_logic.setter
    def match_logic(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_logic", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_type", value)

    @property
    @pulumi.getter(name="matchType2")
    def match_type2(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_type2")

    @match_type2.setter
    def match_type2(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_type2", value)

    @property
    @pulumi.getter
    def offset(self) -> pulumi.Input[int]:
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: pulumi.Input[int]):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter
    def offset2(self) -> pulumi.Input[int]:
        return pulumi.get(self, "offset2")

    @offset2.setter
    def offset2(self, value: pulumi.Input[int]):
        pulumi.set(self, "offset2", value)

    @property
    @pulumi.getter(name="pktlenMax")
    def pktlen_max(self) -> pulumi.Input[int]:
        return pulumi.get(self, "pktlen_max")

    @pktlen_max.setter
    def pktlen_max(self, value: pulumi.Input[int]):
        pulumi.set(self, "pktlen_max", value)

    @property
    @pulumi.getter(name="pktlenMin")
    def pktlen_min(self) -> pulumi.Input[int]:
        return pulumi.get(self, "pktlen_min")

    @pktlen_min.setter
    def pktlen_min(self, value: pulumi.Input[int]):
        pulumi.set(self, "pktlen_min", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="sPortEnd")
    def s_port_end(self) -> pulumi.Input[int]:
        return pulumi.get(self, "s_port_end")

    @s_port_end.setter
    def s_port_end(self, value: pulumi.Input[int]):
        pulumi.set(self, "s_port_end", value)

    @property
    @pulumi.getter(name="sPortStart")
    def s_port_start(self) -> pulumi.Input[int]:
        return pulumi.get(self, "s_port_start")

    @s_port_start.setter
    def s_port_start(self, value: pulumi.Input[int]):
        pulumi.set(self, "s_port_start", value)

    @property
    @pulumi.getter
    def str(self) -> pulumi.Input[str]:
        return pulumi.get(self, "str")

    @str.setter
    def str(self, value: pulumi.Input[str]):
        pulumi.set(self, "str", value)

    @property
    @pulumi.getter
    def str2(self) -> pulumi.Input[str]:
        return pulumi.get(self, "str2")

    @str2.setter
    def str2(self, value: pulumi.Input[str]):
        pulumi.set(self, "str2", value)


@pulumi.input_type
class DdosPolicyV2ProtocolBlockConfigArgs:
    def __init__(__self__, *,
                 drop_icmp: pulumi.Input[int],
                 drop_other: pulumi.Input[int],
                 drop_tcp: pulumi.Input[int],
                 drop_udp: pulumi.Input[int]):
        pulumi.set(__self__, "drop_icmp", drop_icmp)
        pulumi.set(__self__, "drop_other", drop_other)
        pulumi.set(__self__, "drop_tcp", drop_tcp)
        pulumi.set(__self__, "drop_udp", drop_udp)

    @property
    @pulumi.getter(name="dropIcmp")
    def drop_icmp(self) -> pulumi.Input[int]:
        return pulumi.get(self, "drop_icmp")

    @drop_icmp.setter
    def drop_icmp(self, value: pulumi.Input[int]):
        pulumi.set(self, "drop_icmp", value)

    @property
    @pulumi.getter(name="dropOther")
    def drop_other(self) -> pulumi.Input[int]:
        return pulumi.get(self, "drop_other")

    @drop_other.setter
    def drop_other(self, value: pulumi.Input[int]):
        pulumi.set(self, "drop_other", value)

    @property
    @pulumi.getter(name="dropTcp")
    def drop_tcp(self) -> pulumi.Input[int]:
        return pulumi.get(self, "drop_tcp")

    @drop_tcp.setter
    def drop_tcp(self, value: pulumi.Input[int]):
        pulumi.set(self, "drop_tcp", value)

    @property
    @pulumi.getter(name="dropUdp")
    def drop_udp(self) -> pulumi.Input[int]:
        return pulumi.get(self, "drop_udp")

    @drop_udp.setter
    def drop_udp(self, value: pulumi.Input[int]):
        pulumi.set(self, "drop_udp", value)


@pulumi.input_type
class DdosPolicyWatermarkFilterArgs:
    def __init__(__self__, *,
                 auto_remove: Optional[pulumi.Input[bool]] = None,
                 offset: Optional[pulumi.Input[int]] = None,
                 open_switch: Optional[pulumi.Input[bool]] = None,
                 tcp_port_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 udp_port_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if auto_remove is not None:
            pulumi.set(__self__, "auto_remove", auto_remove)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if open_switch is not None:
            pulumi.set(__self__, "open_switch", open_switch)
        if tcp_port_lists is not None:
            pulumi.set(__self__, "tcp_port_lists", tcp_port_lists)
        if udp_port_lists is not None:
            pulumi.set(__self__, "udp_port_lists", udp_port_lists)

    @property
    @pulumi.getter(name="autoRemove")
    def auto_remove(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_remove")

    @auto_remove.setter
    def auto_remove(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_remove", value)

    @property
    @pulumi.getter
    def offset(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter(name="openSwitch")
    def open_switch(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "open_switch")

    @open_switch.setter
    def open_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "open_switch", value)

    @property
    @pulumi.getter(name="tcpPortLists")
    def tcp_port_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tcp_port_lists")

    @tcp_port_lists.setter
    def tcp_port_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tcp_port_lists", value)

    @property
    @pulumi.getter(name="udpPortLists")
    def udp_port_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "udp_port_lists")

    @udp_port_lists.setter
    def udp_port_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "udp_port_lists", value)


@pulumi.input_type
class DdosPolicyWatermarkKeyArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 open_switch: Optional[pulumi.Input[bool]] = None):
        if content is not None:
            pulumi.set(__self__, "content", content)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if open_switch is not None:
            pulumi.set(__self__, "open_switch", open_switch)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="openSwitch")
    def open_switch(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "open_switch")

    @open_switch.setter
    def open_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "open_switch", value)


@pulumi.input_type
class L4RuleSourceListArgs:
    def __init__(__self__, *,
                 source: pulumi.Input[str],
                 weight: pulumi.Input[int]):
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class L4RuleV2RulesArgs:
    def __init__(__self__, *,
                 keep_enable: pulumi.Input[bool],
                 keeptime: pulumi.Input[int],
                 lb_type: pulumi.Input[int],
                 protocol: pulumi.Input[str],
                 region: pulumi.Input[int],
                 remove_switch: pulumi.Input[bool],
                 rule_name: pulumi.Input[str],
                 source_lists: pulumi.Input[Sequence[pulumi.Input['L4RuleV2RulesSourceListArgs']]],
                 source_port: pulumi.Input[int],
                 source_type: pulumi.Input[int],
                 virtual_port: pulumi.Input[int]):
        pulumi.set(__self__, "keep_enable", keep_enable)
        pulumi.set(__self__, "keeptime", keeptime)
        pulumi.set(__self__, "lb_type", lb_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "remove_switch", remove_switch)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "source_lists", source_lists)
        pulumi.set(__self__, "source_port", source_port)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "virtual_port", virtual_port)

    @property
    @pulumi.getter(name="keepEnable")
    def keep_enable(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "keep_enable")

    @keep_enable.setter
    def keep_enable(self, value: pulumi.Input[bool]):
        pulumi.set(self, "keep_enable", value)

    @property
    @pulumi.getter
    def keeptime(self) -> pulumi.Input[int]:
        return pulumi.get(self, "keeptime")

    @keeptime.setter
    def keeptime(self, value: pulumi.Input[int]):
        pulumi.set(self, "keeptime", value)

    @property
    @pulumi.getter(name="lbType")
    def lb_type(self) -> pulumi.Input[int]:
        return pulumi.get(self, "lb_type")

    @lb_type.setter
    def lb_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "lb_type", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[int]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[int]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="removeSwitch")
    def remove_switch(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "remove_switch")

    @remove_switch.setter
    def remove_switch(self, value: pulumi.Input[bool]):
        pulumi.set(self, "remove_switch", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="sourceLists")
    def source_lists(self) -> pulumi.Input[Sequence[pulumi.Input['L4RuleV2RulesSourceListArgs']]]:
        return pulumi.get(self, "source_lists")

    @source_lists.setter
    def source_lists(self, value: pulumi.Input[Sequence[pulumi.Input['L4RuleV2RulesSourceListArgs']]]):
        pulumi.set(self, "source_lists", value)

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "source_port", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[int]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="virtualPort")
    def virtual_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "virtual_port")

    @virtual_port.setter
    def virtual_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "virtual_port", value)


@pulumi.input_type
class L4RuleV2RulesSourceListArgs:
    def __init__(__self__, *,
                 source: pulumi.Input[str],
                 weight: pulumi.Input[int]):
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class L7RuleV2RuleArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 keep_enable: pulumi.Input[int],
                 keeptime: pulumi.Input[int],
                 lb_type: pulumi.Input[int],
                 protocol: pulumi.Input[str],
                 source_lists: pulumi.Input[Sequence[pulumi.Input['L7RuleV2RuleSourceListArgs']]],
                 source_type: pulumi.Input[int],
                 cc_enable: Optional[pulumi.Input[int]] = None,
                 cert_type: Optional[pulumi.Input[int]] = None,
                 https_to_http_enable: Optional[pulumi.Input[int]] = None,
                 ssl_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "keep_enable", keep_enable)
        pulumi.set(__self__, "keeptime", keeptime)
        pulumi.set(__self__, "lb_type", lb_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "source_lists", source_lists)
        pulumi.set(__self__, "source_type", source_type)
        if cc_enable is not None:
            pulumi.set(__self__, "cc_enable", cc_enable)
        if cert_type is not None:
            pulumi.set(__self__, "cert_type", cert_type)
        if https_to_http_enable is not None:
            pulumi.set(__self__, "https_to_http_enable", https_to_http_enable)
        if ssl_id is not None:
            pulumi.set(__self__, "ssl_id", ssl_id)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="keepEnable")
    def keep_enable(self) -> pulumi.Input[int]:
        return pulumi.get(self, "keep_enable")

    @keep_enable.setter
    def keep_enable(self, value: pulumi.Input[int]):
        pulumi.set(self, "keep_enable", value)

    @property
    @pulumi.getter
    def keeptime(self) -> pulumi.Input[int]:
        return pulumi.get(self, "keeptime")

    @keeptime.setter
    def keeptime(self, value: pulumi.Input[int]):
        pulumi.set(self, "keeptime", value)

    @property
    @pulumi.getter(name="lbType")
    def lb_type(self) -> pulumi.Input[int]:
        return pulumi.get(self, "lb_type")

    @lb_type.setter
    def lb_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "lb_type", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="sourceLists")
    def source_lists(self) -> pulumi.Input[Sequence[pulumi.Input['L7RuleV2RuleSourceListArgs']]]:
        return pulumi.get(self, "source_lists")

    @source_lists.setter
    def source_lists(self, value: pulumi.Input[Sequence[pulumi.Input['L7RuleV2RuleSourceListArgs']]]):
        pulumi.set(self, "source_lists", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[int]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="ccEnable")
    def cc_enable(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cc_enable")

    @cc_enable.setter
    def cc_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cc_enable", value)

    @property
    @pulumi.getter(name="certType")
    def cert_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cert_type")

    @cert_type.setter
    def cert_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cert_type", value)

    @property
    @pulumi.getter(name="httpsToHttpEnable")
    def https_to_http_enable(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "https_to_http_enable")

    @https_to_http_enable.setter
    def https_to_http_enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_to_http_enable", value)

    @property
    @pulumi.getter(name="sslId")
    def ssl_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_id")

    @ssl_id.setter
    def ssl_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_id", value)


@pulumi.input_type
class L7RuleV2RuleSourceListArgs:
    def __init__(__self__, *,
                 source: pulumi.Input[str],
                 weight: pulumi.Input[int]):
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


