# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetQueueFilterResult',
    'GetQueueQueueListResult',
    'GetQueueQueueListDeadLetterPolicyResult',
    'GetQueueQueueListDeadLetterSourceResult',
    'GetQueueQueueListTagResult',
    'GetQueueQueueListTransactionPolicyResult',
    'GetSubscribeSubscriptionListResult',
    'GetTopicFilterResult',
    'GetTopicTopicListResult',
    'GetTopicTopicListTagResult',
]

@pulumi.output_type
class GetQueueFilterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetQueueQueueListResult(dict):
    def __init__(__self__, *,
                 active_msg_num: int,
                 bps: int,
                 create_time: int,
                 create_uin: int,
                 dead_letter_policies: Sequence['outputs.GetQueueQueueListDeadLetterPolicyResult'],
                 dead_letter_sources: Sequence['outputs.GetQueueQueueListDeadLetterSourceResult'],
                 delay_msg_num: int,
                 inactive_msg_num: int,
                 last_modify_time: int,
                 max_delay_seconds: int,
                 max_msg_backlog_size: int,
                 max_msg_heap_num: int,
                 max_msg_size: int,
                 max_unacked_msg_num: int,
                 min_msg_time: int,
                 msg_retention_seconds: int,
                 namespace_name: str,
                 polling_wait_seconds: int,
                 qps: int,
                 queue_id: str,
                 queue_name: str,
                 retention_size_in_mb: int,
                 rewind_msg_num: int,
                 rewind_seconds: int,
                 status: int,
                 tags: Sequence['outputs.GetQueueQueueListTagResult'],
                 tenant_id: str,
                 trace: bool,
                 transaction: bool,
                 transaction_policies: Sequence['outputs.GetQueueQueueListTransactionPolicyResult'],
                 visibility_timeout: int):
        pulumi.set(__self__, "active_msg_num", active_msg_num)
        pulumi.set(__self__, "bps", bps)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "create_uin", create_uin)
        pulumi.set(__self__, "dead_letter_policies", dead_letter_policies)
        pulumi.set(__self__, "dead_letter_sources", dead_letter_sources)
        pulumi.set(__self__, "delay_msg_num", delay_msg_num)
        pulumi.set(__self__, "inactive_msg_num", inactive_msg_num)
        pulumi.set(__self__, "last_modify_time", last_modify_time)
        pulumi.set(__self__, "max_delay_seconds", max_delay_seconds)
        pulumi.set(__self__, "max_msg_backlog_size", max_msg_backlog_size)
        pulumi.set(__self__, "max_msg_heap_num", max_msg_heap_num)
        pulumi.set(__self__, "max_msg_size", max_msg_size)
        pulumi.set(__self__, "max_unacked_msg_num", max_unacked_msg_num)
        pulumi.set(__self__, "min_msg_time", min_msg_time)
        pulumi.set(__self__, "msg_retention_seconds", msg_retention_seconds)
        pulumi.set(__self__, "namespace_name", namespace_name)
        pulumi.set(__self__, "polling_wait_seconds", polling_wait_seconds)
        pulumi.set(__self__, "qps", qps)
        pulumi.set(__self__, "queue_id", queue_id)
        pulumi.set(__self__, "queue_name", queue_name)
        pulumi.set(__self__, "retention_size_in_mb", retention_size_in_mb)
        pulumi.set(__self__, "rewind_msg_num", rewind_msg_num)
        pulumi.set(__self__, "rewind_seconds", rewind_seconds)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "trace", trace)
        pulumi.set(__self__, "transaction", transaction)
        pulumi.set(__self__, "transaction_policies", transaction_policies)
        pulumi.set(__self__, "visibility_timeout", visibility_timeout)

    @property
    @pulumi.getter(name="activeMsgNum")
    def active_msg_num(self) -> int:
        return pulumi.get(self, "active_msg_num")

    @property
    @pulumi.getter
    def bps(self) -> int:
        return pulumi.get(self, "bps")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="createUin")
    def create_uin(self) -> int:
        return pulumi.get(self, "create_uin")

    @property
    @pulumi.getter(name="deadLetterPolicies")
    def dead_letter_policies(self) -> Sequence['outputs.GetQueueQueueListDeadLetterPolicyResult']:
        return pulumi.get(self, "dead_letter_policies")

    @property
    @pulumi.getter(name="deadLetterSources")
    def dead_letter_sources(self) -> Sequence['outputs.GetQueueQueueListDeadLetterSourceResult']:
        return pulumi.get(self, "dead_letter_sources")

    @property
    @pulumi.getter(name="delayMsgNum")
    def delay_msg_num(self) -> int:
        return pulumi.get(self, "delay_msg_num")

    @property
    @pulumi.getter(name="inactiveMsgNum")
    def inactive_msg_num(self) -> int:
        return pulumi.get(self, "inactive_msg_num")

    @property
    @pulumi.getter(name="lastModifyTime")
    def last_modify_time(self) -> int:
        return pulumi.get(self, "last_modify_time")

    @property
    @pulumi.getter(name="maxDelaySeconds")
    def max_delay_seconds(self) -> int:
        return pulumi.get(self, "max_delay_seconds")

    @property
    @pulumi.getter(name="maxMsgBacklogSize")
    def max_msg_backlog_size(self) -> int:
        return pulumi.get(self, "max_msg_backlog_size")

    @property
    @pulumi.getter(name="maxMsgHeapNum")
    def max_msg_heap_num(self) -> int:
        return pulumi.get(self, "max_msg_heap_num")

    @property
    @pulumi.getter(name="maxMsgSize")
    def max_msg_size(self) -> int:
        return pulumi.get(self, "max_msg_size")

    @property
    @pulumi.getter(name="maxUnackedMsgNum")
    def max_unacked_msg_num(self) -> int:
        return pulumi.get(self, "max_unacked_msg_num")

    @property
    @pulumi.getter(name="minMsgTime")
    def min_msg_time(self) -> int:
        return pulumi.get(self, "min_msg_time")

    @property
    @pulumi.getter(name="msgRetentionSeconds")
    def msg_retention_seconds(self) -> int:
        return pulumi.get(self, "msg_retention_seconds")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> str:
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter(name="pollingWaitSeconds")
    def polling_wait_seconds(self) -> int:
        return pulumi.get(self, "polling_wait_seconds")

    @property
    @pulumi.getter
    def qps(self) -> int:
        return pulumi.get(self, "qps")

    @property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> str:
        return pulumi.get(self, "queue_id")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> str:
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="retentionSizeInMb")
    def retention_size_in_mb(self) -> int:
        return pulumi.get(self, "retention_size_in_mb")

    @property
    @pulumi.getter(name="rewindMsgNum")
    def rewind_msg_num(self) -> int:
        return pulumi.get(self, "rewind_msg_num")

    @property
    @pulumi.getter(name="rewindSeconds")
    def rewind_seconds(self) -> int:
        return pulumi.get(self, "rewind_seconds")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetQueueQueueListTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def trace(self) -> bool:
        return pulumi.get(self, "trace")

    @property
    @pulumi.getter
    def transaction(self) -> bool:
        return pulumi.get(self, "transaction")

    @property
    @pulumi.getter(name="transactionPolicies")
    def transaction_policies(self) -> Sequence['outputs.GetQueueQueueListTransactionPolicyResult']:
        return pulumi.get(self, "transaction_policies")

    @property
    @pulumi.getter(name="visibilityTimeout")
    def visibility_timeout(self) -> int:
        return pulumi.get(self, "visibility_timeout")


@pulumi.output_type
class GetQueueQueueListDeadLetterPolicyResult(dict):
    def __init__(__self__, *,
                 dead_letter_queue: str,
                 max_receive_count: int,
                 max_time_to_live: int,
                 policy: int):
        pulumi.set(__self__, "dead_letter_queue", dead_letter_queue)
        pulumi.set(__self__, "max_receive_count", max_receive_count)
        pulumi.set(__self__, "max_time_to_live", max_time_to_live)
        pulumi.set(__self__, "policy", policy)

    @property
    @pulumi.getter(name="deadLetterQueue")
    def dead_letter_queue(self) -> str:
        return pulumi.get(self, "dead_letter_queue")

    @property
    @pulumi.getter(name="maxReceiveCount")
    def max_receive_count(self) -> int:
        return pulumi.get(self, "max_receive_count")

    @property
    @pulumi.getter(name="maxTimeToLive")
    def max_time_to_live(self) -> int:
        return pulumi.get(self, "max_time_to_live")

    @property
    @pulumi.getter
    def policy(self) -> int:
        return pulumi.get(self, "policy")


@pulumi.output_type
class GetQueueQueueListDeadLetterSourceResult(dict):
    def __init__(__self__, *,
                 queue_id: str,
                 queue_name: str):
        pulumi.set(__self__, "queue_id", queue_id)
        pulumi.set(__self__, "queue_name", queue_name)

    @property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> str:
        return pulumi.get(self, "queue_id")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> str:
        return pulumi.get(self, "queue_name")


@pulumi.output_type
class GetQueueQueueListTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetQueueQueueListTransactionPolicyResult(dict):
    def __init__(__self__, *,
                 first_query_interval: int,
                 max_query_count: int):
        pulumi.set(__self__, "first_query_interval", first_query_interval)
        pulumi.set(__self__, "max_query_count", max_query_count)

    @property
    @pulumi.getter(name="firstQueryInterval")
    def first_query_interval(self) -> int:
        return pulumi.get(self, "first_query_interval")

    @property
    @pulumi.getter(name="maxQueryCount")
    def max_query_count(self) -> int:
        return pulumi.get(self, "max_query_count")


@pulumi.output_type
class GetSubscribeSubscriptionListResult(dict):
    def __init__(__self__, *,
                 binding_keys: Sequence[str],
                 create_time: int,
                 endpoint: str,
                 filter_tags: Sequence[str],
                 last_modify_time: int,
                 msg_count: int,
                 notify_content_format: str,
                 notify_strategy: str,
                 protocol: str,
                 subscription_id: str,
                 subscription_name: str,
                 topic_owner: int):
        pulumi.set(__self__, "binding_keys", binding_keys)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "filter_tags", filter_tags)
        pulumi.set(__self__, "last_modify_time", last_modify_time)
        pulumi.set(__self__, "msg_count", msg_count)
        pulumi.set(__self__, "notify_content_format", notify_content_format)
        pulumi.set(__self__, "notify_strategy", notify_strategy)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "subscription_id", subscription_id)
        pulumi.set(__self__, "subscription_name", subscription_name)
        pulumi.set(__self__, "topic_owner", topic_owner)

    @property
    @pulumi.getter(name="bindingKeys")
    def binding_keys(self) -> Sequence[str]:
        return pulumi.get(self, "binding_keys")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="filterTags")
    def filter_tags(self) -> Sequence[str]:
        return pulumi.get(self, "filter_tags")

    @property
    @pulumi.getter(name="lastModifyTime")
    def last_modify_time(self) -> int:
        return pulumi.get(self, "last_modify_time")

    @property
    @pulumi.getter(name="msgCount")
    def msg_count(self) -> int:
        return pulumi.get(self, "msg_count")

    @property
    @pulumi.getter(name="notifyContentFormat")
    def notify_content_format(self) -> str:
        return pulumi.get(self, "notify_content_format")

    @property
    @pulumi.getter(name="notifyStrategy")
    def notify_strategy(self) -> str:
        return pulumi.get(self, "notify_strategy")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="subscriptionName")
    def subscription_name(self) -> str:
        return pulumi.get(self, "subscription_name")

    @property
    @pulumi.getter(name="topicOwner")
    def topic_owner(self) -> int:
        return pulumi.get(self, "topic_owner")


@pulumi.output_type
class GetTopicFilterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTopicTopicListResult(dict):
    def __init__(__self__, *,
                 broker_type: int,
                 create_time: int,
                 create_uin: int,
                 filter_type: int,
                 last_modify_time: int,
                 max_msg_size: int,
                 msg_count: int,
                 msg_retention_seconds: int,
                 namespace_name: str,
                 qps: int,
                 status: int,
                 tags: Sequence['outputs.GetTopicTopicListTagResult'],
                 tenant_id: str,
                 topic_id: str,
                 topic_name: str,
                 trace: bool):
        pulumi.set(__self__, "broker_type", broker_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "create_uin", create_uin)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "last_modify_time", last_modify_time)
        pulumi.set(__self__, "max_msg_size", max_msg_size)
        pulumi.set(__self__, "msg_count", msg_count)
        pulumi.set(__self__, "msg_retention_seconds", msg_retention_seconds)
        pulumi.set(__self__, "namespace_name", namespace_name)
        pulumi.set(__self__, "qps", qps)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "topic_id", topic_id)
        pulumi.set(__self__, "topic_name", topic_name)
        pulumi.set(__self__, "trace", trace)

    @property
    @pulumi.getter(name="brokerType")
    def broker_type(self) -> int:
        return pulumi.get(self, "broker_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="createUin")
    def create_uin(self) -> int:
        return pulumi.get(self, "create_uin")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> int:
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="lastModifyTime")
    def last_modify_time(self) -> int:
        return pulumi.get(self, "last_modify_time")

    @property
    @pulumi.getter(name="maxMsgSize")
    def max_msg_size(self) -> int:
        return pulumi.get(self, "max_msg_size")

    @property
    @pulumi.getter(name="msgCount")
    def msg_count(self) -> int:
        return pulumi.get(self, "msg_count")

    @property
    @pulumi.getter(name="msgRetentionSeconds")
    def msg_retention_seconds(self) -> int:
        return pulumi.get(self, "msg_retention_seconds")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> str:
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter
    def qps(self) -> int:
        return pulumi.get(self, "qps")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetTopicTopicListTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        return pulumi.get(self, "topic_id")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> str:
        return pulumi.get(self, "topic_name")

    @property
    @pulumi.getter
    def trace(self) -> bool:
        return pulumi.get(self, "trace")


@pulumi.output_type
class GetTopicTopicListTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        return pulumi.get(self, "tag_value")


