# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['EntryArgs', 'Entry']

@pulumi.input_type
class EntryArgs:
    def __init__(__self__, *,
                 cidr_block: pulumi.Input[str],
                 next_hub: pulumi.Input[str],
                 next_type: pulumi.Input[str],
                 route_table_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a Entry resource.
        :param pulumi.Input[str] cidr_block: The RouteEntry's target network segment.
        :param pulumi.Input[str] next_hub: The route entry's next hub. CVM instance ID or VPC router interface ID.
        :param pulumi.Input[str] next_type: The next hop type. Valid values:
               `public_gateway`,`vpn_gateway`,`sslvpn_gateway`,`dc_gateway`,`peering_connection`,`nat_gateway`,`havip`,`local_gateway`
               and `instance`. `instance` points to CVM Instance.
        :param pulumi.Input[str] route_table_id: The ID of the route table.
        :param pulumi.Input[str] vpc_id: The VPC ID.
        """
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "next_hub", next_hub)
        pulumi.set(__self__, "next_type", next_type)
        pulumi.set(__self__, "route_table_id", route_table_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> pulumi.Input[str]:
        """
        The RouteEntry's target network segment.
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter(name="nextHub")
    def next_hub(self) -> pulumi.Input[str]:
        """
        The route entry's next hub. CVM instance ID or VPC router interface ID.
        """
        return pulumi.get(self, "next_hub")

    @next_hub.setter
    def next_hub(self, value: pulumi.Input[str]):
        pulumi.set(self, "next_hub", value)

    @property
    @pulumi.getter(name="nextType")
    def next_type(self) -> pulumi.Input[str]:
        """
        The next hop type. Valid values:
        `public_gateway`,`vpn_gateway`,`sslvpn_gateway`,`dc_gateway`,`peering_connection`,`nat_gateway`,`havip`,`local_gateway`
        and `instance`. `instance` points to CVM Instance.
        """
        return pulumi.get(self, "next_type")

    @next_type.setter
    def next_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "next_type", value)

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> pulumi.Input[str]:
        """
        The ID of the route table.
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "route_table_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        The VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _EntryState:
    def __init__(__self__, *,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 next_hub: Optional[pulumi.Input[str]] = None,
                 next_type: Optional[pulumi.Input[str]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Entry resources.
        :param pulumi.Input[str] cidr_block: The RouteEntry's target network segment.
        :param pulumi.Input[str] next_hub: The route entry's next hub. CVM instance ID or VPC router interface ID.
        :param pulumi.Input[str] next_type: The next hop type. Valid values:
               `public_gateway`,`vpn_gateway`,`sslvpn_gateway`,`dc_gateway`,`peering_connection`,`nat_gateway`,`havip`,`local_gateway`
               and `instance`. `instance` points to CVM Instance.
        :param pulumi.Input[str] route_table_id: The ID of the route table.
        :param pulumi.Input[str] vpc_id: The VPC ID.
        """
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if next_hub is not None:
            pulumi.set(__self__, "next_hub", next_hub)
        if next_type is not None:
            pulumi.set(__self__, "next_type", next_type)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        The RouteEntry's target network segment.
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter(name="nextHub")
    def next_hub(self) -> Optional[pulumi.Input[str]]:
        """
        The route entry's next hub. CVM instance ID or VPC router interface ID.
        """
        return pulumi.get(self, "next_hub")

    @next_hub.setter
    def next_hub(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hub", value)

    @property
    @pulumi.getter(name="nextType")
    def next_type(self) -> Optional[pulumi.Input[str]]:
        """
        The next hop type. Valid values:
        `public_gateway`,`vpn_gateway`,`sslvpn_gateway`,`dc_gateway`,`peering_connection`,`nat_gateway`,`havip`,`local_gateway`
        and `instance`. `instance` points to CVM Instance.
        """
        return pulumi.get(self, "next_type")

    @next_type.setter
    def next_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_type", value)

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the route table.
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_table_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class Entry(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 next_hub: Optional[pulumi.Input[str]] = None,
                 next_type: Optional[pulumi.Input[str]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Entry resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cidr_block: The RouteEntry's target network segment.
        :param pulumi.Input[str] next_hub: The route entry's next hub. CVM instance ID or VPC router interface ID.
        :param pulumi.Input[str] next_type: The next hop type. Valid values:
               `public_gateway`,`vpn_gateway`,`sslvpn_gateway`,`dc_gateway`,`peering_connection`,`nat_gateway`,`havip`,`local_gateway`
               and `instance`. `instance` points to CVM Instance.
        :param pulumi.Input[str] route_table_id: The ID of the route table.
        :param pulumi.Input[str] vpc_id: The VPC ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EntryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Entry resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EntryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EntryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 next_hub: Optional[pulumi.Input[str]] = None,
                 next_type: Optional[pulumi.Input[str]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EntryArgs.__new__(EntryArgs)

            if cidr_block is None and not opts.urn:
                raise TypeError("Missing required property 'cidr_block'")
            __props__.__dict__["cidr_block"] = cidr_block
            if next_hub is None and not opts.urn:
                raise TypeError("Missing required property 'next_hub'")
            __props__.__dict__["next_hub"] = next_hub
            if next_type is None and not opts.urn:
                raise TypeError("Missing required property 'next_type'")
            __props__.__dict__["next_type"] = next_type
            if route_table_id is None and not opts.urn:
                raise TypeError("Missing required property 'route_table_id'")
            __props__.__dict__["route_table_id"] = route_table_id
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
        super(Entry, __self__).__init__(
            'tencentcloud:Deprecatedroute/entry:Entry',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cidr_block: Optional[pulumi.Input[str]] = None,
            next_hub: Optional[pulumi.Input[str]] = None,
            next_type: Optional[pulumi.Input[str]] = None,
            route_table_id: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'Entry':
        """
        Get an existing Entry resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cidr_block: The RouteEntry's target network segment.
        :param pulumi.Input[str] next_hub: The route entry's next hub. CVM instance ID or VPC router interface ID.
        :param pulumi.Input[str] next_type: The next hop type. Valid values:
               `public_gateway`,`vpn_gateway`,`sslvpn_gateway`,`dc_gateway`,`peering_connection`,`nat_gateway`,`havip`,`local_gateway`
               and `instance`. `instance` points to CVM Instance.
        :param pulumi.Input[str] route_table_id: The ID of the route table.
        :param pulumi.Input[str] vpc_id: The VPC ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EntryState.__new__(_EntryState)

        __props__.__dict__["cidr_block"] = cidr_block
        __props__.__dict__["next_hub"] = next_hub
        __props__.__dict__["next_type"] = next_type
        __props__.__dict__["route_table_id"] = route_table_id
        __props__.__dict__["vpc_id"] = vpc_id
        return Entry(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> pulumi.Output[str]:
        """
        The RouteEntry's target network segment.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="nextHub")
    def next_hub(self) -> pulumi.Output[str]:
        """
        The route entry's next hub. CVM instance ID or VPC router interface ID.
        """
        return pulumi.get(self, "next_hub")

    @property
    @pulumi.getter(name="nextType")
    def next_type(self) -> pulumi.Output[str]:
        """
        The next hop type. Valid values:
        `public_gateway`,`vpn_gateway`,`sslvpn_gateway`,`dc_gateway`,`peering_connection`,`nat_gateway`,`havip`,`local_gateway`
        and `instance`. `instance` points to CVM Instance.
        """
        return pulumi.get(self, "next_type")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> pulumi.Output[str]:
        """
        The ID of the route table.
        """
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        The VPC ID.
        """
        return pulumi.get(self, "vpc_id")

