# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AclRuleRuleListArgs',
    'ConnectResourceClickhouseConnectParamArgs',
    'ConnectResourceDorisConnectParamArgs',
    'ConnectResourceDtsConnectParamArgs',
    'ConnectResourceEsConnectParamArgs',
    'ConnectResourceKafkaConnectParamArgs',
    'ConnectResourceMariadbConnectParamArgs',
    'ConnectResourceMongodbConnectParamArgs',
    'ConnectResourceMysqlConnectParamArgs',
    'ConnectResourcePostgresqlConnectParamArgs',
    'ConnectResourceSqlserverConnectParamArgs',
    'DatahubTaskSourceResourceArgs',
    'DatahubTaskSourceResourceClickHouseParamArgs',
    'DatahubTaskSourceResourceClickHouseParamDropClsArgs',
    'DatahubTaskSourceResourceClickHouseParamSchemaArgs',
    'DatahubTaskSourceResourceClsParamArgs',
    'DatahubTaskSourceResourceCosParamArgs',
    'DatahubTaskSourceResourceCtsdbParamArgs',
    'DatahubTaskSourceResourceDtsParamArgs',
    'DatahubTaskSourceResourceEsParamArgs',
    'DatahubTaskSourceResourceEsParamDropClsArgs',
    'DatahubTaskSourceResourceEsParamDropDlqArgs',
    'DatahubTaskSourceResourceEsParamDropDlqKafkaParamArgs',
    'DatahubTaskSourceResourceEsParamDropDlqKafkaParamTableMappingArgs',
    'DatahubTaskSourceResourceEsParamDropDlqTopicParamArgs',
    'DatahubTaskSourceResourceEventBusParamArgs',
    'DatahubTaskSourceResourceKafkaParamArgs',
    'DatahubTaskSourceResourceKafkaParamTableMappingArgs',
    'DatahubTaskSourceResourceMariaDbParamArgs',
    'DatahubTaskSourceResourceMongoDbParamArgs',
    'DatahubTaskSourceResourceMySqlParamArgs',
    'DatahubTaskSourceResourceMySqlParamDataTargetRecordMappingArgs',
    'DatahubTaskSourceResourceMySqlParamDropClsArgs',
    'DatahubTaskSourceResourcePostgreSqlParamArgs',
    'DatahubTaskSourceResourcePostgreSqlParamDataTargetRecordMappingArgs',
    'DatahubTaskSourceResourceScfParamArgs',
    'DatahubTaskSourceResourceSqlServerParamArgs',
    'DatahubTaskSourceResourceTdwParamArgs',
    'DatahubTaskSourceResourceTopicParamArgs',
    'DatahubTaskTargetResourceArgs',
    'DatahubTaskTargetResourceClickHouseParamArgs',
    'DatahubTaskTargetResourceClickHouseParamDropClsArgs',
    'DatahubTaskTargetResourceClickHouseParamSchemaArgs',
    'DatahubTaskTargetResourceClsParamArgs',
    'DatahubTaskTargetResourceCosParamArgs',
    'DatahubTaskTargetResourceCtsdbParamArgs',
    'DatahubTaskTargetResourceDtsParamArgs',
    'DatahubTaskTargetResourceEsParamArgs',
    'DatahubTaskTargetResourceEsParamDropClsArgs',
    'DatahubTaskTargetResourceEsParamDropDlqArgs',
    'DatahubTaskTargetResourceEsParamDropDlqKafkaParamArgs',
    'DatahubTaskTargetResourceEsParamDropDlqKafkaParamTableMappingArgs',
    'DatahubTaskTargetResourceEsParamDropDlqTopicParamArgs',
    'DatahubTaskTargetResourceEventBusParamArgs',
    'DatahubTaskTargetResourceKafkaParamArgs',
    'DatahubTaskTargetResourceKafkaParamTableMappingArgs',
    'DatahubTaskTargetResourceMariaDbParamArgs',
    'DatahubTaskTargetResourceMongoDbParamArgs',
    'DatahubTaskTargetResourceMySqlParamArgs',
    'DatahubTaskTargetResourceMySqlParamDataTargetRecordMappingArgs',
    'DatahubTaskTargetResourceMySqlParamDropClsArgs',
    'DatahubTaskTargetResourcePostgreSqlParamArgs',
    'DatahubTaskTargetResourcePostgreSqlParamDataTargetRecordMappingArgs',
    'DatahubTaskTargetResourceScfParamArgs',
    'DatahubTaskTargetResourceSqlServerParamArgs',
    'DatahubTaskTargetResourceTdwParamArgs',
    'DatahubTaskTargetResourceTopicParamArgs',
    'DatahubTaskTransformParamArgs',
    'DatahubTaskTransformParamAnalyseResultArgs',
    'DatahubTaskTransformParamFailureParamArgs',
    'DatahubTaskTransformParamFailureParamKafkaParamArgs',
    'DatahubTaskTransformParamFailureParamKafkaParamTableMappingArgs',
    'DatahubTaskTransformParamFailureParamTopicParamArgs',
    'DatahubTaskTransformParamFilterParamArgs',
    'DatahubTaskTransformParamMapParamArgs',
    'DatahubTaskTransformsParamArgs',
    'DatahubTaskTransformsParamBatchAnalyseArgs',
    'DatahubTaskTransformsParamFailureParamArgs',
    'DatahubTaskTransformsParamFailureParamKafkaParamArgs',
    'DatahubTaskTransformsParamFailureParamKafkaParamTableMappingArgs',
    'DatahubTaskTransformsParamFailureParamTopicParamArgs',
    'DatahubTaskTransformsParamFieldChainArgs',
    'DatahubTaskTransformsParamFieldChainAnalyseArgs',
    'DatahubTaskTransformsParamFieldChainAnalyseResultArgs',
    'DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateArgs',
    'DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateDateArgs',
    'DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateJsonPathReplaceArgs',
    'DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateKVArgs',
    'DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateRegexReplaceArgs',
    'DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateReplaceArgs',
    'DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateSplitArgs',
    'DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateSubstrArgs',
    'DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateUrlDecodeArgs',
    'DatahubTaskTransformsParamFieldChainSMTArgs',
    'DatahubTaskTransformsParamFieldChainSMTValueOperateArgs',
    'DatahubTaskTransformsParamFieldChainSMTValueOperateDateArgs',
    'DatahubTaskTransformsParamFieldChainSMTValueOperateJsonPathReplaceArgs',
    'DatahubTaskTransformsParamFieldChainSMTValueOperateKVArgs',
    'DatahubTaskTransformsParamFieldChainSMTValueOperateRegexReplaceArgs',
    'DatahubTaskTransformsParamFieldChainSMTValueOperateReplaceArgs',
    'DatahubTaskTransformsParamFieldChainSMTValueOperateSplitArgs',
    'DatahubTaskTransformsParamFieldChainSMTValueOperateSubstrArgs',
    'DatahubTaskTransformsParamFieldChainSMTValueOperateUrlDecodeArgs',
    'DatahubTaskTransformsParamFieldChainSecondaryAnalyseArgs',
    'DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultArgs',
    'DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateArgs',
    'DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateDateArgs',
    'DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateJsonPathReplaceArgs',
    'DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateKVArgs',
    'DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateRegexReplaceArgs',
    'DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateReplaceArgs',
    'DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateSplitArgs',
    'DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateSubstrArgs',
    'DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateUrlDecodeArgs',
    'DatahubTaskTransformsParamFilterParamArgs',
    'DatahubTaskTransformsParamRowParamArgs',
    'InstanceConfigArgs',
    'InstanceDynamicRetentionConfigArgs',
    'InstanceTagArgs',
    'RouteBrokerVipListArgs',
    'RouteVipListArgs',
    'GetInstancesFilterArgs',
]

@pulumi.input_type
class AclRuleRuleListArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 operation: pulumi.Input[str],
                 permission_type: pulumi.Input[str],
                 principal: pulumi.Input[str]):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "permission_type", permission_type)
        pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter(name="permissionType")
    def permission_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "permission_type")

    @permission_type.setter
    def permission_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission_type", value)

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Input[str]:
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal", value)


@pulumi.input_type
class ConnectResourceClickhouseConnectParamArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 port: pulumi.Input[int],
                 resource: pulumi.Input[str],
                 self_built: pulumi.Input[bool],
                 user_name: pulumi.Input[str],
                 is_update: Optional[pulumi.Input[bool]] = None,
                 service_vip: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "self_built", self_built)
        pulumi.set(__self__, "user_name", user_name)
        if is_update is not None:
            pulumi.set(__self__, "is_update", is_update)
        if service_vip is not None:
            pulumi.set(__self__, "service_vip", service_vip)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: pulumi.Input[bool]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="isUpdate")
    def is_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_update")

    @is_update.setter
    def is_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_update", value)

    @property
    @pulumi.getter(name="serviceVip")
    def service_vip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_vip")

    @service_vip.setter
    def service_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_vip", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)


@pulumi.input_type
class ConnectResourceDorisConnectParamArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 port: pulumi.Input[int],
                 resource: pulumi.Input[str],
                 user_name: pulumi.Input[str],
                 be_port: Optional[pulumi.Input[int]] = None,
                 is_update: Optional[pulumi.Input[bool]] = None,
                 self_built: Optional[pulumi.Input[bool]] = None,
                 service_vip: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "user_name", user_name)
        if be_port is not None:
            pulumi.set(__self__, "be_port", be_port)
        if is_update is not None:
            pulumi.set(__self__, "is_update", is_update)
        if self_built is not None:
            pulumi.set(__self__, "self_built", self_built)
        if service_vip is not None:
            pulumi.set(__self__, "service_vip", service_vip)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="bePort")
    def be_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "be_port")

    @be_port.setter
    def be_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "be_port", value)

    @property
    @pulumi.getter(name="isUpdate")
    def is_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_update")

    @is_update.setter
    def is_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_update", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter(name="serviceVip")
    def service_vip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_vip")

    @service_vip.setter
    def service_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_vip", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)


@pulumi.input_type
class ConnectResourceDtsConnectParamArgs:
    def __init__(__self__, *,
                 group_id: pulumi.Input[str],
                 password: pulumi.Input[str],
                 port: pulumi.Input[int],
                 resource: pulumi.Input[str],
                 topic: pulumi.Input[str],
                 user_name: pulumi.Input[str],
                 is_update: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "topic", topic)
        pulumi.set(__self__, "user_name", user_name)
        if is_update is not None:
            pulumi.set(__self__, "is_update", is_update)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="isUpdate")
    def is_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_update")

    @is_update.setter
    def is_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_update", value)


@pulumi.input_type
class ConnectResourceEsConnectParamArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 port: pulumi.Input[int],
                 resource: pulumi.Input[str],
                 self_built: pulumi.Input[bool],
                 user_name: pulumi.Input[str],
                 is_update: Optional[pulumi.Input[bool]] = None,
                 service_vip: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "self_built", self_built)
        pulumi.set(__self__, "user_name", user_name)
        if is_update is not None:
            pulumi.set(__self__, "is_update", is_update)
        if service_vip is not None:
            pulumi.set(__self__, "service_vip", service_vip)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: pulumi.Input[bool]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="isUpdate")
    def is_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_update")

    @is_update.setter
    def is_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_update", value)

    @property
    @pulumi.getter(name="serviceVip")
    def service_vip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_vip")

    @service_vip.setter
    def service_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_vip", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)


@pulumi.input_type
class ConnectResourceKafkaConnectParamArgs:
    def __init__(__self__, *,
                 broker_address: Optional[pulumi.Input[str]] = None,
                 is_update: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource: Optional[pulumi.Input[str]] = None,
                 self_built: Optional[pulumi.Input[bool]] = None):
        if broker_address is not None:
            pulumi.set(__self__, "broker_address", broker_address)
        if is_update is not None:
            pulumi.set(__self__, "is_update", is_update)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if self_built is not None:
            pulumi.set(__self__, "self_built", self_built)

    @property
    @pulumi.getter(name="brokerAddress")
    def broker_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "broker_address")

    @broker_address.setter
    def broker_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broker_address", value)

    @property
    @pulumi.getter(name="isUpdate")
    def is_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_update")

    @is_update.setter
    def is_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_update", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_built", value)


@pulumi.input_type
class ConnectResourceMariadbConnectParamArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 port: pulumi.Input[int],
                 resource: pulumi.Input[str],
                 user_name: pulumi.Input[str],
                 is_update: Optional[pulumi.Input[bool]] = None,
                 service_vip: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "user_name", user_name)
        if is_update is not None:
            pulumi.set(__self__, "is_update", is_update)
        if service_vip is not None:
            pulumi.set(__self__, "service_vip", service_vip)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="isUpdate")
    def is_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_update")

    @is_update.setter
    def is_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_update", value)

    @property
    @pulumi.getter(name="serviceVip")
    def service_vip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_vip")

    @service_vip.setter
    def service_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_vip", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)


@pulumi.input_type
class ConnectResourceMongodbConnectParamArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 port: pulumi.Input[int],
                 resource: pulumi.Input[str],
                 self_built: pulumi.Input[bool],
                 user_name: pulumi.Input[str],
                 is_update: Optional[pulumi.Input[bool]] = None,
                 service_vip: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "self_built", self_built)
        pulumi.set(__self__, "user_name", user_name)
        if is_update is not None:
            pulumi.set(__self__, "is_update", is_update)
        if service_vip is not None:
            pulumi.set(__self__, "service_vip", service_vip)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: pulumi.Input[bool]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="isUpdate")
    def is_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_update")

    @is_update.setter
    def is_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_update", value)

    @property
    @pulumi.getter(name="serviceVip")
    def service_vip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_vip")

    @service_vip.setter
    def service_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_vip", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)


@pulumi.input_type
class ConnectResourceMysqlConnectParamArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 port: pulumi.Input[int],
                 resource: pulumi.Input[str],
                 user_name: pulumi.Input[str],
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 is_update: Optional[pulumi.Input[bool]] = None,
                 self_built: Optional[pulumi.Input[bool]] = None,
                 service_vip: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "user_name", user_name)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if is_update is not None:
            pulumi.set(__self__, "is_update", is_update)
        if self_built is not None:
            pulumi.set(__self__, "self_built", self_built)
        if service_vip is not None:
            pulumi.set(__self__, "service_vip", service_vip)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="isUpdate")
    def is_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_update")

    @is_update.setter
    def is_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_update", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter(name="serviceVip")
    def service_vip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_vip")

    @service_vip.setter
    def service_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_vip", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)


@pulumi.input_type
class ConnectResourcePostgresqlConnectParamArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 port: pulumi.Input[int],
                 resource: pulumi.Input[str],
                 user_name: pulumi.Input[str],
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 is_update: Optional[pulumi.Input[bool]] = None,
                 self_built: Optional[pulumi.Input[bool]] = None,
                 service_vip: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "user_name", user_name)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if is_update is not None:
            pulumi.set(__self__, "is_update", is_update)
        if self_built is not None:
            pulumi.set(__self__, "self_built", self_built)
        if service_vip is not None:
            pulumi.set(__self__, "service_vip", service_vip)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="isUpdate")
    def is_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_update")

    @is_update.setter
    def is_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_update", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter(name="serviceVip")
    def service_vip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_vip")

    @service_vip.setter
    def service_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_vip", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)


@pulumi.input_type
class ConnectResourceSqlserverConnectParamArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 port: pulumi.Input[int],
                 resource: pulumi.Input[str],
                 user_name: pulumi.Input[str],
                 is_update: Optional[pulumi.Input[bool]] = None,
                 service_vip: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "user_name", user_name)
        if is_update is not None:
            pulumi.set(__self__, "is_update", is_update)
        if service_vip is not None:
            pulumi.set(__self__, "service_vip", service_vip)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="isUpdate")
    def is_update(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_update")

    @is_update.setter
    def is_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_update", value)

    @property
    @pulumi.getter(name="serviceVip")
    def service_vip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_vip")

    @service_vip.setter
    def service_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_vip", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)


@pulumi.input_type
class DatahubTaskSourceResourceArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 click_house_param: Optional[pulumi.Input['DatahubTaskSourceResourceClickHouseParamArgs']] = None,
                 cls_param: Optional[pulumi.Input['DatahubTaskSourceResourceClsParamArgs']] = None,
                 cos_param: Optional[pulumi.Input['DatahubTaskSourceResourceCosParamArgs']] = None,
                 ctsdb_param: Optional[pulumi.Input['DatahubTaskSourceResourceCtsdbParamArgs']] = None,
                 dts_param: Optional[pulumi.Input['DatahubTaskSourceResourceDtsParamArgs']] = None,
                 es_param: Optional[pulumi.Input['DatahubTaskSourceResourceEsParamArgs']] = None,
                 event_bus_param: Optional[pulumi.Input['DatahubTaskSourceResourceEventBusParamArgs']] = None,
                 kafka_param: Optional[pulumi.Input['DatahubTaskSourceResourceKafkaParamArgs']] = None,
                 maria_db_param: Optional[pulumi.Input['DatahubTaskSourceResourceMariaDbParamArgs']] = None,
                 mongo_db_param: Optional[pulumi.Input['DatahubTaskSourceResourceMongoDbParamArgs']] = None,
                 my_sql_param: Optional[pulumi.Input['DatahubTaskSourceResourceMySqlParamArgs']] = None,
                 postgre_sql_param: Optional[pulumi.Input['DatahubTaskSourceResourcePostgreSqlParamArgs']] = None,
                 scf_param: Optional[pulumi.Input['DatahubTaskSourceResourceScfParamArgs']] = None,
                 sql_server_param: Optional[pulumi.Input['DatahubTaskSourceResourceSqlServerParamArgs']] = None,
                 tdw_param: Optional[pulumi.Input['DatahubTaskSourceResourceTdwParamArgs']] = None,
                 topic_param: Optional[pulumi.Input['DatahubTaskSourceResourceTopicParamArgs']] = None):
        pulumi.set(__self__, "type", type)
        if click_house_param is not None:
            pulumi.set(__self__, "click_house_param", click_house_param)
        if cls_param is not None:
            pulumi.set(__self__, "cls_param", cls_param)
        if cos_param is not None:
            pulumi.set(__self__, "cos_param", cos_param)
        if ctsdb_param is not None:
            pulumi.set(__self__, "ctsdb_param", ctsdb_param)
        if dts_param is not None:
            pulumi.set(__self__, "dts_param", dts_param)
        if es_param is not None:
            pulumi.set(__self__, "es_param", es_param)
        if event_bus_param is not None:
            pulumi.set(__self__, "event_bus_param", event_bus_param)
        if kafka_param is not None:
            pulumi.set(__self__, "kafka_param", kafka_param)
        if maria_db_param is not None:
            pulumi.set(__self__, "maria_db_param", maria_db_param)
        if mongo_db_param is not None:
            pulumi.set(__self__, "mongo_db_param", mongo_db_param)
        if my_sql_param is not None:
            pulumi.set(__self__, "my_sql_param", my_sql_param)
        if postgre_sql_param is not None:
            pulumi.set(__self__, "postgre_sql_param", postgre_sql_param)
        if scf_param is not None:
            pulumi.set(__self__, "scf_param", scf_param)
        if sql_server_param is not None:
            pulumi.set(__self__, "sql_server_param", sql_server_param)
        if tdw_param is not None:
            pulumi.set(__self__, "tdw_param", tdw_param)
        if topic_param is not None:
            pulumi.set(__self__, "topic_param", topic_param)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="clickHouseParam")
    def click_house_param(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceClickHouseParamArgs']]:
        return pulumi.get(self, "click_house_param")

    @click_house_param.setter
    def click_house_param(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceClickHouseParamArgs']]):
        pulumi.set(self, "click_house_param", value)

    @property
    @pulumi.getter(name="clsParam")
    def cls_param(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceClsParamArgs']]:
        return pulumi.get(self, "cls_param")

    @cls_param.setter
    def cls_param(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceClsParamArgs']]):
        pulumi.set(self, "cls_param", value)

    @property
    @pulumi.getter(name="cosParam")
    def cos_param(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceCosParamArgs']]:
        return pulumi.get(self, "cos_param")

    @cos_param.setter
    def cos_param(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceCosParamArgs']]):
        pulumi.set(self, "cos_param", value)

    @property
    @pulumi.getter(name="ctsdbParam")
    def ctsdb_param(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceCtsdbParamArgs']]:
        return pulumi.get(self, "ctsdb_param")

    @ctsdb_param.setter
    def ctsdb_param(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceCtsdbParamArgs']]):
        pulumi.set(self, "ctsdb_param", value)

    @property
    @pulumi.getter(name="dtsParam")
    def dts_param(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceDtsParamArgs']]:
        return pulumi.get(self, "dts_param")

    @dts_param.setter
    def dts_param(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceDtsParamArgs']]):
        pulumi.set(self, "dts_param", value)

    @property
    @pulumi.getter(name="esParam")
    def es_param(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceEsParamArgs']]:
        return pulumi.get(self, "es_param")

    @es_param.setter
    def es_param(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceEsParamArgs']]):
        pulumi.set(self, "es_param", value)

    @property
    @pulumi.getter(name="eventBusParam")
    def event_bus_param(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceEventBusParamArgs']]:
        return pulumi.get(self, "event_bus_param")

    @event_bus_param.setter
    def event_bus_param(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceEventBusParamArgs']]):
        pulumi.set(self, "event_bus_param", value)

    @property
    @pulumi.getter(name="kafkaParam")
    def kafka_param(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceKafkaParamArgs']]:
        return pulumi.get(self, "kafka_param")

    @kafka_param.setter
    def kafka_param(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceKafkaParamArgs']]):
        pulumi.set(self, "kafka_param", value)

    @property
    @pulumi.getter(name="mariaDbParam")
    def maria_db_param(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceMariaDbParamArgs']]:
        return pulumi.get(self, "maria_db_param")

    @maria_db_param.setter
    def maria_db_param(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceMariaDbParamArgs']]):
        pulumi.set(self, "maria_db_param", value)

    @property
    @pulumi.getter(name="mongoDbParam")
    def mongo_db_param(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceMongoDbParamArgs']]:
        return pulumi.get(self, "mongo_db_param")

    @mongo_db_param.setter
    def mongo_db_param(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceMongoDbParamArgs']]):
        pulumi.set(self, "mongo_db_param", value)

    @property
    @pulumi.getter(name="mySqlParam")
    def my_sql_param(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceMySqlParamArgs']]:
        return pulumi.get(self, "my_sql_param")

    @my_sql_param.setter
    def my_sql_param(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceMySqlParamArgs']]):
        pulumi.set(self, "my_sql_param", value)

    @property
    @pulumi.getter(name="postgreSqlParam")
    def postgre_sql_param(self) -> Optional[pulumi.Input['DatahubTaskSourceResourcePostgreSqlParamArgs']]:
        return pulumi.get(self, "postgre_sql_param")

    @postgre_sql_param.setter
    def postgre_sql_param(self, value: Optional[pulumi.Input['DatahubTaskSourceResourcePostgreSqlParamArgs']]):
        pulumi.set(self, "postgre_sql_param", value)

    @property
    @pulumi.getter(name="scfParam")
    def scf_param(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceScfParamArgs']]:
        return pulumi.get(self, "scf_param")

    @scf_param.setter
    def scf_param(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceScfParamArgs']]):
        pulumi.set(self, "scf_param", value)

    @property
    @pulumi.getter(name="sqlServerParam")
    def sql_server_param(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceSqlServerParamArgs']]:
        return pulumi.get(self, "sql_server_param")

    @sql_server_param.setter
    def sql_server_param(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceSqlServerParamArgs']]):
        pulumi.set(self, "sql_server_param", value)

    @property
    @pulumi.getter(name="tdwParam")
    def tdw_param(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceTdwParamArgs']]:
        return pulumi.get(self, "tdw_param")

    @tdw_param.setter
    def tdw_param(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceTdwParamArgs']]):
        pulumi.set(self, "tdw_param", value)

    @property
    @pulumi.getter(name="topicParam")
    def topic_param(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceTopicParamArgs']]:
        return pulumi.get(self, "topic_param")

    @topic_param.setter
    def topic_param(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceTopicParamArgs']]):
        pulumi.set(self, "topic_param", value)


@pulumi.input_type
class DatahubTaskSourceResourceClickHouseParamArgs:
    def __init__(__self__, *,
                 cluster: pulumi.Input[str],
                 database: pulumi.Input[str],
                 resource: pulumi.Input[str],
                 schemas: pulumi.Input[Sequence[pulumi.Input['DatahubTaskSourceResourceClickHouseParamSchemaArgs']]],
                 table: pulumi.Input[str],
                 drop_cls: Optional[pulumi.Input['DatahubTaskSourceResourceClickHouseParamDropClsArgs']] = None,
                 drop_invalid_message: Optional[pulumi.Input[bool]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 self_built: Optional[pulumi.Input[bool]] = None,
                 service_vip: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "table", table)
        if drop_cls is not None:
            pulumi.set(__self__, "drop_cls", drop_cls)
        if drop_invalid_message is not None:
            pulumi.set(__self__, "drop_invalid_message", drop_invalid_message)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if self_built is not None:
            pulumi.set(__self__, "self_built", self_built)
        if service_vip is not None:
            pulumi.set(__self__, "service_vip", service_vip)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def cluster(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster", value)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def schemas(self) -> pulumi.Input[Sequence[pulumi.Input['DatahubTaskSourceResourceClickHouseParamSchemaArgs']]]:
        return pulumi.get(self, "schemas")

    @schemas.setter
    def schemas(self, value: pulumi.Input[Sequence[pulumi.Input['DatahubTaskSourceResourceClickHouseParamSchemaArgs']]]):
        pulumi.set(self, "schemas", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter(name="dropCls")
    def drop_cls(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceClickHouseParamDropClsArgs']]:
        return pulumi.get(self, "drop_cls")

    @drop_cls.setter
    def drop_cls(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceClickHouseParamDropClsArgs']]):
        pulumi.set(self, "drop_cls", value)

    @property
    @pulumi.getter(name="dropInvalidMessage")
    def drop_invalid_message(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drop_invalid_message")

    @drop_invalid_message.setter
    def drop_invalid_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_invalid_message", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter(name="serviceVip")
    def service_vip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_vip")

    @service_vip.setter
    def service_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_vip", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class DatahubTaskSourceResourceClickHouseParamDropClsArgs:
    def __init__(__self__, *,
                 drop_cls_log_set: Optional[pulumi.Input[str]] = None,
                 drop_cls_owneruin: Optional[pulumi.Input[str]] = None,
                 drop_cls_region: Optional[pulumi.Input[str]] = None,
                 drop_cls_topic_id: Optional[pulumi.Input[str]] = None,
                 drop_invalid_message_to_cls: Optional[pulumi.Input[bool]] = None):
        if drop_cls_log_set is not None:
            pulumi.set(__self__, "drop_cls_log_set", drop_cls_log_set)
        if drop_cls_owneruin is not None:
            pulumi.set(__self__, "drop_cls_owneruin", drop_cls_owneruin)
        if drop_cls_region is not None:
            pulumi.set(__self__, "drop_cls_region", drop_cls_region)
        if drop_cls_topic_id is not None:
            pulumi.set(__self__, "drop_cls_topic_id", drop_cls_topic_id)
        if drop_invalid_message_to_cls is not None:
            pulumi.set(__self__, "drop_invalid_message_to_cls", drop_invalid_message_to_cls)

    @property
    @pulumi.getter(name="dropClsLogSet")
    def drop_cls_log_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_log_set")

    @drop_cls_log_set.setter
    def drop_cls_log_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_log_set", value)

    @property
    @pulumi.getter(name="dropClsOwneruin")
    def drop_cls_owneruin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_owneruin")

    @drop_cls_owneruin.setter
    def drop_cls_owneruin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_owneruin", value)

    @property
    @pulumi.getter(name="dropClsRegion")
    def drop_cls_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_region")

    @drop_cls_region.setter
    def drop_cls_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_region", value)

    @property
    @pulumi.getter(name="dropClsTopicId")
    def drop_cls_topic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_topic_id")

    @drop_cls_topic_id.setter
    def drop_cls_topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_topic_id", value)

    @property
    @pulumi.getter(name="dropInvalidMessageToCls")
    def drop_invalid_message_to_cls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drop_invalid_message_to_cls")

    @drop_invalid_message_to_cls.setter
    def drop_invalid_message_to_cls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_invalid_message_to_cls", value)


@pulumi.input_type
class DatahubTaskSourceResourceClickHouseParamSchemaArgs:
    def __init__(__self__, *,
                 allow_null: pulumi.Input[bool],
                 column_name: pulumi.Input[str],
                 json_key: pulumi.Input[str],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "allow_null", allow_null)
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "json_key", json_key)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="allowNull")
    def allow_null(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "allow_null")

    @allow_null.setter
    def allow_null(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_null", value)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="jsonKey")
    def json_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "json_key")

    @json_key.setter
    def json_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "json_key", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatahubTaskSourceResourceClsParamArgs:
    def __init__(__self__, *,
                 decode_json: pulumi.Input[bool],
                 resource: pulumi.Input[str],
                 content_key: Optional[pulumi.Input[str]] = None,
                 log_set: Optional[pulumi.Input[str]] = None,
                 time_field: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "decode_json", decode_json)
        pulumi.set(__self__, "resource", resource)
        if content_key is not None:
            pulumi.set(__self__, "content_key", content_key)
        if log_set is not None:
            pulumi.set(__self__, "log_set", log_set)
        if time_field is not None:
            pulumi.set(__self__, "time_field", time_field)

    @property
    @pulumi.getter(name="decodeJson")
    def decode_json(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "decode_json")

    @decode_json.setter
    def decode_json(self, value: pulumi.Input[bool]):
        pulumi.set(self, "decode_json", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="contentKey")
    def content_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_key")

    @content_key.setter
    def content_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_key", value)

    @property
    @pulumi.getter(name="logSet")
    def log_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_set")

    @log_set.setter
    def log_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_set", value)

    @property
    @pulumi.getter(name="timeField")
    def time_field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_field")

    @time_field.setter
    def time_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_field", value)


@pulumi.input_type
class DatahubTaskSourceResourceCosParamArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 aggregate_batch_size: Optional[pulumi.Input[int]] = None,
                 aggregate_interval: Optional[pulumi.Input[int]] = None,
                 directory_time_format: Optional[pulumi.Input[str]] = None,
                 format_output_type: Optional[pulumi.Input[str]] = None,
                 object_key: Optional[pulumi.Input[str]] = None,
                 object_key_prefix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "region", region)
        if aggregate_batch_size is not None:
            pulumi.set(__self__, "aggregate_batch_size", aggregate_batch_size)
        if aggregate_interval is not None:
            pulumi.set(__self__, "aggregate_interval", aggregate_interval)
        if directory_time_format is not None:
            pulumi.set(__self__, "directory_time_format", directory_time_format)
        if format_output_type is not None:
            pulumi.set(__self__, "format_output_type", format_output_type)
        if object_key is not None:
            pulumi.set(__self__, "object_key", object_key)
        if object_key_prefix is not None:
            pulumi.set(__self__, "object_key_prefix", object_key_prefix)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="aggregateBatchSize")
    def aggregate_batch_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "aggregate_batch_size")

    @aggregate_batch_size.setter
    def aggregate_batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aggregate_batch_size", value)

    @property
    @pulumi.getter(name="aggregateInterval")
    def aggregate_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "aggregate_interval")

    @aggregate_interval.setter
    def aggregate_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aggregate_interval", value)

    @property
    @pulumi.getter(name="directoryTimeFormat")
    def directory_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "directory_time_format")

    @directory_time_format.setter
    def directory_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory_time_format", value)

    @property
    @pulumi.getter(name="formatOutputType")
    def format_output_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format_output_type")

    @format_output_type.setter
    def format_output_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format_output_type", value)

    @property
    @pulumi.getter(name="objectKey")
    def object_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "object_key")

    @object_key.setter
    def object_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_key", value)

    @property
    @pulumi.getter(name="objectKeyPrefix")
    def object_key_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "object_key_prefix")

    @object_key_prefix.setter
    def object_key_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_key_prefix", value)


@pulumi.input_type
class DatahubTaskSourceResourceCtsdbParamArgs:
    def __init__(__self__, *,
                 ctsdb_metric: Optional[pulumi.Input[str]] = None,
                 resource: Optional[pulumi.Input[str]] = None):
        if ctsdb_metric is not None:
            pulumi.set(__self__, "ctsdb_metric", ctsdb_metric)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter(name="ctsdbMetric")
    def ctsdb_metric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ctsdb_metric")

    @ctsdb_metric.setter
    def ctsdb_metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ctsdb_metric", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class DatahubTaskSourceResourceDtsParamArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 group_id: Optional[pulumi.Input[str]] = None,
                 group_password: Optional[pulumi.Input[str]] = None,
                 group_user: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 tran_sql: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "resource", resource)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_password is not None:
            pulumi.set(__self__, "group_password", group_password)
        if group_user is not None:
            pulumi.set(__self__, "group_user", group_user)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)
        if tran_sql is not None:
            pulumi.set(__self__, "tran_sql", tran_sql)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="groupPassword")
    def group_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_password")

    @group_password.setter
    def group_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_password", value)

    @property
    @pulumi.getter(name="groupUser")
    def group_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_user")

    @group_user.setter
    def group_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_user", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="tranSql")
    def tran_sql(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tran_sql")

    @tran_sql.setter
    def tran_sql(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tran_sql", value)


@pulumi.input_type
class DatahubTaskSourceResourceEsParamArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 content_key: Optional[pulumi.Input[str]] = None,
                 database_primary_key: Optional[pulumi.Input[str]] = None,
                 date_format: Optional[pulumi.Input[str]] = None,
                 document_id_field: Optional[pulumi.Input[str]] = None,
                 drop_cls: Optional[pulumi.Input['DatahubTaskSourceResourceEsParamDropClsArgs']] = None,
                 drop_dlq: Optional[pulumi.Input['DatahubTaskSourceResourceEsParamDropDlqArgs']] = None,
                 drop_invalid_json_message: Optional[pulumi.Input[bool]] = None,
                 drop_invalid_message: Optional[pulumi.Input[bool]] = None,
                 index: Optional[pulumi.Input[str]] = None,
                 index_type: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 self_built: Optional[pulumi.Input[bool]] = None,
                 service_vip: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "resource", resource)
        if content_key is not None:
            pulumi.set(__self__, "content_key", content_key)
        if database_primary_key is not None:
            pulumi.set(__self__, "database_primary_key", database_primary_key)
        if date_format is not None:
            pulumi.set(__self__, "date_format", date_format)
        if document_id_field is not None:
            pulumi.set(__self__, "document_id_field", document_id_field)
        if drop_cls is not None:
            pulumi.set(__self__, "drop_cls", drop_cls)
        if drop_dlq is not None:
            pulumi.set(__self__, "drop_dlq", drop_dlq)
        if drop_invalid_json_message is not None:
            pulumi.set(__self__, "drop_invalid_json_message", drop_invalid_json_message)
        if drop_invalid_message is not None:
            pulumi.set(__self__, "drop_invalid_message", drop_invalid_message)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if index_type is not None:
            pulumi.set(__self__, "index_type", index_type)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if self_built is not None:
            pulumi.set(__self__, "self_built", self_built)
        if service_vip is not None:
            pulumi.set(__self__, "service_vip", service_vip)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="contentKey")
    def content_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_key")

    @content_key.setter
    def content_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_key", value)

    @property
    @pulumi.getter(name="databasePrimaryKey")
    def database_primary_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_primary_key")

    @database_primary_key.setter
    def database_primary_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_primary_key", value)

    @property
    @pulumi.getter(name="dateFormat")
    def date_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_format")

    @date_format.setter
    def date_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_format", value)

    @property
    @pulumi.getter(name="documentIdField")
    def document_id_field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "document_id_field")

    @document_id_field.setter
    def document_id_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "document_id_field", value)

    @property
    @pulumi.getter(name="dropCls")
    def drop_cls(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceEsParamDropClsArgs']]:
        return pulumi.get(self, "drop_cls")

    @drop_cls.setter
    def drop_cls(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceEsParamDropClsArgs']]):
        pulumi.set(self, "drop_cls", value)

    @property
    @pulumi.getter(name="dropDlq")
    def drop_dlq(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceEsParamDropDlqArgs']]:
        return pulumi.get(self, "drop_dlq")

    @drop_dlq.setter
    def drop_dlq(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceEsParamDropDlqArgs']]):
        pulumi.set(self, "drop_dlq", value)

    @property
    @pulumi.getter(name="dropInvalidJsonMessage")
    def drop_invalid_json_message(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drop_invalid_json_message")

    @drop_invalid_json_message.setter
    def drop_invalid_json_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_invalid_json_message", value)

    @property
    @pulumi.getter(name="dropInvalidMessage")
    def drop_invalid_message(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drop_invalid_message")

    @drop_invalid_message.setter
    def drop_invalid_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_invalid_message", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="indexType")
    def index_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "index_type")

    @index_type.setter
    def index_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_type", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter(name="serviceVip")
    def service_vip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_vip")

    @service_vip.setter
    def service_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_vip", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class DatahubTaskSourceResourceEsParamDropClsArgs:
    def __init__(__self__, *,
                 drop_cls_log_set: Optional[pulumi.Input[str]] = None,
                 drop_cls_owneruin: Optional[pulumi.Input[str]] = None,
                 drop_cls_region: Optional[pulumi.Input[str]] = None,
                 drop_cls_topic_id: Optional[pulumi.Input[str]] = None,
                 drop_invalid_message_to_cls: Optional[pulumi.Input[bool]] = None):
        if drop_cls_log_set is not None:
            pulumi.set(__self__, "drop_cls_log_set", drop_cls_log_set)
        if drop_cls_owneruin is not None:
            pulumi.set(__self__, "drop_cls_owneruin", drop_cls_owneruin)
        if drop_cls_region is not None:
            pulumi.set(__self__, "drop_cls_region", drop_cls_region)
        if drop_cls_topic_id is not None:
            pulumi.set(__self__, "drop_cls_topic_id", drop_cls_topic_id)
        if drop_invalid_message_to_cls is not None:
            pulumi.set(__self__, "drop_invalid_message_to_cls", drop_invalid_message_to_cls)

    @property
    @pulumi.getter(name="dropClsLogSet")
    def drop_cls_log_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_log_set")

    @drop_cls_log_set.setter
    def drop_cls_log_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_log_set", value)

    @property
    @pulumi.getter(name="dropClsOwneruin")
    def drop_cls_owneruin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_owneruin")

    @drop_cls_owneruin.setter
    def drop_cls_owneruin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_owneruin", value)

    @property
    @pulumi.getter(name="dropClsRegion")
    def drop_cls_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_region")

    @drop_cls_region.setter
    def drop_cls_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_region", value)

    @property
    @pulumi.getter(name="dropClsTopicId")
    def drop_cls_topic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_topic_id")

    @drop_cls_topic_id.setter
    def drop_cls_topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_topic_id", value)

    @property
    @pulumi.getter(name="dropInvalidMessageToCls")
    def drop_invalid_message_to_cls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drop_invalid_message_to_cls")

    @drop_invalid_message_to_cls.setter
    def drop_invalid_message_to_cls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_invalid_message_to_cls", value)


@pulumi.input_type
class DatahubTaskSourceResourceEsParamDropDlqArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 dlq_type: Optional[pulumi.Input[str]] = None,
                 kafka_param: Optional[pulumi.Input['DatahubTaskSourceResourceEsParamDropDlqKafkaParamArgs']] = None,
                 max_retry_attempts: Optional[pulumi.Input[int]] = None,
                 retry_interval: Optional[pulumi.Input[int]] = None,
                 topic_param: Optional[pulumi.Input['DatahubTaskSourceResourceEsParamDropDlqTopicParamArgs']] = None):
        pulumi.set(__self__, "type", type)
        if dlq_type is not None:
            pulumi.set(__self__, "dlq_type", dlq_type)
        if kafka_param is not None:
            pulumi.set(__self__, "kafka_param", kafka_param)
        if max_retry_attempts is not None:
            pulumi.set(__self__, "max_retry_attempts", max_retry_attempts)
        if retry_interval is not None:
            pulumi.set(__self__, "retry_interval", retry_interval)
        if topic_param is not None:
            pulumi.set(__self__, "topic_param", topic_param)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="dlqType")
    def dlq_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlq_type")

    @dlq_type.setter
    def dlq_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlq_type", value)

    @property
    @pulumi.getter(name="kafkaParam")
    def kafka_param(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceEsParamDropDlqKafkaParamArgs']]:
        return pulumi.get(self, "kafka_param")

    @kafka_param.setter
    def kafka_param(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceEsParamDropDlqKafkaParamArgs']]):
        pulumi.set(self, "kafka_param", value)

    @property
    @pulumi.getter(name="maxRetryAttempts")
    def max_retry_attempts(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_retry_attempts")

    @max_retry_attempts.setter
    def max_retry_attempts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_retry_attempts", value)

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retry_interval")

    @retry_interval.setter
    def retry_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_interval", value)

    @property
    @pulumi.getter(name="topicParam")
    def topic_param(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceEsParamDropDlqTopicParamArgs']]:
        return pulumi.get(self, "topic_param")

    @topic_param.setter
    def topic_param(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceEsParamDropDlqTopicParamArgs']]):
        pulumi.set(self, "topic_param", value)


@pulumi.input_type
class DatahubTaskSourceResourceEsParamDropDlqKafkaParamArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 self_built: pulumi.Input[bool],
                 compression_type: Optional[pulumi.Input[str]] = None,
                 enable_toleration: Optional[pulumi.Input[bool]] = None,
                 msg_multiple: Optional[pulumi.Input[int]] = None,
                 offset_type: Optional[pulumi.Input[str]] = None,
                 partition_num: Optional[pulumi.Input[int]] = None,
                 qps_limit: Optional[pulumi.Input[int]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 table_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskSourceResourceEsParamDropDlqKafkaParamTableMappingArgs']]]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 use_auto_create_topic: Optional[pulumi.Input[bool]] = None,
                 use_table_mapping: Optional[pulumi.Input[bool]] = None,
                 zone_id: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "self_built", self_built)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if enable_toleration is not None:
            pulumi.set(__self__, "enable_toleration", enable_toleration)
        if msg_multiple is not None:
            pulumi.set(__self__, "msg_multiple", msg_multiple)
        if offset_type is not None:
            pulumi.set(__self__, "offset_type", offset_type)
        if partition_num is not None:
            pulumi.set(__self__, "partition_num", partition_num)
        if qps_limit is not None:
            pulumi.set(__self__, "qps_limit", qps_limit)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if table_mappings is not None:
            pulumi.set(__self__, "table_mappings", table_mappings)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if use_auto_create_topic is not None:
            pulumi.set(__self__, "use_auto_create_topic", use_auto_create_topic)
        if use_table_mapping is not None:
            pulumi.set(__self__, "use_table_mapping", use_table_mapping)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: pulumi.Input[bool]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="enableToleration")
    def enable_toleration(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_toleration")

    @enable_toleration.setter
    def enable_toleration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_toleration", value)

    @property
    @pulumi.getter(name="msgMultiple")
    def msg_multiple(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "msg_multiple")

    @msg_multiple.setter
    def msg_multiple(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "msg_multiple", value)

    @property
    @pulumi.getter(name="offsetType")
    def offset_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_type")

    @offset_type.setter
    def offset_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_type", value)

    @property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "partition_num")

    @partition_num.setter
    def partition_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition_num", value)

    @property
    @pulumi.getter(name="qpsLimit")
    def qps_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "qps_limit")

    @qps_limit.setter
    def qps_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "qps_limit", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="tableMappings")
    def table_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskSourceResourceEsParamDropDlqKafkaParamTableMappingArgs']]]]:
        return pulumi.get(self, "table_mappings")

    @table_mappings.setter
    def table_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskSourceResourceEsParamDropDlqKafkaParamTableMappingArgs']]]]):
        pulumi.set(self, "table_mappings", value)

    @property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="useAutoCreateTopic")
    def use_auto_create_topic(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_auto_create_topic")

    @use_auto_create_topic.setter
    def use_auto_create_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_auto_create_topic", value)

    @property
    @pulumi.getter(name="useTableMapping")
    def use_table_mapping(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_table_mapping")

    @use_table_mapping.setter
    def use_table_mapping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_table_mapping", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_id", value)


@pulumi.input_type
class DatahubTaskSourceResourceEsParamDropDlqKafkaParamTableMappingArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 table: pulumi.Input[str],
                 topic: pulumi.Input[str],
                 topic_id: pulumi.Input[str]):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "table", table)
        pulumi.set(__self__, "topic", topic)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)


@pulumi.input_type
class DatahubTaskSourceResourceEsParamDropDlqTopicParamArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 compression_type: Optional[pulumi.Input[str]] = None,
                 msg_multiple: Optional[pulumi.Input[int]] = None,
                 offset_type: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 use_auto_create_topic: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "resource", resource)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if msg_multiple is not None:
            pulumi.set(__self__, "msg_multiple", msg_multiple)
        if offset_type is not None:
            pulumi.set(__self__, "offset_type", offset_type)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if use_auto_create_topic is not None:
            pulumi.set(__self__, "use_auto_create_topic", use_auto_create_topic)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="msgMultiple")
    def msg_multiple(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "msg_multiple")

    @msg_multiple.setter
    def msg_multiple(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "msg_multiple", value)

    @property
    @pulumi.getter(name="offsetType")
    def offset_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_type")

    @offset_type.setter
    def offset_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_type", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="useAutoCreateTopic")
    def use_auto_create_topic(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_auto_create_topic")

    @use_auto_create_topic.setter
    def use_auto_create_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_auto_create_topic", value)


@pulumi.input_type
class DatahubTaskSourceResourceEventBusParamArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 self_built: pulumi.Input[bool],
                 type: pulumi.Input[str],
                 function_name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 qualifier: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "self_built", self_built)
        pulumi.set(__self__, "type", type)
        if function_name is not None:
            pulumi.set(__self__, "function_name", function_name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if qualifier is not None:
            pulumi.set(__self__, "qualifier", qualifier)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: pulumi.Input[bool]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "function_name")

    @function_name.setter
    def function_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def qualifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "qualifier")

    @qualifier.setter
    def qualifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qualifier", value)


@pulumi.input_type
class DatahubTaskSourceResourceKafkaParamArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 self_built: pulumi.Input[bool],
                 compression_type: Optional[pulumi.Input[str]] = None,
                 enable_toleration: Optional[pulumi.Input[bool]] = None,
                 msg_multiple: Optional[pulumi.Input[int]] = None,
                 offset_type: Optional[pulumi.Input[str]] = None,
                 partition_num: Optional[pulumi.Input[int]] = None,
                 qps_limit: Optional[pulumi.Input[int]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 table_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskSourceResourceKafkaParamTableMappingArgs']]]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 use_auto_create_topic: Optional[pulumi.Input[bool]] = None,
                 use_table_mapping: Optional[pulumi.Input[bool]] = None,
                 zone_id: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "self_built", self_built)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if enable_toleration is not None:
            pulumi.set(__self__, "enable_toleration", enable_toleration)
        if msg_multiple is not None:
            pulumi.set(__self__, "msg_multiple", msg_multiple)
        if offset_type is not None:
            pulumi.set(__self__, "offset_type", offset_type)
        if partition_num is not None:
            pulumi.set(__self__, "partition_num", partition_num)
        if qps_limit is not None:
            pulumi.set(__self__, "qps_limit", qps_limit)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if table_mappings is not None:
            pulumi.set(__self__, "table_mappings", table_mappings)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if use_auto_create_topic is not None:
            pulumi.set(__self__, "use_auto_create_topic", use_auto_create_topic)
        if use_table_mapping is not None:
            pulumi.set(__self__, "use_table_mapping", use_table_mapping)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: pulumi.Input[bool]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="enableToleration")
    def enable_toleration(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_toleration")

    @enable_toleration.setter
    def enable_toleration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_toleration", value)

    @property
    @pulumi.getter(name="msgMultiple")
    def msg_multiple(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "msg_multiple")

    @msg_multiple.setter
    def msg_multiple(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "msg_multiple", value)

    @property
    @pulumi.getter(name="offsetType")
    def offset_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_type")

    @offset_type.setter
    def offset_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_type", value)

    @property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "partition_num")

    @partition_num.setter
    def partition_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition_num", value)

    @property
    @pulumi.getter(name="qpsLimit")
    def qps_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "qps_limit")

    @qps_limit.setter
    def qps_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "qps_limit", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="tableMappings")
    def table_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskSourceResourceKafkaParamTableMappingArgs']]]]:
        return pulumi.get(self, "table_mappings")

    @table_mappings.setter
    def table_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskSourceResourceKafkaParamTableMappingArgs']]]]):
        pulumi.set(self, "table_mappings", value)

    @property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="useAutoCreateTopic")
    def use_auto_create_topic(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_auto_create_topic")

    @use_auto_create_topic.setter
    def use_auto_create_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_auto_create_topic", value)

    @property
    @pulumi.getter(name="useTableMapping")
    def use_table_mapping(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_table_mapping")

    @use_table_mapping.setter
    def use_table_mapping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_table_mapping", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_id", value)


@pulumi.input_type
class DatahubTaskSourceResourceKafkaParamTableMappingArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 table: pulumi.Input[str],
                 topic: pulumi.Input[str],
                 topic_id: pulumi.Input[str]):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "table", table)
        pulumi.set(__self__, "topic", topic)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)


@pulumi.input_type
class DatahubTaskSourceResourceMariaDbParamArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 resource: pulumi.Input[str],
                 table: pulumi.Input[str],
                 include_content_changes: Optional[pulumi.Input[str]] = None,
                 include_query: Optional[pulumi.Input[bool]] = None,
                 is_table_prefix: Optional[pulumi.Input[bool]] = None,
                 key_columns: Optional[pulumi.Input[str]] = None,
                 output_format: Optional[pulumi.Input[str]] = None,
                 record_with_schema: Optional[pulumi.Input[bool]] = None,
                 snapshot_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "table", table)
        if include_content_changes is not None:
            pulumi.set(__self__, "include_content_changes", include_content_changes)
        if include_query is not None:
            pulumi.set(__self__, "include_query", include_query)
        if is_table_prefix is not None:
            pulumi.set(__self__, "is_table_prefix", is_table_prefix)
        if key_columns is not None:
            pulumi.set(__self__, "key_columns", key_columns)
        if output_format is not None:
            pulumi.set(__self__, "output_format", output_format)
        if record_with_schema is not None:
            pulumi.set(__self__, "record_with_schema", record_with_schema)
        if snapshot_mode is not None:
            pulumi.set(__self__, "snapshot_mode", snapshot_mode)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter(name="includeContentChanges")
    def include_content_changes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "include_content_changes")

    @include_content_changes.setter
    def include_content_changes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_content_changes", value)

    @property
    @pulumi.getter(name="includeQuery")
    def include_query(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_query")

    @include_query.setter
    def include_query(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_query", value)

    @property
    @pulumi.getter(name="isTablePrefix")
    def is_table_prefix(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_table_prefix")

    @is_table_prefix.setter
    def is_table_prefix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_table_prefix", value)

    @property
    @pulumi.getter(name="keyColumns")
    def key_columns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_columns")

    @key_columns.setter
    def key_columns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_columns", value)

    @property
    @pulumi.getter(name="outputFormat")
    def output_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_format")

    @output_format.setter
    def output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_format", value)

    @property
    @pulumi.getter(name="recordWithSchema")
    def record_with_schema(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "record_with_schema")

    @record_with_schema.setter
    def record_with_schema(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "record_with_schema", value)

    @property
    @pulumi.getter(name="snapshotMode")
    def snapshot_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_mode")

    @snapshot_mode.setter
    def snapshot_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_mode", value)


@pulumi.input_type
class DatahubTaskSourceResourceMongoDbParamArgs:
    def __init__(__self__, *,
                 collection: pulumi.Input[str],
                 copy_existing: pulumi.Input[bool],
                 database: pulumi.Input[str],
                 resource: pulumi.Input[str],
                 ip: Optional[pulumi.Input[str]] = None,
                 listening_event: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pipeline: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 read_preference: Optional[pulumi.Input[str]] = None,
                 self_built: Optional[pulumi.Input[bool]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "collection", collection)
        pulumi.set(__self__, "copy_existing", copy_existing)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "resource", resource)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if listening_event is not None:
            pulumi.set(__self__, "listening_event", listening_event)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if pipeline is not None:
            pulumi.set(__self__, "pipeline", pipeline)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if read_preference is not None:
            pulumi.set(__self__, "read_preference", read_preference)
        if self_built is not None:
            pulumi.set(__self__, "self_built", self_built)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def collection(self) -> pulumi.Input[str]:
        return pulumi.get(self, "collection")

    @collection.setter
    def collection(self, value: pulumi.Input[str]):
        pulumi.set(self, "collection", value)

    @property
    @pulumi.getter(name="copyExisting")
    def copy_existing(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "copy_existing")

    @copy_existing.setter
    def copy_existing(self, value: pulumi.Input[bool]):
        pulumi.set(self, "copy_existing", value)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="listeningEvent")
    def listening_event(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "listening_event")

    @listening_event.setter
    def listening_event(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listening_event", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def pipeline(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pipeline")

    @pipeline.setter
    def pipeline(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pipeline", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="readPreference")
    def read_preference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "read_preference")

    @read_preference.setter
    def read_preference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_preference", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class DatahubTaskSourceResourceMySqlParamArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 resource: pulumi.Input[str],
                 table: pulumi.Input[str],
                 data_source_increment_column: Optional[pulumi.Input[str]] = None,
                 data_source_increment_mode: Optional[pulumi.Input[str]] = None,
                 data_source_monitor_mode: Optional[pulumi.Input[str]] = None,
                 data_source_monitor_resource: Optional[pulumi.Input[str]] = None,
                 data_source_start_from: Optional[pulumi.Input[str]] = None,
                 data_target_insert_mode: Optional[pulumi.Input[str]] = None,
                 data_target_primary_key_field: Optional[pulumi.Input[str]] = None,
                 data_target_record_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskSourceResourceMySqlParamDataTargetRecordMappingArgs']]]] = None,
                 ddl_topic: Optional[pulumi.Input[str]] = None,
                 drop_cls: Optional[pulumi.Input['DatahubTaskSourceResourceMySqlParamDropClsArgs']] = None,
                 drop_invalid_message: Optional[pulumi.Input[bool]] = None,
                 include_content_changes: Optional[pulumi.Input[str]] = None,
                 include_query: Optional[pulumi.Input[bool]] = None,
                 is_table_prefix: Optional[pulumi.Input[bool]] = None,
                 is_table_regular: Optional[pulumi.Input[bool]] = None,
                 key_columns: Optional[pulumi.Input[str]] = None,
                 output_format: Optional[pulumi.Input[str]] = None,
                 record_with_schema: Optional[pulumi.Input[bool]] = None,
                 signal_database: Optional[pulumi.Input[str]] = None,
                 snapshot_mode: Optional[pulumi.Input[str]] = None,
                 topic_regex: Optional[pulumi.Input[str]] = None,
                 topic_replacement: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "table", table)
        if data_source_increment_column is not None:
            pulumi.set(__self__, "data_source_increment_column", data_source_increment_column)
        if data_source_increment_mode is not None:
            pulumi.set(__self__, "data_source_increment_mode", data_source_increment_mode)
        if data_source_monitor_mode is not None:
            pulumi.set(__self__, "data_source_monitor_mode", data_source_monitor_mode)
        if data_source_monitor_resource is not None:
            pulumi.set(__self__, "data_source_monitor_resource", data_source_monitor_resource)
        if data_source_start_from is not None:
            pulumi.set(__self__, "data_source_start_from", data_source_start_from)
        if data_target_insert_mode is not None:
            pulumi.set(__self__, "data_target_insert_mode", data_target_insert_mode)
        if data_target_primary_key_field is not None:
            pulumi.set(__self__, "data_target_primary_key_field", data_target_primary_key_field)
        if data_target_record_mappings is not None:
            pulumi.set(__self__, "data_target_record_mappings", data_target_record_mappings)
        if ddl_topic is not None:
            pulumi.set(__self__, "ddl_topic", ddl_topic)
        if drop_cls is not None:
            pulumi.set(__self__, "drop_cls", drop_cls)
        if drop_invalid_message is not None:
            pulumi.set(__self__, "drop_invalid_message", drop_invalid_message)
        if include_content_changes is not None:
            pulumi.set(__self__, "include_content_changes", include_content_changes)
        if include_query is not None:
            pulumi.set(__self__, "include_query", include_query)
        if is_table_prefix is not None:
            pulumi.set(__self__, "is_table_prefix", is_table_prefix)
        if is_table_regular is not None:
            pulumi.set(__self__, "is_table_regular", is_table_regular)
        if key_columns is not None:
            pulumi.set(__self__, "key_columns", key_columns)
        if output_format is not None:
            pulumi.set(__self__, "output_format", output_format)
        if record_with_schema is not None:
            pulumi.set(__self__, "record_with_schema", record_with_schema)
        if signal_database is not None:
            pulumi.set(__self__, "signal_database", signal_database)
        if snapshot_mode is not None:
            pulumi.set(__self__, "snapshot_mode", snapshot_mode)
        if topic_regex is not None:
            pulumi.set(__self__, "topic_regex", topic_regex)
        if topic_replacement is not None:
            pulumi.set(__self__, "topic_replacement", topic_replacement)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter(name="dataSourceIncrementColumn")
    def data_source_increment_column(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_source_increment_column")

    @data_source_increment_column.setter
    def data_source_increment_column(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source_increment_column", value)

    @property
    @pulumi.getter(name="dataSourceIncrementMode")
    def data_source_increment_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_source_increment_mode")

    @data_source_increment_mode.setter
    def data_source_increment_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source_increment_mode", value)

    @property
    @pulumi.getter(name="dataSourceMonitorMode")
    def data_source_monitor_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_source_monitor_mode")

    @data_source_monitor_mode.setter
    def data_source_monitor_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source_monitor_mode", value)

    @property
    @pulumi.getter(name="dataSourceMonitorResource")
    def data_source_monitor_resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_source_monitor_resource")

    @data_source_monitor_resource.setter
    def data_source_monitor_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source_monitor_resource", value)

    @property
    @pulumi.getter(name="dataSourceStartFrom")
    def data_source_start_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_source_start_from")

    @data_source_start_from.setter
    def data_source_start_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source_start_from", value)

    @property
    @pulumi.getter(name="dataTargetInsertMode")
    def data_target_insert_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_target_insert_mode")

    @data_target_insert_mode.setter
    def data_target_insert_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_target_insert_mode", value)

    @property
    @pulumi.getter(name="dataTargetPrimaryKeyField")
    def data_target_primary_key_field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_target_primary_key_field")

    @data_target_primary_key_field.setter
    def data_target_primary_key_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_target_primary_key_field", value)

    @property
    @pulumi.getter(name="dataTargetRecordMappings")
    def data_target_record_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskSourceResourceMySqlParamDataTargetRecordMappingArgs']]]]:
        return pulumi.get(self, "data_target_record_mappings")

    @data_target_record_mappings.setter
    def data_target_record_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskSourceResourceMySqlParamDataTargetRecordMappingArgs']]]]):
        pulumi.set(self, "data_target_record_mappings", value)

    @property
    @pulumi.getter(name="ddlTopic")
    def ddl_topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddl_topic")

    @ddl_topic.setter
    def ddl_topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddl_topic", value)

    @property
    @pulumi.getter(name="dropCls")
    def drop_cls(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceMySqlParamDropClsArgs']]:
        return pulumi.get(self, "drop_cls")

    @drop_cls.setter
    def drop_cls(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceMySqlParamDropClsArgs']]):
        pulumi.set(self, "drop_cls", value)

    @property
    @pulumi.getter(name="dropInvalidMessage")
    def drop_invalid_message(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drop_invalid_message")

    @drop_invalid_message.setter
    def drop_invalid_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_invalid_message", value)

    @property
    @pulumi.getter(name="includeContentChanges")
    def include_content_changes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "include_content_changes")

    @include_content_changes.setter
    def include_content_changes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_content_changes", value)

    @property
    @pulumi.getter(name="includeQuery")
    def include_query(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_query")

    @include_query.setter
    def include_query(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_query", value)

    @property
    @pulumi.getter(name="isTablePrefix")
    def is_table_prefix(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_table_prefix")

    @is_table_prefix.setter
    def is_table_prefix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_table_prefix", value)

    @property
    @pulumi.getter(name="isTableRegular")
    def is_table_regular(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_table_regular")

    @is_table_regular.setter
    def is_table_regular(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_table_regular", value)

    @property
    @pulumi.getter(name="keyColumns")
    def key_columns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_columns")

    @key_columns.setter
    def key_columns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_columns", value)

    @property
    @pulumi.getter(name="outputFormat")
    def output_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_format")

    @output_format.setter
    def output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_format", value)

    @property
    @pulumi.getter(name="recordWithSchema")
    def record_with_schema(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "record_with_schema")

    @record_with_schema.setter
    def record_with_schema(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "record_with_schema", value)

    @property
    @pulumi.getter(name="signalDatabase")
    def signal_database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signal_database")

    @signal_database.setter
    def signal_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal_database", value)

    @property
    @pulumi.getter(name="snapshotMode")
    def snapshot_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_mode")

    @snapshot_mode.setter
    def snapshot_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_mode", value)

    @property
    @pulumi.getter(name="topicRegex")
    def topic_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_regex")

    @topic_regex.setter
    def topic_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_regex", value)

    @property
    @pulumi.getter(name="topicReplacement")
    def topic_replacement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_replacement")

    @topic_replacement.setter
    def topic_replacement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_replacement", value)


@pulumi.input_type
class DatahubTaskSourceResourceMySqlParamDataTargetRecordMappingArgs:
    def __init__(__self__, *,
                 allow_null: Optional[pulumi.Input[bool]] = None,
                 auto_increment: Optional[pulumi.Input[bool]] = None,
                 column_name: Optional[pulumi.Input[str]] = None,
                 column_size: Optional[pulumi.Input[str]] = None,
                 decimal_digits: Optional[pulumi.Input[str]] = None,
                 default_value: Optional[pulumi.Input[str]] = None,
                 extra_info: Optional[pulumi.Input[str]] = None,
                 json_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if allow_null is not None:
            pulumi.set(__self__, "allow_null", allow_null)
        if auto_increment is not None:
            pulumi.set(__self__, "auto_increment", auto_increment)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if column_size is not None:
            pulumi.set(__self__, "column_size", column_size)
        if decimal_digits is not None:
            pulumi.set(__self__, "decimal_digits", decimal_digits)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if extra_info is not None:
            pulumi.set(__self__, "extra_info", extra_info)
        if json_key is not None:
            pulumi.set(__self__, "json_key", json_key)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="allowNull")
    def allow_null(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_null")

    @allow_null.setter
    def allow_null(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_null", value)

    @property
    @pulumi.getter(name="autoIncrement")
    def auto_increment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_increment")

    @auto_increment.setter
    def auto_increment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_increment", value)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="columnSize")
    def column_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column_size")

    @column_size.setter
    def column_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_size", value)

    @property
    @pulumi.getter(name="decimalDigits")
    def decimal_digits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "decimal_digits")

    @decimal_digits.setter
    def decimal_digits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "decimal_digits", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="extraInfo")
    def extra_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extra_info")

    @extra_info.setter
    def extra_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_info", value)

    @property
    @pulumi.getter(name="jsonKey")
    def json_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "json_key")

    @json_key.setter
    def json_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "json_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatahubTaskSourceResourceMySqlParamDropClsArgs:
    def __init__(__self__, *,
                 drop_cls_log_set: Optional[pulumi.Input[str]] = None,
                 drop_cls_owneruin: Optional[pulumi.Input[str]] = None,
                 drop_cls_region: Optional[pulumi.Input[str]] = None,
                 drop_cls_topic_id: Optional[pulumi.Input[str]] = None,
                 drop_invalid_message_to_cls: Optional[pulumi.Input[bool]] = None):
        if drop_cls_log_set is not None:
            pulumi.set(__self__, "drop_cls_log_set", drop_cls_log_set)
        if drop_cls_owneruin is not None:
            pulumi.set(__self__, "drop_cls_owneruin", drop_cls_owneruin)
        if drop_cls_region is not None:
            pulumi.set(__self__, "drop_cls_region", drop_cls_region)
        if drop_cls_topic_id is not None:
            pulumi.set(__self__, "drop_cls_topic_id", drop_cls_topic_id)
        if drop_invalid_message_to_cls is not None:
            pulumi.set(__self__, "drop_invalid_message_to_cls", drop_invalid_message_to_cls)

    @property
    @pulumi.getter(name="dropClsLogSet")
    def drop_cls_log_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_log_set")

    @drop_cls_log_set.setter
    def drop_cls_log_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_log_set", value)

    @property
    @pulumi.getter(name="dropClsOwneruin")
    def drop_cls_owneruin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_owneruin")

    @drop_cls_owneruin.setter
    def drop_cls_owneruin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_owneruin", value)

    @property
    @pulumi.getter(name="dropClsRegion")
    def drop_cls_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_region")

    @drop_cls_region.setter
    def drop_cls_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_region", value)

    @property
    @pulumi.getter(name="dropClsTopicId")
    def drop_cls_topic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_topic_id")

    @drop_cls_topic_id.setter
    def drop_cls_topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_topic_id", value)

    @property
    @pulumi.getter(name="dropInvalidMessageToCls")
    def drop_invalid_message_to_cls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drop_invalid_message_to_cls")

    @drop_invalid_message_to_cls.setter
    def drop_invalid_message_to_cls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_invalid_message_to_cls", value)


@pulumi.input_type
class DatahubTaskSourceResourcePostgreSqlParamArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 plugin_name: pulumi.Input[str],
                 resource: pulumi.Input[str],
                 table: pulumi.Input[str],
                 data_format: Optional[pulumi.Input[str]] = None,
                 data_target_insert_mode: Optional[pulumi.Input[str]] = None,
                 data_target_primary_key_field: Optional[pulumi.Input[str]] = None,
                 data_target_record_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskSourceResourcePostgreSqlParamDataTargetRecordMappingArgs']]]] = None,
                 drop_invalid_message: Optional[pulumi.Input[bool]] = None,
                 is_table_regular: Optional[pulumi.Input[bool]] = None,
                 key_columns: Optional[pulumi.Input[str]] = None,
                 record_with_schema: Optional[pulumi.Input[bool]] = None,
                 snapshot_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "plugin_name", plugin_name)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "table", table)
        if data_format is not None:
            pulumi.set(__self__, "data_format", data_format)
        if data_target_insert_mode is not None:
            pulumi.set(__self__, "data_target_insert_mode", data_target_insert_mode)
        if data_target_primary_key_field is not None:
            pulumi.set(__self__, "data_target_primary_key_field", data_target_primary_key_field)
        if data_target_record_mappings is not None:
            pulumi.set(__self__, "data_target_record_mappings", data_target_record_mappings)
        if drop_invalid_message is not None:
            pulumi.set(__self__, "drop_invalid_message", drop_invalid_message)
        if is_table_regular is not None:
            pulumi.set(__self__, "is_table_regular", is_table_regular)
        if key_columns is not None:
            pulumi.set(__self__, "key_columns", key_columns)
        if record_with_schema is not None:
            pulumi.set(__self__, "record_with_schema", record_with_schema)
        if snapshot_mode is not None:
            pulumi.set(__self__, "snapshot_mode", snapshot_mode)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "plugin_name")

    @plugin_name.setter
    def plugin_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "plugin_name", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter(name="dataFormat")
    def data_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_format")

    @data_format.setter
    def data_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_format", value)

    @property
    @pulumi.getter(name="dataTargetInsertMode")
    def data_target_insert_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_target_insert_mode")

    @data_target_insert_mode.setter
    def data_target_insert_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_target_insert_mode", value)

    @property
    @pulumi.getter(name="dataTargetPrimaryKeyField")
    def data_target_primary_key_field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_target_primary_key_field")

    @data_target_primary_key_field.setter
    def data_target_primary_key_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_target_primary_key_field", value)

    @property
    @pulumi.getter(name="dataTargetRecordMappings")
    def data_target_record_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskSourceResourcePostgreSqlParamDataTargetRecordMappingArgs']]]]:
        return pulumi.get(self, "data_target_record_mappings")

    @data_target_record_mappings.setter
    def data_target_record_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskSourceResourcePostgreSqlParamDataTargetRecordMappingArgs']]]]):
        pulumi.set(self, "data_target_record_mappings", value)

    @property
    @pulumi.getter(name="dropInvalidMessage")
    def drop_invalid_message(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drop_invalid_message")

    @drop_invalid_message.setter
    def drop_invalid_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_invalid_message", value)

    @property
    @pulumi.getter(name="isTableRegular")
    def is_table_regular(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_table_regular")

    @is_table_regular.setter
    def is_table_regular(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_table_regular", value)

    @property
    @pulumi.getter(name="keyColumns")
    def key_columns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_columns")

    @key_columns.setter
    def key_columns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_columns", value)

    @property
    @pulumi.getter(name="recordWithSchema")
    def record_with_schema(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "record_with_schema")

    @record_with_schema.setter
    def record_with_schema(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "record_with_schema", value)

    @property
    @pulumi.getter(name="snapshotMode")
    def snapshot_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_mode")

    @snapshot_mode.setter
    def snapshot_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_mode", value)


@pulumi.input_type
class DatahubTaskSourceResourcePostgreSqlParamDataTargetRecordMappingArgs:
    def __init__(__self__, *,
                 allow_null: Optional[pulumi.Input[bool]] = None,
                 auto_increment: Optional[pulumi.Input[bool]] = None,
                 column_name: Optional[pulumi.Input[str]] = None,
                 column_size: Optional[pulumi.Input[str]] = None,
                 decimal_digits: Optional[pulumi.Input[str]] = None,
                 default_value: Optional[pulumi.Input[str]] = None,
                 extra_info: Optional[pulumi.Input[str]] = None,
                 json_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if allow_null is not None:
            pulumi.set(__self__, "allow_null", allow_null)
        if auto_increment is not None:
            pulumi.set(__self__, "auto_increment", auto_increment)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if column_size is not None:
            pulumi.set(__self__, "column_size", column_size)
        if decimal_digits is not None:
            pulumi.set(__self__, "decimal_digits", decimal_digits)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if extra_info is not None:
            pulumi.set(__self__, "extra_info", extra_info)
        if json_key is not None:
            pulumi.set(__self__, "json_key", json_key)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="allowNull")
    def allow_null(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_null")

    @allow_null.setter
    def allow_null(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_null", value)

    @property
    @pulumi.getter(name="autoIncrement")
    def auto_increment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_increment")

    @auto_increment.setter
    def auto_increment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_increment", value)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="columnSize")
    def column_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column_size")

    @column_size.setter
    def column_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_size", value)

    @property
    @pulumi.getter(name="decimalDigits")
    def decimal_digits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "decimal_digits")

    @decimal_digits.setter
    def decimal_digits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "decimal_digits", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="extraInfo")
    def extra_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extra_info")

    @extra_info.setter
    def extra_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_info", value)

    @property
    @pulumi.getter(name="jsonKey")
    def json_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "json_key")

    @json_key.setter
    def json_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "json_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatahubTaskSourceResourceScfParamArgs:
    def __init__(__self__, *,
                 function_name: pulumi.Input[str],
                 batch_size: Optional[pulumi.Input[int]] = None,
                 max_retries: Optional[pulumi.Input[int]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 qualifier: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "function_name", function_name)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if qualifier is not None:
            pulumi.set(__self__, "qualifier", qualifier)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "function_name")

    @function_name.setter
    def function_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_name", value)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "batch_size")

    @batch_size.setter
    def batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_size", value)

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_retries", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def qualifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "qualifier")

    @qualifier.setter
    def qualifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qualifier", value)


@pulumi.input_type
class DatahubTaskSourceResourceSqlServerParamArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 resource: pulumi.Input[str],
                 table: pulumi.Input[str],
                 snapshot_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "table", table)
        if snapshot_mode is not None:
            pulumi.set(__self__, "snapshot_mode", snapshot_mode)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter(name="snapshotMode")
    def snapshot_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_mode")

    @snapshot_mode.setter
    def snapshot_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_mode", value)


@pulumi.input_type
class DatahubTaskSourceResourceTdwParamArgs:
    def __init__(__self__, *,
                 bid: pulumi.Input[str],
                 tid: pulumi.Input[str],
                 is_domestic: Optional[pulumi.Input[bool]] = None,
                 tdw_host: Optional[pulumi.Input[str]] = None,
                 tdw_port: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bid", bid)
        pulumi.set(__self__, "tid", tid)
        if is_domestic is not None:
            pulumi.set(__self__, "is_domestic", is_domestic)
        if tdw_host is not None:
            pulumi.set(__self__, "tdw_host", tdw_host)
        if tdw_port is not None:
            pulumi.set(__self__, "tdw_port", tdw_port)

    @property
    @pulumi.getter
    def bid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bid")

    @bid.setter
    def bid(self, value: pulumi.Input[str]):
        pulumi.set(self, "bid", value)

    @property
    @pulumi.getter
    def tid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tid")

    @tid.setter
    def tid(self, value: pulumi.Input[str]):
        pulumi.set(self, "tid", value)

    @property
    @pulumi.getter(name="isDomestic")
    def is_domestic(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_domestic")

    @is_domestic.setter
    def is_domestic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_domestic", value)

    @property
    @pulumi.getter(name="tdwHost")
    def tdw_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tdw_host")

    @tdw_host.setter
    def tdw_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tdw_host", value)

    @property
    @pulumi.getter(name="tdwPort")
    def tdw_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tdw_port")

    @tdw_port.setter
    def tdw_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tdw_port", value)


@pulumi.input_type
class DatahubTaskSourceResourceTopicParamArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 compression_type: Optional[pulumi.Input[str]] = None,
                 msg_multiple: Optional[pulumi.Input[int]] = None,
                 offset_type: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 use_auto_create_topic: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "resource", resource)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if msg_multiple is not None:
            pulumi.set(__self__, "msg_multiple", msg_multiple)
        if offset_type is not None:
            pulumi.set(__self__, "offset_type", offset_type)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if use_auto_create_topic is not None:
            pulumi.set(__self__, "use_auto_create_topic", use_auto_create_topic)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="msgMultiple")
    def msg_multiple(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "msg_multiple")

    @msg_multiple.setter
    def msg_multiple(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "msg_multiple", value)

    @property
    @pulumi.getter(name="offsetType")
    def offset_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_type")

    @offset_type.setter
    def offset_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_type", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="useAutoCreateTopic")
    def use_auto_create_topic(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_auto_create_topic")

    @use_auto_create_topic.setter
    def use_auto_create_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_auto_create_topic", value)


@pulumi.input_type
class DatahubTaskTargetResourceArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 click_house_param: Optional[pulumi.Input['DatahubTaskTargetResourceClickHouseParamArgs']] = None,
                 cls_param: Optional[pulumi.Input['DatahubTaskTargetResourceClsParamArgs']] = None,
                 cos_param: Optional[pulumi.Input['DatahubTaskTargetResourceCosParamArgs']] = None,
                 ctsdb_param: Optional[pulumi.Input['DatahubTaskTargetResourceCtsdbParamArgs']] = None,
                 dts_param: Optional[pulumi.Input['DatahubTaskTargetResourceDtsParamArgs']] = None,
                 es_param: Optional[pulumi.Input['DatahubTaskTargetResourceEsParamArgs']] = None,
                 event_bus_param: Optional[pulumi.Input['DatahubTaskTargetResourceEventBusParamArgs']] = None,
                 kafka_param: Optional[pulumi.Input['DatahubTaskTargetResourceKafkaParamArgs']] = None,
                 maria_db_param: Optional[pulumi.Input['DatahubTaskTargetResourceMariaDbParamArgs']] = None,
                 mongo_db_param: Optional[pulumi.Input['DatahubTaskTargetResourceMongoDbParamArgs']] = None,
                 my_sql_param: Optional[pulumi.Input['DatahubTaskTargetResourceMySqlParamArgs']] = None,
                 postgre_sql_param: Optional[pulumi.Input['DatahubTaskTargetResourcePostgreSqlParamArgs']] = None,
                 scf_param: Optional[pulumi.Input['DatahubTaskTargetResourceScfParamArgs']] = None,
                 sql_server_param: Optional[pulumi.Input['DatahubTaskTargetResourceSqlServerParamArgs']] = None,
                 tdw_param: Optional[pulumi.Input['DatahubTaskTargetResourceTdwParamArgs']] = None,
                 topic_param: Optional[pulumi.Input['DatahubTaskTargetResourceTopicParamArgs']] = None):
        pulumi.set(__self__, "type", type)
        if click_house_param is not None:
            pulumi.set(__self__, "click_house_param", click_house_param)
        if cls_param is not None:
            pulumi.set(__self__, "cls_param", cls_param)
        if cos_param is not None:
            pulumi.set(__self__, "cos_param", cos_param)
        if ctsdb_param is not None:
            pulumi.set(__self__, "ctsdb_param", ctsdb_param)
        if dts_param is not None:
            pulumi.set(__self__, "dts_param", dts_param)
        if es_param is not None:
            pulumi.set(__self__, "es_param", es_param)
        if event_bus_param is not None:
            pulumi.set(__self__, "event_bus_param", event_bus_param)
        if kafka_param is not None:
            pulumi.set(__self__, "kafka_param", kafka_param)
        if maria_db_param is not None:
            pulumi.set(__self__, "maria_db_param", maria_db_param)
        if mongo_db_param is not None:
            pulumi.set(__self__, "mongo_db_param", mongo_db_param)
        if my_sql_param is not None:
            pulumi.set(__self__, "my_sql_param", my_sql_param)
        if postgre_sql_param is not None:
            pulumi.set(__self__, "postgre_sql_param", postgre_sql_param)
        if scf_param is not None:
            pulumi.set(__self__, "scf_param", scf_param)
        if sql_server_param is not None:
            pulumi.set(__self__, "sql_server_param", sql_server_param)
        if tdw_param is not None:
            pulumi.set(__self__, "tdw_param", tdw_param)
        if topic_param is not None:
            pulumi.set(__self__, "topic_param", topic_param)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="clickHouseParam")
    def click_house_param(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceClickHouseParamArgs']]:
        return pulumi.get(self, "click_house_param")

    @click_house_param.setter
    def click_house_param(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceClickHouseParamArgs']]):
        pulumi.set(self, "click_house_param", value)

    @property
    @pulumi.getter(name="clsParam")
    def cls_param(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceClsParamArgs']]:
        return pulumi.get(self, "cls_param")

    @cls_param.setter
    def cls_param(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceClsParamArgs']]):
        pulumi.set(self, "cls_param", value)

    @property
    @pulumi.getter(name="cosParam")
    def cos_param(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceCosParamArgs']]:
        return pulumi.get(self, "cos_param")

    @cos_param.setter
    def cos_param(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceCosParamArgs']]):
        pulumi.set(self, "cos_param", value)

    @property
    @pulumi.getter(name="ctsdbParam")
    def ctsdb_param(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceCtsdbParamArgs']]:
        return pulumi.get(self, "ctsdb_param")

    @ctsdb_param.setter
    def ctsdb_param(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceCtsdbParamArgs']]):
        pulumi.set(self, "ctsdb_param", value)

    @property
    @pulumi.getter(name="dtsParam")
    def dts_param(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceDtsParamArgs']]:
        return pulumi.get(self, "dts_param")

    @dts_param.setter
    def dts_param(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceDtsParamArgs']]):
        pulumi.set(self, "dts_param", value)

    @property
    @pulumi.getter(name="esParam")
    def es_param(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceEsParamArgs']]:
        return pulumi.get(self, "es_param")

    @es_param.setter
    def es_param(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceEsParamArgs']]):
        pulumi.set(self, "es_param", value)

    @property
    @pulumi.getter(name="eventBusParam")
    def event_bus_param(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceEventBusParamArgs']]:
        return pulumi.get(self, "event_bus_param")

    @event_bus_param.setter
    def event_bus_param(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceEventBusParamArgs']]):
        pulumi.set(self, "event_bus_param", value)

    @property
    @pulumi.getter(name="kafkaParam")
    def kafka_param(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceKafkaParamArgs']]:
        return pulumi.get(self, "kafka_param")

    @kafka_param.setter
    def kafka_param(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceKafkaParamArgs']]):
        pulumi.set(self, "kafka_param", value)

    @property
    @pulumi.getter(name="mariaDbParam")
    def maria_db_param(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceMariaDbParamArgs']]:
        return pulumi.get(self, "maria_db_param")

    @maria_db_param.setter
    def maria_db_param(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceMariaDbParamArgs']]):
        pulumi.set(self, "maria_db_param", value)

    @property
    @pulumi.getter(name="mongoDbParam")
    def mongo_db_param(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceMongoDbParamArgs']]:
        return pulumi.get(self, "mongo_db_param")

    @mongo_db_param.setter
    def mongo_db_param(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceMongoDbParamArgs']]):
        pulumi.set(self, "mongo_db_param", value)

    @property
    @pulumi.getter(name="mySqlParam")
    def my_sql_param(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceMySqlParamArgs']]:
        return pulumi.get(self, "my_sql_param")

    @my_sql_param.setter
    def my_sql_param(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceMySqlParamArgs']]):
        pulumi.set(self, "my_sql_param", value)

    @property
    @pulumi.getter(name="postgreSqlParam")
    def postgre_sql_param(self) -> Optional[pulumi.Input['DatahubTaskTargetResourcePostgreSqlParamArgs']]:
        return pulumi.get(self, "postgre_sql_param")

    @postgre_sql_param.setter
    def postgre_sql_param(self, value: Optional[pulumi.Input['DatahubTaskTargetResourcePostgreSqlParamArgs']]):
        pulumi.set(self, "postgre_sql_param", value)

    @property
    @pulumi.getter(name="scfParam")
    def scf_param(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceScfParamArgs']]:
        return pulumi.get(self, "scf_param")

    @scf_param.setter
    def scf_param(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceScfParamArgs']]):
        pulumi.set(self, "scf_param", value)

    @property
    @pulumi.getter(name="sqlServerParam")
    def sql_server_param(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceSqlServerParamArgs']]:
        return pulumi.get(self, "sql_server_param")

    @sql_server_param.setter
    def sql_server_param(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceSqlServerParamArgs']]):
        pulumi.set(self, "sql_server_param", value)

    @property
    @pulumi.getter(name="tdwParam")
    def tdw_param(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceTdwParamArgs']]:
        return pulumi.get(self, "tdw_param")

    @tdw_param.setter
    def tdw_param(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceTdwParamArgs']]):
        pulumi.set(self, "tdw_param", value)

    @property
    @pulumi.getter(name="topicParam")
    def topic_param(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceTopicParamArgs']]:
        return pulumi.get(self, "topic_param")

    @topic_param.setter
    def topic_param(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceTopicParamArgs']]):
        pulumi.set(self, "topic_param", value)


@pulumi.input_type
class DatahubTaskTargetResourceClickHouseParamArgs:
    def __init__(__self__, *,
                 cluster: pulumi.Input[str],
                 database: pulumi.Input[str],
                 resource: pulumi.Input[str],
                 schemas: pulumi.Input[Sequence[pulumi.Input['DatahubTaskTargetResourceClickHouseParamSchemaArgs']]],
                 table: pulumi.Input[str],
                 drop_cls: Optional[pulumi.Input['DatahubTaskTargetResourceClickHouseParamDropClsArgs']] = None,
                 drop_invalid_message: Optional[pulumi.Input[bool]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 self_built: Optional[pulumi.Input[bool]] = None,
                 service_vip: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "schemas", schemas)
        pulumi.set(__self__, "table", table)
        if drop_cls is not None:
            pulumi.set(__self__, "drop_cls", drop_cls)
        if drop_invalid_message is not None:
            pulumi.set(__self__, "drop_invalid_message", drop_invalid_message)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if self_built is not None:
            pulumi.set(__self__, "self_built", self_built)
        if service_vip is not None:
            pulumi.set(__self__, "service_vip", service_vip)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def cluster(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster")

    @cluster.setter
    def cluster(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster", value)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def schemas(self) -> pulumi.Input[Sequence[pulumi.Input['DatahubTaskTargetResourceClickHouseParamSchemaArgs']]]:
        return pulumi.get(self, "schemas")

    @schemas.setter
    def schemas(self, value: pulumi.Input[Sequence[pulumi.Input['DatahubTaskTargetResourceClickHouseParamSchemaArgs']]]):
        pulumi.set(self, "schemas", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter(name="dropCls")
    def drop_cls(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceClickHouseParamDropClsArgs']]:
        return pulumi.get(self, "drop_cls")

    @drop_cls.setter
    def drop_cls(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceClickHouseParamDropClsArgs']]):
        pulumi.set(self, "drop_cls", value)

    @property
    @pulumi.getter(name="dropInvalidMessage")
    def drop_invalid_message(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drop_invalid_message")

    @drop_invalid_message.setter
    def drop_invalid_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_invalid_message", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter(name="serviceVip")
    def service_vip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_vip")

    @service_vip.setter
    def service_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_vip", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class DatahubTaskTargetResourceClickHouseParamDropClsArgs:
    def __init__(__self__, *,
                 drop_cls_log_set: Optional[pulumi.Input[str]] = None,
                 drop_cls_owneruin: Optional[pulumi.Input[str]] = None,
                 drop_cls_region: Optional[pulumi.Input[str]] = None,
                 drop_cls_topic_id: Optional[pulumi.Input[str]] = None,
                 drop_invalid_message_to_cls: Optional[pulumi.Input[bool]] = None):
        if drop_cls_log_set is not None:
            pulumi.set(__self__, "drop_cls_log_set", drop_cls_log_set)
        if drop_cls_owneruin is not None:
            pulumi.set(__self__, "drop_cls_owneruin", drop_cls_owneruin)
        if drop_cls_region is not None:
            pulumi.set(__self__, "drop_cls_region", drop_cls_region)
        if drop_cls_topic_id is not None:
            pulumi.set(__self__, "drop_cls_topic_id", drop_cls_topic_id)
        if drop_invalid_message_to_cls is not None:
            pulumi.set(__self__, "drop_invalid_message_to_cls", drop_invalid_message_to_cls)

    @property
    @pulumi.getter(name="dropClsLogSet")
    def drop_cls_log_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_log_set")

    @drop_cls_log_set.setter
    def drop_cls_log_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_log_set", value)

    @property
    @pulumi.getter(name="dropClsOwneruin")
    def drop_cls_owneruin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_owneruin")

    @drop_cls_owneruin.setter
    def drop_cls_owneruin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_owneruin", value)

    @property
    @pulumi.getter(name="dropClsRegion")
    def drop_cls_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_region")

    @drop_cls_region.setter
    def drop_cls_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_region", value)

    @property
    @pulumi.getter(name="dropClsTopicId")
    def drop_cls_topic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_topic_id")

    @drop_cls_topic_id.setter
    def drop_cls_topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_topic_id", value)

    @property
    @pulumi.getter(name="dropInvalidMessageToCls")
    def drop_invalid_message_to_cls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drop_invalid_message_to_cls")

    @drop_invalid_message_to_cls.setter
    def drop_invalid_message_to_cls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_invalid_message_to_cls", value)


@pulumi.input_type
class DatahubTaskTargetResourceClickHouseParamSchemaArgs:
    def __init__(__self__, *,
                 allow_null: pulumi.Input[bool],
                 column_name: pulumi.Input[str],
                 json_key: pulumi.Input[str],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "allow_null", allow_null)
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "json_key", json_key)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="allowNull")
    def allow_null(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "allow_null")

    @allow_null.setter
    def allow_null(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_null", value)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="jsonKey")
    def json_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "json_key")

    @json_key.setter
    def json_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "json_key", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatahubTaskTargetResourceClsParamArgs:
    def __init__(__self__, *,
                 decode_json: pulumi.Input[bool],
                 resource: pulumi.Input[str],
                 content_key: Optional[pulumi.Input[str]] = None,
                 log_set: Optional[pulumi.Input[str]] = None,
                 time_field: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "decode_json", decode_json)
        pulumi.set(__self__, "resource", resource)
        if content_key is not None:
            pulumi.set(__self__, "content_key", content_key)
        if log_set is not None:
            pulumi.set(__self__, "log_set", log_set)
        if time_field is not None:
            pulumi.set(__self__, "time_field", time_field)

    @property
    @pulumi.getter(name="decodeJson")
    def decode_json(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "decode_json")

    @decode_json.setter
    def decode_json(self, value: pulumi.Input[bool]):
        pulumi.set(self, "decode_json", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="contentKey")
    def content_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_key")

    @content_key.setter
    def content_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_key", value)

    @property
    @pulumi.getter(name="logSet")
    def log_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_set")

    @log_set.setter
    def log_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_set", value)

    @property
    @pulumi.getter(name="timeField")
    def time_field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_field")

    @time_field.setter
    def time_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_field", value)


@pulumi.input_type
class DatahubTaskTargetResourceCosParamArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 aggregate_batch_size: Optional[pulumi.Input[int]] = None,
                 aggregate_interval: Optional[pulumi.Input[int]] = None,
                 directory_time_format: Optional[pulumi.Input[str]] = None,
                 format_output_type: Optional[pulumi.Input[str]] = None,
                 object_key: Optional[pulumi.Input[str]] = None,
                 object_key_prefix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "region", region)
        if aggregate_batch_size is not None:
            pulumi.set(__self__, "aggregate_batch_size", aggregate_batch_size)
        if aggregate_interval is not None:
            pulumi.set(__self__, "aggregate_interval", aggregate_interval)
        if directory_time_format is not None:
            pulumi.set(__self__, "directory_time_format", directory_time_format)
        if format_output_type is not None:
            pulumi.set(__self__, "format_output_type", format_output_type)
        if object_key is not None:
            pulumi.set(__self__, "object_key", object_key)
        if object_key_prefix is not None:
            pulumi.set(__self__, "object_key_prefix", object_key_prefix)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="aggregateBatchSize")
    def aggregate_batch_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "aggregate_batch_size")

    @aggregate_batch_size.setter
    def aggregate_batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aggregate_batch_size", value)

    @property
    @pulumi.getter(name="aggregateInterval")
    def aggregate_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "aggregate_interval")

    @aggregate_interval.setter
    def aggregate_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aggregate_interval", value)

    @property
    @pulumi.getter(name="directoryTimeFormat")
    def directory_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "directory_time_format")

    @directory_time_format.setter
    def directory_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory_time_format", value)

    @property
    @pulumi.getter(name="formatOutputType")
    def format_output_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format_output_type")

    @format_output_type.setter
    def format_output_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format_output_type", value)

    @property
    @pulumi.getter(name="objectKey")
    def object_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "object_key")

    @object_key.setter
    def object_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_key", value)

    @property
    @pulumi.getter(name="objectKeyPrefix")
    def object_key_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "object_key_prefix")

    @object_key_prefix.setter
    def object_key_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_key_prefix", value)


@pulumi.input_type
class DatahubTaskTargetResourceCtsdbParamArgs:
    def __init__(__self__, *,
                 ctsdb_metric: Optional[pulumi.Input[str]] = None,
                 resource: Optional[pulumi.Input[str]] = None):
        if ctsdb_metric is not None:
            pulumi.set(__self__, "ctsdb_metric", ctsdb_metric)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter(name="ctsdbMetric")
    def ctsdb_metric(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ctsdb_metric")

    @ctsdb_metric.setter
    def ctsdb_metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ctsdb_metric", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class DatahubTaskTargetResourceDtsParamArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 group_id: Optional[pulumi.Input[str]] = None,
                 group_password: Optional[pulumi.Input[str]] = None,
                 group_user: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 tran_sql: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "resource", resource)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_password is not None:
            pulumi.set(__self__, "group_password", group_password)
        if group_user is not None:
            pulumi.set(__self__, "group_user", group_user)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)
        if tran_sql is not None:
            pulumi.set(__self__, "tran_sql", tran_sql)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="groupPassword")
    def group_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_password")

    @group_password.setter
    def group_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_password", value)

    @property
    @pulumi.getter(name="groupUser")
    def group_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_user")

    @group_user.setter
    def group_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_user", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="tranSql")
    def tran_sql(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tran_sql")

    @tran_sql.setter
    def tran_sql(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tran_sql", value)


@pulumi.input_type
class DatahubTaskTargetResourceEsParamArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 content_key: Optional[pulumi.Input[str]] = None,
                 database_primary_key: Optional[pulumi.Input[str]] = None,
                 date_format: Optional[pulumi.Input[str]] = None,
                 document_id_field: Optional[pulumi.Input[str]] = None,
                 drop_cls: Optional[pulumi.Input['DatahubTaskTargetResourceEsParamDropClsArgs']] = None,
                 drop_dlq: Optional[pulumi.Input['DatahubTaskTargetResourceEsParamDropDlqArgs']] = None,
                 drop_invalid_json_message: Optional[pulumi.Input[bool]] = None,
                 drop_invalid_message: Optional[pulumi.Input[bool]] = None,
                 index: Optional[pulumi.Input[str]] = None,
                 index_type: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 self_built: Optional[pulumi.Input[bool]] = None,
                 service_vip: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "resource", resource)
        if content_key is not None:
            pulumi.set(__self__, "content_key", content_key)
        if database_primary_key is not None:
            pulumi.set(__self__, "database_primary_key", database_primary_key)
        if date_format is not None:
            pulumi.set(__self__, "date_format", date_format)
        if document_id_field is not None:
            pulumi.set(__self__, "document_id_field", document_id_field)
        if drop_cls is not None:
            pulumi.set(__self__, "drop_cls", drop_cls)
        if drop_dlq is not None:
            pulumi.set(__self__, "drop_dlq", drop_dlq)
        if drop_invalid_json_message is not None:
            pulumi.set(__self__, "drop_invalid_json_message", drop_invalid_json_message)
        if drop_invalid_message is not None:
            pulumi.set(__self__, "drop_invalid_message", drop_invalid_message)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if index_type is not None:
            pulumi.set(__self__, "index_type", index_type)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if self_built is not None:
            pulumi.set(__self__, "self_built", self_built)
        if service_vip is not None:
            pulumi.set(__self__, "service_vip", service_vip)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="contentKey")
    def content_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_key")

    @content_key.setter
    def content_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_key", value)

    @property
    @pulumi.getter(name="databasePrimaryKey")
    def database_primary_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_primary_key")

    @database_primary_key.setter
    def database_primary_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_primary_key", value)

    @property
    @pulumi.getter(name="dateFormat")
    def date_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_format")

    @date_format.setter
    def date_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_format", value)

    @property
    @pulumi.getter(name="documentIdField")
    def document_id_field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "document_id_field")

    @document_id_field.setter
    def document_id_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "document_id_field", value)

    @property
    @pulumi.getter(name="dropCls")
    def drop_cls(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceEsParamDropClsArgs']]:
        return pulumi.get(self, "drop_cls")

    @drop_cls.setter
    def drop_cls(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceEsParamDropClsArgs']]):
        pulumi.set(self, "drop_cls", value)

    @property
    @pulumi.getter(name="dropDlq")
    def drop_dlq(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceEsParamDropDlqArgs']]:
        return pulumi.get(self, "drop_dlq")

    @drop_dlq.setter
    def drop_dlq(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceEsParamDropDlqArgs']]):
        pulumi.set(self, "drop_dlq", value)

    @property
    @pulumi.getter(name="dropInvalidJsonMessage")
    def drop_invalid_json_message(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drop_invalid_json_message")

    @drop_invalid_json_message.setter
    def drop_invalid_json_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_invalid_json_message", value)

    @property
    @pulumi.getter(name="dropInvalidMessage")
    def drop_invalid_message(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drop_invalid_message")

    @drop_invalid_message.setter
    def drop_invalid_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_invalid_message", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="indexType")
    def index_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "index_type")

    @index_type.setter
    def index_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_type", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter(name="serviceVip")
    def service_vip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_vip")

    @service_vip.setter
    def service_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_vip", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class DatahubTaskTargetResourceEsParamDropClsArgs:
    def __init__(__self__, *,
                 drop_cls_log_set: Optional[pulumi.Input[str]] = None,
                 drop_cls_owneruin: Optional[pulumi.Input[str]] = None,
                 drop_cls_region: Optional[pulumi.Input[str]] = None,
                 drop_cls_topic_id: Optional[pulumi.Input[str]] = None,
                 drop_invalid_message_to_cls: Optional[pulumi.Input[bool]] = None):
        if drop_cls_log_set is not None:
            pulumi.set(__self__, "drop_cls_log_set", drop_cls_log_set)
        if drop_cls_owneruin is not None:
            pulumi.set(__self__, "drop_cls_owneruin", drop_cls_owneruin)
        if drop_cls_region is not None:
            pulumi.set(__self__, "drop_cls_region", drop_cls_region)
        if drop_cls_topic_id is not None:
            pulumi.set(__self__, "drop_cls_topic_id", drop_cls_topic_id)
        if drop_invalid_message_to_cls is not None:
            pulumi.set(__self__, "drop_invalid_message_to_cls", drop_invalid_message_to_cls)

    @property
    @pulumi.getter(name="dropClsLogSet")
    def drop_cls_log_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_log_set")

    @drop_cls_log_set.setter
    def drop_cls_log_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_log_set", value)

    @property
    @pulumi.getter(name="dropClsOwneruin")
    def drop_cls_owneruin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_owneruin")

    @drop_cls_owneruin.setter
    def drop_cls_owneruin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_owneruin", value)

    @property
    @pulumi.getter(name="dropClsRegion")
    def drop_cls_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_region")

    @drop_cls_region.setter
    def drop_cls_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_region", value)

    @property
    @pulumi.getter(name="dropClsTopicId")
    def drop_cls_topic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_topic_id")

    @drop_cls_topic_id.setter
    def drop_cls_topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_topic_id", value)

    @property
    @pulumi.getter(name="dropInvalidMessageToCls")
    def drop_invalid_message_to_cls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drop_invalid_message_to_cls")

    @drop_invalid_message_to_cls.setter
    def drop_invalid_message_to_cls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_invalid_message_to_cls", value)


@pulumi.input_type
class DatahubTaskTargetResourceEsParamDropDlqArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 dlq_type: Optional[pulumi.Input[str]] = None,
                 kafka_param: Optional[pulumi.Input['DatahubTaskTargetResourceEsParamDropDlqKafkaParamArgs']] = None,
                 max_retry_attempts: Optional[pulumi.Input[int]] = None,
                 retry_interval: Optional[pulumi.Input[int]] = None,
                 topic_param: Optional[pulumi.Input['DatahubTaskTargetResourceEsParamDropDlqTopicParamArgs']] = None):
        pulumi.set(__self__, "type", type)
        if dlq_type is not None:
            pulumi.set(__self__, "dlq_type", dlq_type)
        if kafka_param is not None:
            pulumi.set(__self__, "kafka_param", kafka_param)
        if max_retry_attempts is not None:
            pulumi.set(__self__, "max_retry_attempts", max_retry_attempts)
        if retry_interval is not None:
            pulumi.set(__self__, "retry_interval", retry_interval)
        if topic_param is not None:
            pulumi.set(__self__, "topic_param", topic_param)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="dlqType")
    def dlq_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlq_type")

    @dlq_type.setter
    def dlq_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlq_type", value)

    @property
    @pulumi.getter(name="kafkaParam")
    def kafka_param(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceEsParamDropDlqKafkaParamArgs']]:
        return pulumi.get(self, "kafka_param")

    @kafka_param.setter
    def kafka_param(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceEsParamDropDlqKafkaParamArgs']]):
        pulumi.set(self, "kafka_param", value)

    @property
    @pulumi.getter(name="maxRetryAttempts")
    def max_retry_attempts(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_retry_attempts")

    @max_retry_attempts.setter
    def max_retry_attempts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_retry_attempts", value)

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retry_interval")

    @retry_interval.setter
    def retry_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_interval", value)

    @property
    @pulumi.getter(name="topicParam")
    def topic_param(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceEsParamDropDlqTopicParamArgs']]:
        return pulumi.get(self, "topic_param")

    @topic_param.setter
    def topic_param(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceEsParamDropDlqTopicParamArgs']]):
        pulumi.set(self, "topic_param", value)


@pulumi.input_type
class DatahubTaskTargetResourceEsParamDropDlqKafkaParamArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 self_built: pulumi.Input[bool],
                 compression_type: Optional[pulumi.Input[str]] = None,
                 enable_toleration: Optional[pulumi.Input[bool]] = None,
                 msg_multiple: Optional[pulumi.Input[int]] = None,
                 offset_type: Optional[pulumi.Input[str]] = None,
                 partition_num: Optional[pulumi.Input[int]] = None,
                 qps_limit: Optional[pulumi.Input[int]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 table_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTargetResourceEsParamDropDlqKafkaParamTableMappingArgs']]]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 use_auto_create_topic: Optional[pulumi.Input[bool]] = None,
                 use_table_mapping: Optional[pulumi.Input[bool]] = None,
                 zone_id: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "self_built", self_built)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if enable_toleration is not None:
            pulumi.set(__self__, "enable_toleration", enable_toleration)
        if msg_multiple is not None:
            pulumi.set(__self__, "msg_multiple", msg_multiple)
        if offset_type is not None:
            pulumi.set(__self__, "offset_type", offset_type)
        if partition_num is not None:
            pulumi.set(__self__, "partition_num", partition_num)
        if qps_limit is not None:
            pulumi.set(__self__, "qps_limit", qps_limit)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if table_mappings is not None:
            pulumi.set(__self__, "table_mappings", table_mappings)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if use_auto_create_topic is not None:
            pulumi.set(__self__, "use_auto_create_topic", use_auto_create_topic)
        if use_table_mapping is not None:
            pulumi.set(__self__, "use_table_mapping", use_table_mapping)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: pulumi.Input[bool]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="enableToleration")
    def enable_toleration(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_toleration")

    @enable_toleration.setter
    def enable_toleration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_toleration", value)

    @property
    @pulumi.getter(name="msgMultiple")
    def msg_multiple(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "msg_multiple")

    @msg_multiple.setter
    def msg_multiple(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "msg_multiple", value)

    @property
    @pulumi.getter(name="offsetType")
    def offset_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_type")

    @offset_type.setter
    def offset_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_type", value)

    @property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "partition_num")

    @partition_num.setter
    def partition_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition_num", value)

    @property
    @pulumi.getter(name="qpsLimit")
    def qps_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "qps_limit")

    @qps_limit.setter
    def qps_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "qps_limit", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="tableMappings")
    def table_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTargetResourceEsParamDropDlqKafkaParamTableMappingArgs']]]]:
        return pulumi.get(self, "table_mappings")

    @table_mappings.setter
    def table_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTargetResourceEsParamDropDlqKafkaParamTableMappingArgs']]]]):
        pulumi.set(self, "table_mappings", value)

    @property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="useAutoCreateTopic")
    def use_auto_create_topic(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_auto_create_topic")

    @use_auto_create_topic.setter
    def use_auto_create_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_auto_create_topic", value)

    @property
    @pulumi.getter(name="useTableMapping")
    def use_table_mapping(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_table_mapping")

    @use_table_mapping.setter
    def use_table_mapping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_table_mapping", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_id", value)


@pulumi.input_type
class DatahubTaskTargetResourceEsParamDropDlqKafkaParamTableMappingArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 table: pulumi.Input[str],
                 topic: pulumi.Input[str],
                 topic_id: pulumi.Input[str]):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "table", table)
        pulumi.set(__self__, "topic", topic)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)


@pulumi.input_type
class DatahubTaskTargetResourceEsParamDropDlqTopicParamArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 compression_type: Optional[pulumi.Input[str]] = None,
                 msg_multiple: Optional[pulumi.Input[int]] = None,
                 offset_type: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 use_auto_create_topic: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "resource", resource)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if msg_multiple is not None:
            pulumi.set(__self__, "msg_multiple", msg_multiple)
        if offset_type is not None:
            pulumi.set(__self__, "offset_type", offset_type)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if use_auto_create_topic is not None:
            pulumi.set(__self__, "use_auto_create_topic", use_auto_create_topic)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="msgMultiple")
    def msg_multiple(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "msg_multiple")

    @msg_multiple.setter
    def msg_multiple(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "msg_multiple", value)

    @property
    @pulumi.getter(name="offsetType")
    def offset_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_type")

    @offset_type.setter
    def offset_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_type", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="useAutoCreateTopic")
    def use_auto_create_topic(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_auto_create_topic")

    @use_auto_create_topic.setter
    def use_auto_create_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_auto_create_topic", value)


@pulumi.input_type
class DatahubTaskTargetResourceEventBusParamArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 self_built: pulumi.Input[bool],
                 type: pulumi.Input[str],
                 function_name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 qualifier: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "self_built", self_built)
        pulumi.set(__self__, "type", type)
        if function_name is not None:
            pulumi.set(__self__, "function_name", function_name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if qualifier is not None:
            pulumi.set(__self__, "qualifier", qualifier)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: pulumi.Input[bool]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "function_name")

    @function_name.setter
    def function_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def qualifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "qualifier")

    @qualifier.setter
    def qualifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qualifier", value)


@pulumi.input_type
class DatahubTaskTargetResourceKafkaParamArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 self_built: pulumi.Input[bool],
                 compression_type: Optional[pulumi.Input[str]] = None,
                 enable_toleration: Optional[pulumi.Input[bool]] = None,
                 msg_multiple: Optional[pulumi.Input[int]] = None,
                 offset_type: Optional[pulumi.Input[str]] = None,
                 partition_num: Optional[pulumi.Input[int]] = None,
                 qps_limit: Optional[pulumi.Input[int]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 table_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTargetResourceKafkaParamTableMappingArgs']]]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 use_auto_create_topic: Optional[pulumi.Input[bool]] = None,
                 use_table_mapping: Optional[pulumi.Input[bool]] = None,
                 zone_id: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "self_built", self_built)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if enable_toleration is not None:
            pulumi.set(__self__, "enable_toleration", enable_toleration)
        if msg_multiple is not None:
            pulumi.set(__self__, "msg_multiple", msg_multiple)
        if offset_type is not None:
            pulumi.set(__self__, "offset_type", offset_type)
        if partition_num is not None:
            pulumi.set(__self__, "partition_num", partition_num)
        if qps_limit is not None:
            pulumi.set(__self__, "qps_limit", qps_limit)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if table_mappings is not None:
            pulumi.set(__self__, "table_mappings", table_mappings)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if use_auto_create_topic is not None:
            pulumi.set(__self__, "use_auto_create_topic", use_auto_create_topic)
        if use_table_mapping is not None:
            pulumi.set(__self__, "use_table_mapping", use_table_mapping)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: pulumi.Input[bool]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="enableToleration")
    def enable_toleration(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_toleration")

    @enable_toleration.setter
    def enable_toleration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_toleration", value)

    @property
    @pulumi.getter(name="msgMultiple")
    def msg_multiple(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "msg_multiple")

    @msg_multiple.setter
    def msg_multiple(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "msg_multiple", value)

    @property
    @pulumi.getter(name="offsetType")
    def offset_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_type")

    @offset_type.setter
    def offset_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_type", value)

    @property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "partition_num")

    @partition_num.setter
    def partition_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition_num", value)

    @property
    @pulumi.getter(name="qpsLimit")
    def qps_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "qps_limit")

    @qps_limit.setter
    def qps_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "qps_limit", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="tableMappings")
    def table_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTargetResourceKafkaParamTableMappingArgs']]]]:
        return pulumi.get(self, "table_mappings")

    @table_mappings.setter
    def table_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTargetResourceKafkaParamTableMappingArgs']]]]):
        pulumi.set(self, "table_mappings", value)

    @property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="useAutoCreateTopic")
    def use_auto_create_topic(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_auto_create_topic")

    @use_auto_create_topic.setter
    def use_auto_create_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_auto_create_topic", value)

    @property
    @pulumi.getter(name="useTableMapping")
    def use_table_mapping(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_table_mapping")

    @use_table_mapping.setter
    def use_table_mapping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_table_mapping", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_id", value)


@pulumi.input_type
class DatahubTaskTargetResourceKafkaParamTableMappingArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 table: pulumi.Input[str],
                 topic: pulumi.Input[str],
                 topic_id: pulumi.Input[str]):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "table", table)
        pulumi.set(__self__, "topic", topic)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)


@pulumi.input_type
class DatahubTaskTargetResourceMariaDbParamArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 resource: pulumi.Input[str],
                 table: pulumi.Input[str],
                 include_content_changes: Optional[pulumi.Input[str]] = None,
                 include_query: Optional[pulumi.Input[bool]] = None,
                 is_table_prefix: Optional[pulumi.Input[bool]] = None,
                 key_columns: Optional[pulumi.Input[str]] = None,
                 output_format: Optional[pulumi.Input[str]] = None,
                 record_with_schema: Optional[pulumi.Input[bool]] = None,
                 snapshot_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "table", table)
        if include_content_changes is not None:
            pulumi.set(__self__, "include_content_changes", include_content_changes)
        if include_query is not None:
            pulumi.set(__self__, "include_query", include_query)
        if is_table_prefix is not None:
            pulumi.set(__self__, "is_table_prefix", is_table_prefix)
        if key_columns is not None:
            pulumi.set(__self__, "key_columns", key_columns)
        if output_format is not None:
            pulumi.set(__self__, "output_format", output_format)
        if record_with_schema is not None:
            pulumi.set(__self__, "record_with_schema", record_with_schema)
        if snapshot_mode is not None:
            pulumi.set(__self__, "snapshot_mode", snapshot_mode)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter(name="includeContentChanges")
    def include_content_changes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "include_content_changes")

    @include_content_changes.setter
    def include_content_changes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_content_changes", value)

    @property
    @pulumi.getter(name="includeQuery")
    def include_query(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_query")

    @include_query.setter
    def include_query(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_query", value)

    @property
    @pulumi.getter(name="isTablePrefix")
    def is_table_prefix(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_table_prefix")

    @is_table_prefix.setter
    def is_table_prefix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_table_prefix", value)

    @property
    @pulumi.getter(name="keyColumns")
    def key_columns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_columns")

    @key_columns.setter
    def key_columns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_columns", value)

    @property
    @pulumi.getter(name="outputFormat")
    def output_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_format")

    @output_format.setter
    def output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_format", value)

    @property
    @pulumi.getter(name="recordWithSchema")
    def record_with_schema(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "record_with_schema")

    @record_with_schema.setter
    def record_with_schema(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "record_with_schema", value)

    @property
    @pulumi.getter(name="snapshotMode")
    def snapshot_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_mode")

    @snapshot_mode.setter
    def snapshot_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_mode", value)


@pulumi.input_type
class DatahubTaskTargetResourceMongoDbParamArgs:
    def __init__(__self__, *,
                 collection: pulumi.Input[str],
                 copy_existing: pulumi.Input[bool],
                 database: pulumi.Input[str],
                 resource: pulumi.Input[str],
                 ip: Optional[pulumi.Input[str]] = None,
                 listening_event: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 pipeline: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 read_preference: Optional[pulumi.Input[str]] = None,
                 self_built: Optional[pulumi.Input[bool]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "collection", collection)
        pulumi.set(__self__, "copy_existing", copy_existing)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "resource", resource)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if listening_event is not None:
            pulumi.set(__self__, "listening_event", listening_event)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if pipeline is not None:
            pulumi.set(__self__, "pipeline", pipeline)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if read_preference is not None:
            pulumi.set(__self__, "read_preference", read_preference)
        if self_built is not None:
            pulumi.set(__self__, "self_built", self_built)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def collection(self) -> pulumi.Input[str]:
        return pulumi.get(self, "collection")

    @collection.setter
    def collection(self, value: pulumi.Input[str]):
        pulumi.set(self, "collection", value)

    @property
    @pulumi.getter(name="copyExisting")
    def copy_existing(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "copy_existing")

    @copy_existing.setter
    def copy_existing(self, value: pulumi.Input[bool]):
        pulumi.set(self, "copy_existing", value)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="listeningEvent")
    def listening_event(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "listening_event")

    @listening_event.setter
    def listening_event(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listening_event", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def pipeline(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pipeline")

    @pipeline.setter
    def pipeline(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pipeline", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="readPreference")
    def read_preference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "read_preference")

    @read_preference.setter
    def read_preference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_preference", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class DatahubTaskTargetResourceMySqlParamArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 resource: pulumi.Input[str],
                 table: pulumi.Input[str],
                 data_source_increment_column: Optional[pulumi.Input[str]] = None,
                 data_source_increment_mode: Optional[pulumi.Input[str]] = None,
                 data_source_monitor_mode: Optional[pulumi.Input[str]] = None,
                 data_source_monitor_resource: Optional[pulumi.Input[str]] = None,
                 data_source_start_from: Optional[pulumi.Input[str]] = None,
                 data_target_insert_mode: Optional[pulumi.Input[str]] = None,
                 data_target_primary_key_field: Optional[pulumi.Input[str]] = None,
                 data_target_record_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTargetResourceMySqlParamDataTargetRecordMappingArgs']]]] = None,
                 ddl_topic: Optional[pulumi.Input[str]] = None,
                 drop_cls: Optional[pulumi.Input['DatahubTaskTargetResourceMySqlParamDropClsArgs']] = None,
                 drop_invalid_message: Optional[pulumi.Input[bool]] = None,
                 include_content_changes: Optional[pulumi.Input[str]] = None,
                 include_query: Optional[pulumi.Input[bool]] = None,
                 is_table_prefix: Optional[pulumi.Input[bool]] = None,
                 is_table_regular: Optional[pulumi.Input[bool]] = None,
                 key_columns: Optional[pulumi.Input[str]] = None,
                 output_format: Optional[pulumi.Input[str]] = None,
                 record_with_schema: Optional[pulumi.Input[bool]] = None,
                 signal_database: Optional[pulumi.Input[str]] = None,
                 snapshot_mode: Optional[pulumi.Input[str]] = None,
                 topic_regex: Optional[pulumi.Input[str]] = None,
                 topic_replacement: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "table", table)
        if data_source_increment_column is not None:
            pulumi.set(__self__, "data_source_increment_column", data_source_increment_column)
        if data_source_increment_mode is not None:
            pulumi.set(__self__, "data_source_increment_mode", data_source_increment_mode)
        if data_source_monitor_mode is not None:
            pulumi.set(__self__, "data_source_monitor_mode", data_source_monitor_mode)
        if data_source_monitor_resource is not None:
            pulumi.set(__self__, "data_source_monitor_resource", data_source_monitor_resource)
        if data_source_start_from is not None:
            pulumi.set(__self__, "data_source_start_from", data_source_start_from)
        if data_target_insert_mode is not None:
            pulumi.set(__self__, "data_target_insert_mode", data_target_insert_mode)
        if data_target_primary_key_field is not None:
            pulumi.set(__self__, "data_target_primary_key_field", data_target_primary_key_field)
        if data_target_record_mappings is not None:
            pulumi.set(__self__, "data_target_record_mappings", data_target_record_mappings)
        if ddl_topic is not None:
            pulumi.set(__self__, "ddl_topic", ddl_topic)
        if drop_cls is not None:
            pulumi.set(__self__, "drop_cls", drop_cls)
        if drop_invalid_message is not None:
            pulumi.set(__self__, "drop_invalid_message", drop_invalid_message)
        if include_content_changes is not None:
            pulumi.set(__self__, "include_content_changes", include_content_changes)
        if include_query is not None:
            pulumi.set(__self__, "include_query", include_query)
        if is_table_prefix is not None:
            pulumi.set(__self__, "is_table_prefix", is_table_prefix)
        if is_table_regular is not None:
            pulumi.set(__self__, "is_table_regular", is_table_regular)
        if key_columns is not None:
            pulumi.set(__self__, "key_columns", key_columns)
        if output_format is not None:
            pulumi.set(__self__, "output_format", output_format)
        if record_with_schema is not None:
            pulumi.set(__self__, "record_with_schema", record_with_schema)
        if signal_database is not None:
            pulumi.set(__self__, "signal_database", signal_database)
        if snapshot_mode is not None:
            pulumi.set(__self__, "snapshot_mode", snapshot_mode)
        if topic_regex is not None:
            pulumi.set(__self__, "topic_regex", topic_regex)
        if topic_replacement is not None:
            pulumi.set(__self__, "topic_replacement", topic_replacement)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter(name="dataSourceIncrementColumn")
    def data_source_increment_column(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_source_increment_column")

    @data_source_increment_column.setter
    def data_source_increment_column(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source_increment_column", value)

    @property
    @pulumi.getter(name="dataSourceIncrementMode")
    def data_source_increment_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_source_increment_mode")

    @data_source_increment_mode.setter
    def data_source_increment_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source_increment_mode", value)

    @property
    @pulumi.getter(name="dataSourceMonitorMode")
    def data_source_monitor_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_source_monitor_mode")

    @data_source_monitor_mode.setter
    def data_source_monitor_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source_monitor_mode", value)

    @property
    @pulumi.getter(name="dataSourceMonitorResource")
    def data_source_monitor_resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_source_monitor_resource")

    @data_source_monitor_resource.setter
    def data_source_monitor_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source_monitor_resource", value)

    @property
    @pulumi.getter(name="dataSourceStartFrom")
    def data_source_start_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_source_start_from")

    @data_source_start_from.setter
    def data_source_start_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source_start_from", value)

    @property
    @pulumi.getter(name="dataTargetInsertMode")
    def data_target_insert_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_target_insert_mode")

    @data_target_insert_mode.setter
    def data_target_insert_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_target_insert_mode", value)

    @property
    @pulumi.getter(name="dataTargetPrimaryKeyField")
    def data_target_primary_key_field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_target_primary_key_field")

    @data_target_primary_key_field.setter
    def data_target_primary_key_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_target_primary_key_field", value)

    @property
    @pulumi.getter(name="dataTargetRecordMappings")
    def data_target_record_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTargetResourceMySqlParamDataTargetRecordMappingArgs']]]]:
        return pulumi.get(self, "data_target_record_mappings")

    @data_target_record_mappings.setter
    def data_target_record_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTargetResourceMySqlParamDataTargetRecordMappingArgs']]]]):
        pulumi.set(self, "data_target_record_mappings", value)

    @property
    @pulumi.getter(name="ddlTopic")
    def ddl_topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ddl_topic")

    @ddl_topic.setter
    def ddl_topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ddl_topic", value)

    @property
    @pulumi.getter(name="dropCls")
    def drop_cls(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceMySqlParamDropClsArgs']]:
        return pulumi.get(self, "drop_cls")

    @drop_cls.setter
    def drop_cls(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceMySqlParamDropClsArgs']]):
        pulumi.set(self, "drop_cls", value)

    @property
    @pulumi.getter(name="dropInvalidMessage")
    def drop_invalid_message(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drop_invalid_message")

    @drop_invalid_message.setter
    def drop_invalid_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_invalid_message", value)

    @property
    @pulumi.getter(name="includeContentChanges")
    def include_content_changes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "include_content_changes")

    @include_content_changes.setter
    def include_content_changes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_content_changes", value)

    @property
    @pulumi.getter(name="includeQuery")
    def include_query(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_query")

    @include_query.setter
    def include_query(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_query", value)

    @property
    @pulumi.getter(name="isTablePrefix")
    def is_table_prefix(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_table_prefix")

    @is_table_prefix.setter
    def is_table_prefix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_table_prefix", value)

    @property
    @pulumi.getter(name="isTableRegular")
    def is_table_regular(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_table_regular")

    @is_table_regular.setter
    def is_table_regular(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_table_regular", value)

    @property
    @pulumi.getter(name="keyColumns")
    def key_columns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_columns")

    @key_columns.setter
    def key_columns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_columns", value)

    @property
    @pulumi.getter(name="outputFormat")
    def output_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_format")

    @output_format.setter
    def output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_format", value)

    @property
    @pulumi.getter(name="recordWithSchema")
    def record_with_schema(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "record_with_schema")

    @record_with_schema.setter
    def record_with_schema(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "record_with_schema", value)

    @property
    @pulumi.getter(name="signalDatabase")
    def signal_database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "signal_database")

    @signal_database.setter
    def signal_database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "signal_database", value)

    @property
    @pulumi.getter(name="snapshotMode")
    def snapshot_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_mode")

    @snapshot_mode.setter
    def snapshot_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_mode", value)

    @property
    @pulumi.getter(name="topicRegex")
    def topic_regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_regex")

    @topic_regex.setter
    def topic_regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_regex", value)

    @property
    @pulumi.getter(name="topicReplacement")
    def topic_replacement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_replacement")

    @topic_replacement.setter
    def topic_replacement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_replacement", value)


@pulumi.input_type
class DatahubTaskTargetResourceMySqlParamDataTargetRecordMappingArgs:
    def __init__(__self__, *,
                 allow_null: Optional[pulumi.Input[bool]] = None,
                 auto_increment: Optional[pulumi.Input[bool]] = None,
                 column_name: Optional[pulumi.Input[str]] = None,
                 column_size: Optional[pulumi.Input[str]] = None,
                 decimal_digits: Optional[pulumi.Input[str]] = None,
                 default_value: Optional[pulumi.Input[str]] = None,
                 extra_info: Optional[pulumi.Input[str]] = None,
                 json_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if allow_null is not None:
            pulumi.set(__self__, "allow_null", allow_null)
        if auto_increment is not None:
            pulumi.set(__self__, "auto_increment", auto_increment)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if column_size is not None:
            pulumi.set(__self__, "column_size", column_size)
        if decimal_digits is not None:
            pulumi.set(__self__, "decimal_digits", decimal_digits)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if extra_info is not None:
            pulumi.set(__self__, "extra_info", extra_info)
        if json_key is not None:
            pulumi.set(__self__, "json_key", json_key)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="allowNull")
    def allow_null(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_null")

    @allow_null.setter
    def allow_null(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_null", value)

    @property
    @pulumi.getter(name="autoIncrement")
    def auto_increment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_increment")

    @auto_increment.setter
    def auto_increment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_increment", value)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="columnSize")
    def column_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column_size")

    @column_size.setter
    def column_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_size", value)

    @property
    @pulumi.getter(name="decimalDigits")
    def decimal_digits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "decimal_digits")

    @decimal_digits.setter
    def decimal_digits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "decimal_digits", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="extraInfo")
    def extra_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extra_info")

    @extra_info.setter
    def extra_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_info", value)

    @property
    @pulumi.getter(name="jsonKey")
    def json_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "json_key")

    @json_key.setter
    def json_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "json_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatahubTaskTargetResourceMySqlParamDropClsArgs:
    def __init__(__self__, *,
                 drop_cls_log_set: Optional[pulumi.Input[str]] = None,
                 drop_cls_owneruin: Optional[pulumi.Input[str]] = None,
                 drop_cls_region: Optional[pulumi.Input[str]] = None,
                 drop_cls_topic_id: Optional[pulumi.Input[str]] = None,
                 drop_invalid_message_to_cls: Optional[pulumi.Input[bool]] = None):
        if drop_cls_log_set is not None:
            pulumi.set(__self__, "drop_cls_log_set", drop_cls_log_set)
        if drop_cls_owneruin is not None:
            pulumi.set(__self__, "drop_cls_owneruin", drop_cls_owneruin)
        if drop_cls_region is not None:
            pulumi.set(__self__, "drop_cls_region", drop_cls_region)
        if drop_cls_topic_id is not None:
            pulumi.set(__self__, "drop_cls_topic_id", drop_cls_topic_id)
        if drop_invalid_message_to_cls is not None:
            pulumi.set(__self__, "drop_invalid_message_to_cls", drop_invalid_message_to_cls)

    @property
    @pulumi.getter(name="dropClsLogSet")
    def drop_cls_log_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_log_set")

    @drop_cls_log_set.setter
    def drop_cls_log_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_log_set", value)

    @property
    @pulumi.getter(name="dropClsOwneruin")
    def drop_cls_owneruin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_owneruin")

    @drop_cls_owneruin.setter
    def drop_cls_owneruin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_owneruin", value)

    @property
    @pulumi.getter(name="dropClsRegion")
    def drop_cls_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_region")

    @drop_cls_region.setter
    def drop_cls_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_region", value)

    @property
    @pulumi.getter(name="dropClsTopicId")
    def drop_cls_topic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "drop_cls_topic_id")

    @drop_cls_topic_id.setter
    def drop_cls_topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drop_cls_topic_id", value)

    @property
    @pulumi.getter(name="dropInvalidMessageToCls")
    def drop_invalid_message_to_cls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drop_invalid_message_to_cls")

    @drop_invalid_message_to_cls.setter
    def drop_invalid_message_to_cls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_invalid_message_to_cls", value)


@pulumi.input_type
class DatahubTaskTargetResourcePostgreSqlParamArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 plugin_name: pulumi.Input[str],
                 resource: pulumi.Input[str],
                 table: pulumi.Input[str],
                 data_format: Optional[pulumi.Input[str]] = None,
                 data_target_insert_mode: Optional[pulumi.Input[str]] = None,
                 data_target_primary_key_field: Optional[pulumi.Input[str]] = None,
                 data_target_record_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTargetResourcePostgreSqlParamDataTargetRecordMappingArgs']]]] = None,
                 drop_invalid_message: Optional[pulumi.Input[bool]] = None,
                 is_table_regular: Optional[pulumi.Input[bool]] = None,
                 key_columns: Optional[pulumi.Input[str]] = None,
                 record_with_schema: Optional[pulumi.Input[bool]] = None,
                 snapshot_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "plugin_name", plugin_name)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "table", table)
        if data_format is not None:
            pulumi.set(__self__, "data_format", data_format)
        if data_target_insert_mode is not None:
            pulumi.set(__self__, "data_target_insert_mode", data_target_insert_mode)
        if data_target_primary_key_field is not None:
            pulumi.set(__self__, "data_target_primary_key_field", data_target_primary_key_field)
        if data_target_record_mappings is not None:
            pulumi.set(__self__, "data_target_record_mappings", data_target_record_mappings)
        if drop_invalid_message is not None:
            pulumi.set(__self__, "drop_invalid_message", drop_invalid_message)
        if is_table_regular is not None:
            pulumi.set(__self__, "is_table_regular", is_table_regular)
        if key_columns is not None:
            pulumi.set(__self__, "key_columns", key_columns)
        if record_with_schema is not None:
            pulumi.set(__self__, "record_with_schema", record_with_schema)
        if snapshot_mode is not None:
            pulumi.set(__self__, "snapshot_mode", snapshot_mode)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "plugin_name")

    @plugin_name.setter
    def plugin_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "plugin_name", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter(name="dataFormat")
    def data_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_format")

    @data_format.setter
    def data_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_format", value)

    @property
    @pulumi.getter(name="dataTargetInsertMode")
    def data_target_insert_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_target_insert_mode")

    @data_target_insert_mode.setter
    def data_target_insert_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_target_insert_mode", value)

    @property
    @pulumi.getter(name="dataTargetPrimaryKeyField")
    def data_target_primary_key_field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_target_primary_key_field")

    @data_target_primary_key_field.setter
    def data_target_primary_key_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_target_primary_key_field", value)

    @property
    @pulumi.getter(name="dataTargetRecordMappings")
    def data_target_record_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTargetResourcePostgreSqlParamDataTargetRecordMappingArgs']]]]:
        return pulumi.get(self, "data_target_record_mappings")

    @data_target_record_mappings.setter
    def data_target_record_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTargetResourcePostgreSqlParamDataTargetRecordMappingArgs']]]]):
        pulumi.set(self, "data_target_record_mappings", value)

    @property
    @pulumi.getter(name="dropInvalidMessage")
    def drop_invalid_message(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "drop_invalid_message")

    @drop_invalid_message.setter
    def drop_invalid_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drop_invalid_message", value)

    @property
    @pulumi.getter(name="isTableRegular")
    def is_table_regular(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_table_regular")

    @is_table_regular.setter
    def is_table_regular(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_table_regular", value)

    @property
    @pulumi.getter(name="keyColumns")
    def key_columns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_columns")

    @key_columns.setter
    def key_columns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_columns", value)

    @property
    @pulumi.getter(name="recordWithSchema")
    def record_with_schema(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "record_with_schema")

    @record_with_schema.setter
    def record_with_schema(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "record_with_schema", value)

    @property
    @pulumi.getter(name="snapshotMode")
    def snapshot_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_mode")

    @snapshot_mode.setter
    def snapshot_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_mode", value)


@pulumi.input_type
class DatahubTaskTargetResourcePostgreSqlParamDataTargetRecordMappingArgs:
    def __init__(__self__, *,
                 allow_null: Optional[pulumi.Input[bool]] = None,
                 auto_increment: Optional[pulumi.Input[bool]] = None,
                 column_name: Optional[pulumi.Input[str]] = None,
                 column_size: Optional[pulumi.Input[str]] = None,
                 decimal_digits: Optional[pulumi.Input[str]] = None,
                 default_value: Optional[pulumi.Input[str]] = None,
                 extra_info: Optional[pulumi.Input[str]] = None,
                 json_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if allow_null is not None:
            pulumi.set(__self__, "allow_null", allow_null)
        if auto_increment is not None:
            pulumi.set(__self__, "auto_increment", auto_increment)
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if column_size is not None:
            pulumi.set(__self__, "column_size", column_size)
        if decimal_digits is not None:
            pulumi.set(__self__, "decimal_digits", decimal_digits)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if extra_info is not None:
            pulumi.set(__self__, "extra_info", extra_info)
        if json_key is not None:
            pulumi.set(__self__, "json_key", json_key)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="allowNull")
    def allow_null(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_null")

    @allow_null.setter
    def allow_null(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_null", value)

    @property
    @pulumi.getter(name="autoIncrement")
    def auto_increment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_increment")

    @auto_increment.setter
    def auto_increment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_increment", value)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="columnSize")
    def column_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column_size")

    @column_size.setter
    def column_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_size", value)

    @property
    @pulumi.getter(name="decimalDigits")
    def decimal_digits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "decimal_digits")

    @decimal_digits.setter
    def decimal_digits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "decimal_digits", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="extraInfo")
    def extra_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extra_info")

    @extra_info.setter
    def extra_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_info", value)

    @property
    @pulumi.getter(name="jsonKey")
    def json_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "json_key")

    @json_key.setter
    def json_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "json_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatahubTaskTargetResourceScfParamArgs:
    def __init__(__self__, *,
                 function_name: pulumi.Input[str],
                 batch_size: Optional[pulumi.Input[int]] = None,
                 max_retries: Optional[pulumi.Input[int]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 qualifier: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "function_name", function_name)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if qualifier is not None:
            pulumi.set(__self__, "qualifier", qualifier)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "function_name")

    @function_name.setter
    def function_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_name", value)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "batch_size")

    @batch_size.setter
    def batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_size", value)

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_retries", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def qualifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "qualifier")

    @qualifier.setter
    def qualifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qualifier", value)


@pulumi.input_type
class DatahubTaskTargetResourceSqlServerParamArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 resource: pulumi.Input[str],
                 table: pulumi.Input[str],
                 snapshot_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "table", table)
        if snapshot_mode is not None:
            pulumi.set(__self__, "snapshot_mode", snapshot_mode)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter(name="snapshotMode")
    def snapshot_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_mode")

    @snapshot_mode.setter
    def snapshot_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_mode", value)


@pulumi.input_type
class DatahubTaskTargetResourceTdwParamArgs:
    def __init__(__self__, *,
                 bid: pulumi.Input[str],
                 tid: pulumi.Input[str],
                 is_domestic: Optional[pulumi.Input[bool]] = None,
                 tdw_host: Optional[pulumi.Input[str]] = None,
                 tdw_port: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "bid", bid)
        pulumi.set(__self__, "tid", tid)
        if is_domestic is not None:
            pulumi.set(__self__, "is_domestic", is_domestic)
        if tdw_host is not None:
            pulumi.set(__self__, "tdw_host", tdw_host)
        if tdw_port is not None:
            pulumi.set(__self__, "tdw_port", tdw_port)

    @property
    @pulumi.getter
    def bid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bid")

    @bid.setter
    def bid(self, value: pulumi.Input[str]):
        pulumi.set(self, "bid", value)

    @property
    @pulumi.getter
    def tid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tid")

    @tid.setter
    def tid(self, value: pulumi.Input[str]):
        pulumi.set(self, "tid", value)

    @property
    @pulumi.getter(name="isDomestic")
    def is_domestic(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_domestic")

    @is_domestic.setter
    def is_domestic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_domestic", value)

    @property
    @pulumi.getter(name="tdwHost")
    def tdw_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tdw_host")

    @tdw_host.setter
    def tdw_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tdw_host", value)

    @property
    @pulumi.getter(name="tdwPort")
    def tdw_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tdw_port")

    @tdw_port.setter
    def tdw_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tdw_port", value)


@pulumi.input_type
class DatahubTaskTargetResourceTopicParamArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 compression_type: Optional[pulumi.Input[str]] = None,
                 msg_multiple: Optional[pulumi.Input[int]] = None,
                 offset_type: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 use_auto_create_topic: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "resource", resource)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if msg_multiple is not None:
            pulumi.set(__self__, "msg_multiple", msg_multiple)
        if offset_type is not None:
            pulumi.set(__self__, "offset_type", offset_type)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if use_auto_create_topic is not None:
            pulumi.set(__self__, "use_auto_create_topic", use_auto_create_topic)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="msgMultiple")
    def msg_multiple(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "msg_multiple")

    @msg_multiple.setter
    def msg_multiple(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "msg_multiple", value)

    @property
    @pulumi.getter(name="offsetType")
    def offset_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_type")

    @offset_type.setter
    def offset_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_type", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="useAutoCreateTopic")
    def use_auto_create_topic(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_auto_create_topic")

    @use_auto_create_topic.setter
    def use_auto_create_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_auto_create_topic", value)


@pulumi.input_type
class DatahubTaskTransformParamArgs:
    def __init__(__self__, *,
                 analysis_format: pulumi.Input[str],
                 content: pulumi.Input[str],
                 failure_param: pulumi.Input['DatahubTaskTransformParamFailureParamArgs'],
                 output_format: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 analyse_results: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformParamAnalyseResultArgs']]]] = None,
                 filter_params: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformParamFilterParamArgs']]]] = None,
                 map_params: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformParamMapParamArgs']]]] = None,
                 regex: Optional[pulumi.Input[str]] = None,
                 result: Optional[pulumi.Input[str]] = None,
                 use_event_bus: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "analysis_format", analysis_format)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "failure_param", failure_param)
        pulumi.set(__self__, "output_format", output_format)
        pulumi.set(__self__, "source_type", source_type)
        if analyse_results is not None:
            pulumi.set(__self__, "analyse_results", analyse_results)
        if filter_params is not None:
            pulumi.set(__self__, "filter_params", filter_params)
        if map_params is not None:
            pulumi.set(__self__, "map_params", map_params)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if use_event_bus is not None:
            pulumi.set(__self__, "use_event_bus", use_event_bus)

    @property
    @pulumi.getter(name="analysisFormat")
    def analysis_format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "analysis_format")

    @analysis_format.setter
    def analysis_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "analysis_format", value)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="failureParam")
    def failure_param(self) -> pulumi.Input['DatahubTaskTransformParamFailureParamArgs']:
        return pulumi.get(self, "failure_param")

    @failure_param.setter
    def failure_param(self, value: pulumi.Input['DatahubTaskTransformParamFailureParamArgs']):
        pulumi.set(self, "failure_param", value)

    @property
    @pulumi.getter(name="outputFormat")
    def output_format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "output_format")

    @output_format.setter
    def output_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "output_format", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="analyseResults")
    def analyse_results(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformParamAnalyseResultArgs']]]]:
        return pulumi.get(self, "analyse_results")

    @analyse_results.setter
    def analyse_results(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformParamAnalyseResultArgs']]]]):
        pulumi.set(self, "analyse_results", value)

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformParamFilterParamArgs']]]]:
        return pulumi.get(self, "filter_params")

    @filter_params.setter
    def filter_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformParamFilterParamArgs']]]]):
        pulumi.set(self, "filter_params", value)

    @property
    @pulumi.getter(name="mapParams")
    def map_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformParamMapParamArgs']]]]:
        return pulumi.get(self, "map_params")

    @map_params.setter
    def map_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformParamMapParamArgs']]]]):
        pulumi.set(self, "map_params", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter
    def result(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "result")

    @result.setter
    def result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "result", value)

    @property
    @pulumi.getter(name="useEventBus")
    def use_event_bus(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_event_bus")

    @use_event_bus.setter
    def use_event_bus(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_event_bus", value)


@pulumi.input_type
class DatahubTaskTransformParamAnalyseResultArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DatahubTaskTransformParamFailureParamArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 dlq_type: Optional[pulumi.Input[str]] = None,
                 kafka_param: Optional[pulumi.Input['DatahubTaskTransformParamFailureParamKafkaParamArgs']] = None,
                 max_retry_attempts: Optional[pulumi.Input[int]] = None,
                 retry_interval: Optional[pulumi.Input[int]] = None,
                 topic_param: Optional[pulumi.Input['DatahubTaskTransformParamFailureParamTopicParamArgs']] = None):
        pulumi.set(__self__, "type", type)
        if dlq_type is not None:
            pulumi.set(__self__, "dlq_type", dlq_type)
        if kafka_param is not None:
            pulumi.set(__self__, "kafka_param", kafka_param)
        if max_retry_attempts is not None:
            pulumi.set(__self__, "max_retry_attempts", max_retry_attempts)
        if retry_interval is not None:
            pulumi.set(__self__, "retry_interval", retry_interval)
        if topic_param is not None:
            pulumi.set(__self__, "topic_param", topic_param)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="dlqType")
    def dlq_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlq_type")

    @dlq_type.setter
    def dlq_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlq_type", value)

    @property
    @pulumi.getter(name="kafkaParam")
    def kafka_param(self) -> Optional[pulumi.Input['DatahubTaskTransformParamFailureParamKafkaParamArgs']]:
        return pulumi.get(self, "kafka_param")

    @kafka_param.setter
    def kafka_param(self, value: Optional[pulumi.Input['DatahubTaskTransformParamFailureParamKafkaParamArgs']]):
        pulumi.set(self, "kafka_param", value)

    @property
    @pulumi.getter(name="maxRetryAttempts")
    def max_retry_attempts(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_retry_attempts")

    @max_retry_attempts.setter
    def max_retry_attempts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_retry_attempts", value)

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retry_interval")

    @retry_interval.setter
    def retry_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_interval", value)

    @property
    @pulumi.getter(name="topicParam")
    def topic_param(self) -> Optional[pulumi.Input['DatahubTaskTransformParamFailureParamTopicParamArgs']]:
        return pulumi.get(self, "topic_param")

    @topic_param.setter
    def topic_param(self, value: Optional[pulumi.Input['DatahubTaskTransformParamFailureParamTopicParamArgs']]):
        pulumi.set(self, "topic_param", value)


@pulumi.input_type
class DatahubTaskTransformParamFailureParamKafkaParamArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 self_built: pulumi.Input[bool],
                 compression_type: Optional[pulumi.Input[str]] = None,
                 enable_toleration: Optional[pulumi.Input[bool]] = None,
                 msg_multiple: Optional[pulumi.Input[int]] = None,
                 offset_type: Optional[pulumi.Input[str]] = None,
                 partition_num: Optional[pulumi.Input[int]] = None,
                 qps_limit: Optional[pulumi.Input[int]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 table_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformParamFailureParamKafkaParamTableMappingArgs']]]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 use_auto_create_topic: Optional[pulumi.Input[bool]] = None,
                 use_table_mapping: Optional[pulumi.Input[bool]] = None,
                 zone_id: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "self_built", self_built)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if enable_toleration is not None:
            pulumi.set(__self__, "enable_toleration", enable_toleration)
        if msg_multiple is not None:
            pulumi.set(__self__, "msg_multiple", msg_multiple)
        if offset_type is not None:
            pulumi.set(__self__, "offset_type", offset_type)
        if partition_num is not None:
            pulumi.set(__self__, "partition_num", partition_num)
        if qps_limit is not None:
            pulumi.set(__self__, "qps_limit", qps_limit)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if table_mappings is not None:
            pulumi.set(__self__, "table_mappings", table_mappings)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if use_auto_create_topic is not None:
            pulumi.set(__self__, "use_auto_create_topic", use_auto_create_topic)
        if use_table_mapping is not None:
            pulumi.set(__self__, "use_table_mapping", use_table_mapping)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: pulumi.Input[bool]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="enableToleration")
    def enable_toleration(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_toleration")

    @enable_toleration.setter
    def enable_toleration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_toleration", value)

    @property
    @pulumi.getter(name="msgMultiple")
    def msg_multiple(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "msg_multiple")

    @msg_multiple.setter
    def msg_multiple(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "msg_multiple", value)

    @property
    @pulumi.getter(name="offsetType")
    def offset_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_type")

    @offset_type.setter
    def offset_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_type", value)

    @property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "partition_num")

    @partition_num.setter
    def partition_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition_num", value)

    @property
    @pulumi.getter(name="qpsLimit")
    def qps_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "qps_limit")

    @qps_limit.setter
    def qps_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "qps_limit", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="tableMappings")
    def table_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformParamFailureParamKafkaParamTableMappingArgs']]]]:
        return pulumi.get(self, "table_mappings")

    @table_mappings.setter
    def table_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformParamFailureParamKafkaParamTableMappingArgs']]]]):
        pulumi.set(self, "table_mappings", value)

    @property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="useAutoCreateTopic")
    def use_auto_create_topic(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_auto_create_topic")

    @use_auto_create_topic.setter
    def use_auto_create_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_auto_create_topic", value)

    @property
    @pulumi.getter(name="useTableMapping")
    def use_table_mapping(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_table_mapping")

    @use_table_mapping.setter
    def use_table_mapping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_table_mapping", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_id", value)


@pulumi.input_type
class DatahubTaskTransformParamFailureParamKafkaParamTableMappingArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 table: pulumi.Input[str],
                 topic: pulumi.Input[str],
                 topic_id: pulumi.Input[str]):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "table", table)
        pulumi.set(__self__, "topic", topic)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)


@pulumi.input_type
class DatahubTaskTransformParamFailureParamTopicParamArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 compression_type: Optional[pulumi.Input[str]] = None,
                 msg_multiple: Optional[pulumi.Input[int]] = None,
                 offset_type: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 use_auto_create_topic: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "resource", resource)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if msg_multiple is not None:
            pulumi.set(__self__, "msg_multiple", msg_multiple)
        if offset_type is not None:
            pulumi.set(__self__, "offset_type", offset_type)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if use_auto_create_topic is not None:
            pulumi.set(__self__, "use_auto_create_topic", use_auto_create_topic)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="msgMultiple")
    def msg_multiple(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "msg_multiple")

    @msg_multiple.setter
    def msg_multiple(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "msg_multiple", value)

    @property
    @pulumi.getter(name="offsetType")
    def offset_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_type")

    @offset_type.setter
    def offset_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_type", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="useAutoCreateTopic")
    def use_auto_create_topic(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_auto_create_topic")

    @use_auto_create_topic.setter
    def use_auto_create_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_auto_create_topic", value)


@pulumi.input_type
class DatahubTaskTransformParamFilterParamArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 match_mode: pulumi.Input[str],
                 value: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "match_mode", match_mode)
        pulumi.set(__self__, "value", value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="matchMode")
    def match_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_mode")

    @match_mode.setter
    def match_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_mode", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatahubTaskTransformParamMapParamArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DatahubTaskTransformsParamArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 field_chains: pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainArgs']]],
                 batch_analyse: Optional[pulumi.Input['DatahubTaskTransformsParamBatchAnalyseArgs']] = None,
                 failure_param: Optional[pulumi.Input['DatahubTaskTransformsParamFailureParamArgs']] = None,
                 filter_params: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFilterParamArgs']]]] = None,
                 keep_metadata: Optional[pulumi.Input[bool]] = None,
                 output_format: Optional[pulumi.Input[str]] = None,
                 result: Optional[pulumi.Input[str]] = None,
                 row_param: Optional[pulumi.Input['DatahubTaskTransformsParamRowParamArgs']] = None,
                 source_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "field_chains", field_chains)
        if batch_analyse is not None:
            pulumi.set(__self__, "batch_analyse", batch_analyse)
        if failure_param is not None:
            pulumi.set(__self__, "failure_param", failure_param)
        if filter_params is not None:
            pulumi.set(__self__, "filter_params", filter_params)
        if keep_metadata is not None:
            pulumi.set(__self__, "keep_metadata", keep_metadata)
        if output_format is not None:
            pulumi.set(__self__, "output_format", output_format)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if row_param is not None:
            pulumi.set(__self__, "row_param", row_param)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="fieldChains")
    def field_chains(self) -> pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainArgs']]]:
        return pulumi.get(self, "field_chains")

    @field_chains.setter
    def field_chains(self, value: pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainArgs']]]):
        pulumi.set(self, "field_chains", value)

    @property
    @pulumi.getter(name="batchAnalyse")
    def batch_analyse(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamBatchAnalyseArgs']]:
        return pulumi.get(self, "batch_analyse")

    @batch_analyse.setter
    def batch_analyse(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamBatchAnalyseArgs']]):
        pulumi.set(self, "batch_analyse", value)

    @property
    @pulumi.getter(name="failureParam")
    def failure_param(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFailureParamArgs']]:
        return pulumi.get(self, "failure_param")

    @failure_param.setter
    def failure_param(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFailureParamArgs']]):
        pulumi.set(self, "failure_param", value)

    @property
    @pulumi.getter(name="filterParams")
    def filter_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFilterParamArgs']]]]:
        return pulumi.get(self, "filter_params")

    @filter_params.setter
    def filter_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFilterParamArgs']]]]):
        pulumi.set(self, "filter_params", value)

    @property
    @pulumi.getter(name="keepMetadata")
    def keep_metadata(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "keep_metadata")

    @keep_metadata.setter
    def keep_metadata(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keep_metadata", value)

    @property
    @pulumi.getter(name="outputFormat")
    def output_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "output_format")

    @output_format.setter
    def output_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_format", value)

    @property
    @pulumi.getter
    def result(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "result")

    @result.setter
    def result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "result", value)

    @property
    @pulumi.getter(name="rowParam")
    def row_param(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamRowParamArgs']]:
        return pulumi.get(self, "row_param")

    @row_param.setter
    def row_param(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamRowParamArgs']]):
        pulumi.set(self, "row_param", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class DatahubTaskTransformsParamBatchAnalyseArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str]):
        pulumi.set(__self__, "format", format)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)


@pulumi.input_type
class DatahubTaskTransformsParamFailureParamArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 dlq_type: Optional[pulumi.Input[str]] = None,
                 kafka_param: Optional[pulumi.Input['DatahubTaskTransformsParamFailureParamKafkaParamArgs']] = None,
                 max_retry_attempts: Optional[pulumi.Input[int]] = None,
                 retry_interval: Optional[pulumi.Input[int]] = None,
                 topic_param: Optional[pulumi.Input['DatahubTaskTransformsParamFailureParamTopicParamArgs']] = None):
        pulumi.set(__self__, "type", type)
        if dlq_type is not None:
            pulumi.set(__self__, "dlq_type", dlq_type)
        if kafka_param is not None:
            pulumi.set(__self__, "kafka_param", kafka_param)
        if max_retry_attempts is not None:
            pulumi.set(__self__, "max_retry_attempts", max_retry_attempts)
        if retry_interval is not None:
            pulumi.set(__self__, "retry_interval", retry_interval)
        if topic_param is not None:
            pulumi.set(__self__, "topic_param", topic_param)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="dlqType")
    def dlq_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dlq_type")

    @dlq_type.setter
    def dlq_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dlq_type", value)

    @property
    @pulumi.getter(name="kafkaParam")
    def kafka_param(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFailureParamKafkaParamArgs']]:
        return pulumi.get(self, "kafka_param")

    @kafka_param.setter
    def kafka_param(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFailureParamKafkaParamArgs']]):
        pulumi.set(self, "kafka_param", value)

    @property
    @pulumi.getter(name="maxRetryAttempts")
    def max_retry_attempts(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_retry_attempts")

    @max_retry_attempts.setter
    def max_retry_attempts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_retry_attempts", value)

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retry_interval")

    @retry_interval.setter
    def retry_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_interval", value)

    @property
    @pulumi.getter(name="topicParam")
    def topic_param(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFailureParamTopicParamArgs']]:
        return pulumi.get(self, "topic_param")

    @topic_param.setter
    def topic_param(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFailureParamTopicParamArgs']]):
        pulumi.set(self, "topic_param", value)


@pulumi.input_type
class DatahubTaskTransformsParamFailureParamKafkaParamArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 self_built: pulumi.Input[bool],
                 compression_type: Optional[pulumi.Input[str]] = None,
                 enable_toleration: Optional[pulumi.Input[bool]] = None,
                 msg_multiple: Optional[pulumi.Input[int]] = None,
                 offset_type: Optional[pulumi.Input[str]] = None,
                 partition_num: Optional[pulumi.Input[int]] = None,
                 qps_limit: Optional[pulumi.Input[int]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 table_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFailureParamKafkaParamTableMappingArgs']]]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 use_auto_create_topic: Optional[pulumi.Input[bool]] = None,
                 use_table_mapping: Optional[pulumi.Input[bool]] = None,
                 zone_id: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "self_built", self_built)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if enable_toleration is not None:
            pulumi.set(__self__, "enable_toleration", enable_toleration)
        if msg_multiple is not None:
            pulumi.set(__self__, "msg_multiple", msg_multiple)
        if offset_type is not None:
            pulumi.set(__self__, "offset_type", offset_type)
        if partition_num is not None:
            pulumi.set(__self__, "partition_num", partition_num)
        if qps_limit is not None:
            pulumi.set(__self__, "qps_limit", qps_limit)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if table_mappings is not None:
            pulumi.set(__self__, "table_mappings", table_mappings)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if use_auto_create_topic is not None:
            pulumi.set(__self__, "use_auto_create_topic", use_auto_create_topic)
        if use_table_mapping is not None:
            pulumi.set(__self__, "use_table_mapping", use_table_mapping)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="selfBuilt")
    def self_built(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "self_built")

    @self_built.setter
    def self_built(self, value: pulumi.Input[bool]):
        pulumi.set(self, "self_built", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="enableToleration")
    def enable_toleration(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_toleration")

    @enable_toleration.setter
    def enable_toleration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_toleration", value)

    @property
    @pulumi.getter(name="msgMultiple")
    def msg_multiple(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "msg_multiple")

    @msg_multiple.setter
    def msg_multiple(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "msg_multiple", value)

    @property
    @pulumi.getter(name="offsetType")
    def offset_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_type")

    @offset_type.setter
    def offset_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_type", value)

    @property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "partition_num")

    @partition_num.setter
    def partition_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition_num", value)

    @property
    @pulumi.getter(name="qpsLimit")
    def qps_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "qps_limit")

    @qps_limit.setter
    def qps_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "qps_limit", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="tableMappings")
    def table_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFailureParamKafkaParamTableMappingArgs']]]]:
        return pulumi.get(self, "table_mappings")

    @table_mappings.setter
    def table_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFailureParamKafkaParamTableMappingArgs']]]]):
        pulumi.set(self, "table_mappings", value)

    @property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="useAutoCreateTopic")
    def use_auto_create_topic(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_auto_create_topic")

    @use_auto_create_topic.setter
    def use_auto_create_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_auto_create_topic", value)

    @property
    @pulumi.getter(name="useTableMapping")
    def use_table_mapping(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_table_mapping")

    @use_table_mapping.setter
    def use_table_mapping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_table_mapping", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_id", value)


@pulumi.input_type
class DatahubTaskTransformsParamFailureParamKafkaParamTableMappingArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 table: pulumi.Input[str],
                 topic: pulumi.Input[str],
                 topic_id: pulumi.Input[str]):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "table", table)
        pulumi.set(__self__, "topic", topic)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)


@pulumi.input_type
class DatahubTaskTransformsParamFailureParamTopicParamArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[str],
                 compression_type: Optional[pulumi.Input[str]] = None,
                 msg_multiple: Optional[pulumi.Input[int]] = None,
                 offset_type: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[int]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 use_auto_create_topic: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "resource", resource)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if msg_multiple is not None:
            pulumi.set(__self__, "msg_multiple", msg_multiple)
        if offset_type is not None:
            pulumi.set(__self__, "offset_type", offset_type)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if use_auto_create_topic is not None:
            pulumi.set(__self__, "use_auto_create_topic", use_auto_create_topic)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)

    @property
    @pulumi.getter(name="msgMultiple")
    def msg_multiple(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "msg_multiple")

    @msg_multiple.setter
    def msg_multiple(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "msg_multiple", value)

    @property
    @pulumi.getter(name="offsetType")
    def offset_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offset_type")

    @offset_type.setter
    def offset_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offset_type", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="useAutoCreateTopic")
    def use_auto_create_topic(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_auto_create_topic")

    @use_auto_create_topic.setter
    def use_auto_create_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_auto_create_topic", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainArgs:
    def __init__(__self__, *,
                 analyse: pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseArgs'],
                 analyse_json_result: Optional[pulumi.Input[str]] = None,
                 analyse_results: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultArgs']]]] = None,
                 result: Optional[pulumi.Input[str]] = None,
                 s_mts: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTArgs']]]] = None,
                 secondary_analyse: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseArgs']] = None,
                 secondary_analyse_json_result: Optional[pulumi.Input[str]] = None,
                 secondary_analyse_results: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultArgs']]]] = None):
        pulumi.set(__self__, "analyse", analyse)
        if analyse_json_result is not None:
            pulumi.set(__self__, "analyse_json_result", analyse_json_result)
        if analyse_results is not None:
            pulumi.set(__self__, "analyse_results", analyse_results)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if s_mts is not None:
            pulumi.set(__self__, "s_mts", s_mts)
        if secondary_analyse is not None:
            pulumi.set(__self__, "secondary_analyse", secondary_analyse)
        if secondary_analyse_json_result is not None:
            pulumi.set(__self__, "secondary_analyse_json_result", secondary_analyse_json_result)
        if secondary_analyse_results is not None:
            pulumi.set(__self__, "secondary_analyse_results", secondary_analyse_results)

    @property
    @pulumi.getter
    def analyse(self) -> pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseArgs']:
        return pulumi.get(self, "analyse")

    @analyse.setter
    def analyse(self, value: pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseArgs']):
        pulumi.set(self, "analyse", value)

    @property
    @pulumi.getter(name="analyseJsonResult")
    def analyse_json_result(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "analyse_json_result")

    @analyse_json_result.setter
    def analyse_json_result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "analyse_json_result", value)

    @property
    @pulumi.getter(name="analyseResults")
    def analyse_results(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultArgs']]]]:
        return pulumi.get(self, "analyse_results")

    @analyse_results.setter
    def analyse_results(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultArgs']]]]):
        pulumi.set(self, "analyse_results", value)

    @property
    @pulumi.getter
    def result(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "result")

    @result.setter
    def result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "result", value)

    @property
    @pulumi.getter(name="sMTs")
    def s_mts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTArgs']]]]:
        return pulumi.get(self, "s_mts")

    @s_mts.setter
    def s_mts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTArgs']]]]):
        pulumi.set(self, "s_mts", value)

    @property
    @pulumi.getter(name="secondaryAnalyse")
    def secondary_analyse(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseArgs']]:
        return pulumi.get(self, "secondary_analyse")

    @secondary_analyse.setter
    def secondary_analyse(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseArgs']]):
        pulumi.set(self, "secondary_analyse", value)

    @property
    @pulumi.getter(name="secondaryAnalyseJsonResult")
    def secondary_analyse_json_result(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secondary_analyse_json_result")

    @secondary_analyse_json_result.setter
    def secondary_analyse_json_result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_analyse_json_result", value)

    @property
    @pulumi.getter(name="secondaryAnalyseResults")
    def secondary_analyse_results(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultArgs']]]]:
        return pulumi.get(self, "secondary_analyse_results")

    @secondary_analyse_results.setter
    def secondary_analyse_results(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultArgs']]]]):
        pulumi.set(self, "secondary_analyse_results", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainAnalyseArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 input_value: Optional[pulumi.Input[str]] = None,
                 input_value_type: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format", format)
        if input_value is not None:
            pulumi.set(__self__, "input_value", input_value)
        if input_value_type is not None:
            pulumi.set(__self__, "input_value_type", input_value_type)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="inputValue")
    def input_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_value")

    @input_value.setter
    def input_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_value", value)

    @property
    @pulumi.getter(name="inputValueType")
    def input_value_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_value_type")

    @input_value_type.setter
    def input_value_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_value_type", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainAnalyseResultArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operate: pulumi.Input[str],
                 scheme_type: pulumi.Input[str],
                 original_value: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 value_operate: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateArgs']] = None,
                 value_operates: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateArgs']]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operate", operate)
        pulumi.set(__self__, "scheme_type", scheme_type)
        if original_value is not None:
            pulumi.set(__self__, "original_value", original_value)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_operate is not None:
            pulumi.set(__self__, "value_operate", value_operate)
        if value_operates is not None:
            pulumi.set(__self__, "value_operates", value_operates)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operate")

    @operate.setter
    def operate(self, value: pulumi.Input[str]):
        pulumi.set(self, "operate", value)

    @property
    @pulumi.getter(name="schemeType")
    def scheme_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "scheme_type")

    @scheme_type.setter
    def scheme_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "scheme_type", value)

    @property
    @pulumi.getter(name="originalValue")
    def original_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "original_value")

    @original_value.setter
    def original_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "original_value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueOperate")
    def value_operate(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateArgs']]:
        return pulumi.get(self, "value_operate")

    @value_operate.setter
    def value_operate(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateArgs']]):
        pulumi.set(self, "value_operate", value)

    @property
    @pulumi.getter(name="valueOperates")
    def value_operates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateArgs']]]]:
        return pulumi.get(self, "value_operates")

    @value_operates.setter
    def value_operates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateArgs']]]]):
        pulumi.set(self, "value_operates", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 date: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateDateArgs']] = None,
                 json_path_replace: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateJsonPathReplaceArgs']] = None,
                 k_v: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateKVArgs']] = None,
                 regex_replace: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateRegexReplaceArgs']] = None,
                 replace: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateReplaceArgs']] = None,
                 result: Optional[pulumi.Input[str]] = None,
                 split: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateSplitArgs']] = None,
                 substr: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateSubstrArgs']] = None,
                 url_decode: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateUrlDecodeArgs']] = None):
        pulumi.set(__self__, "type", type)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if json_path_replace is not None:
            pulumi.set(__self__, "json_path_replace", json_path_replace)
        if k_v is not None:
            pulumi.set(__self__, "k_v", k_v)
        if regex_replace is not None:
            pulumi.set(__self__, "regex_replace", regex_replace)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if split is not None:
            pulumi.set(__self__, "split", split)
        if substr is not None:
            pulumi.set(__self__, "substr", substr)
        if url_decode is not None:
            pulumi.set(__self__, "url_decode", url_decode)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateDateArgs']]:
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateDateArgs']]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter(name="jsonPathReplace")
    def json_path_replace(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateJsonPathReplaceArgs']]:
        return pulumi.get(self, "json_path_replace")

    @json_path_replace.setter
    def json_path_replace(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateJsonPathReplaceArgs']]):
        pulumi.set(self, "json_path_replace", value)

    @property
    @pulumi.getter(name="kV")
    def k_v(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateKVArgs']]:
        return pulumi.get(self, "k_v")

    @k_v.setter
    def k_v(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateKVArgs']]):
        pulumi.set(self, "k_v", value)

    @property
    @pulumi.getter(name="regexReplace")
    def regex_replace(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateRegexReplaceArgs']]:
        return pulumi.get(self, "regex_replace")

    @regex_replace.setter
    def regex_replace(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateRegexReplaceArgs']]):
        pulumi.set(self, "regex_replace", value)

    @property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateReplaceArgs']]:
        return pulumi.get(self, "replace")

    @replace.setter
    def replace(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateReplaceArgs']]):
        pulumi.set(self, "replace", value)

    @property
    @pulumi.getter
    def result(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "result")

    @result.setter
    def result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "result", value)

    @property
    @pulumi.getter
    def split(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateSplitArgs']]:
        return pulumi.get(self, "split")

    @split.setter
    def split(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateSplitArgs']]):
        pulumi.set(self, "split", value)

    @property
    @pulumi.getter
    def substr(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateSubstrArgs']]:
        return pulumi.get(self, "substr")

    @substr.setter
    def substr(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateSubstrArgs']]):
        pulumi.set(self, "substr", value)

    @property
    @pulumi.getter(name="urlDecode")
    def url_decode(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateUrlDecodeArgs']]:
        return pulumi.get(self, "url_decode")

    @url_decode.setter
    def url_decode(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateUrlDecodeArgs']]):
        pulumi.set(self, "url_decode", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateDateArgs:
    def __init__(__self__, *,
                 format: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        if format is not None:
            pulumi.set(__self__, "format", format)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_type", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateJsonPathReplaceArgs:
    def __init__(__self__, *,
                 new_value: pulumi.Input[str],
                 old_value: pulumi.Input[str]):
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "old_value", old_value)

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "new_value")

    @new_value.setter
    def new_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "new_value", value)

    @property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "old_value")

    @old_value.setter
    def old_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "old_value", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateKVArgs:
    def __init__(__self__, *,
                 delimiter: pulumi.Input[str],
                 regex: pulumi.Input[str],
                 keep_original_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "delimiter", delimiter)
        pulumi.set(__self__, "regex", regex)
        if keep_original_key is not None:
            pulumi.set(__self__, "keep_original_key", keep_original_key)

    @property
    @pulumi.getter
    def delimiter(self) -> pulumi.Input[str]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: pulumi.Input[str]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter
    def regex(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: pulumi.Input[str]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter(name="keepOriginalKey")
    def keep_original_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keep_original_key")

    @keep_original_key.setter
    def keep_original_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keep_original_key", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateRegexReplaceArgs:
    def __init__(__self__, *,
                 new_value: pulumi.Input[str],
                 regex: pulumi.Input[str]):
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "new_value")

    @new_value.setter
    def new_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "new_value", value)

    @property
    @pulumi.getter
    def regex(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: pulumi.Input[str]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateReplaceArgs:
    def __init__(__self__, *,
                 new_value: pulumi.Input[str],
                 old_value: pulumi.Input[str]):
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "old_value", old_value)

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "new_value")

    @new_value.setter
    def new_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "new_value", value)

    @property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "old_value")

    @old_value.setter
    def old_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "old_value", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateSplitArgs:
    def __init__(__self__, *,
                 regex: pulumi.Input[str]):
        pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def regex(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: pulumi.Input[str]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateSubstrArgs:
    def __init__(__self__, *,
                 end: pulumi.Input[int],
                 start: pulumi.Input[int]):
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> pulumi.Input[int]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> pulumi.Input[int]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[int]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainAnalyseResultValueOperateUrlDecodeArgs:
    def __init__(__self__, *,
                 charset_name: Optional[pulumi.Input[str]] = None):
        if charset_name is not None:
            pulumi.set(__self__, "charset_name", charset_name)

    @property
    @pulumi.getter(name="charsetName")
    def charset_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "charset_name")

    @charset_name.setter
    def charset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charset_name", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSMTArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operate: pulumi.Input[str],
                 scheme_type: pulumi.Input[str],
                 original_value: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 value_operate: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateArgs']] = None,
                 value_operates: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateArgs']]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operate", operate)
        pulumi.set(__self__, "scheme_type", scheme_type)
        if original_value is not None:
            pulumi.set(__self__, "original_value", original_value)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_operate is not None:
            pulumi.set(__self__, "value_operate", value_operate)
        if value_operates is not None:
            pulumi.set(__self__, "value_operates", value_operates)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operate")

    @operate.setter
    def operate(self, value: pulumi.Input[str]):
        pulumi.set(self, "operate", value)

    @property
    @pulumi.getter(name="schemeType")
    def scheme_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "scheme_type")

    @scheme_type.setter
    def scheme_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "scheme_type", value)

    @property
    @pulumi.getter(name="originalValue")
    def original_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "original_value")

    @original_value.setter
    def original_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "original_value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueOperate")
    def value_operate(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateArgs']]:
        return pulumi.get(self, "value_operate")

    @value_operate.setter
    def value_operate(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateArgs']]):
        pulumi.set(self, "value_operate", value)

    @property
    @pulumi.getter(name="valueOperates")
    def value_operates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateArgs']]]]:
        return pulumi.get(self, "value_operates")

    @value_operates.setter
    def value_operates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateArgs']]]]):
        pulumi.set(self, "value_operates", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSMTValueOperateArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 date: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateDateArgs']] = None,
                 json_path_replace: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateJsonPathReplaceArgs']] = None,
                 k_v: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateKVArgs']] = None,
                 regex_replace: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateRegexReplaceArgs']] = None,
                 replace: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateReplaceArgs']] = None,
                 result: Optional[pulumi.Input[str]] = None,
                 split: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateSplitArgs']] = None,
                 substr: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateSubstrArgs']] = None,
                 url_decode: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateUrlDecodeArgs']] = None):
        pulumi.set(__self__, "type", type)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if json_path_replace is not None:
            pulumi.set(__self__, "json_path_replace", json_path_replace)
        if k_v is not None:
            pulumi.set(__self__, "k_v", k_v)
        if regex_replace is not None:
            pulumi.set(__self__, "regex_replace", regex_replace)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if split is not None:
            pulumi.set(__self__, "split", split)
        if substr is not None:
            pulumi.set(__self__, "substr", substr)
        if url_decode is not None:
            pulumi.set(__self__, "url_decode", url_decode)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateDateArgs']]:
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateDateArgs']]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter(name="jsonPathReplace")
    def json_path_replace(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateJsonPathReplaceArgs']]:
        return pulumi.get(self, "json_path_replace")

    @json_path_replace.setter
    def json_path_replace(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateJsonPathReplaceArgs']]):
        pulumi.set(self, "json_path_replace", value)

    @property
    @pulumi.getter(name="kV")
    def k_v(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateKVArgs']]:
        return pulumi.get(self, "k_v")

    @k_v.setter
    def k_v(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateKVArgs']]):
        pulumi.set(self, "k_v", value)

    @property
    @pulumi.getter(name="regexReplace")
    def regex_replace(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateRegexReplaceArgs']]:
        return pulumi.get(self, "regex_replace")

    @regex_replace.setter
    def regex_replace(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateRegexReplaceArgs']]):
        pulumi.set(self, "regex_replace", value)

    @property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateReplaceArgs']]:
        return pulumi.get(self, "replace")

    @replace.setter
    def replace(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateReplaceArgs']]):
        pulumi.set(self, "replace", value)

    @property
    @pulumi.getter
    def result(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "result")

    @result.setter
    def result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "result", value)

    @property
    @pulumi.getter
    def split(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateSplitArgs']]:
        return pulumi.get(self, "split")

    @split.setter
    def split(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateSplitArgs']]):
        pulumi.set(self, "split", value)

    @property
    @pulumi.getter
    def substr(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateSubstrArgs']]:
        return pulumi.get(self, "substr")

    @substr.setter
    def substr(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateSubstrArgs']]):
        pulumi.set(self, "substr", value)

    @property
    @pulumi.getter(name="urlDecode")
    def url_decode(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateUrlDecodeArgs']]:
        return pulumi.get(self, "url_decode")

    @url_decode.setter
    def url_decode(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSMTValueOperateUrlDecodeArgs']]):
        pulumi.set(self, "url_decode", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSMTValueOperateDateArgs:
    def __init__(__self__, *,
                 format: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        if format is not None:
            pulumi.set(__self__, "format", format)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_type", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSMTValueOperateJsonPathReplaceArgs:
    def __init__(__self__, *,
                 new_value: pulumi.Input[str],
                 old_value: pulumi.Input[str]):
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "old_value", old_value)

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "new_value")

    @new_value.setter
    def new_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "new_value", value)

    @property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "old_value")

    @old_value.setter
    def old_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "old_value", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSMTValueOperateKVArgs:
    def __init__(__self__, *,
                 delimiter: pulumi.Input[str],
                 regex: pulumi.Input[str],
                 keep_original_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "delimiter", delimiter)
        pulumi.set(__self__, "regex", regex)
        if keep_original_key is not None:
            pulumi.set(__self__, "keep_original_key", keep_original_key)

    @property
    @pulumi.getter
    def delimiter(self) -> pulumi.Input[str]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: pulumi.Input[str]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter
    def regex(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: pulumi.Input[str]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter(name="keepOriginalKey")
    def keep_original_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keep_original_key")

    @keep_original_key.setter
    def keep_original_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keep_original_key", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSMTValueOperateRegexReplaceArgs:
    def __init__(__self__, *,
                 new_value: pulumi.Input[str],
                 regex: pulumi.Input[str]):
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "new_value")

    @new_value.setter
    def new_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "new_value", value)

    @property
    @pulumi.getter
    def regex(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: pulumi.Input[str]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSMTValueOperateReplaceArgs:
    def __init__(__self__, *,
                 new_value: pulumi.Input[str],
                 old_value: pulumi.Input[str]):
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "old_value", old_value)

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "new_value")

    @new_value.setter
    def new_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "new_value", value)

    @property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "old_value")

    @old_value.setter
    def old_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "old_value", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSMTValueOperateSplitArgs:
    def __init__(__self__, *,
                 regex: pulumi.Input[str]):
        pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def regex(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: pulumi.Input[str]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSMTValueOperateSubstrArgs:
    def __init__(__self__, *,
                 end: pulumi.Input[int],
                 start: pulumi.Input[int]):
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> pulumi.Input[int]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> pulumi.Input[int]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[int]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSMTValueOperateUrlDecodeArgs:
    def __init__(__self__, *,
                 charset_name: Optional[pulumi.Input[str]] = None):
        if charset_name is not None:
            pulumi.set(__self__, "charset_name", charset_name)

    @property
    @pulumi.getter(name="charsetName")
    def charset_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "charset_name")

    @charset_name.setter
    def charset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charset_name", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSecondaryAnalyseArgs:
    def __init__(__self__, *,
                 regex: pulumi.Input[str]):
        pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def regex(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: pulumi.Input[str]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operate: pulumi.Input[str],
                 scheme_type: pulumi.Input[str],
                 original_value: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 value_operate: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateArgs']] = None,
                 value_operates: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateArgs']]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operate", operate)
        pulumi.set(__self__, "scheme_type", scheme_type)
        if original_value is not None:
            pulumi.set(__self__, "original_value", original_value)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_operate is not None:
            pulumi.set(__self__, "value_operate", value_operate)
        if value_operates is not None:
            pulumi.set(__self__, "value_operates", value_operates)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operate")

    @operate.setter
    def operate(self, value: pulumi.Input[str]):
        pulumi.set(self, "operate", value)

    @property
    @pulumi.getter(name="schemeType")
    def scheme_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "scheme_type")

    @scheme_type.setter
    def scheme_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "scheme_type", value)

    @property
    @pulumi.getter(name="originalValue")
    def original_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "original_value")

    @original_value.setter
    def original_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "original_value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueOperate")
    def value_operate(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateArgs']]:
        return pulumi.get(self, "value_operate")

    @value_operate.setter
    def value_operate(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateArgs']]):
        pulumi.set(self, "value_operate", value)

    @property
    @pulumi.getter(name="valueOperates")
    def value_operates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateArgs']]]]:
        return pulumi.get(self, "value_operates")

    @value_operates.setter
    def value_operates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateArgs']]]]):
        pulumi.set(self, "value_operates", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 date: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateDateArgs']] = None,
                 json_path_replace: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateJsonPathReplaceArgs']] = None,
                 k_v: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateKVArgs']] = None,
                 regex_replace: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateRegexReplaceArgs']] = None,
                 replace: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateReplaceArgs']] = None,
                 result: Optional[pulumi.Input[str]] = None,
                 split: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateSplitArgs']] = None,
                 substr: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateSubstrArgs']] = None,
                 url_decode: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateUrlDecodeArgs']] = None):
        pulumi.set(__self__, "type", type)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if json_path_replace is not None:
            pulumi.set(__self__, "json_path_replace", json_path_replace)
        if k_v is not None:
            pulumi.set(__self__, "k_v", k_v)
        if regex_replace is not None:
            pulumi.set(__self__, "regex_replace", regex_replace)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if split is not None:
            pulumi.set(__self__, "split", split)
        if substr is not None:
            pulumi.set(__self__, "substr", substr)
        if url_decode is not None:
            pulumi.set(__self__, "url_decode", url_decode)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateDateArgs']]:
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateDateArgs']]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter(name="jsonPathReplace")
    def json_path_replace(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateJsonPathReplaceArgs']]:
        return pulumi.get(self, "json_path_replace")

    @json_path_replace.setter
    def json_path_replace(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateJsonPathReplaceArgs']]):
        pulumi.set(self, "json_path_replace", value)

    @property
    @pulumi.getter(name="kV")
    def k_v(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateKVArgs']]:
        return pulumi.get(self, "k_v")

    @k_v.setter
    def k_v(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateKVArgs']]):
        pulumi.set(self, "k_v", value)

    @property
    @pulumi.getter(name="regexReplace")
    def regex_replace(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateRegexReplaceArgs']]:
        return pulumi.get(self, "regex_replace")

    @regex_replace.setter
    def regex_replace(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateRegexReplaceArgs']]):
        pulumi.set(self, "regex_replace", value)

    @property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateReplaceArgs']]:
        return pulumi.get(self, "replace")

    @replace.setter
    def replace(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateReplaceArgs']]):
        pulumi.set(self, "replace", value)

    @property
    @pulumi.getter
    def result(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "result")

    @result.setter
    def result(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "result", value)

    @property
    @pulumi.getter
    def split(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateSplitArgs']]:
        return pulumi.get(self, "split")

    @split.setter
    def split(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateSplitArgs']]):
        pulumi.set(self, "split", value)

    @property
    @pulumi.getter
    def substr(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateSubstrArgs']]:
        return pulumi.get(self, "substr")

    @substr.setter
    def substr(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateSubstrArgs']]):
        pulumi.set(self, "substr", value)

    @property
    @pulumi.getter(name="urlDecode")
    def url_decode(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateUrlDecodeArgs']]:
        return pulumi.get(self, "url_decode")

    @url_decode.setter
    def url_decode(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateUrlDecodeArgs']]):
        pulumi.set(self, "url_decode", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateDateArgs:
    def __init__(__self__, *,
                 format: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        if format is not None:
            pulumi.set(__self__, "format", format)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_type", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateJsonPathReplaceArgs:
    def __init__(__self__, *,
                 new_value: pulumi.Input[str],
                 old_value: pulumi.Input[str]):
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "old_value", old_value)

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "new_value")

    @new_value.setter
    def new_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "new_value", value)

    @property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "old_value")

    @old_value.setter
    def old_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "old_value", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateKVArgs:
    def __init__(__self__, *,
                 delimiter: pulumi.Input[str],
                 regex: pulumi.Input[str],
                 keep_original_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "delimiter", delimiter)
        pulumi.set(__self__, "regex", regex)
        if keep_original_key is not None:
            pulumi.set(__self__, "keep_original_key", keep_original_key)

    @property
    @pulumi.getter
    def delimiter(self) -> pulumi.Input[str]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: pulumi.Input[str]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter
    def regex(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: pulumi.Input[str]):
        pulumi.set(self, "regex", value)

    @property
    @pulumi.getter(name="keepOriginalKey")
    def keep_original_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keep_original_key")

    @keep_original_key.setter
    def keep_original_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keep_original_key", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateRegexReplaceArgs:
    def __init__(__self__, *,
                 new_value: pulumi.Input[str],
                 regex: pulumi.Input[str]):
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "new_value")

    @new_value.setter
    def new_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "new_value", value)

    @property
    @pulumi.getter
    def regex(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: pulumi.Input[str]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateReplaceArgs:
    def __init__(__self__, *,
                 new_value: pulumi.Input[str],
                 old_value: pulumi.Input[str]):
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "old_value", old_value)

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "new_value")

    @new_value.setter
    def new_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "new_value", value)

    @property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "old_value")

    @old_value.setter
    def old_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "old_value", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateSplitArgs:
    def __init__(__self__, *,
                 regex: pulumi.Input[str]):
        pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def regex(self) -> pulumi.Input[str]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: pulumi.Input[str]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateSubstrArgs:
    def __init__(__self__, *,
                 end: pulumi.Input[int],
                 start: pulumi.Input[int]):
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> pulumi.Input[int]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[int]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> pulumi.Input[int]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[int]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class DatahubTaskTransformsParamFieldChainSecondaryAnalyseResultValueOperateUrlDecodeArgs:
    def __init__(__self__, *,
                 charset_name: Optional[pulumi.Input[str]] = None):
        if charset_name is not None:
            pulumi.set(__self__, "charset_name", charset_name)

    @property
    @pulumi.getter(name="charsetName")
    def charset_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "charset_name")

    @charset_name.setter
    def charset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charset_name", value)


@pulumi.input_type
class DatahubTaskTransformsParamFilterParamArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 match_mode: pulumi.Input[str],
                 value: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "match_mode", match_mode)
        pulumi.set(__self__, "value", value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="matchMode")
    def match_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "match_mode")

    @match_mode.setter
    def match_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_mode", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DatahubTaskTransformsParamRowParamArgs:
    def __init__(__self__, *,
                 row_content: pulumi.Input[str],
                 entry_delimiter: Optional[pulumi.Input[str]] = None,
                 key_value_delimiter: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "row_content", row_content)
        if entry_delimiter is not None:
            pulumi.set(__self__, "entry_delimiter", entry_delimiter)
        if key_value_delimiter is not None:
            pulumi.set(__self__, "key_value_delimiter", key_value_delimiter)

    @property
    @pulumi.getter(name="rowContent")
    def row_content(self) -> pulumi.Input[str]:
        return pulumi.get(self, "row_content")

    @row_content.setter
    def row_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "row_content", value)

    @property
    @pulumi.getter(name="entryDelimiter")
    def entry_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entry_delimiter")

    @entry_delimiter.setter
    def entry_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entry_delimiter", value)

    @property
    @pulumi.getter(name="keyValueDelimiter")
    def key_value_delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_value_delimiter")

    @key_value_delimiter.setter
    def key_value_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_value_delimiter", value)


@pulumi.input_type
class InstanceConfigArgs:
    def __init__(__self__, *,
                 auto_create_topic_enable: pulumi.Input[bool],
                 default_num_partitions: pulumi.Input[int],
                 default_replication_factor: pulumi.Input[int]):
        pulumi.set(__self__, "auto_create_topic_enable", auto_create_topic_enable)
        pulumi.set(__self__, "default_num_partitions", default_num_partitions)
        pulumi.set(__self__, "default_replication_factor", default_replication_factor)

    @property
    @pulumi.getter(name="autoCreateTopicEnable")
    def auto_create_topic_enable(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "auto_create_topic_enable")

    @auto_create_topic_enable.setter
    def auto_create_topic_enable(self, value: pulumi.Input[bool]):
        pulumi.set(self, "auto_create_topic_enable", value)

    @property
    @pulumi.getter(name="defaultNumPartitions")
    def default_num_partitions(self) -> pulumi.Input[int]:
        return pulumi.get(self, "default_num_partitions")

    @default_num_partitions.setter
    def default_num_partitions(self, value: pulumi.Input[int]):
        pulumi.set(self, "default_num_partitions", value)

    @property
    @pulumi.getter(name="defaultReplicationFactor")
    def default_replication_factor(self) -> pulumi.Input[int]:
        return pulumi.get(self, "default_replication_factor")

    @default_replication_factor.setter
    def default_replication_factor(self, value: pulumi.Input[int]):
        pulumi.set(self, "default_replication_factor", value)


@pulumi.input_type
class InstanceDynamicRetentionConfigArgs:
    def __init__(__self__, *,
                 bottom_retention: Optional[pulumi.Input[int]] = None,
                 disk_quota_percentage: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 step_forward_percentage: Optional[pulumi.Input[int]] = None):
        if bottom_retention is not None:
            pulumi.set(__self__, "bottom_retention", bottom_retention)
        if disk_quota_percentage is not None:
            pulumi.set(__self__, "disk_quota_percentage", disk_quota_percentage)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if step_forward_percentage is not None:
            pulumi.set(__self__, "step_forward_percentage", step_forward_percentage)

    @property
    @pulumi.getter(name="bottomRetention")
    def bottom_retention(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bottom_retention")

    @bottom_retention.setter
    def bottom_retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bottom_retention", value)

    @property
    @pulumi.getter(name="diskQuotaPercentage")
    def disk_quota_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disk_quota_percentage")

    @disk_quota_percentage.setter
    def disk_quota_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_quota_percentage", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="stepForwardPercentage")
    def step_forward_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "step_forward_percentage")

    @step_forward_percentage.setter
    def step_forward_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "step_forward_percentage", value)


@pulumi.input_type
class InstanceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RouteBrokerVipListArgs:
    def __init__(__self__, *,
                 vip: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[str]] = None):
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if vport is not None:
            pulumi.set(__self__, "vport", vport)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter
    def vport(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vport")

    @vport.setter
    def vport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vport", value)


@pulumi.input_type
class RouteVipListArgs:
    def __init__(__self__, *,
                 vip: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[str]] = None):
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if vport is not None:
            pulumi.set(__self__, "vport", vport)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter
    def vport(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vport")

    @vport.setter
    def vport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vport", value)


@pulumi.input_type
class GetInstancesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


