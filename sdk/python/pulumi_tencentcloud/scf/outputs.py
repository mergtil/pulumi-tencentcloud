# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'FunctionAliasRoutingConfig',
    'FunctionAliasRoutingConfigAdditionalVersionMatch',
    'FunctionAliasRoutingConfigAdditionalVersionWeight',
    'FunctionCfsConfig',
    'FunctionEventInvokeConfigAsyncTriggerConfig',
    'FunctionEventInvokeConfigAsyncTriggerConfigRetryConfig',
    'FunctionImageConfig',
    'FunctionLayer',
    'FunctionTrigger',
    'FunctionTriggerInfo',
    'LayerContent',
    'ProvisionedConcurrencyConfigTriggerAction',
    'GetAccountInfoAccountLimitResult',
    'GetAccountInfoAccountLimitNamespaceResult',
    'GetAccountInfoAccountLimitNamespaceTriggerResult',
    'GetAccountInfoAccountUsageResult',
    'GetAccountInfoAccountUsageNamespaceResult',
    'GetAsyncEventManagementEventListResult',
    'GetAsyncEventStatusResultResult',
    'GetFunctionAliasesAliasResult',
    'GetFunctionAliasesAliasRoutingConfigResult',
    'GetFunctionAliasesAliasRoutingConfigAdditionVersionMatchResult',
    'GetFunctionAliasesAliasRoutingConfigAdditionalVersionWeightResult',
    'GetFunctionVersionsVersionResult',
    'GetFunctionsFunctionResult',
    'GetFunctionsFunctionTriggerInfoResult',
    'GetLayerVersionsLayerVersionResult',
    'GetLayersLayerResult',
    'GetLogsLogResult',
    'GetNamespacesNamespaceResult',
    'GetRequestStatusDataResult',
    'GetTriggersFilterResult',
    'GetTriggersTriggerResult',
]

@pulumi.output_type
class FunctionAliasRoutingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "additionalVersionMatches":
            suggest = "additional_version_matches"
        elif key == "additionalVersionWeights":
            suggest = "additional_version_weights"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionAliasRoutingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionAliasRoutingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionAliasRoutingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 additional_version_matches: Optional[Sequence['outputs.FunctionAliasRoutingConfigAdditionalVersionMatch']] = None,
                 additional_version_weights: Optional[Sequence['outputs.FunctionAliasRoutingConfigAdditionalVersionWeight']] = None):
        if additional_version_matches is not None:
            pulumi.set(__self__, "additional_version_matches", additional_version_matches)
        if additional_version_weights is not None:
            pulumi.set(__self__, "additional_version_weights", additional_version_weights)

    @property
    @pulumi.getter(name="additionalVersionMatches")
    def additional_version_matches(self) -> Optional[Sequence['outputs.FunctionAliasRoutingConfigAdditionalVersionMatch']]:
        return pulumi.get(self, "additional_version_matches")

    @property
    @pulumi.getter(name="additionalVersionWeights")
    def additional_version_weights(self) -> Optional[Sequence['outputs.FunctionAliasRoutingConfigAdditionalVersionWeight']]:
        return pulumi.get(self, "additional_version_weights")


@pulumi.output_type
class FunctionAliasRoutingConfigAdditionalVersionMatch(dict):
    def __init__(__self__, *,
                 expression: str,
                 key: str,
                 method: str,
                 version: str):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class FunctionAliasRoutingConfigAdditionalVersionWeight(dict):
    def __init__(__self__, *,
                 version: str,
                 weight: float):
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def weight(self) -> float:
        return pulumi.get(self, "weight")


@pulumi.output_type
class FunctionCfsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cfsId":
            suggest = "cfs_id"
        elif key == "localMountDir":
            suggest = "local_mount_dir"
        elif key == "mountInsId":
            suggest = "mount_ins_id"
        elif key == "remoteMountDir":
            suggest = "remote_mount_dir"
        elif key == "userGroupId":
            suggest = "user_group_id"
        elif key == "userId":
            suggest = "user_id"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "mountSubnetId":
            suggest = "mount_subnet_id"
        elif key == "mountVpcId":
            suggest = "mount_vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionCfsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionCfsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionCfsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cfs_id: str,
                 local_mount_dir: str,
                 mount_ins_id: str,
                 remote_mount_dir: str,
                 user_group_id: str,
                 user_id: str,
                 ip_address: Optional[str] = None,
                 mount_subnet_id: Optional[str] = None,
                 mount_vpc_id: Optional[str] = None):
        pulumi.set(__self__, "cfs_id", cfs_id)
        pulumi.set(__self__, "local_mount_dir", local_mount_dir)
        pulumi.set(__self__, "mount_ins_id", mount_ins_id)
        pulumi.set(__self__, "remote_mount_dir", remote_mount_dir)
        pulumi.set(__self__, "user_group_id", user_group_id)
        pulumi.set(__self__, "user_id", user_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if mount_subnet_id is not None:
            pulumi.set(__self__, "mount_subnet_id", mount_subnet_id)
        if mount_vpc_id is not None:
            pulumi.set(__self__, "mount_vpc_id", mount_vpc_id)

    @property
    @pulumi.getter(name="cfsId")
    def cfs_id(self) -> str:
        return pulumi.get(self, "cfs_id")

    @property
    @pulumi.getter(name="localMountDir")
    def local_mount_dir(self) -> str:
        return pulumi.get(self, "local_mount_dir")

    @property
    @pulumi.getter(name="mountInsId")
    def mount_ins_id(self) -> str:
        return pulumi.get(self, "mount_ins_id")

    @property
    @pulumi.getter(name="remoteMountDir")
    def remote_mount_dir(self) -> str:
        return pulumi.get(self, "remote_mount_dir")

    @property
    @pulumi.getter(name="userGroupId")
    def user_group_id(self) -> str:
        return pulumi.get(self, "user_group_id")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> str:
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="mountSubnetId")
    def mount_subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_subnet_id")

    @property
    @pulumi.getter(name="mountVpcId")
    def mount_vpc_id(self) -> Optional[str]:
        return pulumi.get(self, "mount_vpc_id")


@pulumi.output_type
class FunctionEventInvokeConfigAsyncTriggerConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "msgTtl":
            suggest = "msg_ttl"
        elif key == "retryConfigs":
            suggest = "retry_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionEventInvokeConfigAsyncTriggerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionEventInvokeConfigAsyncTriggerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionEventInvokeConfigAsyncTriggerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 msg_ttl: int,
                 retry_configs: Sequence['outputs.FunctionEventInvokeConfigAsyncTriggerConfigRetryConfig']):
        pulumi.set(__self__, "msg_ttl", msg_ttl)
        pulumi.set(__self__, "retry_configs", retry_configs)

    @property
    @pulumi.getter(name="msgTtl")
    def msg_ttl(self) -> int:
        return pulumi.get(self, "msg_ttl")

    @property
    @pulumi.getter(name="retryConfigs")
    def retry_configs(self) -> Sequence['outputs.FunctionEventInvokeConfigAsyncTriggerConfigRetryConfig']:
        return pulumi.get(self, "retry_configs")


@pulumi.output_type
class FunctionEventInvokeConfigAsyncTriggerConfigRetryConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retryNum":
            suggest = "retry_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionEventInvokeConfigAsyncTriggerConfigRetryConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionEventInvokeConfigAsyncTriggerConfigRetryConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionEventInvokeConfigAsyncTriggerConfigRetryConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 retry_num: int):
        pulumi.set(__self__, "retry_num", retry_num)

    @property
    @pulumi.getter(name="retryNum")
    def retry_num(self) -> int:
        return pulumi.get(self, "retry_num")


@pulumi.output_type
class FunctionImageConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageType":
            suggest = "image_type"
        elif key == "imageUri":
            suggest = "image_uri"
        elif key == "entryPoint":
            suggest = "entry_point"
        elif key == "registryId":
            suggest = "registry_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionImageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionImageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionImageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image_type: str,
                 image_uri: str,
                 args: Optional[str] = None,
                 command: Optional[str] = None,
                 entry_point: Optional[str] = None,
                 registry_id: Optional[str] = None):
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "image_uri", image_uri)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if entry_point is not None:
            pulumi.set(__self__, "entry_point", entry_point)
        if registry_id is not None:
            pulumi.set(__self__, "registry_id", registry_id)

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> str:
        return pulumi.get(self, "image_type")

    @property
    @pulumi.getter(name="imageUri")
    def image_uri(self) -> str:
        return pulumi.get(self, "image_uri")

    @property
    @pulumi.getter
    def args(self) -> Optional[str]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="entryPoint")
    def entry_point(self) -> Optional[str]:
        return pulumi.get(self, "entry_point")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> Optional[str]:
        return pulumi.get(self, "registry_id")


@pulumi.output_type
class FunctionLayer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "layerName":
            suggest = "layer_name"
        elif key == "layerVersion":
            suggest = "layer_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionLayer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionLayer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionLayer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 layer_name: str,
                 layer_version: int):
        pulumi.set(__self__, "layer_name", layer_name)
        pulumi.set(__self__, "layer_version", layer_version)

    @property
    @pulumi.getter(name="layerName")
    def layer_name(self) -> str:
        return pulumi.get(self, "layer_name")

    @property
    @pulumi.getter(name="layerVersion")
    def layer_version(self) -> int:
        return pulumi.get(self, "layer_version")


@pulumi.output_type
class FunctionTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "triggerDesc":
            suggest = "trigger_desc"
        elif key == "cosRegion":
            suggest = "cos_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 trigger_desc: str,
                 type: str,
                 cos_region: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "trigger_desc", trigger_desc)
        pulumi.set(__self__, "type", type)
        if cos_region is not None:
            pulumi.set(__self__, "cos_region", cos_region)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="triggerDesc")
    def trigger_desc(self) -> str:
        return pulumi.get(self, "trigger_desc")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="cosRegion")
    def cos_region(self) -> Optional[str]:
        return pulumi.get(self, "cos_region")


@pulumi.output_type
class FunctionTriggerInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createTime":
            suggest = "create_time"
        elif key == "customArgument":
            suggest = "custom_argument"
        elif key == "modifyTime":
            suggest = "modify_time"
        elif key == "triggerDesc":
            suggest = "trigger_desc"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTriggerInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTriggerInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTriggerInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_time: Optional[str] = None,
                 custom_argument: Optional[str] = None,
                 enable: Optional[bool] = None,
                 modify_time: Optional[str] = None,
                 name: Optional[str] = None,
                 trigger_desc: Optional[str] = None,
                 type: Optional[str] = None):
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if custom_argument is not None:
            pulumi.set(__self__, "custom_argument", custom_argument)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if modify_time is not None:
            pulumi.set(__self__, "modify_time", modify_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if trigger_desc is not None:
            pulumi.set(__self__, "trigger_desc", trigger_desc)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customArgument")
    def custom_argument(self) -> Optional[str]:
        return pulumi.get(self, "custom_argument")

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> Optional[str]:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="triggerDesc")
    def trigger_desc(self) -> Optional[str]:
        return pulumi.get(self, "trigger_desc")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class LayerContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cosBucketName":
            suggest = "cos_bucket_name"
        elif key == "cosBucketRegion":
            suggest = "cos_bucket_region"
        elif key == "cosObjectName":
            suggest = "cos_object_name"
        elif key == "zipFile":
            suggest = "zip_file"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LayerContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LayerContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LayerContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cos_bucket_name: Optional[str] = None,
                 cos_bucket_region: Optional[str] = None,
                 cos_object_name: Optional[str] = None,
                 zip_file: Optional[str] = None):
        if cos_bucket_name is not None:
            pulumi.set(__self__, "cos_bucket_name", cos_bucket_name)
        if cos_bucket_region is not None:
            pulumi.set(__self__, "cos_bucket_region", cos_bucket_region)
        if cos_object_name is not None:
            pulumi.set(__self__, "cos_object_name", cos_object_name)
        if zip_file is not None:
            pulumi.set(__self__, "zip_file", zip_file)

    @property
    @pulumi.getter(name="cosBucketName")
    def cos_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "cos_bucket_name")

    @property
    @pulumi.getter(name="cosBucketRegion")
    def cos_bucket_region(self) -> Optional[str]:
        return pulumi.get(self, "cos_bucket_region")

    @property
    @pulumi.getter(name="cosObjectName")
    def cos_object_name(self) -> Optional[str]:
        return pulumi.get(self, "cos_object_name")

    @property
    @pulumi.getter(name="zipFile")
    def zip_file(self) -> Optional[str]:
        return pulumi.get(self, "zip_file")


@pulumi.output_type
class ProvisionedConcurrencyConfigTriggerAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "triggerCronConfig":
            suggest = "trigger_cron_config"
        elif key == "triggerName":
            suggest = "trigger_name"
        elif key == "triggerProvisionedConcurrencyNum":
            suggest = "trigger_provisioned_concurrency_num"
        elif key == "provisionedType":
            suggest = "provisioned_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProvisionedConcurrencyConfigTriggerAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProvisionedConcurrencyConfigTriggerAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProvisionedConcurrencyConfigTriggerAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 trigger_cron_config: str,
                 trigger_name: str,
                 trigger_provisioned_concurrency_num: int,
                 provisioned_type: Optional[str] = None):
        pulumi.set(__self__, "trigger_cron_config", trigger_cron_config)
        pulumi.set(__self__, "trigger_name", trigger_name)
        pulumi.set(__self__, "trigger_provisioned_concurrency_num", trigger_provisioned_concurrency_num)
        if provisioned_type is not None:
            pulumi.set(__self__, "provisioned_type", provisioned_type)

    @property
    @pulumi.getter(name="triggerCronConfig")
    def trigger_cron_config(self) -> str:
        return pulumi.get(self, "trigger_cron_config")

    @property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> str:
        return pulumi.get(self, "trigger_name")

    @property
    @pulumi.getter(name="triggerProvisionedConcurrencyNum")
    def trigger_provisioned_concurrency_num(self) -> int:
        return pulumi.get(self, "trigger_provisioned_concurrency_num")

    @property
    @pulumi.getter(name="provisionedType")
    def provisioned_type(self) -> Optional[str]:
        return pulumi.get(self, "provisioned_type")


@pulumi.output_type
class GetAccountInfoAccountLimitResult(dict):
    def __init__(__self__, *,
                 namespaces: Sequence['outputs.GetAccountInfoAccountLimitNamespaceResult'],
                 namespaces_count: int):
        pulumi.set(__self__, "namespaces", namespaces)
        pulumi.set(__self__, "namespaces_count", namespaces_count)

    @property
    @pulumi.getter
    def namespaces(self) -> Sequence['outputs.GetAccountInfoAccountLimitNamespaceResult']:
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="namespacesCount")
    def namespaces_count(self) -> int:
        return pulumi.get(self, "namespaces_count")


@pulumi.output_type
class GetAccountInfoAccountLimitNamespaceResult(dict):
    def __init__(__self__, *,
                 concurrent_executions: int,
                 functions_count: int,
                 init_timeout_limit: int,
                 max_msg_ttl: int,
                 min_msg_ttl: int,
                 namespace: str,
                 retry_num_limit: int,
                 test_model_limit: int,
                 timeout_limit: int,
                 triggers: Sequence['outputs.GetAccountInfoAccountLimitNamespaceTriggerResult']):
        pulumi.set(__self__, "concurrent_executions", concurrent_executions)
        pulumi.set(__self__, "functions_count", functions_count)
        pulumi.set(__self__, "init_timeout_limit", init_timeout_limit)
        pulumi.set(__self__, "max_msg_ttl", max_msg_ttl)
        pulumi.set(__self__, "min_msg_ttl", min_msg_ttl)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "retry_num_limit", retry_num_limit)
        pulumi.set(__self__, "test_model_limit", test_model_limit)
        pulumi.set(__self__, "timeout_limit", timeout_limit)
        pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter(name="concurrentExecutions")
    def concurrent_executions(self) -> int:
        return pulumi.get(self, "concurrent_executions")

    @property
    @pulumi.getter(name="functionsCount")
    def functions_count(self) -> int:
        return pulumi.get(self, "functions_count")

    @property
    @pulumi.getter(name="initTimeoutLimit")
    def init_timeout_limit(self) -> int:
        return pulumi.get(self, "init_timeout_limit")

    @property
    @pulumi.getter(name="maxMsgTtl")
    def max_msg_ttl(self) -> int:
        return pulumi.get(self, "max_msg_ttl")

    @property
    @pulumi.getter(name="minMsgTtl")
    def min_msg_ttl(self) -> int:
        return pulumi.get(self, "min_msg_ttl")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="retryNumLimit")
    def retry_num_limit(self) -> int:
        return pulumi.get(self, "retry_num_limit")

    @property
    @pulumi.getter(name="testModelLimit")
    def test_model_limit(self) -> int:
        return pulumi.get(self, "test_model_limit")

    @property
    @pulumi.getter(name="timeoutLimit")
    def timeout_limit(self) -> int:
        return pulumi.get(self, "timeout_limit")

    @property
    @pulumi.getter
    def triggers(self) -> Sequence['outputs.GetAccountInfoAccountLimitNamespaceTriggerResult']:
        return pulumi.get(self, "triggers")


@pulumi.output_type
class GetAccountInfoAccountLimitNamespaceTriggerResult(dict):
    def __init__(__self__, *,
                 apigw: int,
                 ckafka: int,
                 clb: int,
                 cls: int,
                 cm: int,
                 cmq: int,
                 cos: int,
                 eb: int,
                 mps: int,
                 timer: int,
                 total: int,
                 vod: int):
        pulumi.set(__self__, "apigw", apigw)
        pulumi.set(__self__, "ckafka", ckafka)
        pulumi.set(__self__, "clb", clb)
        pulumi.set(__self__, "cls", cls)
        pulumi.set(__self__, "cm", cm)
        pulumi.set(__self__, "cmq", cmq)
        pulumi.set(__self__, "cos", cos)
        pulumi.set(__self__, "eb", eb)
        pulumi.set(__self__, "mps", mps)
        pulumi.set(__self__, "timer", timer)
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "vod", vod)

    @property
    @pulumi.getter
    def apigw(self) -> int:
        return pulumi.get(self, "apigw")

    @property
    @pulumi.getter
    def ckafka(self) -> int:
        return pulumi.get(self, "ckafka")

    @property
    @pulumi.getter
    def clb(self) -> int:
        return pulumi.get(self, "clb")

    @property
    @pulumi.getter
    def cls(self) -> int:
        return pulumi.get(self, "cls")

    @property
    @pulumi.getter
    def cm(self) -> int:
        return pulumi.get(self, "cm")

    @property
    @pulumi.getter
    def cmq(self) -> int:
        return pulumi.get(self, "cmq")

    @property
    @pulumi.getter
    def cos(self) -> int:
        return pulumi.get(self, "cos")

    @property
    @pulumi.getter
    def eb(self) -> int:
        return pulumi.get(self, "eb")

    @property
    @pulumi.getter
    def mps(self) -> int:
        return pulumi.get(self, "mps")

    @property
    @pulumi.getter
    def timer(self) -> int:
        return pulumi.get(self, "timer")

    @property
    @pulumi.getter
    def total(self) -> int:
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def vod(self) -> int:
        return pulumi.get(self, "vod")


@pulumi.output_type
class GetAccountInfoAccountUsageResult(dict):
    def __init__(__self__, *,
                 namespaces: Sequence['outputs.GetAccountInfoAccountUsageNamespaceResult'],
                 namespaces_count: int,
                 total_allocated_concurrency_mem: int,
                 total_concurrency_mem: int,
                 user_concurrency_mem_limit: int):
        pulumi.set(__self__, "namespaces", namespaces)
        pulumi.set(__self__, "namespaces_count", namespaces_count)
        pulumi.set(__self__, "total_allocated_concurrency_mem", total_allocated_concurrency_mem)
        pulumi.set(__self__, "total_concurrency_mem", total_concurrency_mem)
        pulumi.set(__self__, "user_concurrency_mem_limit", user_concurrency_mem_limit)

    @property
    @pulumi.getter
    def namespaces(self) -> Sequence['outputs.GetAccountInfoAccountUsageNamespaceResult']:
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="namespacesCount")
    def namespaces_count(self) -> int:
        return pulumi.get(self, "namespaces_count")

    @property
    @pulumi.getter(name="totalAllocatedConcurrencyMem")
    def total_allocated_concurrency_mem(self) -> int:
        return pulumi.get(self, "total_allocated_concurrency_mem")

    @property
    @pulumi.getter(name="totalConcurrencyMem")
    def total_concurrency_mem(self) -> int:
        return pulumi.get(self, "total_concurrency_mem")

    @property
    @pulumi.getter(name="userConcurrencyMemLimit")
    def user_concurrency_mem_limit(self) -> int:
        return pulumi.get(self, "user_concurrency_mem_limit")


@pulumi.output_type
class GetAccountInfoAccountUsageNamespaceResult(dict):
    def __init__(__self__, *,
                 functions: Sequence[str],
                 functions_count: int,
                 namespace: str,
                 total_allocated_concurrency_mem: int,
                 total_allocated_provisioned_mem: int,
                 total_concurrency_mem: int):
        pulumi.set(__self__, "functions", functions)
        pulumi.set(__self__, "functions_count", functions_count)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "total_allocated_concurrency_mem", total_allocated_concurrency_mem)
        pulumi.set(__self__, "total_allocated_provisioned_mem", total_allocated_provisioned_mem)
        pulumi.set(__self__, "total_concurrency_mem", total_concurrency_mem)

    @property
    @pulumi.getter
    def functions(self) -> Sequence[str]:
        return pulumi.get(self, "functions")

    @property
    @pulumi.getter(name="functionsCount")
    def functions_count(self) -> int:
        return pulumi.get(self, "functions_count")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="totalAllocatedConcurrencyMem")
    def total_allocated_concurrency_mem(self) -> int:
        return pulumi.get(self, "total_allocated_concurrency_mem")

    @property
    @pulumi.getter(name="totalAllocatedProvisionedMem")
    def total_allocated_provisioned_mem(self) -> int:
        return pulumi.get(self, "total_allocated_provisioned_mem")

    @property
    @pulumi.getter(name="totalConcurrencyMem")
    def total_concurrency_mem(self) -> int:
        return pulumi.get(self, "total_concurrency_mem")


@pulumi.output_type
class GetAsyncEventManagementEventListResult(dict):
    def __init__(__self__, *,
                 end_time: str,
                 invoke_request_id: str,
                 invoke_type: str,
                 qualifier: str,
                 start_time: str,
                 status: str):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "invoke_request_id", invoke_request_id)
        pulumi.set(__self__, "invoke_type", invoke_type)
        pulumi.set(__self__, "qualifier", qualifier)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="invokeRequestId")
    def invoke_request_id(self) -> str:
        return pulumi.get(self, "invoke_request_id")

    @property
    @pulumi.getter(name="invokeType")
    def invoke_type(self) -> str:
        return pulumi.get(self, "invoke_type")

    @property
    @pulumi.getter
    def qualifier(self) -> str:
        return pulumi.get(self, "qualifier")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetAsyncEventStatusResultResult(dict):
    def __init__(__self__, *,
                 invoke_request_id: str,
                 status: str,
                 status_code: int):
        pulumi.set(__self__, "invoke_request_id", invoke_request_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter(name="invokeRequestId")
    def invoke_request_id(self) -> str:
        return pulumi.get(self, "invoke_request_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> int:
        return pulumi.get(self, "status_code")


@pulumi.output_type
class GetFunctionAliasesAliasResult(dict):
    def __init__(__self__, *,
                 add_time: str,
                 description: str,
                 function_version: str,
                 mod_time: str,
                 name: str,
                 routing_configs: Sequence['outputs.GetFunctionAliasesAliasRoutingConfigResult']):
        pulumi.set(__self__, "add_time", add_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "function_version", function_version)
        pulumi.set(__self__, "mod_time", mod_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "routing_configs", routing_configs)

    @property
    @pulumi.getter(name="addTime")
    def add_time(self) -> str:
        return pulumi.get(self, "add_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="functionVersion")
    def function_version(self) -> str:
        return pulumi.get(self, "function_version")

    @property
    @pulumi.getter(name="modTime")
    def mod_time(self) -> str:
        return pulumi.get(self, "mod_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routingConfigs")
    def routing_configs(self) -> Sequence['outputs.GetFunctionAliasesAliasRoutingConfigResult']:
        return pulumi.get(self, "routing_configs")


@pulumi.output_type
class GetFunctionAliasesAliasRoutingConfigResult(dict):
    def __init__(__self__, *,
                 addition_version_matchs: Sequence['outputs.GetFunctionAliasesAliasRoutingConfigAdditionVersionMatchResult'],
                 additional_version_weights: Sequence['outputs.GetFunctionAliasesAliasRoutingConfigAdditionalVersionWeightResult']):
        pulumi.set(__self__, "addition_version_matchs", addition_version_matchs)
        pulumi.set(__self__, "additional_version_weights", additional_version_weights)

    @property
    @pulumi.getter(name="additionVersionMatchs")
    def addition_version_matchs(self) -> Sequence['outputs.GetFunctionAliasesAliasRoutingConfigAdditionVersionMatchResult']:
        return pulumi.get(self, "addition_version_matchs")

    @property
    @pulumi.getter(name="additionalVersionWeights")
    def additional_version_weights(self) -> Sequence['outputs.GetFunctionAliasesAliasRoutingConfigAdditionalVersionWeightResult']:
        return pulumi.get(self, "additional_version_weights")


@pulumi.output_type
class GetFunctionAliasesAliasRoutingConfigAdditionVersionMatchResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 key: str,
                 method: str,
                 version: str):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFunctionAliasesAliasRoutingConfigAdditionalVersionWeightResult(dict):
    def __init__(__self__, *,
                 version: str,
                 weight: float):
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def weight(self) -> float:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetFunctionVersionsVersionResult(dict):
    def __init__(__self__, *,
                 add_time: str,
                 description: str,
                 mod_time: str,
                 status: str,
                 version: str):
        pulumi.set(__self__, "add_time", add_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "mod_time", mod_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="addTime")
    def add_time(self) -> str:
        return pulumi.get(self, "add_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="modTime")
    def mod_time(self) -> str:
        return pulumi.get(self, "mod_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFunctionsFunctionResult(dict):
    def __init__(__self__, *,
                 cls_logset_id: str,
                 cls_topic_id: str,
                 code_error: str,
                 code_result: str,
                 code_size: int,
                 create_time: str,
                 description: str,
                 eip_fixed: bool,
                 eips: Sequence[str],
                 enable_eip_config: bool,
                 enable_public_net: bool,
                 environment: Mapping[str, Any],
                 err_no: int,
                 handler: str,
                 host: str,
                 install_dependency: bool,
                 l5_enable: bool,
                 mem_size: int,
                 modify_time: str,
                 name: str,
                 namespace: str,
                 role: str,
                 runtime: str,
                 status: str,
                 status_desc: str,
                 subnet_id: str,
                 tags: Mapping[str, Any],
                 timeout: int,
                 trigger_infos: Sequence['outputs.GetFunctionsFunctionTriggerInfoResult'],
                 vip: str,
                 vpc_id: str):
        pulumi.set(__self__, "cls_logset_id", cls_logset_id)
        pulumi.set(__self__, "cls_topic_id", cls_topic_id)
        pulumi.set(__self__, "code_error", code_error)
        pulumi.set(__self__, "code_result", code_result)
        pulumi.set(__self__, "code_size", code_size)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "eip_fixed", eip_fixed)
        pulumi.set(__self__, "eips", eips)
        pulumi.set(__self__, "enable_eip_config", enable_eip_config)
        pulumi.set(__self__, "enable_public_net", enable_public_net)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "err_no", err_no)
        pulumi.set(__self__, "handler", handler)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "install_dependency", install_dependency)
        pulumi.set(__self__, "l5_enable", l5_enable)
        pulumi.set(__self__, "mem_size", mem_size)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "runtime", runtime)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_desc", status_desc)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "trigger_infos", trigger_infos)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="clsLogsetId")
    def cls_logset_id(self) -> str:
        return pulumi.get(self, "cls_logset_id")

    @property
    @pulumi.getter(name="clsTopicId")
    def cls_topic_id(self) -> str:
        return pulumi.get(self, "cls_topic_id")

    @property
    @pulumi.getter(name="codeError")
    def code_error(self) -> str:
        return pulumi.get(self, "code_error")

    @property
    @pulumi.getter(name="codeResult")
    def code_result(self) -> str:
        return pulumi.get(self, "code_result")

    @property
    @pulumi.getter(name="codeSize")
    def code_size(self) -> int:
        return pulumi.get(self, "code_size")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eipFixed")
    def eip_fixed(self) -> bool:
        return pulumi.get(self, "eip_fixed")

    @property
    @pulumi.getter
    def eips(self) -> Sequence[str]:
        return pulumi.get(self, "eips")

    @property
    @pulumi.getter(name="enableEipConfig")
    def enable_eip_config(self) -> bool:
        return pulumi.get(self, "enable_eip_config")

    @property
    @pulumi.getter(name="enablePublicNet")
    def enable_public_net(self) -> bool:
        return pulumi.get(self, "enable_public_net")

    @property
    @pulumi.getter
    def environment(self) -> Mapping[str, Any]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="errNo")
    def err_no(self) -> int:
        return pulumi.get(self, "err_no")

    @property
    @pulumi.getter
    def handler(self) -> str:
        return pulumi.get(self, "handler")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="installDependency")
    def install_dependency(self) -> bool:
        return pulumi.get(self, "install_dependency")

    @property
    @pulumi.getter(name="l5Enable")
    def l5_enable(self) -> bool:
        return pulumi.get(self, "l5_enable")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> int:
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def runtime(self) -> str:
        return pulumi.get(self, "runtime")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDesc")
    def status_desc(self) -> str:
        return pulumi.get(self, "status_desc")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="triggerInfos")
    def trigger_infos(self) -> Sequence['outputs.GetFunctionsFunctionTriggerInfoResult']:
        return pulumi.get(self, "trigger_infos")

    @property
    @pulumi.getter
    def vip(self) -> str:
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetFunctionsFunctionTriggerInfoResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 custom_argument: str,
                 enable: bool,
                 modify_time: str,
                 name: str,
                 trigger_desc: str,
                 type: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "custom_argument", custom_argument)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "trigger_desc", trigger_desc)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customArgument")
    def custom_argument(self) -> str:
        return pulumi.get(self, "custom_argument")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="triggerDesc")
    def trigger_desc(self) -> str:
        return pulumi.get(self, "trigger_desc")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetLayerVersionsLayerVersionResult(dict):
    def __init__(__self__, *,
                 add_time: str,
                 compatible_runtimes: Sequence[str],
                 description: str,
                 layer_name: str,
                 layer_version: int,
                 license_info: str,
                 stamp: str,
                 status: str):
        pulumi.set(__self__, "add_time", add_time)
        pulumi.set(__self__, "compatible_runtimes", compatible_runtimes)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "layer_name", layer_name)
        pulumi.set(__self__, "layer_version", layer_version)
        pulumi.set(__self__, "license_info", license_info)
        pulumi.set(__self__, "stamp", stamp)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="addTime")
    def add_time(self) -> str:
        return pulumi.get(self, "add_time")

    @property
    @pulumi.getter(name="compatibleRuntimes")
    def compatible_runtimes(self) -> Sequence[str]:
        return pulumi.get(self, "compatible_runtimes")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="layerName")
    def layer_name(self) -> str:
        return pulumi.get(self, "layer_name")

    @property
    @pulumi.getter(name="layerVersion")
    def layer_version(self) -> int:
        return pulumi.get(self, "layer_version")

    @property
    @pulumi.getter(name="licenseInfo")
    def license_info(self) -> str:
        return pulumi.get(self, "license_info")

    @property
    @pulumi.getter
    def stamp(self) -> str:
        return pulumi.get(self, "stamp")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetLayersLayerResult(dict):
    def __init__(__self__, *,
                 add_time: str,
                 compatible_runtimes: Sequence[str],
                 description: str,
                 layer_name: str,
                 layer_version: int,
                 license_info: str,
                 stamp: str,
                 status: str):
        pulumi.set(__self__, "add_time", add_time)
        pulumi.set(__self__, "compatible_runtimes", compatible_runtimes)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "layer_name", layer_name)
        pulumi.set(__self__, "layer_version", layer_version)
        pulumi.set(__self__, "license_info", license_info)
        pulumi.set(__self__, "stamp", stamp)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="addTime")
    def add_time(self) -> str:
        return pulumi.get(self, "add_time")

    @property
    @pulumi.getter(name="compatibleRuntimes")
    def compatible_runtimes(self) -> Sequence[str]:
        return pulumi.get(self, "compatible_runtimes")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="layerName")
    def layer_name(self) -> str:
        return pulumi.get(self, "layer_name")

    @property
    @pulumi.getter(name="layerVersion")
    def layer_version(self) -> int:
        return pulumi.get(self, "layer_version")

    @property
    @pulumi.getter(name="licenseInfo")
    def license_info(self) -> str:
        return pulumi.get(self, "license_info")

    @property
    @pulumi.getter
    def stamp(self) -> str:
        return pulumi.get(self, "stamp")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetLogsLogResult(dict):
    def __init__(__self__, *,
                 bill_duration: int,
                 duration: float,
                 function_name: str,
                 invoke_finished: int,
                 level: str,
                 log: str,
                 mem_usage: int,
                 request_id: str,
                 ret_code: int,
                 ret_msg: str,
                 source: str,
                 start_time: str):
        pulumi.set(__self__, "bill_duration", bill_duration)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "function_name", function_name)
        pulumi.set(__self__, "invoke_finished", invoke_finished)
        pulumi.set(__self__, "level", level)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "mem_usage", mem_usage)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "ret_code", ret_code)
        pulumi.set(__self__, "ret_msg", ret_msg)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="billDuration")
    def bill_duration(self) -> int:
        return pulumi.get(self, "bill_duration")

    @property
    @pulumi.getter
    def duration(self) -> float:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> str:
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter(name="invokeFinished")
    def invoke_finished(self) -> int:
        return pulumi.get(self, "invoke_finished")

    @property
    @pulumi.getter
    def level(self) -> str:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def log(self) -> str:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="memUsage")
    def mem_usage(self) -> int:
        return pulumi.get(self, "mem_usage")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="retCode")
    def ret_code(self) -> int:
        return pulumi.get(self, "ret_code")

    @property
    @pulumi.getter(name="retMsg")
    def ret_msg(self) -> str:
        return pulumi.get(self, "ret_msg")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetNamespacesNamespaceResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 description: str,
                 modify_time: str,
                 namespace: str,
                 type: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRequestStatusDataResult(dict):
    def __init__(__self__, *,
                 duration: float,
                 function_name: str,
                 mem_usage: float,
                 request_id: str,
                 ret_code: int,
                 ret_msg: str,
                 retry_num: int,
                 start_time: str):
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "function_name", function_name)
        pulumi.set(__self__, "mem_usage", mem_usage)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "ret_code", ret_code)
        pulumi.set(__self__, "ret_msg", ret_msg)
        pulumi.set(__self__, "retry_num", retry_num)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def duration(self) -> float:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> str:
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter(name="memUsage")
    def mem_usage(self) -> float:
        return pulumi.get(self, "mem_usage")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="retCode")
    def ret_code(self) -> int:
        return pulumi.get(self, "ret_code")

    @property
    @pulumi.getter(name="retMsg")
    def ret_msg(self) -> str:
        return pulumi.get(self, "ret_msg")

    @property
    @pulumi.getter(name="retryNum")
    def retry_num(self) -> int:
        return pulumi.get(self, "retry_num")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetTriggersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTriggersTriggerResult(dict):
    def __init__(__self__, *,
                 add_time: str,
                 available_status: str,
                 bind_status: str,
                 custom_argument: str,
                 enable: int,
                 mod_time: str,
                 qualifier: str,
                 resource_id: str,
                 trigger_attribute: str,
                 trigger_desc: str,
                 trigger_name: str,
                 type: str):
        pulumi.set(__self__, "add_time", add_time)
        pulumi.set(__self__, "available_status", available_status)
        pulumi.set(__self__, "bind_status", bind_status)
        pulumi.set(__self__, "custom_argument", custom_argument)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "mod_time", mod_time)
        pulumi.set(__self__, "qualifier", qualifier)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "trigger_attribute", trigger_attribute)
        pulumi.set(__self__, "trigger_desc", trigger_desc)
        pulumi.set(__self__, "trigger_name", trigger_name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="addTime")
    def add_time(self) -> str:
        return pulumi.get(self, "add_time")

    @property
    @pulumi.getter(name="availableStatus")
    def available_status(self) -> str:
        return pulumi.get(self, "available_status")

    @property
    @pulumi.getter(name="bindStatus")
    def bind_status(self) -> str:
        return pulumi.get(self, "bind_status")

    @property
    @pulumi.getter(name="customArgument")
    def custom_argument(self) -> str:
        return pulumi.get(self, "custom_argument")

    @property
    @pulumi.getter
    def enable(self) -> int:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="modTime")
    def mod_time(self) -> str:
        return pulumi.get(self, "mod_time")

    @property
    @pulumi.getter
    def qualifier(self) -> str:
        return pulumi.get(self, "qualifier")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="triggerAttribute")
    def trigger_attribute(self) -> str:
        return pulumi.get(self, "trigger_attribute")

    @property
    @pulumi.getter(name="triggerDesc")
    def trigger_desc(self) -> str:
        return pulumi.get(self, "trigger_desc")

    @property
    @pulumi.getter(name="triggerName")
    def trigger_name(self) -> str:
        return pulumi.get(self, "trigger_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


