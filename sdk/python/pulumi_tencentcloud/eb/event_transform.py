# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EventTransformArgs', 'EventTransform']

@pulumi.input_type
class EventTransformArgs:
    def __init__(__self__, *,
                 event_bus_id: pulumi.Input[str],
                 rule_id: pulumi.Input[str],
                 transformations: pulumi.Input[Sequence[pulumi.Input['EventTransformTransformationArgs']]]):
        """
        The set of arguments for constructing a EventTransform resource.
        :param pulumi.Input[str] event_bus_id: event bus Id.
        :param pulumi.Input[str] rule_id: ruleId.
        :param pulumi.Input[Sequence[pulumi.Input['EventTransformTransformationArgs']]] transformations: A list of transformation rules, currently only one.
        """
        pulumi.set(__self__, "event_bus_id", event_bus_id)
        pulumi.set(__self__, "rule_id", rule_id)
        pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter(name="eventBusId")
    def event_bus_id(self) -> pulumi.Input[str]:
        """
        event bus Id.
        """
        return pulumi.get(self, "event_bus_id")

    @event_bus_id.setter
    def event_bus_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "event_bus_id", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Input[str]:
        """
        ruleId.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter
    def transformations(self) -> pulumi.Input[Sequence[pulumi.Input['EventTransformTransformationArgs']]]:
        """
        A list of transformation rules, currently only one.
        """
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: pulumi.Input[Sequence[pulumi.Input['EventTransformTransformationArgs']]]):
        pulumi.set(self, "transformations", value)


@pulumi.input_type
class _EventTransformState:
    def __init__(__self__, *,
                 event_bus_id: Optional[pulumi.Input[str]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None,
                 transformations: Optional[pulumi.Input[Sequence[pulumi.Input['EventTransformTransformationArgs']]]] = None):
        """
        Input properties used for looking up and filtering EventTransform resources.
        :param pulumi.Input[str] event_bus_id: event bus Id.
        :param pulumi.Input[str] rule_id: ruleId.
        :param pulumi.Input[Sequence[pulumi.Input['EventTransformTransformationArgs']]] transformations: A list of transformation rules, currently only one.
        """
        if event_bus_id is not None:
            pulumi.set(__self__, "event_bus_id", event_bus_id)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if transformations is not None:
            pulumi.set(__self__, "transformations", transformations)

    @property
    @pulumi.getter(name="eventBusId")
    def event_bus_id(self) -> Optional[pulumi.Input[str]]:
        """
        event bus Id.
        """
        return pulumi.get(self, "event_bus_id")

    @event_bus_id.setter
    def event_bus_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_bus_id", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        ruleId.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter
    def transformations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EventTransformTransformationArgs']]]]:
        """
        A list of transformation rules, currently only one.
        """
        return pulumi.get(self, "transformations")

    @transformations.setter
    def transformations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EventTransformTransformationArgs']]]]):
        pulumi.set(self, "transformations", value)


class EventTransform(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event_bus_id: Optional[pulumi.Input[str]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None,
                 transformations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventTransformTransformationArgs']]]]] = None,
                 __props__=None):
        """
        Create a EventTransform resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] event_bus_id: event bus Id.
        :param pulumi.Input[str] rule_id: ruleId.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventTransformTransformationArgs']]]] transformations: A list of transformation rules, currently only one.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EventTransformArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EventTransform resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EventTransformArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventTransformArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event_bus_id: Optional[pulumi.Input[str]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None,
                 transformations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventTransformTransformationArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventTransformArgs.__new__(EventTransformArgs)

            if event_bus_id is None and not opts.urn:
                raise TypeError("Missing required property 'event_bus_id'")
            __props__.__dict__["event_bus_id"] = event_bus_id
            if rule_id is None and not opts.urn:
                raise TypeError("Missing required property 'rule_id'")
            __props__.__dict__["rule_id"] = rule_id
            if transformations is None and not opts.urn:
                raise TypeError("Missing required property 'transformations'")
            __props__.__dict__["transformations"] = transformations
        super(EventTransform, __self__).__init__(
            'tencentcloud:Eb/eventTransform:EventTransform',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            event_bus_id: Optional[pulumi.Input[str]] = None,
            rule_id: Optional[pulumi.Input[str]] = None,
            transformations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventTransformTransformationArgs']]]]] = None) -> 'EventTransform':
        """
        Get an existing EventTransform resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] event_bus_id: event bus Id.
        :param pulumi.Input[str] rule_id: ruleId.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EventTransformTransformationArgs']]]] transformations: A list of transformation rules, currently only one.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventTransformState.__new__(_EventTransformState)

        __props__.__dict__["event_bus_id"] = event_bus_id
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["transformations"] = transformations
        return EventTransform(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="eventBusId")
    def event_bus_id(self) -> pulumi.Output[str]:
        """
        event bus Id.
        """
        return pulumi.get(self, "event_bus_id")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[str]:
        """
        ruleId.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def transformations(self) -> pulumi.Output[Sequence['outputs.EventTransformTransformation']]:
        """
        A list of transformation rules, currently only one.
        """
        return pulumi.get(self, "transformations")

