# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AccountPrivilegesAccounts',
    'AccountPrivilegesColumnPrivilege',
    'AccountPrivilegesDatabasePrivilege',
    'AccountPrivilegesFunctionPrivilege',
    'AccountPrivilegesProcedurePrivilege',
    'AccountPrivilegesTablePrivilege',
    'AccountPrivilegesViewPrivilege',
    'InstanceInitParam',
    'ParametersParam',
    'GetAccountsListResult',
    'GetDatabaseObjectsFuncResult',
    'GetDatabaseObjectsProcResult',
    'GetDatabaseObjectsTableResult',
    'GetDatabaseObjectsViewResult',
    'GetDatabaseTableColResult',
    'GetDatabasesDatabaseResult',
    'GetDbInstancesInstanceResult',
    'GetDbInstancesInstanceResourceTagResult',
    'GetDcnDetailDcnDetailResult',
    'GetDcnDetailDcnDetailReplicaConfigResult',
    'GetDcnDetailDcnDetailReplicaStatusResult',
    'GetInstanceNodeInfoNodesInfoResult',
    'GetInstanceSpecsSpecResult',
    'GetInstanceSpecsSpecSpecInfoResult',
    'GetLogFilesFileResult',
    'GetOrdersDealResult',
    'GetProjectSecurityGroupsGroupResult',
    'GetProjectSecurityGroupsGroupInboundResult',
    'GetProjectSecurityGroupsGroupOutboundResult',
    'GetSaleInfoRegionListResult',
    'GetSaleInfoRegionListAvailableChoiceResult',
    'GetSaleInfoRegionListAvailableChoiceMasterZoneResult',
    'GetSaleInfoRegionListAvailableChoiceSlaveZoneResult',
    'GetSaleInfoRegionListZoneListResult',
    'GetSecurityGroupsListResult',
    'GetSecurityGroupsListInboundResult',
    'GetSecurityGroupsListOutboundResult',
    'GetSlowLogsDataResult',
]

@pulumi.output_type
class AccountPrivilegesAccounts(dict):
    def __init__(__self__, *,
                 host: str,
                 user: str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


@pulumi.output_type
class AccountPrivilegesColumnPrivilege(dict):
    def __init__(__self__, *,
                 column: str,
                 database: str,
                 privileges: Sequence[str],
                 table: str):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "privileges", privileges)
        pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter
    def column(self) -> str:
        return pulumi.get(self, "column")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter
    def table(self) -> str:
        return pulumi.get(self, "table")


@pulumi.output_type
class AccountPrivilegesDatabasePrivilege(dict):
    def __init__(__self__, *,
                 database: str,
                 privileges: Sequence[str]):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "privileges", privileges)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        return pulumi.get(self, "privileges")


@pulumi.output_type
class AccountPrivilegesFunctionPrivilege(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionName":
            suggest = "function_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccountPrivilegesFunctionPrivilege. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccountPrivilegesFunctionPrivilege.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccountPrivilegesFunctionPrivilege.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 function_name: str,
                 privileges: Sequence[str]):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "function_name", function_name)
        pulumi.set(__self__, "privileges", privileges)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> str:
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        return pulumi.get(self, "privileges")


@pulumi.output_type
class AccountPrivilegesProcedurePrivilege(dict):
    def __init__(__self__, *,
                 database: str,
                 privileges: Sequence[str],
                 procedure: str):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "privileges", privileges)
        pulumi.set(__self__, "procedure", procedure)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter
    def procedure(self) -> str:
        return pulumi.get(self, "procedure")


@pulumi.output_type
class AccountPrivilegesTablePrivilege(dict):
    def __init__(__self__, *,
                 database: str,
                 privileges: Sequence[str],
                 table: str):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "privileges", privileges)
        pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter
    def table(self) -> str:
        return pulumi.get(self, "table")


@pulumi.output_type
class AccountPrivilegesViewPrivilege(dict):
    def __init__(__self__, *,
                 database: str,
                 privileges: Sequence[str],
                 view: str):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "privileges", privileges)
        pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter
    def view(self) -> str:
        return pulumi.get(self, "view")


@pulumi.output_type
class InstanceInitParam(dict):
    def __init__(__self__, *,
                 param: str,
                 value: str):
        pulumi.set(__self__, "param", param)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def param(self) -> str:
        return pulumi.get(self, "param")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ParametersParam(dict):
    def __init__(__self__, *,
                 param: str,
                 value: str):
        pulumi.set(__self__, "param", param)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def param(self) -> str:
        return pulumi.get(self, "param")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAccountsListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 delay_thresh: int,
                 description: str,
                 host: str,
                 read_only: int,
                 slave_const: int,
                 update_time: str,
                 user_name: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "delay_thresh", delay_thresh)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "slave_const", slave_const)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="delayThresh")
    def delay_thresh(self) -> int:
        return pulumi.get(self, "delay_thresh")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> int:
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="slaveConst")
    def slave_const(self) -> int:
        return pulumi.get(self, "slave_const")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetDatabaseObjectsFuncResult(dict):
    def __init__(__self__, *,
                 func: str):
        pulumi.set(__self__, "func", func)

    @property
    @pulumi.getter
    def func(self) -> str:
        return pulumi.get(self, "func")


@pulumi.output_type
class GetDatabaseObjectsProcResult(dict):
    def __init__(__self__, *,
                 proc: str):
        pulumi.set(__self__, "proc", proc)

    @property
    @pulumi.getter
    def proc(self) -> str:
        return pulumi.get(self, "proc")


@pulumi.output_type
class GetDatabaseObjectsTableResult(dict):
    def __init__(__self__, *,
                 table: str):
        pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter
    def table(self) -> str:
        return pulumi.get(self, "table")


@pulumi.output_type
class GetDatabaseObjectsViewResult(dict):
    def __init__(__self__, *,
                 view: str):
        pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def view(self) -> str:
        return pulumi.get(self, "view")


@pulumi.output_type
class GetDatabaseTableColResult(dict):
    def __init__(__self__, *,
                 col: str,
                 type: str):
        pulumi.set(__self__, "col", col)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def col(self) -> str:
        return pulumi.get(self, "col")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 db_name: str):
        pulumi.set(__self__, "db_name", db_name)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        return pulumi.get(self, "db_name")


@pulumi.output_type
class GetDbInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 db_version_id: str,
                 instance_id: str,
                 instance_name: str,
                 memory: int,
                 project_id: int,
                 region: str,
                 resource_tags: Sequence['outputs.GetDbInstancesInstanceResourceTagResult'],
                 storage: int,
                 subnet_id: str,
                 vpc_id: str,
                 zone: str):
        pulumi.set(__self__, "db_version_id", db_version_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "resource_tags", resource_tags)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="dbVersionId")
    def db_version_id(self) -> str:
        return pulumi.get(self, "db_version_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Sequence['outputs.GetDbInstancesInstanceResourceTagResult']:
        return pulumi.get(self, "resource_tags")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetDbInstancesInstanceResourceTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetDcnDetailDcnDetailResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 create_time: str,
                 dcn_flag: int,
                 dcn_status: int,
                 encrypt_status: int,
                 instance_id: str,
                 instance_name: str,
                 instance_type: int,
                 memory: int,
                 pay_mode: int,
                 period_end_time: str,
                 region: str,
                 replica_configs: Sequence['outputs.GetDcnDetailDcnDetailReplicaConfigResult'],
                 replica_statuses: Sequence['outputs.GetDcnDetailDcnDetailReplicaStatusResult'],
                 status: int,
                 status_desc: str,
                 storage: int,
                 vip: str,
                 vipv6: str,
                 vport: int,
                 zone: str):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "dcn_flag", dcn_flag)
        pulumi.set(__self__, "dcn_status", dcn_status)
        pulumi.set(__self__, "encrypt_status", encrypt_status)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "pay_mode", pay_mode)
        pulumi.set(__self__, "period_end_time", period_end_time)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "replica_configs", replica_configs)
        pulumi.set(__self__, "replica_statuses", replica_statuses)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_desc", status_desc)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "vipv6", vipv6)
        pulumi.set(__self__, "vport", vport)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dcnFlag")
    def dcn_flag(self) -> int:
        return pulumi.get(self, "dcn_flag")

    @property
    @pulumi.getter(name="dcnStatus")
    def dcn_status(self) -> int:
        return pulumi.get(self, "dcn_status")

    @property
    @pulumi.getter(name="encryptStatus")
    def encrypt_status(self) -> int:
        return pulumi.get(self, "encrypt_status")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> int:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> int:
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter(name="periodEndTime")
    def period_end_time(self) -> str:
        return pulumi.get(self, "period_end_time")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="replicaConfigs")
    def replica_configs(self) -> Sequence['outputs.GetDcnDetailDcnDetailReplicaConfigResult']:
        return pulumi.get(self, "replica_configs")

    @property
    @pulumi.getter(name="replicaStatuses")
    def replica_statuses(self) -> Sequence['outputs.GetDcnDetailDcnDetailReplicaStatusResult']:
        return pulumi.get(self, "replica_statuses")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDesc")
    def status_desc(self) -> str:
        return pulumi.get(self, "status_desc")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def vip(self) -> str:
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter
    def vipv6(self) -> str:
        return pulumi.get(self, "vipv6")

    @property
    @pulumi.getter
    def vport(self) -> int:
        return pulumi.get(self, "vport")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetDcnDetailDcnDetailReplicaConfigResult(dict):
    def __init__(__self__, *,
                 delay_replication_type: str,
                 due_time: str,
                 replication_delay: int,
                 ro_replication_mode: str):
        pulumi.set(__self__, "delay_replication_type", delay_replication_type)
        pulumi.set(__self__, "due_time", due_time)
        pulumi.set(__self__, "replication_delay", replication_delay)
        pulumi.set(__self__, "ro_replication_mode", ro_replication_mode)

    @property
    @pulumi.getter(name="delayReplicationType")
    def delay_replication_type(self) -> str:
        return pulumi.get(self, "delay_replication_type")

    @property
    @pulumi.getter(name="dueTime")
    def due_time(self) -> str:
        return pulumi.get(self, "due_time")

    @property
    @pulumi.getter(name="replicationDelay")
    def replication_delay(self) -> int:
        return pulumi.get(self, "replication_delay")

    @property
    @pulumi.getter(name="roReplicationMode")
    def ro_replication_mode(self) -> str:
        return pulumi.get(self, "ro_replication_mode")


@pulumi.output_type
class GetDcnDetailDcnDetailReplicaStatusResult(dict):
    def __init__(__self__, *,
                 delay: int,
                 status: str):
        pulumi.set(__self__, "delay", delay)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def delay(self) -> int:
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetInstanceNodeInfoNodesInfoResult(dict):
    def __init__(__self__, *,
                 node_id: str,
                 role: str):
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")


@pulumi.output_type
class GetInstanceSpecsSpecResult(dict):
    def __init__(__self__, *,
                 machine: str,
                 spec_infos: Sequence['outputs.GetInstanceSpecsSpecSpecInfoResult']):
        pulumi.set(__self__, "machine", machine)
        pulumi.set(__self__, "spec_infos", spec_infos)

    @property
    @pulumi.getter
    def machine(self) -> str:
        return pulumi.get(self, "machine")

    @property
    @pulumi.getter(name="specInfos")
    def spec_infos(self) -> Sequence['outputs.GetInstanceSpecsSpecSpecInfoResult']:
        return pulumi.get(self, "spec_infos")


@pulumi.output_type
class GetInstanceSpecsSpecSpecInfoResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 machine: str,
                 max_storage: int,
                 memory: int,
                 min_storage: int,
                 node_count: int,
                 pid: int,
                 qps: int,
                 suit_info: str):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "machine", machine)
        pulumi.set(__self__, "max_storage", max_storage)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "min_storage", min_storage)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "pid", pid)
        pulumi.set(__self__, "qps", qps)
        pulumi.set(__self__, "suit_info", suit_info)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def machine(self) -> str:
        return pulumi.get(self, "machine")

    @property
    @pulumi.getter(name="maxStorage")
    def max_storage(self) -> int:
        return pulumi.get(self, "max_storage")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="minStorage")
    def min_storage(self) -> int:
        return pulumi.get(self, "min_storage")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter
    def pid(self) -> int:
        return pulumi.get(self, "pid")

    @property
    @pulumi.getter
    def qps(self) -> int:
        return pulumi.get(self, "qps")

    @property
    @pulumi.getter(name="suitInfo")
    def suit_info(self) -> str:
        return pulumi.get(self, "suit_info")


@pulumi.output_type
class GetLogFilesFileResult(dict):
    def __init__(__self__, *,
                 file_name: str,
                 length: int,
                 mtime: int,
                 uri: str):
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "mtime", mtime)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter
    def length(self) -> int:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def mtime(self) -> int:
        return pulumi.get(self, "mtime")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetOrdersDealResult(dict):
    def __init__(__self__, *,
                 count: int,
                 deal_name: str,
                 flow_id: int,
                 instance_ids: Sequence[str],
                 owner_uin: str,
                 pay_mode: int):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "deal_name", deal_name)
        pulumi.set(__self__, "flow_id", flow_id)
        pulumi.set(__self__, "instance_ids", instance_ids)
        pulumi.set(__self__, "owner_uin", owner_uin)
        pulumi.set(__self__, "pay_mode", pay_mode)

    @property
    @pulumi.getter
    def count(self) -> int:
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="dealName")
    def deal_name(self) -> str:
        return pulumi.get(self, "deal_name")

    @property
    @pulumi.getter(name="flowId")
    def flow_id(self) -> int:
        return pulumi.get(self, "flow_id")

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Sequence[str]:
        return pulumi.get(self, "instance_ids")

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> str:
        return pulumi.get(self, "owner_uin")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> int:
        return pulumi.get(self, "pay_mode")


@pulumi.output_type
class GetProjectSecurityGroupsGroupResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 inbounds: Sequence['outputs.GetProjectSecurityGroupsGroupInboundResult'],
                 outbounds: Sequence['outputs.GetProjectSecurityGroupsGroupOutboundResult'],
                 project_id: int,
                 security_group_id: str,
                 security_group_name: str,
                 security_group_remark: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "inbounds", inbounds)
        pulumi.set(__self__, "outbounds", outbounds)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)
        pulumi.set(__self__, "security_group_remark", security_group_remark)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def inbounds(self) -> Sequence['outputs.GetProjectSecurityGroupsGroupInboundResult']:
        return pulumi.get(self, "inbounds")

    @property
    @pulumi.getter
    def outbounds(self) -> Sequence['outputs.GetProjectSecurityGroupsGroupOutboundResult']:
        return pulumi.get(self, "outbounds")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        return pulumi.get(self, "security_group_name")

    @property
    @pulumi.getter(name="securityGroupRemark")
    def security_group_remark(self) -> str:
        return pulumi.get(self, "security_group_remark")


@pulumi.output_type
class GetProjectSecurityGroupsGroupInboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 ip_protocol: str,
                 port_range: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        return pulumi.get(self, "port_range")


@pulumi.output_type
class GetProjectSecurityGroupsGroupOutboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 ip_protocol: str,
                 port_range: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        return pulumi.get(self, "port_range")


@pulumi.output_type
class GetSaleInfoRegionListResult(dict):
    def __init__(__self__, *,
                 available_choices: Sequence['outputs.GetSaleInfoRegionListAvailableChoiceResult'],
                 region: str,
                 region_id: int,
                 region_name: str,
                 zone_lists: Sequence['outputs.GetSaleInfoRegionListZoneListResult']):
        pulumi.set(__self__, "available_choices", available_choices)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "zone_lists", zone_lists)

    @property
    @pulumi.getter(name="availableChoices")
    def available_choices(self) -> Sequence['outputs.GetSaleInfoRegionListAvailableChoiceResult']:
        return pulumi.get(self, "available_choices")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="zoneLists")
    def zone_lists(self) -> Sequence['outputs.GetSaleInfoRegionListZoneListResult']:
        return pulumi.get(self, "zone_lists")


@pulumi.output_type
class GetSaleInfoRegionListAvailableChoiceResult(dict):
    def __init__(__self__, *,
                 master_zones: Sequence['outputs.GetSaleInfoRegionListAvailableChoiceMasterZoneResult'],
                 slave_zones: Sequence['outputs.GetSaleInfoRegionListAvailableChoiceSlaveZoneResult']):
        pulumi.set(__self__, "master_zones", master_zones)
        pulumi.set(__self__, "slave_zones", slave_zones)

    @property
    @pulumi.getter(name="masterZones")
    def master_zones(self) -> Sequence['outputs.GetSaleInfoRegionListAvailableChoiceMasterZoneResult']:
        return pulumi.get(self, "master_zones")

    @property
    @pulumi.getter(name="slaveZones")
    def slave_zones(self) -> Sequence['outputs.GetSaleInfoRegionListAvailableChoiceSlaveZoneResult']:
        return pulumi.get(self, "slave_zones")


@pulumi.output_type
class GetSaleInfoRegionListAvailableChoiceMasterZoneResult(dict):
    def __init__(__self__, *,
                 on_sale: bool,
                 zone: str,
                 zone_id: int,
                 zone_name: str):
        pulumi.set(__self__, "on_sale", on_sale)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="onSale")
    def on_sale(self) -> bool:
        return pulumi.get(self, "on_sale")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        return pulumi.get(self, "zone_name")


@pulumi.output_type
class GetSaleInfoRegionListAvailableChoiceSlaveZoneResult(dict):
    def __init__(__self__, *,
                 on_sale: bool,
                 zone: str,
                 zone_id: int,
                 zone_name: str):
        pulumi.set(__self__, "on_sale", on_sale)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="onSale")
    def on_sale(self) -> bool:
        return pulumi.get(self, "on_sale")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        return pulumi.get(self, "zone_name")


@pulumi.output_type
class GetSaleInfoRegionListZoneListResult(dict):
    def __init__(__self__, *,
                 on_sale: bool,
                 zone: str,
                 zone_id: int,
                 zone_name: str):
        pulumi.set(__self__, "on_sale", on_sale)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="onSale")
    def on_sale(self) -> bool:
        return pulumi.get(self, "on_sale")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        return pulumi.get(self, "zone_name")


@pulumi.output_type
class GetSecurityGroupsListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 inbounds: Sequence['outputs.GetSecurityGroupsListInboundResult'],
                 outbounds: Sequence['outputs.GetSecurityGroupsListOutboundResult'],
                 project_id: int,
                 security_group_id: str,
                 security_group_name: str,
                 security_group_remark: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "inbounds", inbounds)
        pulumi.set(__self__, "outbounds", outbounds)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)
        pulumi.set(__self__, "security_group_remark", security_group_remark)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def inbounds(self) -> Sequence['outputs.GetSecurityGroupsListInboundResult']:
        return pulumi.get(self, "inbounds")

    @property
    @pulumi.getter
    def outbounds(self) -> Sequence['outputs.GetSecurityGroupsListOutboundResult']:
        return pulumi.get(self, "outbounds")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        return pulumi.get(self, "security_group_name")

    @property
    @pulumi.getter(name="securityGroupRemark")
    def security_group_remark(self) -> str:
        return pulumi.get(self, "security_group_remark")


@pulumi.output_type
class GetSecurityGroupsListInboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 ip_protocol: str,
                 port_range: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        return pulumi.get(self, "port_range")


@pulumi.output_type
class GetSecurityGroupsListOutboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 ip_protocol: str,
                 port_range: str):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        return pulumi.get(self, "port_range")


@pulumi.output_type
class GetSlowLogsDataResult(dict):
    def __init__(__self__, *,
                 check_sum: str,
                 db: str,
                 example_sql: str,
                 finger_print: str,
                 host: str,
                 lock_time_avg: str,
                 lock_time_max: str,
                 lock_time_min: str,
                 lock_time_sum: str,
                 query_count: str,
                 query_time_avg: str,
                 query_time_max: str,
                 query_time_min: str,
                 query_time_sum: str,
                 rows_examined_sum: str,
                 rows_sent_sum: str,
                 ts_max: str,
                 ts_min: str,
                 user: str):
        pulumi.set(__self__, "check_sum", check_sum)
        pulumi.set(__self__, "db", db)
        pulumi.set(__self__, "example_sql", example_sql)
        pulumi.set(__self__, "finger_print", finger_print)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "lock_time_avg", lock_time_avg)
        pulumi.set(__self__, "lock_time_max", lock_time_max)
        pulumi.set(__self__, "lock_time_min", lock_time_min)
        pulumi.set(__self__, "lock_time_sum", lock_time_sum)
        pulumi.set(__self__, "query_count", query_count)
        pulumi.set(__self__, "query_time_avg", query_time_avg)
        pulumi.set(__self__, "query_time_max", query_time_max)
        pulumi.set(__self__, "query_time_min", query_time_min)
        pulumi.set(__self__, "query_time_sum", query_time_sum)
        pulumi.set(__self__, "rows_examined_sum", rows_examined_sum)
        pulumi.set(__self__, "rows_sent_sum", rows_sent_sum)
        pulumi.set(__self__, "ts_max", ts_max)
        pulumi.set(__self__, "ts_min", ts_min)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="checkSum")
    def check_sum(self) -> str:
        return pulumi.get(self, "check_sum")

    @property
    @pulumi.getter
    def db(self) -> str:
        return pulumi.get(self, "db")

    @property
    @pulumi.getter(name="exampleSql")
    def example_sql(self) -> str:
        return pulumi.get(self, "example_sql")

    @property
    @pulumi.getter(name="fingerPrint")
    def finger_print(self) -> str:
        return pulumi.get(self, "finger_print")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="lockTimeAvg")
    def lock_time_avg(self) -> str:
        return pulumi.get(self, "lock_time_avg")

    @property
    @pulumi.getter(name="lockTimeMax")
    def lock_time_max(self) -> str:
        return pulumi.get(self, "lock_time_max")

    @property
    @pulumi.getter(name="lockTimeMin")
    def lock_time_min(self) -> str:
        return pulumi.get(self, "lock_time_min")

    @property
    @pulumi.getter(name="lockTimeSum")
    def lock_time_sum(self) -> str:
        return pulumi.get(self, "lock_time_sum")

    @property
    @pulumi.getter(name="queryCount")
    def query_count(self) -> str:
        return pulumi.get(self, "query_count")

    @property
    @pulumi.getter(name="queryTimeAvg")
    def query_time_avg(self) -> str:
        return pulumi.get(self, "query_time_avg")

    @property
    @pulumi.getter(name="queryTimeMax")
    def query_time_max(self) -> str:
        return pulumi.get(self, "query_time_max")

    @property
    @pulumi.getter(name="queryTimeMin")
    def query_time_min(self) -> str:
        return pulumi.get(self, "query_time_min")

    @property
    @pulumi.getter(name="queryTimeSum")
    def query_time_sum(self) -> str:
        return pulumi.get(self, "query_time_sum")

    @property
    @pulumi.getter(name="rowsExaminedSum")
    def rows_examined_sum(self) -> str:
        return pulumi.get(self, "rows_examined_sum")

    @property
    @pulumi.getter(name="rowsSentSum")
    def rows_sent_sum(self) -> str:
        return pulumi.get(self, "rows_sent_sum")

    @property
    @pulumi.getter(name="tsMax")
    def ts_max(self) -> str:
        return pulumi.get(self, "ts_max")

    @property
    @pulumi.getter(name="tsMin")
    def ts_min(self) -> str:
        return pulumi.get(self, "ts_min")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


