# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'InstancesAcceptAttachInstance',
    'InstancesRejectAttachInstance',
    'InstancesResetAttachInstance',
    'GetBandwidthLimitsLimitResult',
    'GetCrossBorderFlowMonitorCrossBorderFlowMonitorDataResult',
    'GetCrossBorderRegionBandwidthLimitsCcnBandwidthSetResult',
    'GetCrossBorderRegionBandwidthLimitsCcnBandwidthSetCcnRegionBandwidthLimitResult',
    'GetCrossBorderRegionBandwidthLimitsFilterResult',
    'GetInstancesInstanceListResult',
    'GetInstancesInstanceListAttachmentListResult',
]

@pulumi.output_type
class InstancesAcceptAttachInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "instanceRegion":
            suggest = "instance_region"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "routeTableId":
            suggest = "route_table_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancesAcceptAttachInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancesAcceptAttachInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancesAcceptAttachInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: str,
                 instance_region: str,
                 description: Optional[str] = None,
                 instance_type: Optional[str] = None,
                 route_table_id: Optional[str] = None):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_region", instance_region)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceRegion")
    def instance_region(self) -> str:
        return pulumi.get(self, "instance_region")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[str]:
        return pulumi.get(self, "route_table_id")


@pulumi.output_type
class InstancesRejectAttachInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "instanceRegion":
            suggest = "instance_region"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "routeTableId":
            suggest = "route_table_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancesRejectAttachInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancesRejectAttachInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancesRejectAttachInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: str,
                 instance_region: str,
                 description: Optional[str] = None,
                 instance_type: Optional[str] = None,
                 route_table_id: Optional[str] = None):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_region", instance_region)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceRegion")
    def instance_region(self) -> str:
        return pulumi.get(self, "instance_region")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[str]:
        return pulumi.get(self, "route_table_id")


@pulumi.output_type
class InstancesResetAttachInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "instanceRegion":
            suggest = "instance_region"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "routeTableId":
            suggest = "route_table_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstancesResetAttachInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstancesResetAttachInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstancesResetAttachInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: str,
                 instance_region: str,
                 description: Optional[str] = None,
                 instance_type: Optional[str] = None,
                 route_table_id: Optional[str] = None):
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_region", instance_region)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceRegion")
    def instance_region(self) -> str:
        return pulumi.get(self, "instance_region")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[str]:
        return pulumi.get(self, "route_table_id")


@pulumi.output_type
class GetBandwidthLimitsLimitResult(dict):
    def __init__(__self__, *,
                 bandwidth_limit: int,
                 dst_region: str,
                 region: str):
        pulumi.set(__self__, "bandwidth_limit", bandwidth_limit)
        pulumi.set(__self__, "dst_region", dst_region)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="bandwidthLimit")
    def bandwidth_limit(self) -> int:
        return pulumi.get(self, "bandwidth_limit")

    @property
    @pulumi.getter(name="dstRegion")
    def dst_region(self) -> str:
        return pulumi.get(self, "dst_region")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetCrossBorderFlowMonitorCrossBorderFlowMonitorDataResult(dict):
    def __init__(__self__, *,
                 in_bandwidths: Sequence[int],
                 in_pkgs: Sequence[int],
                 out_bandwidths: Sequence[int],
                 out_pkgs: Sequence[int]):
        pulumi.set(__self__, "in_bandwidths", in_bandwidths)
        pulumi.set(__self__, "in_pkgs", in_pkgs)
        pulumi.set(__self__, "out_bandwidths", out_bandwidths)
        pulumi.set(__self__, "out_pkgs", out_pkgs)

    @property
    @pulumi.getter(name="inBandwidths")
    def in_bandwidths(self) -> Sequence[int]:
        return pulumi.get(self, "in_bandwidths")

    @property
    @pulumi.getter(name="inPkgs")
    def in_pkgs(self) -> Sequence[int]:
        return pulumi.get(self, "in_pkgs")

    @property
    @pulumi.getter(name="outBandwidths")
    def out_bandwidths(self) -> Sequence[int]:
        return pulumi.get(self, "out_bandwidths")

    @property
    @pulumi.getter(name="outPkgs")
    def out_pkgs(self) -> Sequence[int]:
        return pulumi.get(self, "out_pkgs")


@pulumi.output_type
class GetCrossBorderRegionBandwidthLimitsCcnBandwidthSetResult(dict):
    def __init__(__self__, *,
                 ccn_id: str,
                 ccn_region_bandwidth_limits: Sequence['outputs.GetCrossBorderRegionBandwidthLimitsCcnBandwidthSetCcnRegionBandwidthLimitResult'],
                 created_time: str,
                 expired_time: str,
                 instance_charge_type: str,
                 is_cross_border: bool,
                 is_security_lock: bool,
                 market_id: str,
                 region_flow_control_id: str,
                 renew_flag: str,
                 update_time: str,
                 user_account_id: str):
        pulumi.set(__self__, "ccn_id", ccn_id)
        pulumi.set(__self__, "ccn_region_bandwidth_limits", ccn_region_bandwidth_limits)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "expired_time", expired_time)
        pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        pulumi.set(__self__, "is_cross_border", is_cross_border)
        pulumi.set(__self__, "is_security_lock", is_security_lock)
        pulumi.set(__self__, "market_id", market_id)
        pulumi.set(__self__, "region_flow_control_id", region_flow_control_id)
        pulumi.set(__self__, "renew_flag", renew_flag)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "user_account_id", user_account_id)

    @property
    @pulumi.getter(name="ccnId")
    def ccn_id(self) -> str:
        return pulumi.get(self, "ccn_id")

    @property
    @pulumi.getter(name="ccnRegionBandwidthLimits")
    def ccn_region_bandwidth_limits(self) -> Sequence['outputs.GetCrossBorderRegionBandwidthLimitsCcnBandwidthSetCcnRegionBandwidthLimitResult']:
        return pulumi.get(self, "ccn_region_bandwidth_limits")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> str:
        return pulumi.get(self, "expired_time")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> str:
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter(name="isCrossBorder")
    def is_cross_border(self) -> bool:
        return pulumi.get(self, "is_cross_border")

    @property
    @pulumi.getter(name="isSecurityLock")
    def is_security_lock(self) -> bool:
        return pulumi.get(self, "is_security_lock")

    @property
    @pulumi.getter(name="marketId")
    def market_id(self) -> str:
        return pulumi.get(self, "market_id")

    @property
    @pulumi.getter(name="regionFlowControlId")
    def region_flow_control_id(self) -> str:
        return pulumi.get(self, "region_flow_control_id")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> str:
        return pulumi.get(self, "renew_flag")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="userAccountId")
    def user_account_id(self) -> str:
        return pulumi.get(self, "user_account_id")


@pulumi.output_type
class GetCrossBorderRegionBandwidthLimitsCcnBandwidthSetCcnRegionBandwidthLimitResult(dict):
    def __init__(__self__, *,
                 bandwidth_limit: int,
                 destination_region: str,
                 source_region: str):
        pulumi.set(__self__, "bandwidth_limit", bandwidth_limit)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "source_region", source_region)

    @property
    @pulumi.getter(name="bandwidthLimit")
    def bandwidth_limit(self) -> int:
        return pulumi.get(self, "bandwidth_limit")

    @property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> str:
        return pulumi.get(self, "destination_region")

    @property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> str:
        return pulumi.get(self, "source_region")


@pulumi.output_type
class GetCrossBorderRegionBandwidthLimitsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetInstancesInstanceListResult(dict):
    def __init__(__self__, *,
                 attachment_lists: Sequence['outputs.GetInstancesInstanceListAttachmentListResult'],
                 bandwidth_limit_type: str,
                 ccn_id: str,
                 charge_type: str,
                 create_time: str,
                 description: str,
                 name: str,
                 qos: str,
                 state: str):
        pulumi.set(__self__, "attachment_lists", attachment_lists)
        pulumi.set(__self__, "bandwidth_limit_type", bandwidth_limit_type)
        pulumi.set(__self__, "ccn_id", ccn_id)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "qos", qos)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="attachmentLists")
    def attachment_lists(self) -> Sequence['outputs.GetInstancesInstanceListAttachmentListResult']:
        return pulumi.get(self, "attachment_lists")

    @property
    @pulumi.getter(name="bandwidthLimitType")
    def bandwidth_limit_type(self) -> str:
        return pulumi.get(self, "bandwidth_limit_type")

    @property
    @pulumi.getter(name="ccnId")
    def ccn_id(self) -> str:
        return pulumi.get(self, "ccn_id")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def qos(self) -> str:
        return pulumi.get(self, "qos")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetInstancesInstanceListAttachmentListResult(dict):
    def __init__(__self__, *,
                 attached_time: str,
                 cidr_blocks: Sequence[str],
                 instance_id: str,
                 instance_region: str,
                 instance_type: str,
                 state: str):
        pulumi.set(__self__, "attached_time", attached_time)
        pulumi.set(__self__, "cidr_blocks", cidr_blocks)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_region", instance_region)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="attachedTime")
    def attached_time(self) -> str:
        return pulumi.get(self, "attached_time")

    @property
    @pulumi.getter(name="cidrBlocks")
    def cidr_blocks(self) -> Sequence[str]:
        return pulumi.get(self, "cidr_blocks")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceRegion")
    def instance_region(self) -> str:
        return pulumi.get(self, "instance_region")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


