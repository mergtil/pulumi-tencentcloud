# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ChcConfigBmcVirtualPrivateCloud',
    'ChcConfigDeployVirtualPrivateCloud',
    'ImportImageTagSpecification',
    'ImportImageTagSpecificationTag',
    'LaunchTemplateActionTimer',
    'LaunchTemplateActionTimerExternals',
    'LaunchTemplateActionTimerExternalsStorageBlockAttr',
    'LaunchTemplateDataDisk',
    'LaunchTemplateEnhancedService',
    'LaunchTemplateEnhancedServiceAutomationService',
    'LaunchTemplateEnhancedServiceMonitorService',
    'LaunchTemplateEnhancedServiceSecurityService',
    'LaunchTemplateInstanceChargePrepaid',
    'LaunchTemplateInstanceMarketOptions',
    'LaunchTemplateInstanceMarketOptionsSpotOptions',
    'LaunchTemplateInternetAccessible',
    'LaunchTemplateLoginSettings',
    'LaunchTemplatePlacement',
    'LaunchTemplateSystemDisk',
    'LaunchTemplateTagSpecification',
    'LaunchTemplateTagSpecificationTag',
    'LaunchTemplateVersionActionTimer',
    'LaunchTemplateVersionActionTimerExternals',
    'LaunchTemplateVersionActionTimerExternalsStorageBlockAttr',
    'LaunchTemplateVersionDataDisk',
    'LaunchTemplateVersionEnhancedService',
    'LaunchTemplateVersionEnhancedServiceAutomationService',
    'LaunchTemplateVersionEnhancedServiceMonitorService',
    'LaunchTemplateVersionEnhancedServiceSecurityService',
    'LaunchTemplateVersionInstanceChargePrepaid',
    'LaunchTemplateVersionInstanceMarketOptions',
    'LaunchTemplateVersionInstanceMarketOptionsSpotOptions',
    'LaunchTemplateVersionInternetAccessible',
    'LaunchTemplateVersionLoginSettings',
    'LaunchTemplateVersionPlacement',
    'LaunchTemplateVersionSystemDisk',
    'LaunchTemplateVersionTagSpecification',
    'LaunchTemplateVersionTagSpecificationTag',
    'LaunchTemplateVersionVirtualPrivateCloud',
    'LaunchTemplateVirtualPrivateCloud',
    'ModifyInstanceDiskTypeDataDisk',
    'ModifyInstanceDiskTypeSystemDisk',
    'RenewHostHostChargePrepaid',
    'RenewInstanceInstanceChargePrepaid',
    'GetChcDeniedActionsChcHostDeniedActionSetResult',
    'GetChcHostsChcHostSetResult',
    'GetChcHostsChcHostSetBmcVirtualPrivateCloudResult',
    'GetChcHostsChcHostSetDeployVirtualPrivateCloudResult',
    'GetChcHostsChcHostSetPlacementResult',
    'GetChcHostsFilterResult',
    'GetImageSharePermissionSharePermissionSetResult',
    'GetImportImageOsImportImageOsListSupportedResult',
    'GetImportImageOsImportImageOsVersionSetResult',
    'GetInstancesModificationFilterResult',
    'GetInstancesModificationInstanceTypeConfigStatusListResult',
    'GetInstancesModificationInstanceTypeConfigStatusListInstanceTypeConfigResult',
]

@pulumi.output_type
class ChcConfigBmcVirtualPrivateCloud(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcId":
            suggest = "vpc_id"
        elif key == "asVpcGateway":
            suggest = "as_vpc_gateway"
        elif key == "ipv6AddressCount":
            suggest = "ipv6_address_count"
        elif key == "privateIpAddresses":
            suggest = "private_ip_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChcConfigBmcVirtualPrivateCloud. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChcConfigBmcVirtualPrivateCloud.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChcConfigBmcVirtualPrivateCloud.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 vpc_id: str,
                 as_vpc_gateway: Optional[bool] = None,
                 ipv6_address_count: Optional[int] = None,
                 private_ip_addresses: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if as_vpc_gateway is not None:
            pulumi.set(__self__, "as_vpc_gateway", as_vpc_gateway)
        if ipv6_address_count is not None:
            pulumi.set(__self__, "ipv6_address_count", ipv6_address_count)
        if private_ip_addresses is not None:
            pulumi.set(__self__, "private_ip_addresses", private_ip_addresses)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="asVpcGateway")
    def as_vpc_gateway(self) -> Optional[bool]:
        return pulumi.get(self, "as_vpc_gateway")

    @property
    @pulumi.getter(name="ipv6AddressCount")
    def ipv6_address_count(self) -> Optional[int]:
        return pulumi.get(self, "ipv6_address_count")

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "private_ip_addresses")


@pulumi.output_type
class ChcConfigDeployVirtualPrivateCloud(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcId":
            suggest = "vpc_id"
        elif key == "asVpcGateway":
            suggest = "as_vpc_gateway"
        elif key == "ipv6AddressCount":
            suggest = "ipv6_address_count"
        elif key == "privateIpAddresses":
            suggest = "private_ip_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChcConfigDeployVirtualPrivateCloud. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChcConfigDeployVirtualPrivateCloud.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChcConfigDeployVirtualPrivateCloud.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 vpc_id: str,
                 as_vpc_gateway: Optional[bool] = None,
                 ipv6_address_count: Optional[int] = None,
                 private_ip_addresses: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if as_vpc_gateway is not None:
            pulumi.set(__self__, "as_vpc_gateway", as_vpc_gateway)
        if ipv6_address_count is not None:
            pulumi.set(__self__, "ipv6_address_count", ipv6_address_count)
        if private_ip_addresses is not None:
            pulumi.set(__self__, "private_ip_addresses", private_ip_addresses)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="asVpcGateway")
    def as_vpc_gateway(self) -> Optional[bool]:
        return pulumi.get(self, "as_vpc_gateway")

    @property
    @pulumi.getter(name="ipv6AddressCount")
    def ipv6_address_count(self) -> Optional[int]:
        return pulumi.get(self, "ipv6_address_count")

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "private_ip_addresses")


@pulumi.output_type
class ImportImageTagSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImportImageTagSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImportImageTagSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImportImageTagSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: str,
                 tags: Sequence['outputs.ImportImageTagSpecificationTag']):
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.ImportImageTagSpecificationTag']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class ImportImageTagSpecificationTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class LaunchTemplateActionTimer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionTime":
            suggest = "action_time"
        elif key == "timerAction":
            suggest = "timer_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateActionTimer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateActionTimer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateActionTimer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_time: Optional[str] = None,
                 externals: Optional['outputs.LaunchTemplateActionTimerExternals'] = None,
                 timer_action: Optional[str] = None):
        if action_time is not None:
            pulumi.set(__self__, "action_time", action_time)
        if externals is not None:
            pulumi.set(__self__, "externals", externals)
        if timer_action is not None:
            pulumi.set(__self__, "timer_action", timer_action)

    @property
    @pulumi.getter(name="actionTime")
    def action_time(self) -> Optional[str]:
        return pulumi.get(self, "action_time")

    @property
    @pulumi.getter
    def externals(self) -> Optional['outputs.LaunchTemplateActionTimerExternals']:
        return pulumi.get(self, "externals")

    @property
    @pulumi.getter(name="timerAction")
    def timer_action(self) -> Optional[str]:
        return pulumi.get(self, "timer_action")


@pulumi.output_type
class LaunchTemplateActionTimerExternals(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "releaseAddress":
            suggest = "release_address"
        elif key == "storageBlockAttr":
            suggest = "storage_block_attr"
        elif key == "unsupportNetworks":
            suggest = "unsupport_networks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateActionTimerExternals. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateActionTimerExternals.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateActionTimerExternals.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 release_address: Optional[bool] = None,
                 storage_block_attr: Optional['outputs.LaunchTemplateActionTimerExternalsStorageBlockAttr'] = None,
                 unsupport_networks: Optional[Sequence[str]] = None):
        if release_address is not None:
            pulumi.set(__self__, "release_address", release_address)
        if storage_block_attr is not None:
            pulumi.set(__self__, "storage_block_attr", storage_block_attr)
        if unsupport_networks is not None:
            pulumi.set(__self__, "unsupport_networks", unsupport_networks)

    @property
    @pulumi.getter(name="releaseAddress")
    def release_address(self) -> Optional[bool]:
        return pulumi.get(self, "release_address")

    @property
    @pulumi.getter(name="storageBlockAttr")
    def storage_block_attr(self) -> Optional['outputs.LaunchTemplateActionTimerExternalsStorageBlockAttr']:
        return pulumi.get(self, "storage_block_attr")

    @property
    @pulumi.getter(name="unsupportNetworks")
    def unsupport_networks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "unsupport_networks")


@pulumi.output_type
class LaunchTemplateActionTimerExternalsStorageBlockAttr(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxSize":
            suggest = "max_size"
        elif key == "minSize":
            suggest = "min_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateActionTimerExternalsStorageBlockAttr. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateActionTimerExternalsStorageBlockAttr.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateActionTimerExternalsStorageBlockAttr.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_size: int,
                 min_size: int,
                 type: str):
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> int:
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> int:
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class LaunchTemplateDataDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "cdcId":
            suggest = "cdc_id"
        elif key == "deleteWithInstance":
            suggest = "delete_with_instance"
        elif key == "diskId":
            suggest = "disk_id"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "snapshotId":
            suggest = "snapshot_id"
        elif key == "throughputPerformance":
            suggest = "throughput_performance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateDataDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateDataDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateDataDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: int,
                 cdc_id: Optional[str] = None,
                 delete_with_instance: Optional[bool] = None,
                 disk_id: Optional[str] = None,
                 disk_type: Optional[str] = None,
                 encrypt: Optional[bool] = None,
                 kms_key_id: Optional[str] = None,
                 snapshot_id: Optional[str] = None,
                 throughput_performance: Optional[int] = None):
        pulumi.set(__self__, "disk_size", disk_size)
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if delete_with_instance is not None:
            pulumi.set(__self__, "delete_with_instance", delete_with_instance)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if throughput_performance is not None:
            pulumi.set(__self__, "throughput_performance", throughput_performance)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[str]:
        return pulumi.get(self, "cdc_id")

    @property
    @pulumi.getter(name="deleteWithInstance")
    def delete_with_instance(self) -> Optional[bool]:
        return pulumi.get(self, "delete_with_instance")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[str]:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[bool]:
        return pulumi.get(self, "encrypt")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="throughputPerformance")
    def throughput_performance(self) -> Optional[int]:
        return pulumi.get(self, "throughput_performance")


@pulumi.output_type
class LaunchTemplateEnhancedService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "automationService":
            suggest = "automation_service"
        elif key == "monitorService":
            suggest = "monitor_service"
        elif key == "securityService":
            suggest = "security_service"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateEnhancedService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateEnhancedService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateEnhancedService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automation_service: Optional['outputs.LaunchTemplateEnhancedServiceAutomationService'] = None,
                 monitor_service: Optional['outputs.LaunchTemplateEnhancedServiceMonitorService'] = None,
                 security_service: Optional['outputs.LaunchTemplateEnhancedServiceSecurityService'] = None):
        if automation_service is not None:
            pulumi.set(__self__, "automation_service", automation_service)
        if monitor_service is not None:
            pulumi.set(__self__, "monitor_service", monitor_service)
        if security_service is not None:
            pulumi.set(__self__, "security_service", security_service)

    @property
    @pulumi.getter(name="automationService")
    def automation_service(self) -> Optional['outputs.LaunchTemplateEnhancedServiceAutomationService']:
        return pulumi.get(self, "automation_service")

    @property
    @pulumi.getter(name="monitorService")
    def monitor_service(self) -> Optional['outputs.LaunchTemplateEnhancedServiceMonitorService']:
        return pulumi.get(self, "monitor_service")

    @property
    @pulumi.getter(name="securityService")
    def security_service(self) -> Optional['outputs.LaunchTemplateEnhancedServiceSecurityService']:
        return pulumi.get(self, "security_service")


@pulumi.output_type
class LaunchTemplateEnhancedServiceAutomationService(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class LaunchTemplateEnhancedServiceMonitorService(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class LaunchTemplateEnhancedServiceSecurityService(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class LaunchTemplateInstanceChargePrepaid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "renewFlag":
            suggest = "renew_flag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateInstanceChargePrepaid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateInstanceChargePrepaid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateInstanceChargePrepaid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 period: int,
                 renew_flag: Optional[str] = None):
        pulumi.set(__self__, "period", period)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[str]:
        return pulumi.get(self, "renew_flag")


@pulumi.output_type
class LaunchTemplateInstanceMarketOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "spotOptions":
            suggest = "spot_options"
        elif key == "marketType":
            suggest = "market_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateInstanceMarketOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateInstanceMarketOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateInstanceMarketOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 spot_options: 'outputs.LaunchTemplateInstanceMarketOptionsSpotOptions',
                 market_type: Optional[str] = None):
        pulumi.set(__self__, "spot_options", spot_options)
        if market_type is not None:
            pulumi.set(__self__, "market_type", market_type)

    @property
    @pulumi.getter(name="spotOptions")
    def spot_options(self) -> 'outputs.LaunchTemplateInstanceMarketOptionsSpotOptions':
        return pulumi.get(self, "spot_options")

    @property
    @pulumi.getter(name="marketType")
    def market_type(self) -> Optional[str]:
        return pulumi.get(self, "market_type")


@pulumi.output_type
class LaunchTemplateInstanceMarketOptionsSpotOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxPrice":
            suggest = "max_price"
        elif key == "spotInstanceType":
            suggest = "spot_instance_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateInstanceMarketOptionsSpotOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateInstanceMarketOptionsSpotOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateInstanceMarketOptionsSpotOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_price: str,
                 spot_instance_type: Optional[str] = None):
        pulumi.set(__self__, "max_price", max_price)
        if spot_instance_type is not None:
            pulumi.set(__self__, "spot_instance_type", spot_instance_type)

    @property
    @pulumi.getter(name="maxPrice")
    def max_price(self) -> str:
        return pulumi.get(self, "max_price")

    @property
    @pulumi.getter(name="spotInstanceType")
    def spot_instance_type(self) -> Optional[str]:
        return pulumi.get(self, "spot_instance_type")


@pulumi.output_type
class LaunchTemplateInternetAccessible(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthPackageId":
            suggest = "bandwidth_package_id"
        elif key == "internetChargeType":
            suggest = "internet_charge_type"
        elif key == "internetMaxBandwidthOut":
            suggest = "internet_max_bandwidth_out"
        elif key == "publicIpAssigned":
            suggest = "public_ip_assigned"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateInternetAccessible. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateInternetAccessible.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateInternetAccessible.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_package_id: Optional[str] = None,
                 internet_charge_type: Optional[str] = None,
                 internet_max_bandwidth_out: Optional[int] = None,
                 public_ip_assigned: Optional[bool] = None):
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[str]:
        return pulumi.get(self, "bandwidth_package_id")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[str]:
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[int]:
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[bool]:
        return pulumi.get(self, "public_ip_assigned")


@pulumi.output_type
class LaunchTemplateLoginSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keepImageLogin":
            suggest = "keep_image_login"
        elif key == "keyIds":
            suggest = "key_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateLoginSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateLoginSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateLoginSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keep_image_login: Optional[str] = None,
                 key_ids: Optional[Sequence[str]] = None,
                 password: Optional[str] = None):
        if keep_image_login is not None:
            pulumi.set(__self__, "keep_image_login", keep_image_login)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="keepImageLogin")
    def keep_image_login(self) -> Optional[str]:
        return pulumi.get(self, "keep_image_login")

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_ids")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")


@pulumi.output_type
class LaunchTemplatePlacement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostIds":
            suggest = "host_ids"
        elif key == "hostIps":
            suggest = "host_ips"
        elif key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplatePlacement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplatePlacement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplatePlacement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 zone: str,
                 host_ids: Optional[Sequence[str]] = None,
                 host_ips: Optional[Sequence[str]] = None,
                 project_id: Optional[int] = None):
        pulumi.set(__self__, "zone", zone)
        if host_ids is not None:
            pulumi.set(__self__, "host_ids", host_ids)
        if host_ips is not None:
            pulumi.set(__self__, "host_ips", host_ips)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="hostIds")
    def host_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "host_ids")

    @property
    @pulumi.getter(name="hostIps")
    def host_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "host_ips")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        return pulumi.get(self, "project_id")


@pulumi.output_type
class LaunchTemplateSystemDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cdcId":
            suggest = "cdc_id"
        elif key == "diskId":
            suggest = "disk_id"
        elif key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateSystemDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateSystemDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateSystemDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cdc_id: Optional[str] = None,
                 disk_id: Optional[str] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None):
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[str]:
        return pulumi.get(self, "cdc_id")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[str]:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        return pulumi.get(self, "disk_type")


@pulumi.output_type
class LaunchTemplateTagSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateTagSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateTagSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateTagSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: str,
                 tags: Sequence['outputs.LaunchTemplateTagSpecificationTag']):
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.LaunchTemplateTagSpecificationTag']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class LaunchTemplateTagSpecificationTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class LaunchTemplateVersionActionTimer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionTime":
            suggest = "action_time"
        elif key == "timerAction":
            suggest = "timer_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateVersionActionTimer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateVersionActionTimer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateVersionActionTimer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_time: Optional[str] = None,
                 externals: Optional['outputs.LaunchTemplateVersionActionTimerExternals'] = None,
                 timer_action: Optional[str] = None):
        if action_time is not None:
            pulumi.set(__self__, "action_time", action_time)
        if externals is not None:
            pulumi.set(__self__, "externals", externals)
        if timer_action is not None:
            pulumi.set(__self__, "timer_action", timer_action)

    @property
    @pulumi.getter(name="actionTime")
    def action_time(self) -> Optional[str]:
        return pulumi.get(self, "action_time")

    @property
    @pulumi.getter
    def externals(self) -> Optional['outputs.LaunchTemplateVersionActionTimerExternals']:
        return pulumi.get(self, "externals")

    @property
    @pulumi.getter(name="timerAction")
    def timer_action(self) -> Optional[str]:
        return pulumi.get(self, "timer_action")


@pulumi.output_type
class LaunchTemplateVersionActionTimerExternals(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "releaseAddress":
            suggest = "release_address"
        elif key == "storageBlockAttr":
            suggest = "storage_block_attr"
        elif key == "unsupportNetworks":
            suggest = "unsupport_networks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateVersionActionTimerExternals. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateVersionActionTimerExternals.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateVersionActionTimerExternals.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 release_address: Optional[bool] = None,
                 storage_block_attr: Optional['outputs.LaunchTemplateVersionActionTimerExternalsStorageBlockAttr'] = None,
                 unsupport_networks: Optional[Sequence[str]] = None):
        if release_address is not None:
            pulumi.set(__self__, "release_address", release_address)
        if storage_block_attr is not None:
            pulumi.set(__self__, "storage_block_attr", storage_block_attr)
        if unsupport_networks is not None:
            pulumi.set(__self__, "unsupport_networks", unsupport_networks)

    @property
    @pulumi.getter(name="releaseAddress")
    def release_address(self) -> Optional[bool]:
        return pulumi.get(self, "release_address")

    @property
    @pulumi.getter(name="storageBlockAttr")
    def storage_block_attr(self) -> Optional['outputs.LaunchTemplateVersionActionTimerExternalsStorageBlockAttr']:
        return pulumi.get(self, "storage_block_attr")

    @property
    @pulumi.getter(name="unsupportNetworks")
    def unsupport_networks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "unsupport_networks")


@pulumi.output_type
class LaunchTemplateVersionActionTimerExternalsStorageBlockAttr(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxSize":
            suggest = "max_size"
        elif key == "minSize":
            suggest = "min_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateVersionActionTimerExternalsStorageBlockAttr. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateVersionActionTimerExternalsStorageBlockAttr.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateVersionActionTimerExternalsStorageBlockAttr.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_size: int,
                 min_size: int,
                 type: str):
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> int:
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> int:
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class LaunchTemplateVersionDataDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "cdcId":
            suggest = "cdc_id"
        elif key == "deleteWithInstance":
            suggest = "delete_with_instance"
        elif key == "diskId":
            suggest = "disk_id"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "snapshotId":
            suggest = "snapshot_id"
        elif key == "throughputPerformance":
            suggest = "throughput_performance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateVersionDataDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateVersionDataDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateVersionDataDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: int,
                 cdc_id: Optional[str] = None,
                 delete_with_instance: Optional[bool] = None,
                 disk_id: Optional[str] = None,
                 disk_type: Optional[str] = None,
                 encrypt: Optional[bool] = None,
                 kms_key_id: Optional[str] = None,
                 snapshot_id: Optional[str] = None,
                 throughput_performance: Optional[int] = None):
        pulumi.set(__self__, "disk_size", disk_size)
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if delete_with_instance is not None:
            pulumi.set(__self__, "delete_with_instance", delete_with_instance)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if throughput_performance is not None:
            pulumi.set(__self__, "throughput_performance", throughput_performance)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[str]:
        return pulumi.get(self, "cdc_id")

    @property
    @pulumi.getter(name="deleteWithInstance")
    def delete_with_instance(self) -> Optional[bool]:
        return pulumi.get(self, "delete_with_instance")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[str]:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[bool]:
        return pulumi.get(self, "encrypt")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="throughputPerformance")
    def throughput_performance(self) -> Optional[int]:
        return pulumi.get(self, "throughput_performance")


@pulumi.output_type
class LaunchTemplateVersionEnhancedService(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "automationService":
            suggest = "automation_service"
        elif key == "monitorService":
            suggest = "monitor_service"
        elif key == "securityService":
            suggest = "security_service"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateVersionEnhancedService. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateVersionEnhancedService.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateVersionEnhancedService.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 automation_service: Optional['outputs.LaunchTemplateVersionEnhancedServiceAutomationService'] = None,
                 monitor_service: Optional['outputs.LaunchTemplateVersionEnhancedServiceMonitorService'] = None,
                 security_service: Optional['outputs.LaunchTemplateVersionEnhancedServiceSecurityService'] = None):
        if automation_service is not None:
            pulumi.set(__self__, "automation_service", automation_service)
        if monitor_service is not None:
            pulumi.set(__self__, "monitor_service", monitor_service)
        if security_service is not None:
            pulumi.set(__self__, "security_service", security_service)

    @property
    @pulumi.getter(name="automationService")
    def automation_service(self) -> Optional['outputs.LaunchTemplateVersionEnhancedServiceAutomationService']:
        return pulumi.get(self, "automation_service")

    @property
    @pulumi.getter(name="monitorService")
    def monitor_service(self) -> Optional['outputs.LaunchTemplateVersionEnhancedServiceMonitorService']:
        return pulumi.get(self, "monitor_service")

    @property
    @pulumi.getter(name="securityService")
    def security_service(self) -> Optional['outputs.LaunchTemplateVersionEnhancedServiceSecurityService']:
        return pulumi.get(self, "security_service")


@pulumi.output_type
class LaunchTemplateVersionEnhancedServiceAutomationService(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class LaunchTemplateVersionEnhancedServiceMonitorService(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class LaunchTemplateVersionEnhancedServiceSecurityService(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class LaunchTemplateVersionInstanceChargePrepaid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "renewFlag":
            suggest = "renew_flag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateVersionInstanceChargePrepaid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateVersionInstanceChargePrepaid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateVersionInstanceChargePrepaid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 period: int,
                 renew_flag: Optional[str] = None):
        pulumi.set(__self__, "period", period)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[str]:
        return pulumi.get(self, "renew_flag")


@pulumi.output_type
class LaunchTemplateVersionInstanceMarketOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "spotOptions":
            suggest = "spot_options"
        elif key == "marketType":
            suggest = "market_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateVersionInstanceMarketOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateVersionInstanceMarketOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateVersionInstanceMarketOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 spot_options: 'outputs.LaunchTemplateVersionInstanceMarketOptionsSpotOptions',
                 market_type: Optional[str] = None):
        pulumi.set(__self__, "spot_options", spot_options)
        if market_type is not None:
            pulumi.set(__self__, "market_type", market_type)

    @property
    @pulumi.getter(name="spotOptions")
    def spot_options(self) -> 'outputs.LaunchTemplateVersionInstanceMarketOptionsSpotOptions':
        return pulumi.get(self, "spot_options")

    @property
    @pulumi.getter(name="marketType")
    def market_type(self) -> Optional[str]:
        return pulumi.get(self, "market_type")


@pulumi.output_type
class LaunchTemplateVersionInstanceMarketOptionsSpotOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxPrice":
            suggest = "max_price"
        elif key == "spotInstanceType":
            suggest = "spot_instance_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateVersionInstanceMarketOptionsSpotOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateVersionInstanceMarketOptionsSpotOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateVersionInstanceMarketOptionsSpotOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_price: str,
                 spot_instance_type: Optional[str] = None):
        pulumi.set(__self__, "max_price", max_price)
        if spot_instance_type is not None:
            pulumi.set(__self__, "spot_instance_type", spot_instance_type)

    @property
    @pulumi.getter(name="maxPrice")
    def max_price(self) -> str:
        return pulumi.get(self, "max_price")

    @property
    @pulumi.getter(name="spotInstanceType")
    def spot_instance_type(self) -> Optional[str]:
        return pulumi.get(self, "spot_instance_type")


@pulumi.output_type
class LaunchTemplateVersionInternetAccessible(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthPackageId":
            suggest = "bandwidth_package_id"
        elif key == "internetChargeType":
            suggest = "internet_charge_type"
        elif key == "internetMaxBandwidthOut":
            suggest = "internet_max_bandwidth_out"
        elif key == "publicIpAssigned":
            suggest = "public_ip_assigned"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateVersionInternetAccessible. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateVersionInternetAccessible.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateVersionInternetAccessible.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_package_id: Optional[str] = None,
                 internet_charge_type: Optional[str] = None,
                 internet_max_bandwidth_out: Optional[int] = None,
                 public_ip_assigned: Optional[bool] = None):
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[str]:
        return pulumi.get(self, "bandwidth_package_id")

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[str]:
        return pulumi.get(self, "internet_charge_type")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[int]:
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[bool]:
        return pulumi.get(self, "public_ip_assigned")


@pulumi.output_type
class LaunchTemplateVersionLoginSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keepImageLogin":
            suggest = "keep_image_login"
        elif key == "keyIds":
            suggest = "key_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateVersionLoginSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateVersionLoginSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateVersionLoginSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 keep_image_login: Optional[str] = None,
                 key_ids: Optional[Sequence[str]] = None,
                 password: Optional[str] = None):
        if keep_image_login is not None:
            pulumi.set(__self__, "keep_image_login", keep_image_login)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="keepImageLogin")
    def keep_image_login(self) -> Optional[str]:
        return pulumi.get(self, "keep_image_login")

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_ids")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")


@pulumi.output_type
class LaunchTemplateVersionPlacement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostIds":
            suggest = "host_ids"
        elif key == "hostIps":
            suggest = "host_ips"
        elif key == "projectId":
            suggest = "project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateVersionPlacement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateVersionPlacement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateVersionPlacement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 zone: str,
                 host_ids: Optional[Sequence[str]] = None,
                 host_ips: Optional[Sequence[str]] = None,
                 project_id: Optional[int] = None):
        pulumi.set(__self__, "zone", zone)
        if host_ids is not None:
            pulumi.set(__self__, "host_ids", host_ids)
        if host_ips is not None:
            pulumi.set(__self__, "host_ips", host_ips)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="hostIds")
    def host_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "host_ids")

    @property
    @pulumi.getter(name="hostIps")
    def host_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "host_ips")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        return pulumi.get(self, "project_id")


@pulumi.output_type
class LaunchTemplateVersionSystemDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cdcId":
            suggest = "cdc_id"
        elif key == "diskId":
            suggest = "disk_id"
        elif key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateVersionSystemDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateVersionSystemDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateVersionSystemDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cdc_id: Optional[str] = None,
                 disk_id: Optional[str] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None):
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[str]:
        return pulumi.get(self, "cdc_id")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[str]:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        return pulumi.get(self, "disk_type")


@pulumi.output_type
class LaunchTemplateVersionTagSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateVersionTagSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateVersionTagSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateVersionTagSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: str,
                 tags: Sequence['outputs.LaunchTemplateVersionTagSpecificationTag']):
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.LaunchTemplateVersionTagSpecificationTag']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class LaunchTemplateVersionTagSpecificationTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class LaunchTemplateVersionVirtualPrivateCloud(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcId":
            suggest = "vpc_id"
        elif key == "asVpcGateway":
            suggest = "as_vpc_gateway"
        elif key == "ipv6AddressCount":
            suggest = "ipv6_address_count"
        elif key == "privateIpAddresses":
            suggest = "private_ip_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateVersionVirtualPrivateCloud. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateVersionVirtualPrivateCloud.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateVersionVirtualPrivateCloud.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 vpc_id: str,
                 as_vpc_gateway: Optional[bool] = None,
                 ipv6_address_count: Optional[int] = None,
                 private_ip_addresses: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if as_vpc_gateway is not None:
            pulumi.set(__self__, "as_vpc_gateway", as_vpc_gateway)
        if ipv6_address_count is not None:
            pulumi.set(__self__, "ipv6_address_count", ipv6_address_count)
        if private_ip_addresses is not None:
            pulumi.set(__self__, "private_ip_addresses", private_ip_addresses)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="asVpcGateway")
    def as_vpc_gateway(self) -> Optional[bool]:
        return pulumi.get(self, "as_vpc_gateway")

    @property
    @pulumi.getter(name="ipv6AddressCount")
    def ipv6_address_count(self) -> Optional[int]:
        return pulumi.get(self, "ipv6_address_count")

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "private_ip_addresses")


@pulumi.output_type
class LaunchTemplateVirtualPrivateCloud(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcId":
            suggest = "vpc_id"
        elif key == "asVpcGateway":
            suggest = "as_vpc_gateway"
        elif key == "ipv6AddressCount":
            suggest = "ipv6_address_count"
        elif key == "privateIpAddresses":
            suggest = "private_ip_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LaunchTemplateVirtualPrivateCloud. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LaunchTemplateVirtualPrivateCloud.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LaunchTemplateVirtualPrivateCloud.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 vpc_id: str,
                 as_vpc_gateway: Optional[bool] = None,
                 ipv6_address_count: Optional[int] = None,
                 private_ip_addresses: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if as_vpc_gateway is not None:
            pulumi.set(__self__, "as_vpc_gateway", as_vpc_gateway)
        if ipv6_address_count is not None:
            pulumi.set(__self__, "ipv6_address_count", ipv6_address_count)
        if private_ip_addresses is not None:
            pulumi.set(__self__, "private_ip_addresses", private_ip_addresses)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="asVpcGateway")
    def as_vpc_gateway(self) -> Optional[bool]:
        return pulumi.get(self, "as_vpc_gateway")

    @property
    @pulumi.getter(name="ipv6AddressCount")
    def ipv6_address_count(self) -> Optional[int]:
        return pulumi.get(self, "ipv6_address_count")

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "private_ip_addresses")


@pulumi.output_type
class ModifyInstanceDiskTypeDataDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "cdcId":
            suggest = "cdc_id"
        elif key == "deleteWithInstance":
            suggest = "delete_with_instance"
        elif key == "diskId":
            suggest = "disk_id"
        elif key == "diskType":
            suggest = "disk_type"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "snapshotId":
            suggest = "snapshot_id"
        elif key == "throughputPerformance":
            suggest = "throughput_performance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModifyInstanceDiskTypeDataDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModifyInstanceDiskTypeDataDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModifyInstanceDiskTypeDataDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: int,
                 cdc_id: Optional[str] = None,
                 delete_with_instance: Optional[bool] = None,
                 disk_id: Optional[str] = None,
                 disk_type: Optional[str] = None,
                 encrypt: Optional[bool] = None,
                 kms_key_id: Optional[str] = None,
                 snapshot_id: Optional[str] = None,
                 throughput_performance: Optional[int] = None):
        pulumi.set(__self__, "disk_size", disk_size)
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if delete_with_instance is not None:
            pulumi.set(__self__, "delete_with_instance", delete_with_instance)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if throughput_performance is not None:
            pulumi.set(__self__, "throughput_performance", throughput_performance)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[str]:
        return pulumi.get(self, "cdc_id")

    @property
    @pulumi.getter(name="deleteWithInstance")
    def delete_with_instance(self) -> Optional[bool]:
        return pulumi.get(self, "delete_with_instance")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[str]:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[bool]:
        return pulumi.get(self, "encrypt")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="throughputPerformance")
    def throughput_performance(self) -> Optional[int]:
        return pulumi.get(self, "throughput_performance")


@pulumi.output_type
class ModifyInstanceDiskTypeSystemDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cdcId":
            suggest = "cdc_id"
        elif key == "diskId":
            suggest = "disk_id"
        elif key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ModifyInstanceDiskTypeSystemDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ModifyInstanceDiskTypeSystemDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ModifyInstanceDiskTypeSystemDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cdc_id: Optional[str] = None,
                 disk_id: Optional[str] = None,
                 disk_size: Optional[int] = None,
                 disk_type: Optional[str] = None):
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[str]:
        return pulumi.get(self, "cdc_id")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[str]:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[str]:
        return pulumi.get(self, "disk_type")


@pulumi.output_type
class RenewHostHostChargePrepaid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "renewFlag":
            suggest = "renew_flag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RenewHostHostChargePrepaid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RenewHostHostChargePrepaid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RenewHostHostChargePrepaid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 period: int,
                 renew_flag: Optional[str] = None):
        pulumi.set(__self__, "period", period)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[str]:
        return pulumi.get(self, "renew_flag")


@pulumi.output_type
class RenewInstanceInstanceChargePrepaid(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "renewFlag":
            suggest = "renew_flag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RenewInstanceInstanceChargePrepaid. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RenewInstanceInstanceChargePrepaid.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RenewInstanceInstanceChargePrepaid.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 period: int,
                 renew_flag: Optional[str] = None):
        pulumi.set(__self__, "period", period)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[str]:
        return pulumi.get(self, "renew_flag")


@pulumi.output_type
class GetChcDeniedActionsChcHostDeniedActionSetResult(dict):
    def __init__(__self__, *,
                 chc_id: str,
                 deny_actions: Sequence[str],
                 state: str):
        pulumi.set(__self__, "chc_id", chc_id)
        pulumi.set(__self__, "deny_actions", deny_actions)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="chcId")
    def chc_id(self) -> str:
        return pulumi.get(self, "chc_id")

    @property
    @pulumi.getter(name="denyActions")
    def deny_actions(self) -> Sequence[str]:
        return pulumi.get(self, "deny_actions")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetChcHostsChcHostSetResult(dict):
    def __init__(__self__, *,
                 bmc_ip: str,
                 bmc_mac: str,
                 bmc_security_group_ids: Sequence[str],
                 bmc_virtual_private_clouds: Sequence['outputs.GetChcHostsChcHostSetBmcVirtualPrivateCloudResult'],
                 chc_id: str,
                 cpu: int,
                 created_time: str,
                 cvm_instance_id: str,
                 deploy_ip: str,
                 deploy_mac: str,
                 deploy_security_group_ids: Sequence[str],
                 deploy_virtual_private_clouds: Sequence['outputs.GetChcHostsChcHostSetDeployVirtualPrivateCloudResult'],
                 device_type: str,
                 disk: str,
                 hardware_description: str,
                 instance_name: str,
                 instance_state: str,
                 memory: int,
                 placements: Sequence['outputs.GetChcHostsChcHostSetPlacementResult'],
                 serial_number: str,
                 tenant_type: str):
        pulumi.set(__self__, "bmc_ip", bmc_ip)
        pulumi.set(__self__, "bmc_mac", bmc_mac)
        pulumi.set(__self__, "bmc_security_group_ids", bmc_security_group_ids)
        pulumi.set(__self__, "bmc_virtual_private_clouds", bmc_virtual_private_clouds)
        pulumi.set(__self__, "chc_id", chc_id)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "cvm_instance_id", cvm_instance_id)
        pulumi.set(__self__, "deploy_ip", deploy_ip)
        pulumi.set(__self__, "deploy_mac", deploy_mac)
        pulumi.set(__self__, "deploy_security_group_ids", deploy_security_group_ids)
        pulumi.set(__self__, "deploy_virtual_private_clouds", deploy_virtual_private_clouds)
        pulumi.set(__self__, "device_type", device_type)
        pulumi.set(__self__, "disk", disk)
        pulumi.set(__self__, "hardware_description", hardware_description)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_state", instance_state)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "placements", placements)
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "tenant_type", tenant_type)

    @property
    @pulumi.getter(name="bmcIp")
    def bmc_ip(self) -> str:
        return pulumi.get(self, "bmc_ip")

    @property
    @pulumi.getter(name="bmcMac")
    def bmc_mac(self) -> str:
        return pulumi.get(self, "bmc_mac")

    @property
    @pulumi.getter(name="bmcSecurityGroupIds")
    def bmc_security_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "bmc_security_group_ids")

    @property
    @pulumi.getter(name="bmcVirtualPrivateClouds")
    def bmc_virtual_private_clouds(self) -> Sequence['outputs.GetChcHostsChcHostSetBmcVirtualPrivateCloudResult']:
        return pulumi.get(self, "bmc_virtual_private_clouds")

    @property
    @pulumi.getter(name="chcId")
    def chc_id(self) -> str:
        return pulumi.get(self, "chc_id")

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="cvmInstanceId")
    def cvm_instance_id(self) -> str:
        return pulumi.get(self, "cvm_instance_id")

    @property
    @pulumi.getter(name="deployIp")
    def deploy_ip(self) -> str:
        return pulumi.get(self, "deploy_ip")

    @property
    @pulumi.getter(name="deployMac")
    def deploy_mac(self) -> str:
        return pulumi.get(self, "deploy_mac")

    @property
    @pulumi.getter(name="deploySecurityGroupIds")
    def deploy_security_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "deploy_security_group_ids")

    @property
    @pulumi.getter(name="deployVirtualPrivateClouds")
    def deploy_virtual_private_clouds(self) -> Sequence['outputs.GetChcHostsChcHostSetDeployVirtualPrivateCloudResult']:
        return pulumi.get(self, "deploy_virtual_private_clouds")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> str:
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter
    def disk(self) -> str:
        return pulumi.get(self, "disk")

    @property
    @pulumi.getter(name="hardwareDescription")
    def hardware_description(self) -> str:
        return pulumi.get(self, "hardware_description")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceState")
    def instance_state(self) -> str:
        return pulumi.get(self, "instance_state")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def placements(self) -> Sequence['outputs.GetChcHostsChcHostSetPlacementResult']:
        return pulumi.get(self, "placements")

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> str:
        return pulumi.get(self, "serial_number")

    @property
    @pulumi.getter(name="tenantType")
    def tenant_type(self) -> str:
        return pulumi.get(self, "tenant_type")


@pulumi.output_type
class GetChcHostsChcHostSetBmcVirtualPrivateCloudResult(dict):
    def __init__(__self__, *,
                 as_vpc_gateway: bool,
                 ipv6_address_count: int,
                 private_ip_addresses: Sequence[str],
                 subnet_id: str,
                 vpc_id: str):
        pulumi.set(__self__, "as_vpc_gateway", as_vpc_gateway)
        pulumi.set(__self__, "ipv6_address_count", ipv6_address_count)
        pulumi.set(__self__, "private_ip_addresses", private_ip_addresses)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="asVpcGateway")
    def as_vpc_gateway(self) -> bool:
        return pulumi.get(self, "as_vpc_gateway")

    @property
    @pulumi.getter(name="ipv6AddressCount")
    def ipv6_address_count(self) -> int:
        return pulumi.get(self, "ipv6_address_count")

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "private_ip_addresses")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetChcHostsChcHostSetDeployVirtualPrivateCloudResult(dict):
    def __init__(__self__, *,
                 as_vpc_gateway: bool,
                 ipv6_address_count: int,
                 private_ip_addresses: Sequence[str],
                 subnet_id: str,
                 vpc_id: str):
        pulumi.set(__self__, "as_vpc_gateway", as_vpc_gateway)
        pulumi.set(__self__, "ipv6_address_count", ipv6_address_count)
        pulumi.set(__self__, "private_ip_addresses", private_ip_addresses)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="asVpcGateway")
    def as_vpc_gateway(self) -> bool:
        return pulumi.get(self, "as_vpc_gateway")

    @property
    @pulumi.getter(name="ipv6AddressCount")
    def ipv6_address_count(self) -> int:
        return pulumi.get(self, "ipv6_address_count")

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "private_ip_addresses")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetChcHostsChcHostSetPlacementResult(dict):
    def __init__(__self__, *,
                 host_id: str,
                 host_ids: Sequence[str],
                 host_ips: Sequence[str],
                 project_id: int,
                 zone: str):
        pulumi.set(__self__, "host_id", host_id)
        pulumi.set(__self__, "host_ids", host_ids)
        pulumi.set(__self__, "host_ips", host_ips)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> str:
        return pulumi.get(self, "host_id")

    @property
    @pulumi.getter(name="hostIds")
    def host_ids(self) -> Sequence[str]:
        return pulumi.get(self, "host_ids")

    @property
    @pulumi.getter(name="hostIps")
    def host_ips(self) -> Sequence[str]:
        return pulumi.get(self, "host_ips")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetChcHostsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetImageSharePermissionSharePermissionSetResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 created_time: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "created_time", created_time)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        return pulumi.get(self, "created_time")


@pulumi.output_type
class GetImportImageOsImportImageOsListSupportedResult(dict):
    def __init__(__self__, *,
                 linuxes: Sequence[str],
                 windows: Sequence[str]):
        pulumi.set(__self__, "linuxes", linuxes)
        pulumi.set(__self__, "windows", windows)

    @property
    @pulumi.getter
    def linuxes(self) -> Sequence[str]:
        return pulumi.get(self, "linuxes")

    @property
    @pulumi.getter
    def windows(self) -> Sequence[str]:
        return pulumi.get(self, "windows")


@pulumi.output_type
class GetImportImageOsImportImageOsVersionSetResult(dict):
    def __init__(__self__, *,
                 architectures: Sequence[str],
                 os_name: str,
                 os_versions: Sequence[str]):
        pulumi.set(__self__, "architectures", architectures)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "os_versions", os_versions)

    @property
    @pulumi.getter
    def architectures(self) -> Sequence[str]:
        return pulumi.get(self, "architectures")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> str:
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osVersions")
    def os_versions(self) -> Sequence[str]:
        return pulumi.get(self, "os_versions")


@pulumi.output_type
class GetInstancesModificationFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetInstancesModificationInstanceTypeConfigStatusListResult(dict):
    def __init__(__self__, *,
                 instance_type_configs: Sequence['outputs.GetInstancesModificationInstanceTypeConfigStatusListInstanceTypeConfigResult'],
                 message: str,
                 status: str):
        pulumi.set(__self__, "instance_type_configs", instance_type_configs)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="instanceTypeConfigs")
    def instance_type_configs(self) -> Sequence['outputs.GetInstancesModificationInstanceTypeConfigStatusListInstanceTypeConfigResult']:
        return pulumi.get(self, "instance_type_configs")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetInstancesModificationInstanceTypeConfigStatusListInstanceTypeConfigResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 fpga: int,
                 gpu: int,
                 instance_family: str,
                 instance_type: str,
                 memory: int,
                 zone: str):
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "fpga", fpga)
        pulumi.set(__self__, "gpu", gpu)
        pulumi.set(__self__, "instance_family", instance_family)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def fpga(self) -> int:
        return pulumi.get(self, "fpga")

    @property
    @pulumi.getter
    def gpu(self) -> int:
        return pulumi.get(self, "gpu")

    @property
    @pulumi.getter(name="instanceFamily")
    def instance_family(self) -> str:
        return pulumi.get(self, "instance_family")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


