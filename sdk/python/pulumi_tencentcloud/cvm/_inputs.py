# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ChcConfigBmcVirtualPrivateCloudArgs',
    'ChcConfigDeployVirtualPrivateCloudArgs',
    'ImportImageTagSpecificationArgs',
    'ImportImageTagSpecificationTagArgs',
    'LaunchTemplateActionTimerArgs',
    'LaunchTemplateActionTimerExternalsArgs',
    'LaunchTemplateActionTimerExternalsStorageBlockAttrArgs',
    'LaunchTemplateDataDiskArgs',
    'LaunchTemplateEnhancedServiceArgs',
    'LaunchTemplateEnhancedServiceAutomationServiceArgs',
    'LaunchTemplateEnhancedServiceMonitorServiceArgs',
    'LaunchTemplateEnhancedServiceSecurityServiceArgs',
    'LaunchTemplateInstanceChargePrepaidArgs',
    'LaunchTemplateInstanceMarketOptionsArgs',
    'LaunchTemplateInstanceMarketOptionsSpotOptionsArgs',
    'LaunchTemplateInternetAccessibleArgs',
    'LaunchTemplateLoginSettingsArgs',
    'LaunchTemplatePlacementArgs',
    'LaunchTemplateSystemDiskArgs',
    'LaunchTemplateTagSpecificationArgs',
    'LaunchTemplateTagSpecificationTagArgs',
    'LaunchTemplateVersionActionTimerArgs',
    'LaunchTemplateVersionActionTimerExternalsArgs',
    'LaunchTemplateVersionActionTimerExternalsStorageBlockAttrArgs',
    'LaunchTemplateVersionDataDiskArgs',
    'LaunchTemplateVersionEnhancedServiceArgs',
    'LaunchTemplateVersionEnhancedServiceAutomationServiceArgs',
    'LaunchTemplateVersionEnhancedServiceMonitorServiceArgs',
    'LaunchTemplateVersionEnhancedServiceSecurityServiceArgs',
    'LaunchTemplateVersionInstanceChargePrepaidArgs',
    'LaunchTemplateVersionInstanceMarketOptionsArgs',
    'LaunchTemplateVersionInstanceMarketOptionsSpotOptionsArgs',
    'LaunchTemplateVersionInternetAccessibleArgs',
    'LaunchTemplateVersionLoginSettingsArgs',
    'LaunchTemplateVersionPlacementArgs',
    'LaunchTemplateVersionSystemDiskArgs',
    'LaunchTemplateVersionTagSpecificationArgs',
    'LaunchTemplateVersionTagSpecificationTagArgs',
    'LaunchTemplateVersionVirtualPrivateCloudArgs',
    'LaunchTemplateVirtualPrivateCloudArgs',
    'ModifyInstanceDiskTypeDataDiskArgs',
    'ModifyInstanceDiskTypeSystemDiskArgs',
    'RenewHostHostChargePrepaidArgs',
    'RenewInstanceInstanceChargePrepaidArgs',
    'GetChcHostsFilterArgs',
    'GetInstancesModificationFilterArgs',
]

@pulumi.input_type
class ChcConfigBmcVirtualPrivateCloudArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 as_vpc_gateway: Optional[pulumi.Input[bool]] = None,
                 ipv6_address_count: Optional[pulumi.Input[int]] = None,
                 private_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if as_vpc_gateway is not None:
            pulumi.set(__self__, "as_vpc_gateway", as_vpc_gateway)
        if ipv6_address_count is not None:
            pulumi.set(__self__, "ipv6_address_count", ipv6_address_count)
        if private_ip_addresses is not None:
            pulumi.set(__self__, "private_ip_addresses", private_ip_addresses)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="asVpcGateway")
    def as_vpc_gateway(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "as_vpc_gateway")

    @as_vpc_gateway.setter
    def as_vpc_gateway(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "as_vpc_gateway", value)

    @property
    @pulumi.getter(name="ipv6AddressCount")
    def ipv6_address_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ipv6_address_count")

    @ipv6_address_count.setter
    def ipv6_address_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_address_count", value)

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "private_ip_addresses")

    @private_ip_addresses.setter
    def private_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_ip_addresses", value)


@pulumi.input_type
class ChcConfigDeployVirtualPrivateCloudArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 as_vpc_gateway: Optional[pulumi.Input[bool]] = None,
                 ipv6_address_count: Optional[pulumi.Input[int]] = None,
                 private_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if as_vpc_gateway is not None:
            pulumi.set(__self__, "as_vpc_gateway", as_vpc_gateway)
        if ipv6_address_count is not None:
            pulumi.set(__self__, "ipv6_address_count", ipv6_address_count)
        if private_ip_addresses is not None:
            pulumi.set(__self__, "private_ip_addresses", private_ip_addresses)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="asVpcGateway")
    def as_vpc_gateway(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "as_vpc_gateway")

    @as_vpc_gateway.setter
    def as_vpc_gateway(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "as_vpc_gateway", value)

    @property
    @pulumi.getter(name="ipv6AddressCount")
    def ipv6_address_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ipv6_address_count")

    @ipv6_address_count.setter
    def ipv6_address_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_address_count", value)

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "private_ip_addresses")

    @private_ip_addresses.setter
    def private_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_ip_addresses", value)


@pulumi.input_type
class ImportImageTagSpecificationArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input[str],
                 tags: pulumi.Input[Sequence[pulumi.Input['ImportImageTagSpecificationTagArgs']]]):
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Input[Sequence[pulumi.Input['ImportImageTagSpecificationTagArgs']]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: pulumi.Input[Sequence[pulumi.Input['ImportImageTagSpecificationTagArgs']]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class ImportImageTagSpecificationTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class LaunchTemplateActionTimerArgs:
    def __init__(__self__, *,
                 action_time: Optional[pulumi.Input[str]] = None,
                 externals: Optional[pulumi.Input['LaunchTemplateActionTimerExternalsArgs']] = None,
                 timer_action: Optional[pulumi.Input[str]] = None):
        if action_time is not None:
            pulumi.set(__self__, "action_time", action_time)
        if externals is not None:
            pulumi.set(__self__, "externals", externals)
        if timer_action is not None:
            pulumi.set(__self__, "timer_action", timer_action)

    @property
    @pulumi.getter(name="actionTime")
    def action_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_time")

    @action_time.setter
    def action_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_time", value)

    @property
    @pulumi.getter
    def externals(self) -> Optional[pulumi.Input['LaunchTemplateActionTimerExternalsArgs']]:
        return pulumi.get(self, "externals")

    @externals.setter
    def externals(self, value: Optional[pulumi.Input['LaunchTemplateActionTimerExternalsArgs']]):
        pulumi.set(self, "externals", value)

    @property
    @pulumi.getter(name="timerAction")
    def timer_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timer_action")

    @timer_action.setter
    def timer_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timer_action", value)


@pulumi.input_type
class LaunchTemplateActionTimerExternalsArgs:
    def __init__(__self__, *,
                 release_address: Optional[pulumi.Input[bool]] = None,
                 storage_block_attr: Optional[pulumi.Input['LaunchTemplateActionTimerExternalsStorageBlockAttrArgs']] = None,
                 unsupport_networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if release_address is not None:
            pulumi.set(__self__, "release_address", release_address)
        if storage_block_attr is not None:
            pulumi.set(__self__, "storage_block_attr", storage_block_attr)
        if unsupport_networks is not None:
            pulumi.set(__self__, "unsupport_networks", unsupport_networks)

    @property
    @pulumi.getter(name="releaseAddress")
    def release_address(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "release_address")

    @release_address.setter
    def release_address(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "release_address", value)

    @property
    @pulumi.getter(name="storageBlockAttr")
    def storage_block_attr(self) -> Optional[pulumi.Input['LaunchTemplateActionTimerExternalsStorageBlockAttrArgs']]:
        return pulumi.get(self, "storage_block_attr")

    @storage_block_attr.setter
    def storage_block_attr(self, value: Optional[pulumi.Input['LaunchTemplateActionTimerExternalsStorageBlockAttrArgs']]):
        pulumi.set(self, "storage_block_attr", value)

    @property
    @pulumi.getter(name="unsupportNetworks")
    def unsupport_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "unsupport_networks")

    @unsupport_networks.setter
    def unsupport_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "unsupport_networks", value)


@pulumi.input_type
class LaunchTemplateActionTimerExternalsStorageBlockAttrArgs:
    def __init__(__self__, *,
                 max_size: pulumi.Input[int],
                 min_size: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class LaunchTemplateDataDiskArgs:
    def __init__(__self__, *,
                 disk_size: pulumi.Input[int],
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 delete_with_instance: Optional[pulumi.Input[bool]] = None,
                 disk_id: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 encrypt: Optional[pulumi.Input[bool]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 throughput_performance: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "disk_size", disk_size)
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if delete_with_instance is not None:
            pulumi.set(__self__, "delete_with_instance", delete_with_instance)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if throughput_performance is not None:
            pulumi.set(__self__, "throughput_performance", throughput_performance)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> pulumi.Input[int]:
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cdc_id")

    @cdc_id.setter
    def cdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdc_id", value)

    @property
    @pulumi.getter(name="deleteWithInstance")
    def delete_with_instance(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_with_instance")

    @delete_with_instance.setter
    def delete_with_instance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_with_instance", value)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypt", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter(name="throughputPerformance")
    def throughput_performance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "throughput_performance")

    @throughput_performance.setter
    def throughput_performance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throughput_performance", value)


@pulumi.input_type
class LaunchTemplateEnhancedServiceArgs:
    def __init__(__self__, *,
                 automation_service: Optional[pulumi.Input['LaunchTemplateEnhancedServiceAutomationServiceArgs']] = None,
                 monitor_service: Optional[pulumi.Input['LaunchTemplateEnhancedServiceMonitorServiceArgs']] = None,
                 security_service: Optional[pulumi.Input['LaunchTemplateEnhancedServiceSecurityServiceArgs']] = None):
        if automation_service is not None:
            pulumi.set(__self__, "automation_service", automation_service)
        if monitor_service is not None:
            pulumi.set(__self__, "monitor_service", monitor_service)
        if security_service is not None:
            pulumi.set(__self__, "security_service", security_service)

    @property
    @pulumi.getter(name="automationService")
    def automation_service(self) -> Optional[pulumi.Input['LaunchTemplateEnhancedServiceAutomationServiceArgs']]:
        return pulumi.get(self, "automation_service")

    @automation_service.setter
    def automation_service(self, value: Optional[pulumi.Input['LaunchTemplateEnhancedServiceAutomationServiceArgs']]):
        pulumi.set(self, "automation_service", value)

    @property
    @pulumi.getter(name="monitorService")
    def monitor_service(self) -> Optional[pulumi.Input['LaunchTemplateEnhancedServiceMonitorServiceArgs']]:
        return pulumi.get(self, "monitor_service")

    @monitor_service.setter
    def monitor_service(self, value: Optional[pulumi.Input['LaunchTemplateEnhancedServiceMonitorServiceArgs']]):
        pulumi.set(self, "monitor_service", value)

    @property
    @pulumi.getter(name="securityService")
    def security_service(self) -> Optional[pulumi.Input['LaunchTemplateEnhancedServiceSecurityServiceArgs']]:
        return pulumi.get(self, "security_service")

    @security_service.setter
    def security_service(self, value: Optional[pulumi.Input['LaunchTemplateEnhancedServiceSecurityServiceArgs']]):
        pulumi.set(self, "security_service", value)


@pulumi.input_type
class LaunchTemplateEnhancedServiceAutomationServiceArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class LaunchTemplateEnhancedServiceMonitorServiceArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class LaunchTemplateEnhancedServiceSecurityServiceArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class LaunchTemplateInstanceChargePrepaidArgs:
    def __init__(__self__, *,
                 period: pulumi.Input[int],
                 renew_flag: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "period", period)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)

    @property
    @pulumi.getter
    def period(self) -> pulumi.Input[int]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: pulumi.Input[int]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "renew_flag")

    @renew_flag.setter
    def renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renew_flag", value)


@pulumi.input_type
class LaunchTemplateInstanceMarketOptionsArgs:
    def __init__(__self__, *,
                 spot_options: pulumi.Input['LaunchTemplateInstanceMarketOptionsSpotOptionsArgs'],
                 market_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "spot_options", spot_options)
        if market_type is not None:
            pulumi.set(__self__, "market_type", market_type)

    @property
    @pulumi.getter(name="spotOptions")
    def spot_options(self) -> pulumi.Input['LaunchTemplateInstanceMarketOptionsSpotOptionsArgs']:
        return pulumi.get(self, "spot_options")

    @spot_options.setter
    def spot_options(self, value: pulumi.Input['LaunchTemplateInstanceMarketOptionsSpotOptionsArgs']):
        pulumi.set(self, "spot_options", value)

    @property
    @pulumi.getter(name="marketType")
    def market_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "market_type")

    @market_type.setter
    def market_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "market_type", value)


@pulumi.input_type
class LaunchTemplateInstanceMarketOptionsSpotOptionsArgs:
    def __init__(__self__, *,
                 max_price: pulumi.Input[str],
                 spot_instance_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "max_price", max_price)
        if spot_instance_type is not None:
            pulumi.set(__self__, "spot_instance_type", spot_instance_type)

    @property
    @pulumi.getter(name="maxPrice")
    def max_price(self) -> pulumi.Input[str]:
        return pulumi.get(self, "max_price")

    @max_price.setter
    def max_price(self, value: pulumi.Input[str]):
        pulumi.set(self, "max_price", value)

    @property
    @pulumi.getter(name="spotInstanceType")
    def spot_instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spot_instance_type")

    @spot_instance_type.setter
    def spot_instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_instance_type", value)


@pulumi.input_type
class LaunchTemplateInternetAccessibleArgs:
    def __init__(__self__, *,
                 bandwidth_package_id: Optional[pulumi.Input[str]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 public_ip_assigned: Optional[pulumi.Input[bool]] = None):
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bandwidth_package_id")

    @bandwidth_package_id.setter
    def bandwidth_package_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_package_id", value)

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_charge_type")

    @internet_charge_type.setter
    def internet_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_charge_type", value)

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "internet_max_bandwidth_out")

    @internet_max_bandwidth_out.setter
    def internet_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_max_bandwidth_out", value)

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "public_ip_assigned")

    @public_ip_assigned.setter
    def public_ip_assigned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_ip_assigned", value)


@pulumi.input_type
class LaunchTemplateLoginSettingsArgs:
    def __init__(__self__, *,
                 keep_image_login: Optional[pulumi.Input[str]] = None,
                 key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 password: Optional[pulumi.Input[str]] = None):
        if keep_image_login is not None:
            pulumi.set(__self__, "keep_image_login", keep_image_login)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="keepImageLogin")
    def keep_image_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keep_image_login")

    @keep_image_login.setter
    def keep_image_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keep_image_login", value)

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "key_ids")

    @key_ids.setter
    def key_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_ids", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)


@pulumi.input_type
class LaunchTemplatePlacementArgs:
    def __init__(__self__, *,
                 zone: pulumi.Input[str],
                 host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 host_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_id: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "zone", zone)
        if host_ids is not None:
            pulumi.set(__self__, "host_ids", host_ids)
        if host_ips is not None:
            pulumi.set(__self__, "host_ips", host_ips)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter(name="hostIds")
    def host_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "host_ids")

    @host_ids.setter
    def host_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "host_ids", value)

    @property
    @pulumi.getter(name="hostIps")
    def host_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "host_ips")

    @host_ips.setter
    def host_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "host_ips", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class LaunchTemplateSystemDiskArgs:
    def __init__(__self__, *,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 disk_id: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None):
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cdc_id")

    @cdc_id.setter
    def cdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdc_id", value)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)


@pulumi.input_type
class LaunchTemplateTagSpecificationArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input[str],
                 tags: pulumi.Input[Sequence[pulumi.Input['LaunchTemplateTagSpecificationTagArgs']]]):
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Input[Sequence[pulumi.Input['LaunchTemplateTagSpecificationTagArgs']]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: pulumi.Input[Sequence[pulumi.Input['LaunchTemplateTagSpecificationTagArgs']]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class LaunchTemplateTagSpecificationTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class LaunchTemplateVersionActionTimerArgs:
    def __init__(__self__, *,
                 action_time: Optional[pulumi.Input[str]] = None,
                 externals: Optional[pulumi.Input['LaunchTemplateVersionActionTimerExternalsArgs']] = None,
                 timer_action: Optional[pulumi.Input[str]] = None):
        if action_time is not None:
            pulumi.set(__self__, "action_time", action_time)
        if externals is not None:
            pulumi.set(__self__, "externals", externals)
        if timer_action is not None:
            pulumi.set(__self__, "timer_action", timer_action)

    @property
    @pulumi.getter(name="actionTime")
    def action_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_time")

    @action_time.setter
    def action_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_time", value)

    @property
    @pulumi.getter
    def externals(self) -> Optional[pulumi.Input['LaunchTemplateVersionActionTimerExternalsArgs']]:
        return pulumi.get(self, "externals")

    @externals.setter
    def externals(self, value: Optional[pulumi.Input['LaunchTemplateVersionActionTimerExternalsArgs']]):
        pulumi.set(self, "externals", value)

    @property
    @pulumi.getter(name="timerAction")
    def timer_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timer_action")

    @timer_action.setter
    def timer_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timer_action", value)


@pulumi.input_type
class LaunchTemplateVersionActionTimerExternalsArgs:
    def __init__(__self__, *,
                 release_address: Optional[pulumi.Input[bool]] = None,
                 storage_block_attr: Optional[pulumi.Input['LaunchTemplateVersionActionTimerExternalsStorageBlockAttrArgs']] = None,
                 unsupport_networks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if release_address is not None:
            pulumi.set(__self__, "release_address", release_address)
        if storage_block_attr is not None:
            pulumi.set(__self__, "storage_block_attr", storage_block_attr)
        if unsupport_networks is not None:
            pulumi.set(__self__, "unsupport_networks", unsupport_networks)

    @property
    @pulumi.getter(name="releaseAddress")
    def release_address(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "release_address")

    @release_address.setter
    def release_address(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "release_address", value)

    @property
    @pulumi.getter(name="storageBlockAttr")
    def storage_block_attr(self) -> Optional[pulumi.Input['LaunchTemplateVersionActionTimerExternalsStorageBlockAttrArgs']]:
        return pulumi.get(self, "storage_block_attr")

    @storage_block_attr.setter
    def storage_block_attr(self, value: Optional[pulumi.Input['LaunchTemplateVersionActionTimerExternalsStorageBlockAttrArgs']]):
        pulumi.set(self, "storage_block_attr", value)

    @property
    @pulumi.getter(name="unsupportNetworks")
    def unsupport_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "unsupport_networks")

    @unsupport_networks.setter
    def unsupport_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "unsupport_networks", value)


@pulumi.input_type
class LaunchTemplateVersionActionTimerExternalsStorageBlockAttrArgs:
    def __init__(__self__, *,
                 max_size: pulumi.Input[int],
                 min_size: pulumi.Input[int],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "min_size", min_size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class LaunchTemplateVersionDataDiskArgs:
    def __init__(__self__, *,
                 disk_size: pulumi.Input[int],
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 delete_with_instance: Optional[pulumi.Input[bool]] = None,
                 disk_id: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 encrypt: Optional[pulumi.Input[bool]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 throughput_performance: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "disk_size", disk_size)
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if delete_with_instance is not None:
            pulumi.set(__self__, "delete_with_instance", delete_with_instance)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if throughput_performance is not None:
            pulumi.set(__self__, "throughput_performance", throughput_performance)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> pulumi.Input[int]:
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cdc_id")

    @cdc_id.setter
    def cdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdc_id", value)

    @property
    @pulumi.getter(name="deleteWithInstance")
    def delete_with_instance(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_with_instance")

    @delete_with_instance.setter
    def delete_with_instance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_with_instance", value)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypt", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter(name="throughputPerformance")
    def throughput_performance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "throughput_performance")

    @throughput_performance.setter
    def throughput_performance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throughput_performance", value)


@pulumi.input_type
class LaunchTemplateVersionEnhancedServiceArgs:
    def __init__(__self__, *,
                 automation_service: Optional[pulumi.Input['LaunchTemplateVersionEnhancedServiceAutomationServiceArgs']] = None,
                 monitor_service: Optional[pulumi.Input['LaunchTemplateVersionEnhancedServiceMonitorServiceArgs']] = None,
                 security_service: Optional[pulumi.Input['LaunchTemplateVersionEnhancedServiceSecurityServiceArgs']] = None):
        if automation_service is not None:
            pulumi.set(__self__, "automation_service", automation_service)
        if monitor_service is not None:
            pulumi.set(__self__, "monitor_service", monitor_service)
        if security_service is not None:
            pulumi.set(__self__, "security_service", security_service)

    @property
    @pulumi.getter(name="automationService")
    def automation_service(self) -> Optional[pulumi.Input['LaunchTemplateVersionEnhancedServiceAutomationServiceArgs']]:
        return pulumi.get(self, "automation_service")

    @automation_service.setter
    def automation_service(self, value: Optional[pulumi.Input['LaunchTemplateVersionEnhancedServiceAutomationServiceArgs']]):
        pulumi.set(self, "automation_service", value)

    @property
    @pulumi.getter(name="monitorService")
    def monitor_service(self) -> Optional[pulumi.Input['LaunchTemplateVersionEnhancedServiceMonitorServiceArgs']]:
        return pulumi.get(self, "monitor_service")

    @monitor_service.setter
    def monitor_service(self, value: Optional[pulumi.Input['LaunchTemplateVersionEnhancedServiceMonitorServiceArgs']]):
        pulumi.set(self, "monitor_service", value)

    @property
    @pulumi.getter(name="securityService")
    def security_service(self) -> Optional[pulumi.Input['LaunchTemplateVersionEnhancedServiceSecurityServiceArgs']]:
        return pulumi.get(self, "security_service")

    @security_service.setter
    def security_service(self, value: Optional[pulumi.Input['LaunchTemplateVersionEnhancedServiceSecurityServiceArgs']]):
        pulumi.set(self, "security_service", value)


@pulumi.input_type
class LaunchTemplateVersionEnhancedServiceAutomationServiceArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class LaunchTemplateVersionEnhancedServiceMonitorServiceArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class LaunchTemplateVersionEnhancedServiceSecurityServiceArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class LaunchTemplateVersionInstanceChargePrepaidArgs:
    def __init__(__self__, *,
                 period: pulumi.Input[int],
                 renew_flag: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "period", period)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)

    @property
    @pulumi.getter
    def period(self) -> pulumi.Input[int]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: pulumi.Input[int]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "renew_flag")

    @renew_flag.setter
    def renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renew_flag", value)


@pulumi.input_type
class LaunchTemplateVersionInstanceMarketOptionsArgs:
    def __init__(__self__, *,
                 spot_options: pulumi.Input['LaunchTemplateVersionInstanceMarketOptionsSpotOptionsArgs'],
                 market_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "spot_options", spot_options)
        if market_type is not None:
            pulumi.set(__self__, "market_type", market_type)

    @property
    @pulumi.getter(name="spotOptions")
    def spot_options(self) -> pulumi.Input['LaunchTemplateVersionInstanceMarketOptionsSpotOptionsArgs']:
        return pulumi.get(self, "spot_options")

    @spot_options.setter
    def spot_options(self, value: pulumi.Input['LaunchTemplateVersionInstanceMarketOptionsSpotOptionsArgs']):
        pulumi.set(self, "spot_options", value)

    @property
    @pulumi.getter(name="marketType")
    def market_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "market_type")

    @market_type.setter
    def market_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "market_type", value)


@pulumi.input_type
class LaunchTemplateVersionInstanceMarketOptionsSpotOptionsArgs:
    def __init__(__self__, *,
                 max_price: pulumi.Input[str],
                 spot_instance_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "max_price", max_price)
        if spot_instance_type is not None:
            pulumi.set(__self__, "spot_instance_type", spot_instance_type)

    @property
    @pulumi.getter(name="maxPrice")
    def max_price(self) -> pulumi.Input[str]:
        return pulumi.get(self, "max_price")

    @max_price.setter
    def max_price(self, value: pulumi.Input[str]):
        pulumi.set(self, "max_price", value)

    @property
    @pulumi.getter(name="spotInstanceType")
    def spot_instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "spot_instance_type")

    @spot_instance_type.setter
    def spot_instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spot_instance_type", value)


@pulumi.input_type
class LaunchTemplateVersionInternetAccessibleArgs:
    def __init__(__self__, *,
                 bandwidth_package_id: Optional[pulumi.Input[str]] = None,
                 internet_charge_type: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 public_ip_assigned: Optional[pulumi.Input[bool]] = None):
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if internet_charge_type is not None:
            pulumi.set(__self__, "internet_charge_type", internet_charge_type)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if public_ip_assigned is not None:
            pulumi.set(__self__, "public_ip_assigned", public_ip_assigned)

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bandwidth_package_id")

    @bandwidth_package_id.setter
    def bandwidth_package_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bandwidth_package_id", value)

    @property
    @pulumi.getter(name="internetChargeType")
    def internet_charge_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_charge_type")

    @internet_charge_type.setter
    def internet_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_charge_type", value)

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "internet_max_bandwidth_out")

    @internet_max_bandwidth_out.setter
    def internet_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_max_bandwidth_out", value)

    @property
    @pulumi.getter(name="publicIpAssigned")
    def public_ip_assigned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "public_ip_assigned")

    @public_ip_assigned.setter
    def public_ip_assigned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_ip_assigned", value)


@pulumi.input_type
class LaunchTemplateVersionLoginSettingsArgs:
    def __init__(__self__, *,
                 keep_image_login: Optional[pulumi.Input[str]] = None,
                 key_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 password: Optional[pulumi.Input[str]] = None):
        if keep_image_login is not None:
            pulumi.set(__self__, "keep_image_login", keep_image_login)
        if key_ids is not None:
            pulumi.set(__self__, "key_ids", key_ids)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="keepImageLogin")
    def keep_image_login(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keep_image_login")

    @keep_image_login.setter
    def keep_image_login(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keep_image_login", value)

    @property
    @pulumi.getter(name="keyIds")
    def key_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "key_ids")

    @key_ids.setter
    def key_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_ids", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)


@pulumi.input_type
class LaunchTemplateVersionPlacementArgs:
    def __init__(__self__, *,
                 zone: pulumi.Input[str],
                 host_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 host_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 project_id: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "zone", zone)
        if host_ids is not None:
            pulumi.set(__self__, "host_ids", host_ids)
        if host_ips is not None:
            pulumi.set(__self__, "host_ips", host_ips)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter(name="hostIds")
    def host_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "host_ids")

    @host_ids.setter
    def host_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "host_ids", value)

    @property
    @pulumi.getter(name="hostIps")
    def host_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "host_ips")

    @host_ips.setter
    def host_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "host_ips", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class LaunchTemplateVersionSystemDiskArgs:
    def __init__(__self__, *,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 disk_id: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None):
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cdc_id")

    @cdc_id.setter
    def cdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdc_id", value)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)


@pulumi.input_type
class LaunchTemplateVersionTagSpecificationArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input[str],
                 tags: pulumi.Input[Sequence[pulumi.Input['LaunchTemplateVersionTagSpecificationTagArgs']]]):
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Input[Sequence[pulumi.Input['LaunchTemplateVersionTagSpecificationTagArgs']]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: pulumi.Input[Sequence[pulumi.Input['LaunchTemplateVersionTagSpecificationTagArgs']]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class LaunchTemplateVersionTagSpecificationTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class LaunchTemplateVersionVirtualPrivateCloudArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 as_vpc_gateway: Optional[pulumi.Input[bool]] = None,
                 ipv6_address_count: Optional[pulumi.Input[int]] = None,
                 private_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if as_vpc_gateway is not None:
            pulumi.set(__self__, "as_vpc_gateway", as_vpc_gateway)
        if ipv6_address_count is not None:
            pulumi.set(__self__, "ipv6_address_count", ipv6_address_count)
        if private_ip_addresses is not None:
            pulumi.set(__self__, "private_ip_addresses", private_ip_addresses)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="asVpcGateway")
    def as_vpc_gateway(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "as_vpc_gateway")

    @as_vpc_gateway.setter
    def as_vpc_gateway(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "as_vpc_gateway", value)

    @property
    @pulumi.getter(name="ipv6AddressCount")
    def ipv6_address_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ipv6_address_count")

    @ipv6_address_count.setter
    def ipv6_address_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_address_count", value)

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "private_ip_addresses")

    @private_ip_addresses.setter
    def private_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_ip_addresses", value)


@pulumi.input_type
class LaunchTemplateVirtualPrivateCloudArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 as_vpc_gateway: Optional[pulumi.Input[bool]] = None,
                 ipv6_address_count: Optional[pulumi.Input[int]] = None,
                 private_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if as_vpc_gateway is not None:
            pulumi.set(__self__, "as_vpc_gateway", as_vpc_gateway)
        if ipv6_address_count is not None:
            pulumi.set(__self__, "ipv6_address_count", ipv6_address_count)
        if private_ip_addresses is not None:
            pulumi.set(__self__, "private_ip_addresses", private_ip_addresses)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="asVpcGateway")
    def as_vpc_gateway(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "as_vpc_gateway")

    @as_vpc_gateway.setter
    def as_vpc_gateway(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "as_vpc_gateway", value)

    @property
    @pulumi.getter(name="ipv6AddressCount")
    def ipv6_address_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ipv6_address_count")

    @ipv6_address_count.setter
    def ipv6_address_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_address_count", value)

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "private_ip_addresses")

    @private_ip_addresses.setter
    def private_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_ip_addresses", value)


@pulumi.input_type
class ModifyInstanceDiskTypeDataDiskArgs:
    def __init__(__self__, *,
                 disk_size: pulumi.Input[int],
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 delete_with_instance: Optional[pulumi.Input[bool]] = None,
                 disk_id: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 encrypt: Optional[pulumi.Input[bool]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 throughput_performance: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "disk_size", disk_size)
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if delete_with_instance is not None:
            pulumi.set(__self__, "delete_with_instance", delete_with_instance)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if throughput_performance is not None:
            pulumi.set(__self__, "throughput_performance", throughput_performance)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> pulumi.Input[int]:
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cdc_id")

    @cdc_id.setter
    def cdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdc_id", value)

    @property
    @pulumi.getter(name="deleteWithInstance")
    def delete_with_instance(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_with_instance")

    @delete_with_instance.setter
    def delete_with_instance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_with_instance", value)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encrypt", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter(name="throughputPerformance")
    def throughput_performance(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "throughput_performance")

    @throughput_performance.setter
    def throughput_performance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throughput_performance", value)


@pulumi.input_type
class ModifyInstanceDiskTypeSystemDiskArgs:
    def __init__(__self__, *,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 disk_id: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None):
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cdc_id")

    @cdc_id.setter
    def cdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdc_id", value)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)


@pulumi.input_type
class RenewHostHostChargePrepaidArgs:
    def __init__(__self__, *,
                 period: pulumi.Input[int],
                 renew_flag: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "period", period)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)

    @property
    @pulumi.getter
    def period(self) -> pulumi.Input[int]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: pulumi.Input[int]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "renew_flag")

    @renew_flag.setter
    def renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renew_flag", value)


@pulumi.input_type
class RenewInstanceInstanceChargePrepaidArgs:
    def __init__(__self__, *,
                 period: pulumi.Input[int],
                 renew_flag: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "period", period)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)

    @property
    @pulumi.getter
    def period(self) -> pulumi.Input[int]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: pulumi.Input[int]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "renew_flag")

    @renew_flag.setter
    def renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renew_flag", value)


@pulumi.input_type
class GetChcHostsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetInstancesModificationFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


