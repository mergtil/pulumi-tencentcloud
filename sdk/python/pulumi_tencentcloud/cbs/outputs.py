# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetSnapshotPoliciesSnapshotPolicyListResult',
    'GetSnapshotsSnapshotListResult',
    'GetStoragesSetStorageListResult',
    'GetStoragesStorageListResult',
]

@pulumi.output_type
class GetSnapshotPoliciesSnapshotPolicyListResult(dict):
    def __init__(__self__, *,
                 attached_storage_ids: Sequence[str],
                 create_time: str,
                 repeat_hours: Sequence[int],
                 repeat_weekdays: Sequence[int],
                 retention_days: int,
                 snapshot_policy_id: str,
                 snapshot_policy_name: str,
                 status: str):
        pulumi.set(__self__, "attached_storage_ids", attached_storage_ids)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "repeat_hours", repeat_hours)
        pulumi.set(__self__, "repeat_weekdays", repeat_weekdays)
        pulumi.set(__self__, "retention_days", retention_days)
        pulumi.set(__self__, "snapshot_policy_id", snapshot_policy_id)
        pulumi.set(__self__, "snapshot_policy_name", snapshot_policy_name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="attachedStorageIds")
    def attached_storage_ids(self) -> Sequence[str]:
        return pulumi.get(self, "attached_storage_ids")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="repeatHours")
    def repeat_hours(self) -> Sequence[int]:
        return pulumi.get(self, "repeat_hours")

    @property
    @pulumi.getter(name="repeatWeekdays")
    def repeat_weekdays(self) -> Sequence[int]:
        return pulumi.get(self, "repeat_weekdays")

    @property
    @pulumi.getter(name="retentionDays")
    def retention_days(self) -> int:
        return pulumi.get(self, "retention_days")

    @property
    @pulumi.getter(name="snapshotPolicyId")
    def snapshot_policy_id(self) -> str:
        return pulumi.get(self, "snapshot_policy_id")

    @property
    @pulumi.getter(name="snapshotPolicyName")
    def snapshot_policy_name(self) -> str:
        return pulumi.get(self, "snapshot_policy_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetSnapshotsSnapshotListResult(dict):
    def __init__(__self__, *,
                 availability_zone: str,
                 create_time: str,
                 encrypt: bool,
                 percent: int,
                 project_id: int,
                 snapshot_id: str,
                 snapshot_name: str,
                 storage_id: str,
                 storage_size: int,
                 storage_usage: str):
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "encrypt", encrypt)
        pulumi.set(__self__, "percent", percent)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "snapshot_name", snapshot_name)
        pulumi.set(__self__, "storage_id", storage_id)
        pulumi.set(__self__, "storage_size", storage_size)
        pulumi.set(__self__, "storage_usage", storage_usage)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def encrypt(self) -> bool:
        return pulumi.get(self, "encrypt")

    @property
    @pulumi.getter
    def percent(self) -> int:
        return pulumi.get(self, "percent")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="snapshotName")
    def snapshot_name(self) -> str:
        return pulumi.get(self, "snapshot_name")

    @property
    @pulumi.getter(name="storageId")
    def storage_id(self) -> str:
        return pulumi.get(self, "storage_id")

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> int:
        return pulumi.get(self, "storage_size")

    @property
    @pulumi.getter(name="storageUsage")
    def storage_usage(self) -> str:
        return pulumi.get(self, "storage_usage")


@pulumi.output_type
class GetStoragesSetStorageListResult(dict):
    def __init__(__self__, *,
                 attached: bool,
                 availability_zone: str,
                 charge_type: str,
                 create_time: str,
                 encrypt: bool,
                 instance_id: str,
                 prepaid_renew_flag: str,
                 project_id: int,
                 status: str,
                 storage_id: str,
                 storage_name: str,
                 storage_size: int,
                 storage_type: str,
                 storage_usage: str,
                 tags: Mapping[str, Any],
                 throughput_performance: int):
        pulumi.set(__self__, "attached", attached)
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "encrypt", encrypt)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "prepaid_renew_flag", prepaid_renew_flag)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage_id", storage_id)
        pulumi.set(__self__, "storage_name", storage_name)
        pulumi.set(__self__, "storage_size", storage_size)
        pulumi.set(__self__, "storage_type", storage_type)
        pulumi.set(__self__, "storage_usage", storage_usage)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "throughput_performance", throughput_performance)

    @property
    @pulumi.getter
    def attached(self) -> bool:
        return pulumi.get(self, "attached")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def encrypt(self) -> bool:
        return pulumi.get(self, "encrypt")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="prepaidRenewFlag")
    def prepaid_renew_flag(self) -> str:
        return pulumi.get(self, "prepaid_renew_flag")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageId")
    def storage_id(self) -> str:
        return pulumi.get(self, "storage_id")

    @property
    @pulumi.getter(name="storageName")
    def storage_name(self) -> str:
        return pulumi.get(self, "storage_name")

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> int:
        return pulumi.get(self, "storage_size")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="storageUsage")
    def storage_usage(self) -> str:
        return pulumi.get(self, "storage_usage")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="throughputPerformance")
    def throughput_performance(self) -> int:
        return pulumi.get(self, "throughput_performance")


@pulumi.output_type
class GetStoragesStorageListResult(dict):
    def __init__(__self__, *,
                 attached: bool,
                 availability_zone: str,
                 charge_type: str,
                 create_time: str,
                 encrypt: bool,
                 instance_id: str,
                 prepaid_renew_flag: str,
                 project_id: int,
                 status: str,
                 storage_id: str,
                 storage_name: str,
                 storage_size: int,
                 storage_type: str,
                 storage_usage: str,
                 tags: Mapping[str, Any],
                 throughput_performance: int):
        pulumi.set(__self__, "attached", attached)
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "encrypt", encrypt)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "prepaid_renew_flag", prepaid_renew_flag)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage_id", storage_id)
        pulumi.set(__self__, "storage_name", storage_name)
        pulumi.set(__self__, "storage_size", storage_size)
        pulumi.set(__self__, "storage_type", storage_type)
        pulumi.set(__self__, "storage_usage", storage_usage)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "throughput_performance", throughput_performance)

    @property
    @pulumi.getter
    def attached(self) -> bool:
        return pulumi.get(self, "attached")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> str:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def encrypt(self) -> bool:
        return pulumi.get(self, "encrypt")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="prepaidRenewFlag")
    def prepaid_renew_flag(self) -> str:
        return pulumi.get(self, "prepaid_renew_flag")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageId")
    def storage_id(self) -> str:
        return pulumi.get(self, "storage_id")

    @property
    @pulumi.getter(name="storageName")
    def storage_name(self) -> str:
        return pulumi.get(self, "storage_name")

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> int:
        return pulumi.get(self, "storage_size")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="storageUsage")
    def storage_usage(self) -> str:
        return pulumi.get(self, "storage_usage")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="throughputPerformance")
    def throughput_performance(self) -> int:
        return pulumi.get(self, "throughput_performance")


