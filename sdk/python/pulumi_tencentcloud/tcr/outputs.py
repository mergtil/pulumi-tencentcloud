# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ImmutableTagRuleRule',
    'InstanceReplication',
    'InstanceSecurityPolicy',
    'ManageReplicationOperationPeerReplicationOption',
    'ManageReplicationOperationRule',
    'ManageReplicationOperationRuleFilter',
    'NamespaceCveWhitelistItem',
    'ServiceAccountPermission',
    'TagRetentionRuleRetentionRule',
    'WebhookTriggerTrigger',
    'WebhookTriggerTriggerTarget',
    'WebhookTriggerTriggerTargetHeader',
    'GetImagesImageInfoListResult',
    'GetInstancesInstanceListResult',
    'GetNamespacesNamespaceListResult',
    'GetReplicationInstanceCreateTasksTaskDetailResult',
    'GetReplicationInstanceSyncStatusReplicationLogResult',
    'GetRepositoriesRepositoryListResult',
    'GetTagRetentionExecutionTasksRetentionTaskListResult',
    'GetTagRetentionExecutionsRetentionExecutionListResult',
    'GetTokensTokenListResult',
    'GetVpcAttachmentsVpcAttachmentListResult',
    'GetWebhookTriggerLogsLogResult',
]

@pulumi.output_type
class ImmutableTagRuleRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "repositoryDecoration":
            suggest = "repository_decoration"
        elif key == "repositoryPattern":
            suggest = "repository_pattern"
        elif key == "tagDecoration":
            suggest = "tag_decoration"
        elif key == "tagPattern":
            suggest = "tag_pattern"
        elif key == "nsName":
            suggest = "ns_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImmutableTagRuleRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImmutableTagRuleRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImmutableTagRuleRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 repository_decoration: str,
                 repository_pattern: str,
                 tag_decoration: str,
                 tag_pattern: str,
                 disabled: Optional[bool] = None,
                 id: Optional[int] = None,
                 ns_name: Optional[str] = None):
        pulumi.set(__self__, "repository_decoration", repository_decoration)
        pulumi.set(__self__, "repository_pattern", repository_pattern)
        pulumi.set(__self__, "tag_decoration", tag_decoration)
        pulumi.set(__self__, "tag_pattern", tag_pattern)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ns_name is not None:
            pulumi.set(__self__, "ns_name", ns_name)

    @property
    @pulumi.getter(name="repositoryDecoration")
    def repository_decoration(self) -> str:
        return pulumi.get(self, "repository_decoration")

    @property
    @pulumi.getter(name="repositoryPattern")
    def repository_pattern(self) -> str:
        return pulumi.get(self, "repository_pattern")

    @property
    @pulumi.getter(name="tagDecoration")
    def tag_decoration(self) -> str:
        return pulumi.get(self, "tag_decoration")

    @property
    @pulumi.getter(name="tagPattern")
    def tag_pattern(self) -> str:
        return pulumi.get(self, "tag_pattern")

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nsName")
    def ns_name(self) -> Optional[str]:
        return pulumi.get(self, "ns_name")


@pulumi.output_type
class InstanceReplication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "regionId":
            suggest = "region_id"
        elif key == "synTag":
            suggest = "syn_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceReplication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceReplication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceReplication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[str] = None,
                 region_id: Optional[int] = None,
                 syn_tag: Optional[bool] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if syn_tag is not None:
            pulumi.set(__self__, "syn_tag", syn_tag)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[int]:
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="synTag")
    def syn_tag(self) -> Optional[bool]:
        return pulumi.get(self, "syn_tag")


@pulumi.output_type
class InstanceSecurityPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrBlock":
            suggest = "cidr_block"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceSecurityPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceSecurityPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceSecurityPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr_block: Optional[str] = None,
                 description: Optional[str] = None,
                 index: Optional[int] = None,
                 version: Optional[str] = None):
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class ManageReplicationOperationPeerReplicationOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enablePeerReplication":
            suggest = "enable_peer_replication"
        elif key == "peerRegistryToken":
            suggest = "peer_registry_token"
        elif key == "peerRegistryUin":
            suggest = "peer_registry_uin"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManageReplicationOperationPeerReplicationOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManageReplicationOperationPeerReplicationOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManageReplicationOperationPeerReplicationOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_peer_replication: bool,
                 peer_registry_token: str,
                 peer_registry_uin: str):
        pulumi.set(__self__, "enable_peer_replication", enable_peer_replication)
        pulumi.set(__self__, "peer_registry_token", peer_registry_token)
        pulumi.set(__self__, "peer_registry_uin", peer_registry_uin)

    @property
    @pulumi.getter(name="enablePeerReplication")
    def enable_peer_replication(self) -> bool:
        return pulumi.get(self, "enable_peer_replication")

    @property
    @pulumi.getter(name="peerRegistryToken")
    def peer_registry_token(self) -> str:
        return pulumi.get(self, "peer_registry_token")

    @property
    @pulumi.getter(name="peerRegistryUin")
    def peer_registry_uin(self) -> str:
        return pulumi.get(self, "peer_registry_uin")


@pulumi.output_type
class ManageReplicationOperationRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destNamespace":
            suggest = "dest_namespace"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ManageReplicationOperationRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ManageReplicationOperationRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ManageReplicationOperationRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dest_namespace: str,
                 filters: Sequence['outputs.ManageReplicationOperationRuleFilter'],
                 name: str,
                 override: bool):
        pulumi.set(__self__, "dest_namespace", dest_namespace)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "override", override)

    @property
    @pulumi.getter(name="destNamespace")
    def dest_namespace(self) -> str:
        return pulumi.get(self, "dest_namespace")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.ManageReplicationOperationRuleFilter']:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def override(self) -> bool:
        return pulumi.get(self, "override")


@pulumi.output_type
class ManageReplicationOperationRuleFilter(dict):
    def __init__(__self__, *,
                 type: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NamespaceCveWhitelistItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cveId":
            suggest = "cve_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NamespaceCveWhitelistItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NamespaceCveWhitelistItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NamespaceCveWhitelistItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cve_id: Optional[str] = None):
        if cve_id is not None:
            pulumi.set(__self__, "cve_id", cve_id)

    @property
    @pulumi.getter(name="cveId")
    def cve_id(self) -> Optional[str]:
        return pulumi.get(self, "cve_id")


@pulumi.output_type
class ServiceAccountPermission(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 resource: str):
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def resource(self) -> str:
        return pulumi.get(self, "resource")


@pulumi.output_type
class TagRetentionRuleRetentionRule(dict):
    def __init__(__self__, *,
                 key: str,
                 value: int):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> int:
        return pulumi.get(self, "value")


@pulumi.output_type
class WebhookTriggerTrigger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventTypes":
            suggest = "event_types"
        elif key == "namespaceId":
            suggest = "namespace_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebhookTriggerTrigger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebhookTriggerTrigger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebhookTriggerTrigger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: str,
                 enabled: bool,
                 event_types: Sequence[str],
                 name: str,
                 targets: Sequence['outputs.WebhookTriggerTriggerTarget'],
                 description: Optional[str] = None,
                 id: Optional[int] = None,
                 namespace_id: Optional[int] = None):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "event_types", event_types)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "targets", targets)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)

    @property
    @pulumi.getter
    def condition(self) -> str:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="eventTypes")
    def event_types(self) -> Sequence[str]:
        return pulumi.get(self, "event_types")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.WebhookTriggerTriggerTarget']:
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[int]:
        return pulumi.get(self, "namespace_id")


@pulumi.output_type
class WebhookTriggerTriggerTarget(dict):
    def __init__(__self__, *,
                 address: str,
                 headers: Optional[Sequence['outputs.WebhookTriggerTriggerTargetHeader']] = None):
        pulumi.set(__self__, "address", address)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.WebhookTriggerTriggerTargetHeader']]:
        return pulumi.get(self, "headers")


@pulumi.output_type
class WebhookTriggerTriggerTargetHeader(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetImagesImageInfoListResult(dict):
    def __init__(__self__, *,
                 digest: str,
                 image_version: str,
                 kind: str,
                 kms_signature: str,
                 size: int,
                 update_time: str):
        pulumi.set(__self__, "digest", digest)
        pulumi.set(__self__, "image_version", image_version)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "kms_signature", kms_signature)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def digest(self) -> str:
        return pulumi.get(self, "digest")

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> str:
        return pulumi.get(self, "image_version")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="kmsSignature")
    def kms_signature(self) -> str:
        return pulumi.get(self, "kms_signature")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetInstancesInstanceListResult(dict):
    def __init__(__self__, *,
                 id: str,
                 instance_type: str,
                 internal_end_point: str,
                 name: str,
                 public_domain: str,
                 status: str,
                 tags: Mapping[str, Any]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "internal_end_point", internal_end_point)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_domain", public_domain)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="internalEndPoint")
    def internal_end_point(self) -> str:
        return pulumi.get(self, "internal_end_point")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publicDomain")
    def public_domain(self) -> str:
        return pulumi.get(self, "public_domain")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetNamespacesNamespaceListResult(dict):
    def __init__(__self__, *,
                 id: int,
                 is_public: bool,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_public", is_public)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> bool:
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetReplicationInstanceCreateTasksTaskDetailResult(dict):
    def __init__(__self__, *,
                 created_time: str,
                 finished_time: str,
                 task_message: str,
                 task_name: str,
                 task_status: str,
                 task_uuid: str):
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "finished_time", finished_time)
        pulumi.set(__self__, "task_message", task_message)
        pulumi.set(__self__, "task_name", task_name)
        pulumi.set(__self__, "task_status", task_status)
        pulumi.set(__self__, "task_uuid", task_uuid)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="finishedTime")
    def finished_time(self) -> str:
        return pulumi.get(self, "finished_time")

    @property
    @pulumi.getter(name="taskMessage")
    def task_message(self) -> str:
        return pulumi.get(self, "task_message")

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> str:
        return pulumi.get(self, "task_name")

    @property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> str:
        return pulumi.get(self, "task_status")

    @property
    @pulumi.getter(name="taskUuid")
    def task_uuid(self) -> str:
        return pulumi.get(self, "task_uuid")


@pulumi.output_type
class GetReplicationInstanceSyncStatusReplicationLogResult(dict):
    def __init__(__self__, *,
                 destination: str,
                 end_time: str,
                 resource_type: str,
                 source: str,
                 start_time: str,
                 status: str):
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def destination(self) -> str:
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRepositoriesRepositoryListResult(dict):
    def __init__(__self__, *,
                 brief_desc: str,
                 create_time: str,
                 description: str,
                 is_public: bool,
                 name: str,
                 namespace_name: str,
                 update_time: str,
                 url: str):
        pulumi.set(__self__, "brief_desc", brief_desc)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_public", is_public)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace_name", namespace_name)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="briefDesc")
    def brief_desc(self) -> str:
        return pulumi.get(self, "brief_desc")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> bool:
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> str:
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")


@pulumi.output_type
class GetTagRetentionExecutionTasksRetentionTaskListResult(dict):
    def __init__(__self__, *,
                 end_time: str,
                 execution_id: int,
                 repository: str,
                 retained: int,
                 start_time: str,
                 status: str,
                 task_id: int,
                 total: int):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "execution_id", execution_id)
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "retained", retained)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "task_id", task_id)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="executionId")
    def execution_id(self) -> int:
        return pulumi.get(self, "execution_id")

    @property
    @pulumi.getter
    def repository(self) -> str:
        return pulumi.get(self, "repository")

    @property
    @pulumi.getter
    def retained(self) -> int:
        return pulumi.get(self, "retained")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> int:
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter
    def total(self) -> int:
        return pulumi.get(self, "total")


@pulumi.output_type
class GetTagRetentionExecutionsRetentionExecutionListResult(dict):
    def __init__(__self__, *,
                 end_time: str,
                 execution_id: int,
                 retention_id: int,
                 start_time: str,
                 status: str):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "execution_id", execution_id)
        pulumi.set(__self__, "retention_id", retention_id)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="executionId")
    def execution_id(self) -> int:
        return pulumi.get(self, "execution_id")

    @property
    @pulumi.getter(name="retentionId")
    def retention_id(self) -> int:
        return pulumi.get(self, "retention_id")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetTokensTokenListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 description: str,
                 enable: bool,
                 token_id: str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "token_id", token_id)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="tokenId")
    def token_id(self) -> str:
        return pulumi.get(self, "token_id")


@pulumi.output_type
class GetVpcAttachmentsVpcAttachmentListResult(dict):
    def __init__(__self__, *,
                 access_ip: str,
                 enable_public_domain_dns: bool,
                 enable_vpc_domain_dns: bool,
                 status: str,
                 subnet_id: str,
                 vpc_id: str):
        pulumi.set(__self__, "access_ip", access_ip)
        pulumi.set(__self__, "enable_public_domain_dns", enable_public_domain_dns)
        pulumi.set(__self__, "enable_vpc_domain_dns", enable_vpc_domain_dns)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="accessIp")
    def access_ip(self) -> str:
        return pulumi.get(self, "access_ip")

    @property
    @pulumi.getter(name="enablePublicDomainDns")
    def enable_public_domain_dns(self) -> bool:
        return pulumi.get(self, "enable_public_domain_dns")

    @property
    @pulumi.getter(name="enableVpcDomainDns")
    def enable_vpc_domain_dns(self) -> bool:
        return pulumi.get(self, "enable_vpc_domain_dns")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetWebhookTriggerLogsLogResult(dict):
    def __init__(__self__, *,
                 creation_time: str,
                 detail: str,
                 event_type: str,
                 id: int,
                 notify_type: str,
                 status: str,
                 trigger_id: int,
                 update_time: str):
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "detail", detail)
        pulumi.set(__self__, "event_type", event_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "notify_type", notify_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "trigger_id", trigger_id)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def detail(self) -> str:
        return pulumi.get(self, "detail")

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> str:
        return pulumi.get(self, "event_type")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="notifyType")
    def notify_type(self) -> str:
        return pulumi.get(self, "notify_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> int:
        return pulumi.get(self, "trigger_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        return pulumi.get(self, "update_time")


