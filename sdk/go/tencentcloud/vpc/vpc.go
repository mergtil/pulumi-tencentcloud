// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Vpc struct {
	pulumi.CustomResourceState

	// List of Assistant CIDR, NOTE: Only `NORMAL` typed CIDRs included, check the Docker CIDR by readonly
	// `assistant_docker_cidrs`.
	AssistantCidrs pulumi.StringArrayOutput `pulumi:"assistantCidrs"`
	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and
	// 192.168.0.0/16).
	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`
	// Creation time of VPC.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Default route table id, which created automatically after VPC create.
	DefaultRouteTableId pulumi.StringOutput `pulumi:"defaultRouteTableId"`
	// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
	DnsServers pulumi.StringArrayOutput `pulumi:"dnsServers"`
	// List of Docker Assistant CIDR.
	DockerAssistantCidrs pulumi.StringArrayOutput `pulumi:"dockerAssistantCidrs"`
	// Indicates whether it is the default VPC for this region.
	IsDefault pulumi.BoolOutput `pulumi:"isDefault"`
	// Indicates whether VPC multicast is enabled. The default value is 'true'.
	IsMulticast pulumi.BoolPtrOutput `pulumi:"isMulticast"`
	// The name of the VPC.
	Name pulumi.StringOutput `pulumi:"name"`
	// Tags of the VPC.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewVpc registers a new resource with the given unique name, arguments, and options.
func NewVpc(ctx *pulumi.Context,
	name string, args *VpcArgs, opts ...pulumi.ResourceOption) (*Vpc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'CidrBlock'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vpc
	err := ctx.RegisterResource("tencentcloud:Vpc/vpc:Vpc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpc gets an existing Vpc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcState, opts ...pulumi.ResourceOption) (*Vpc, error) {
	var resource Vpc
	err := ctx.ReadResource("tencentcloud:Vpc/vpc:Vpc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vpc resources.
type vpcState struct {
	// List of Assistant CIDR, NOTE: Only `NORMAL` typed CIDRs included, check the Docker CIDR by readonly
	// `assistant_docker_cidrs`.
	AssistantCidrs []string `pulumi:"assistantCidrs"`
	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and
	// 192.168.0.0/16).
	CidrBlock *string `pulumi:"cidrBlock"`
	// Creation time of VPC.
	CreateTime *string `pulumi:"createTime"`
	// Default route table id, which created automatically after VPC create.
	DefaultRouteTableId *string `pulumi:"defaultRouteTableId"`
	// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
	DnsServers []string `pulumi:"dnsServers"`
	// List of Docker Assistant CIDR.
	DockerAssistantCidrs []string `pulumi:"dockerAssistantCidrs"`
	// Indicates whether it is the default VPC for this region.
	IsDefault *bool `pulumi:"isDefault"`
	// Indicates whether VPC multicast is enabled. The default value is 'true'.
	IsMulticast *bool `pulumi:"isMulticast"`
	// The name of the VPC.
	Name *string `pulumi:"name"`
	// Tags of the VPC.
	Tags map[string]interface{} `pulumi:"tags"`
}

type VpcState struct {
	// List of Assistant CIDR, NOTE: Only `NORMAL` typed CIDRs included, check the Docker CIDR by readonly
	// `assistant_docker_cidrs`.
	AssistantCidrs pulumi.StringArrayInput
	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and
	// 192.168.0.0/16).
	CidrBlock pulumi.StringPtrInput
	// Creation time of VPC.
	CreateTime pulumi.StringPtrInput
	// Default route table id, which created automatically after VPC create.
	DefaultRouteTableId pulumi.StringPtrInput
	// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
	DnsServers pulumi.StringArrayInput
	// List of Docker Assistant CIDR.
	DockerAssistantCidrs pulumi.StringArrayInput
	// Indicates whether it is the default VPC for this region.
	IsDefault pulumi.BoolPtrInput
	// Indicates whether VPC multicast is enabled. The default value is 'true'.
	IsMulticast pulumi.BoolPtrInput
	// The name of the VPC.
	Name pulumi.StringPtrInput
	// Tags of the VPC.
	Tags pulumi.MapInput
}

func (VpcState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcState)(nil)).Elem()
}

type vpcArgs struct {
	// List of Assistant CIDR, NOTE: Only `NORMAL` typed CIDRs included, check the Docker CIDR by readonly
	// `assistant_docker_cidrs`.
	AssistantCidrs []string `pulumi:"assistantCidrs"`
	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and
	// 192.168.0.0/16).
	CidrBlock string `pulumi:"cidrBlock"`
	// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
	DnsServers []string `pulumi:"dnsServers"`
	// Indicates whether VPC multicast is enabled. The default value is 'true'.
	IsMulticast *bool `pulumi:"isMulticast"`
	// The name of the VPC.
	Name *string `pulumi:"name"`
	// Tags of the VPC.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a Vpc resource.
type VpcArgs struct {
	// List of Assistant CIDR, NOTE: Only `NORMAL` typed CIDRs included, check the Docker CIDR by readonly
	// `assistant_docker_cidrs`.
	AssistantCidrs pulumi.StringArrayInput
	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and
	// 192.168.0.0/16).
	CidrBlock pulumi.StringInput
	// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
	DnsServers pulumi.StringArrayInput
	// Indicates whether VPC multicast is enabled. The default value is 'true'.
	IsMulticast pulumi.BoolPtrInput
	// The name of the VPC.
	Name pulumi.StringPtrInput
	// Tags of the VPC.
	Tags pulumi.MapInput
}

func (VpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcArgs)(nil)).Elem()
}

type VpcInput interface {
	pulumi.Input

	ToVpcOutput() VpcOutput
	ToVpcOutputWithContext(ctx context.Context) VpcOutput
}

func (*Vpc) ElementType() reflect.Type {
	return reflect.TypeOf((**Vpc)(nil)).Elem()
}

func (i *Vpc) ToVpcOutput() VpcOutput {
	return i.ToVpcOutputWithContext(context.Background())
}

func (i *Vpc) ToVpcOutputWithContext(ctx context.Context) VpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcOutput)
}

// VpcArrayInput is an input type that accepts VpcArray and VpcArrayOutput values.
// You can construct a concrete instance of `VpcArrayInput` via:
//
//	VpcArray{ VpcArgs{...} }
type VpcArrayInput interface {
	pulumi.Input

	ToVpcArrayOutput() VpcArrayOutput
	ToVpcArrayOutputWithContext(context.Context) VpcArrayOutput
}

type VpcArray []VpcInput

func (VpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vpc)(nil)).Elem()
}

func (i VpcArray) ToVpcArrayOutput() VpcArrayOutput {
	return i.ToVpcArrayOutputWithContext(context.Background())
}

func (i VpcArray) ToVpcArrayOutputWithContext(ctx context.Context) VpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcArrayOutput)
}

// VpcMapInput is an input type that accepts VpcMap and VpcMapOutput values.
// You can construct a concrete instance of `VpcMapInput` via:
//
//	VpcMap{ "key": VpcArgs{...} }
type VpcMapInput interface {
	pulumi.Input

	ToVpcMapOutput() VpcMapOutput
	ToVpcMapOutputWithContext(context.Context) VpcMapOutput
}

type VpcMap map[string]VpcInput

func (VpcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vpc)(nil)).Elem()
}

func (i VpcMap) ToVpcMapOutput() VpcMapOutput {
	return i.ToVpcMapOutputWithContext(context.Background())
}

func (i VpcMap) ToVpcMapOutputWithContext(ctx context.Context) VpcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcMapOutput)
}

type VpcOutput struct{ *pulumi.OutputState }

func (VpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vpc)(nil)).Elem()
}

func (o VpcOutput) ToVpcOutput() VpcOutput {
	return o
}

func (o VpcOutput) ToVpcOutputWithContext(ctx context.Context) VpcOutput {
	return o
}

// List of Assistant CIDR, NOTE: Only `NORMAL` typed CIDRs included, check the Docker CIDR by readonly
// `assistant_docker_cidrs`.
func (o VpcOutput) AssistantCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringArrayOutput { return v.AssistantCidrs }).(pulumi.StringArrayOutput)
}

// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and
// 192.168.0.0/16).
func (o VpcOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.CidrBlock }).(pulumi.StringOutput)
}

// Creation time of VPC.
func (o VpcOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Default route table id, which created automatically after VPC create.
func (o VpcOutput) DefaultRouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.DefaultRouteTableId }).(pulumi.StringOutput)
}

// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
func (o VpcOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringArrayOutput { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// List of Docker Assistant CIDR.
func (o VpcOutput) DockerAssistantCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringArrayOutput { return v.DockerAssistantCidrs }).(pulumi.StringArrayOutput)
}

// Indicates whether it is the default VPC for this region.
func (o VpcOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v *Vpc) pulumi.BoolOutput { return v.IsDefault }).(pulumi.BoolOutput)
}

// Indicates whether VPC multicast is enabled. The default value is 'true'.
func (o VpcOutput) IsMulticast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vpc) pulumi.BoolPtrOutput { return v.IsMulticast }).(pulumi.BoolPtrOutput)
}

// The name of the VPC.
func (o VpcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Tags of the VPC.
func (o VpcOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Vpc) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

type VpcArrayOutput struct{ *pulumi.OutputState }

func (VpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vpc)(nil)).Elem()
}

func (o VpcArrayOutput) ToVpcArrayOutput() VpcArrayOutput {
	return o
}

func (o VpcArrayOutput) ToVpcArrayOutputWithContext(ctx context.Context) VpcArrayOutput {
	return o
}

func (o VpcArrayOutput) Index(i pulumi.IntInput) VpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vpc {
		return vs[0].([]*Vpc)[vs[1].(int)]
	}).(VpcOutput)
}

type VpcMapOutput struct{ *pulumi.OutputState }

func (VpcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vpc)(nil)).Elem()
}

func (o VpcMapOutput) ToVpcMapOutput() VpcMapOutput {
	return o
}

func (o VpcMapOutput) ToVpcMapOutputWithContext(ctx context.Context) VpcMapOutput {
	return o
}

func (o VpcMapOutput) MapIndex(k pulumi.StringInput) VpcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vpc {
		return vs[0].(map[string]*Vpc)[vs[1].(string)]
	}).(VpcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcInput)(nil)).Elem(), &Vpc{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcArrayInput)(nil)).Elem(), VpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcMapInput)(nil)).Elem(), VpcMap{})
	pulumi.RegisterOutputType(VpcOutput{})
	pulumi.RegisterOutputType(VpcArrayOutput{})
	pulumi.RegisterOutputType(VpcMapOutput{})
}
