// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package subnet

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Subnet struct {
	pulumi.CustomResourceState

	// The availability zone within which the subnet should be created.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// The number of available IPs.
	AvailableIpCount pulumi.IntOutput `pulumi:"availableIpCount"`
	// A network address block of the subnet.
	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`
	// Creation time of subnet resource.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Indicates whether it is the default VPC for this region.
	IsDefault pulumi.BoolOutput `pulumi:"isDefault"`
	// Indicates whether multicast is enabled. The default value is 'true'.
	IsMulticast pulumi.BoolPtrOutput `pulumi:"isMulticast"`
	// The name of subnet to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of a routing table to which the subnet should be associated.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
	// Tags of the subnet.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// ID of the VPC to be associated.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.CidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'CidrBlock'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subnet
	err := ctx.RegisterResource("tencentcloud:Subnet/subnet:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("tencentcloud:Subnet/subnet:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
	// The availability zone within which the subnet should be created.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The number of available IPs.
	AvailableIpCount *int `pulumi:"availableIpCount"`
	// A network address block of the subnet.
	CidrBlock *string `pulumi:"cidrBlock"`
	// Creation time of subnet resource.
	CreateTime *string `pulumi:"createTime"`
	// Indicates whether it is the default VPC for this region.
	IsDefault *bool `pulumi:"isDefault"`
	// Indicates whether multicast is enabled. The default value is 'true'.
	IsMulticast *bool `pulumi:"isMulticast"`
	// The name of subnet to be created.
	Name *string `pulumi:"name"`
	// ID of a routing table to which the subnet should be associated.
	RouteTableId *string `pulumi:"routeTableId"`
	// Tags of the subnet.
	Tags map[string]interface{} `pulumi:"tags"`
	// ID of the VPC to be associated.
	VpcId *string `pulumi:"vpcId"`
}

type SubnetState struct {
	// The availability zone within which the subnet should be created.
	AvailabilityZone pulumi.StringPtrInput
	// The number of available IPs.
	AvailableIpCount pulumi.IntPtrInput
	// A network address block of the subnet.
	CidrBlock pulumi.StringPtrInput
	// Creation time of subnet resource.
	CreateTime pulumi.StringPtrInput
	// Indicates whether it is the default VPC for this region.
	IsDefault pulumi.BoolPtrInput
	// Indicates whether multicast is enabled. The default value is 'true'.
	IsMulticast pulumi.BoolPtrInput
	// The name of subnet to be created.
	Name pulumi.StringPtrInput
	// ID of a routing table to which the subnet should be associated.
	RouteTableId pulumi.StringPtrInput
	// Tags of the subnet.
	Tags pulumi.MapInput
	// ID of the VPC to be associated.
	VpcId pulumi.StringPtrInput
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	// The availability zone within which the subnet should be created.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// A network address block of the subnet.
	CidrBlock string `pulumi:"cidrBlock"`
	// Indicates whether multicast is enabled. The default value is 'true'.
	IsMulticast *bool `pulumi:"isMulticast"`
	// The name of subnet to be created.
	Name *string `pulumi:"name"`
	// ID of a routing table to which the subnet should be associated.
	RouteTableId *string `pulumi:"routeTableId"`
	// Tags of the subnet.
	Tags map[string]interface{} `pulumi:"tags"`
	// ID of the VPC to be associated.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	// The availability zone within which the subnet should be created.
	AvailabilityZone pulumi.StringInput
	// A network address block of the subnet.
	CidrBlock pulumi.StringInput
	// Indicates whether multicast is enabled. The default value is 'true'.
	IsMulticast pulumi.BoolPtrInput
	// The name of subnet to be created.
	Name pulumi.StringPtrInput
	// ID of a routing table to which the subnet should be associated.
	RouteTableId pulumi.StringPtrInput
	// Tags of the subnet.
	Tags pulumi.MapInput
	// ID of the VPC to be associated.
	VpcId pulumi.StringInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

type SubnetInput interface {
	pulumi.Input

	ToSubnetOutput() SubnetOutput
	ToSubnetOutputWithContext(ctx context.Context) SubnetOutput
}

func (*Subnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (i *Subnet) ToSubnetOutput() SubnetOutput {
	return i.ToSubnetOutputWithContext(context.Background())
}

func (i *Subnet) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetOutput)
}

// SubnetArrayInput is an input type that accepts SubnetArray and SubnetArrayOutput values.
// You can construct a concrete instance of `SubnetArrayInput` via:
//
//	SubnetArray{ SubnetArgs{...} }
type SubnetArrayInput interface {
	pulumi.Input

	ToSubnetArrayOutput() SubnetArrayOutput
	ToSubnetArrayOutputWithContext(context.Context) SubnetArrayOutput
}

type SubnetArray []SubnetInput

func (SubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (i SubnetArray) ToSubnetArrayOutput() SubnetArrayOutput {
	return i.ToSubnetArrayOutputWithContext(context.Background())
}

func (i SubnetArray) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetArrayOutput)
}

// SubnetMapInput is an input type that accepts SubnetMap and SubnetMapOutput values.
// You can construct a concrete instance of `SubnetMapInput` via:
//
//	SubnetMap{ "key": SubnetArgs{...} }
type SubnetMapInput interface {
	pulumi.Input

	ToSubnetMapOutput() SubnetMapOutput
	ToSubnetMapOutputWithContext(context.Context) SubnetMapOutput
}

type SubnetMap map[string]SubnetInput

func (SubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (i SubnetMap) ToSubnetMapOutput() SubnetMapOutput {
	return i.ToSubnetMapOutputWithContext(context.Background())
}

func (i SubnetMap) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetMapOutput)
}

type SubnetOutput struct{ *pulumi.OutputState }

func (SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (o SubnetOutput) ToSubnetOutput() SubnetOutput {
	return o
}

func (o SubnetOutput) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return o
}

// The availability zone within which the subnet should be created.
func (o SubnetOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The number of available IPs.
func (o SubnetOutput) AvailableIpCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.AvailableIpCount }).(pulumi.IntOutput)
}

// A network address block of the subnet.
func (o SubnetOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.CidrBlock }).(pulumi.StringOutput)
}

// Creation time of subnet resource.
func (o SubnetOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Indicates whether it is the default VPC for this region.
func (o SubnetOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolOutput { return v.IsDefault }).(pulumi.BoolOutput)
}

// Indicates whether multicast is enabled. The default value is 'true'.
func (o SubnetOutput) IsMulticast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.IsMulticast }).(pulumi.BoolPtrOutput)
}

// The name of subnet to be created.
func (o SubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of a routing table to which the subnet should be associated.
func (o SubnetOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

// Tags of the subnet.
func (o SubnetOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// ID of the VPC to be associated.
func (o SubnetOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type SubnetArrayOutput struct{ *pulumi.OutputState }

func (SubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (o SubnetArrayOutput) ToSubnetArrayOutput() SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) Index(i pulumi.IntInput) SubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].([]*Subnet)[vs[1].(int)]
	}).(SubnetOutput)
}

type SubnetMapOutput struct{ *pulumi.OutputState }

func (SubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (o SubnetMapOutput) ToSubnetMapOutput() SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) MapIndex(k pulumi.StringInput) SubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].(map[string]*Subnet)[vs[1].(string)]
	}).(SubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetInput)(nil)).Elem(), &Subnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetArrayInput)(nil)).Elem(), SubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetMapInput)(nil)).Elem(), SubnetMap{})
	pulumi.RegisterOutputType(SubnetOutput{})
	pulumi.RegisterOutputType(SubnetArrayOutput{})
	pulumi.RegisterOutputType(SubnetMapOutput{})
}
