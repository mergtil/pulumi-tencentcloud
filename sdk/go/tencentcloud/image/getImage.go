// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package image

import (
	"context"
	"reflect"

	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupImage(ctx *pulumi.Context, args *LookupImageArgs, opts ...pulumi.InvokeOption) (*LookupImageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupImageResult
	err := ctx.Invoke("tencentcloud:Image/getImage:getImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImage.
type LookupImageArgs struct {
	Filters          []GetImageFilter `pulumi:"filters"`
	ImageNameRegex   *string          `pulumi:"imageNameRegex"`
	OsName           *string          `pulumi:"osName"`
	ResultOutputFile *string          `pulumi:"resultOutputFile"`
}

// A collection of values returned by getImage.
type LookupImageResult struct {
	Filters []GetImageFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	ImageId          string  `pulumi:"imageId"`
	ImageName        string  `pulumi:"imageName"`
	ImageNameRegex   *string `pulumi:"imageNameRegex"`
	OsName           *string `pulumi:"osName"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

func LookupImageOutput(ctx *pulumi.Context, args LookupImageOutputArgs, opts ...pulumi.InvokeOption) LookupImageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupImageResult, error) {
			args := v.(LookupImageArgs)
			r, err := LookupImage(ctx, &args, opts...)
			var s LookupImageResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupImageResultOutput)
}

// A collection of arguments for invoking getImage.
type LookupImageOutputArgs struct {
	Filters          GetImageFilterArrayInput `pulumi:"filters"`
	ImageNameRegex   pulumi.StringPtrInput    `pulumi:"imageNameRegex"`
	OsName           pulumi.StringPtrInput    `pulumi:"osName"`
	ResultOutputFile pulumi.StringPtrInput    `pulumi:"resultOutputFile"`
}

func (LookupImageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageArgs)(nil)).Elem()
}

// A collection of values returned by getImage.
type LookupImageResultOutput struct{ *pulumi.OutputState }

func (LookupImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageResult)(nil)).Elem()
}

func (o LookupImageResultOutput) ToLookupImageResultOutput() LookupImageResultOutput {
	return o
}

func (o LookupImageResultOutput) ToLookupImageResultOutputWithContext(ctx context.Context) LookupImageResultOutput {
	return o
}

func (o LookupImageResultOutput) Filters() GetImageFilterArrayOutput {
	return o.ApplyT(func(v LookupImageResult) []GetImageFilter { return v.Filters }).(GetImageFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupImageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.ImageId }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.ImageName }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) ImageNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageResult) *string { return v.ImageNameRegex }).(pulumi.StringPtrOutput)
}

func (o LookupImageResultOutput) OsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageResult) *string { return v.OsName }).(pulumi.StringPtrOutput)
}

func (o LookupImageResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupImageResultOutput{})
}
