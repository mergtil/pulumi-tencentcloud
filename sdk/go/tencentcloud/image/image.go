// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package image

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Image struct {
	pulumi.CustomResourceState

	// Cloud disk ID list, When creating a whole machine image based on an instance, specify the data disk ID contained in the
	// image.
	DataDiskIds pulumi.StringArrayOutput `pulumi:"dataDiskIds"`
	// Set whether to force shutdown during mirroring. The default value is `false`, when set to true, it means that the mirror
	// will be made after shutdown.
	ForcePoweroff pulumi.BoolPtrOutput `pulumi:"forcePoweroff"`
	// Image Description.
	ImageDescription pulumi.StringPtrOutput `pulumi:"imageDescription"`
	// Image name.
	ImageName pulumi.StringOutput `pulumi:"imageName"`
	// Cloud server instance ID.
	InstanceId pulumi.StringPtrOutput `pulumi:"instanceId"`
	// Cloud disk snapshot ID list; creating a mirror based on a snapshot must include a system disk snapshot. It cannot be
	// passed in simultaneously with InstanceId.
	SnapshotIds pulumi.StringArrayOutput `pulumi:"snapshotIds"`
	// Sysprep function under Windows. When creating a Windows image, you can select true or false to enable or disable the
	// Syspre function.
	Sysprep pulumi.BoolPtrOutput `pulumi:"sysprep"`
	// Tags of the image.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOption) (*Image, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImageName == nil {
		return nil, errors.New("invalid value for required argument 'ImageName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Image
	err := ctx.RegisterResource("tencentcloud:Image/image:Image", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageState, opts ...pulumi.ResourceOption) (*Image, error) {
	var resource Image
	err := ctx.ReadResource("tencentcloud:Image/image:Image", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Image resources.
type imageState struct {
	// Cloud disk ID list, When creating a whole machine image based on an instance, specify the data disk ID contained in the
	// image.
	DataDiskIds []string `pulumi:"dataDiskIds"`
	// Set whether to force shutdown during mirroring. The default value is `false`, when set to true, it means that the mirror
	// will be made after shutdown.
	ForcePoweroff *bool `pulumi:"forcePoweroff"`
	// Image Description.
	ImageDescription *string `pulumi:"imageDescription"`
	// Image name.
	ImageName *string `pulumi:"imageName"`
	// Cloud server instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// Cloud disk snapshot ID list; creating a mirror based on a snapshot must include a system disk snapshot. It cannot be
	// passed in simultaneously with InstanceId.
	SnapshotIds []string `pulumi:"snapshotIds"`
	// Sysprep function under Windows. When creating a Windows image, you can select true or false to enable or disable the
	// Syspre function.
	Sysprep *bool `pulumi:"sysprep"`
	// Tags of the image.
	Tags map[string]interface{} `pulumi:"tags"`
}

type ImageState struct {
	// Cloud disk ID list, When creating a whole machine image based on an instance, specify the data disk ID contained in the
	// image.
	DataDiskIds pulumi.StringArrayInput
	// Set whether to force shutdown during mirroring. The default value is `false`, when set to true, it means that the mirror
	// will be made after shutdown.
	ForcePoweroff pulumi.BoolPtrInput
	// Image Description.
	ImageDescription pulumi.StringPtrInput
	// Image name.
	ImageName pulumi.StringPtrInput
	// Cloud server instance ID.
	InstanceId pulumi.StringPtrInput
	// Cloud disk snapshot ID list; creating a mirror based on a snapshot must include a system disk snapshot. It cannot be
	// passed in simultaneously with InstanceId.
	SnapshotIds pulumi.StringArrayInput
	// Sysprep function under Windows. When creating a Windows image, you can select true or false to enable or disable the
	// Syspre function.
	Sysprep pulumi.BoolPtrInput
	// Tags of the image.
	Tags pulumi.MapInput
}

func (ImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageState)(nil)).Elem()
}

type imageArgs struct {
	// Cloud disk ID list, When creating a whole machine image based on an instance, specify the data disk ID contained in the
	// image.
	DataDiskIds []string `pulumi:"dataDiskIds"`
	// Set whether to force shutdown during mirroring. The default value is `false`, when set to true, it means that the mirror
	// will be made after shutdown.
	ForcePoweroff *bool `pulumi:"forcePoweroff"`
	// Image Description.
	ImageDescription *string `pulumi:"imageDescription"`
	// Image name.
	ImageName string `pulumi:"imageName"`
	// Cloud server instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// Cloud disk snapshot ID list; creating a mirror based on a snapshot must include a system disk snapshot. It cannot be
	// passed in simultaneously with InstanceId.
	SnapshotIds []string `pulumi:"snapshotIds"`
	// Sysprep function under Windows. When creating a Windows image, you can select true or false to enable or disable the
	// Syspre function.
	Sysprep *bool `pulumi:"sysprep"`
	// Tags of the image.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	// Cloud disk ID list, When creating a whole machine image based on an instance, specify the data disk ID contained in the
	// image.
	DataDiskIds pulumi.StringArrayInput
	// Set whether to force shutdown during mirroring. The default value is `false`, when set to true, it means that the mirror
	// will be made after shutdown.
	ForcePoweroff pulumi.BoolPtrInput
	// Image Description.
	ImageDescription pulumi.StringPtrInput
	// Image name.
	ImageName pulumi.StringInput
	// Cloud server instance ID.
	InstanceId pulumi.StringPtrInput
	// Cloud disk snapshot ID list; creating a mirror based on a snapshot must include a system disk snapshot. It cannot be
	// passed in simultaneously with InstanceId.
	SnapshotIds pulumi.StringArrayInput
	// Sysprep function under Windows. When creating a Windows image, you can select true or false to enable or disable the
	// Syspre function.
	Sysprep pulumi.BoolPtrInput
	// Tags of the image.
	Tags pulumi.MapInput
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageArgs)(nil)).Elem()
}

type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(ctx context.Context) ImageOutput
}

func (*Image) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *Image) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i *Image) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

// ImageArrayInput is an input type that accepts ImageArray and ImageArrayOutput values.
// You can construct a concrete instance of `ImageArrayInput` via:
//
//	ImageArray{ ImageArgs{...} }
type ImageArrayInput interface {
	pulumi.Input

	ToImageArrayOutput() ImageArrayOutput
	ToImageArrayOutputWithContext(context.Context) ImageArrayOutput
}

type ImageArray []ImageInput

func (ImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (i ImageArray) ToImageArrayOutput() ImageArrayOutput {
	return i.ToImageArrayOutputWithContext(context.Background())
}

func (i ImageArray) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageArrayOutput)
}

// ImageMapInput is an input type that accepts ImageMap and ImageMapOutput values.
// You can construct a concrete instance of `ImageMapInput` via:
//
//	ImageMap{ "key": ImageArgs{...} }
type ImageMapInput interface {
	pulumi.Input

	ToImageMapOutput() ImageMapOutput
	ToImageMapOutputWithContext(context.Context) ImageMapOutput
}

type ImageMap map[string]ImageInput

func (ImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (i ImageMap) ToImageMapOutput() ImageMapOutput {
	return i.ToImageMapOutputWithContext(context.Background())
}

func (i ImageMap) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageMapOutput)
}

type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

// Cloud disk ID list, When creating a whole machine image based on an instance, specify the data disk ID contained in the
// image.
func (o ImageOutput) DataDiskIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Image) pulumi.StringArrayOutput { return v.DataDiskIds }).(pulumi.StringArrayOutput)
}

// Set whether to force shutdown during mirroring. The default value is `false`, when set to true, it means that the mirror
// will be made after shutdown.
func (o ImageOutput) ForcePoweroff() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.BoolPtrOutput { return v.ForcePoweroff }).(pulumi.BoolPtrOutput)
}

// Image Description.
func (o ImageOutput) ImageDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.ImageDescription }).(pulumi.StringPtrOutput)
}

// Image name.
func (o ImageOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ImageName }).(pulumi.StringOutput)
}

// Cloud server instance ID.
func (o ImageOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// Cloud disk snapshot ID list; creating a mirror based on a snapshot must include a system disk snapshot. It cannot be
// passed in simultaneously with InstanceId.
func (o ImageOutput) SnapshotIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Image) pulumi.StringArrayOutput { return v.SnapshotIds }).(pulumi.StringArrayOutput)
}

// Sysprep function under Windows. When creating a Windows image, you can select true or false to enable or disable the
// Syspre function.
func (o ImageOutput) Sysprep() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.BoolPtrOutput { return v.Sysprep }).(pulumi.BoolPtrOutput)
}

// Tags of the image.
func (o ImageOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Image) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

type ImageArrayOutput struct{ *pulumi.OutputState }

func (ImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (o ImageArrayOutput) ToImageArrayOutput() ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) Index(i pulumi.IntInput) ImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Image {
		return vs[0].([]*Image)[vs[1].(int)]
	}).(ImageOutput)
}

type ImageMapOutput struct{ *pulumi.OutputState }

func (ImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (o ImageMapOutput) ToImageMapOutput() ImageMapOutput {
	return o
}

func (o ImageMapOutput) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return o
}

func (o ImageMapOutput) MapIndex(k pulumi.StringInput) ImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Image {
		return vs[0].(map[string]*Image)[vs[1].(string)]
	}).(ImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageInput)(nil)).Elem(), &Image{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageArrayInput)(nil)).Elem(), ImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageMapInput)(nil)).Elem(), ImageMap{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImageArrayOutput{})
	pulumi.RegisterOutputType(ImageMapOutput{})
}
