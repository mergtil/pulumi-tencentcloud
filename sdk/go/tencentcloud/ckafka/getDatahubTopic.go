// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ckafka

import (
	"context"
	"reflect"

	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupDatahubTopic(ctx *pulumi.Context, args *LookupDatahubTopicArgs, opts ...pulumi.InvokeOption) (*LookupDatahubTopicResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDatahubTopicResult
	err := ctx.Invoke("tencentcloud:Ckafka/getDatahubTopic:getDatahubTopic", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatahubTopic.
type LookupDatahubTopicArgs struct {
	Limit            *int    `pulumi:"limit"`
	Offset           *int    `pulumi:"offset"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	SearchWord       *string `pulumi:"searchWord"`
}

// A collection of values returned by getDatahubTopic.
type LookupDatahubTopicResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id               string                     `pulumi:"id"`
	Limit            *int                       `pulumi:"limit"`
	Offset           *int                       `pulumi:"offset"`
	ResultOutputFile *string                    `pulumi:"resultOutputFile"`
	SearchWord       *string                    `pulumi:"searchWord"`
	TopicLists       []GetDatahubTopicTopicList `pulumi:"topicLists"`
}

func LookupDatahubTopicOutput(ctx *pulumi.Context, args LookupDatahubTopicOutputArgs, opts ...pulumi.InvokeOption) LookupDatahubTopicResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDatahubTopicResult, error) {
			args := v.(LookupDatahubTopicArgs)
			r, err := LookupDatahubTopic(ctx, &args, opts...)
			var s LookupDatahubTopicResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDatahubTopicResultOutput)
}

// A collection of arguments for invoking getDatahubTopic.
type LookupDatahubTopicOutputArgs struct {
	Limit            pulumi.IntPtrInput    `pulumi:"limit"`
	Offset           pulumi.IntPtrInput    `pulumi:"offset"`
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	SearchWord       pulumi.StringPtrInput `pulumi:"searchWord"`
}

func (LookupDatahubTopicOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatahubTopicArgs)(nil)).Elem()
}

// A collection of values returned by getDatahubTopic.
type LookupDatahubTopicResultOutput struct{ *pulumi.OutputState }

func (LookupDatahubTopicResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatahubTopicResult)(nil)).Elem()
}

func (o LookupDatahubTopicResultOutput) ToLookupDatahubTopicResultOutput() LookupDatahubTopicResultOutput {
	return o
}

func (o LookupDatahubTopicResultOutput) ToLookupDatahubTopicResultOutputWithContext(ctx context.Context) LookupDatahubTopicResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDatahubTopicResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatahubTopicResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDatahubTopicResultOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupDatahubTopicResult) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

func (o LookupDatahubTopicResultOutput) Offset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupDatahubTopicResult) *int { return v.Offset }).(pulumi.IntPtrOutput)
}

func (o LookupDatahubTopicResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDatahubTopicResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o LookupDatahubTopicResultOutput) SearchWord() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDatahubTopicResult) *string { return v.SearchWord }).(pulumi.StringPtrOutput)
}

func (o LookupDatahubTopicResultOutput) TopicLists() GetDatahubTopicTopicListArrayOutput {
	return o.ApplyT(func(v LookupDatahubTopicResult) []GetDatahubTopicTopicList { return v.TopicLists }).(GetDatahubTopicTopicListArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatahubTopicResultOutput{})
}
