// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhouse

import (
	"context"
	"reflect"

	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type BackupStrategyDataBackupStrategy struct {
	BackUpTables []BackupStrategyDataBackupStrategyBackUpTable `pulumi:"backUpTables"`
	ExecuteHour  int                                           `pulumi:"executeHour"`
	RetainDays   int                                           `pulumi:"retainDays"`
	WeekDays     string                                        `pulumi:"weekDays"`
}

// BackupStrategyDataBackupStrategyInput is an input type that accepts BackupStrategyDataBackupStrategyArgs and BackupStrategyDataBackupStrategyOutput values.
// You can construct a concrete instance of `BackupStrategyDataBackupStrategyInput` via:
//
//	BackupStrategyDataBackupStrategyArgs{...}
type BackupStrategyDataBackupStrategyInput interface {
	pulumi.Input

	ToBackupStrategyDataBackupStrategyOutput() BackupStrategyDataBackupStrategyOutput
	ToBackupStrategyDataBackupStrategyOutputWithContext(context.Context) BackupStrategyDataBackupStrategyOutput
}

type BackupStrategyDataBackupStrategyArgs struct {
	BackUpTables BackupStrategyDataBackupStrategyBackUpTableArrayInput `pulumi:"backUpTables"`
	ExecuteHour  pulumi.IntInput                                       `pulumi:"executeHour"`
	RetainDays   pulumi.IntInput                                       `pulumi:"retainDays"`
	WeekDays     pulumi.StringInput                                    `pulumi:"weekDays"`
}

func (BackupStrategyDataBackupStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStrategyDataBackupStrategy)(nil)).Elem()
}

func (i BackupStrategyDataBackupStrategyArgs) ToBackupStrategyDataBackupStrategyOutput() BackupStrategyDataBackupStrategyOutput {
	return i.ToBackupStrategyDataBackupStrategyOutputWithContext(context.Background())
}

func (i BackupStrategyDataBackupStrategyArgs) ToBackupStrategyDataBackupStrategyOutputWithContext(ctx context.Context) BackupStrategyDataBackupStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStrategyDataBackupStrategyOutput)
}

// BackupStrategyDataBackupStrategyArrayInput is an input type that accepts BackupStrategyDataBackupStrategyArray and BackupStrategyDataBackupStrategyArrayOutput values.
// You can construct a concrete instance of `BackupStrategyDataBackupStrategyArrayInput` via:
//
//	BackupStrategyDataBackupStrategyArray{ BackupStrategyDataBackupStrategyArgs{...} }
type BackupStrategyDataBackupStrategyArrayInput interface {
	pulumi.Input

	ToBackupStrategyDataBackupStrategyArrayOutput() BackupStrategyDataBackupStrategyArrayOutput
	ToBackupStrategyDataBackupStrategyArrayOutputWithContext(context.Context) BackupStrategyDataBackupStrategyArrayOutput
}

type BackupStrategyDataBackupStrategyArray []BackupStrategyDataBackupStrategyInput

func (BackupStrategyDataBackupStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupStrategyDataBackupStrategy)(nil)).Elem()
}

func (i BackupStrategyDataBackupStrategyArray) ToBackupStrategyDataBackupStrategyArrayOutput() BackupStrategyDataBackupStrategyArrayOutput {
	return i.ToBackupStrategyDataBackupStrategyArrayOutputWithContext(context.Background())
}

func (i BackupStrategyDataBackupStrategyArray) ToBackupStrategyDataBackupStrategyArrayOutputWithContext(ctx context.Context) BackupStrategyDataBackupStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStrategyDataBackupStrategyArrayOutput)
}

type BackupStrategyDataBackupStrategyOutput struct{ *pulumi.OutputState }

func (BackupStrategyDataBackupStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStrategyDataBackupStrategy)(nil)).Elem()
}

func (o BackupStrategyDataBackupStrategyOutput) ToBackupStrategyDataBackupStrategyOutput() BackupStrategyDataBackupStrategyOutput {
	return o
}

func (o BackupStrategyDataBackupStrategyOutput) ToBackupStrategyDataBackupStrategyOutputWithContext(ctx context.Context) BackupStrategyDataBackupStrategyOutput {
	return o
}

func (o BackupStrategyDataBackupStrategyOutput) BackUpTables() BackupStrategyDataBackupStrategyBackUpTableArrayOutput {
	return o.ApplyT(func(v BackupStrategyDataBackupStrategy) []BackupStrategyDataBackupStrategyBackUpTable {
		return v.BackUpTables
	}).(BackupStrategyDataBackupStrategyBackUpTableArrayOutput)
}

func (o BackupStrategyDataBackupStrategyOutput) ExecuteHour() pulumi.IntOutput {
	return o.ApplyT(func(v BackupStrategyDataBackupStrategy) int { return v.ExecuteHour }).(pulumi.IntOutput)
}

func (o BackupStrategyDataBackupStrategyOutput) RetainDays() pulumi.IntOutput {
	return o.ApplyT(func(v BackupStrategyDataBackupStrategy) int { return v.RetainDays }).(pulumi.IntOutput)
}

func (o BackupStrategyDataBackupStrategyOutput) WeekDays() pulumi.StringOutput {
	return o.ApplyT(func(v BackupStrategyDataBackupStrategy) string { return v.WeekDays }).(pulumi.StringOutput)
}

type BackupStrategyDataBackupStrategyArrayOutput struct{ *pulumi.OutputState }

func (BackupStrategyDataBackupStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupStrategyDataBackupStrategy)(nil)).Elem()
}

func (o BackupStrategyDataBackupStrategyArrayOutput) ToBackupStrategyDataBackupStrategyArrayOutput() BackupStrategyDataBackupStrategyArrayOutput {
	return o
}

func (o BackupStrategyDataBackupStrategyArrayOutput) ToBackupStrategyDataBackupStrategyArrayOutputWithContext(ctx context.Context) BackupStrategyDataBackupStrategyArrayOutput {
	return o
}

func (o BackupStrategyDataBackupStrategyArrayOutput) Index(i pulumi.IntInput) BackupStrategyDataBackupStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupStrategyDataBackupStrategy {
		return vs[0].([]BackupStrategyDataBackupStrategy)[vs[1].(int)]
	}).(BackupStrategyDataBackupStrategyOutput)
}

type BackupStrategyDataBackupStrategyBackUpTable struct {
	Database   string  `pulumi:"database"`
	Ips        *string `pulumi:"ips"`
	Rip        *string `pulumi:"rip"`
	Table      string  `pulumi:"table"`
	TotalBytes int     `pulumi:"totalBytes"`
	VCluster   *string `pulumi:"vCluster"`
	ZooPath    *string `pulumi:"zooPath"`
}

// BackupStrategyDataBackupStrategyBackUpTableInput is an input type that accepts BackupStrategyDataBackupStrategyBackUpTableArgs and BackupStrategyDataBackupStrategyBackUpTableOutput values.
// You can construct a concrete instance of `BackupStrategyDataBackupStrategyBackUpTableInput` via:
//
//	BackupStrategyDataBackupStrategyBackUpTableArgs{...}
type BackupStrategyDataBackupStrategyBackUpTableInput interface {
	pulumi.Input

	ToBackupStrategyDataBackupStrategyBackUpTableOutput() BackupStrategyDataBackupStrategyBackUpTableOutput
	ToBackupStrategyDataBackupStrategyBackUpTableOutputWithContext(context.Context) BackupStrategyDataBackupStrategyBackUpTableOutput
}

type BackupStrategyDataBackupStrategyBackUpTableArgs struct {
	Database   pulumi.StringInput    `pulumi:"database"`
	Ips        pulumi.StringPtrInput `pulumi:"ips"`
	Rip        pulumi.StringPtrInput `pulumi:"rip"`
	Table      pulumi.StringInput    `pulumi:"table"`
	TotalBytes pulumi.IntInput       `pulumi:"totalBytes"`
	VCluster   pulumi.StringPtrInput `pulumi:"vCluster"`
	ZooPath    pulumi.StringPtrInput `pulumi:"zooPath"`
}

func (BackupStrategyDataBackupStrategyBackUpTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStrategyDataBackupStrategyBackUpTable)(nil)).Elem()
}

func (i BackupStrategyDataBackupStrategyBackUpTableArgs) ToBackupStrategyDataBackupStrategyBackUpTableOutput() BackupStrategyDataBackupStrategyBackUpTableOutput {
	return i.ToBackupStrategyDataBackupStrategyBackUpTableOutputWithContext(context.Background())
}

func (i BackupStrategyDataBackupStrategyBackUpTableArgs) ToBackupStrategyDataBackupStrategyBackUpTableOutputWithContext(ctx context.Context) BackupStrategyDataBackupStrategyBackUpTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStrategyDataBackupStrategyBackUpTableOutput)
}

// BackupStrategyDataBackupStrategyBackUpTableArrayInput is an input type that accepts BackupStrategyDataBackupStrategyBackUpTableArray and BackupStrategyDataBackupStrategyBackUpTableArrayOutput values.
// You can construct a concrete instance of `BackupStrategyDataBackupStrategyBackUpTableArrayInput` via:
//
//	BackupStrategyDataBackupStrategyBackUpTableArray{ BackupStrategyDataBackupStrategyBackUpTableArgs{...} }
type BackupStrategyDataBackupStrategyBackUpTableArrayInput interface {
	pulumi.Input

	ToBackupStrategyDataBackupStrategyBackUpTableArrayOutput() BackupStrategyDataBackupStrategyBackUpTableArrayOutput
	ToBackupStrategyDataBackupStrategyBackUpTableArrayOutputWithContext(context.Context) BackupStrategyDataBackupStrategyBackUpTableArrayOutput
}

type BackupStrategyDataBackupStrategyBackUpTableArray []BackupStrategyDataBackupStrategyBackUpTableInput

func (BackupStrategyDataBackupStrategyBackUpTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupStrategyDataBackupStrategyBackUpTable)(nil)).Elem()
}

func (i BackupStrategyDataBackupStrategyBackUpTableArray) ToBackupStrategyDataBackupStrategyBackUpTableArrayOutput() BackupStrategyDataBackupStrategyBackUpTableArrayOutput {
	return i.ToBackupStrategyDataBackupStrategyBackUpTableArrayOutputWithContext(context.Background())
}

func (i BackupStrategyDataBackupStrategyBackUpTableArray) ToBackupStrategyDataBackupStrategyBackUpTableArrayOutputWithContext(ctx context.Context) BackupStrategyDataBackupStrategyBackUpTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStrategyDataBackupStrategyBackUpTableArrayOutput)
}

type BackupStrategyDataBackupStrategyBackUpTableOutput struct{ *pulumi.OutputState }

func (BackupStrategyDataBackupStrategyBackUpTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStrategyDataBackupStrategyBackUpTable)(nil)).Elem()
}

func (o BackupStrategyDataBackupStrategyBackUpTableOutput) ToBackupStrategyDataBackupStrategyBackUpTableOutput() BackupStrategyDataBackupStrategyBackUpTableOutput {
	return o
}

func (o BackupStrategyDataBackupStrategyBackUpTableOutput) ToBackupStrategyDataBackupStrategyBackUpTableOutputWithContext(ctx context.Context) BackupStrategyDataBackupStrategyBackUpTableOutput {
	return o
}

func (o BackupStrategyDataBackupStrategyBackUpTableOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v BackupStrategyDataBackupStrategyBackUpTable) string { return v.Database }).(pulumi.StringOutput)
}

func (o BackupStrategyDataBackupStrategyBackUpTableOutput) Ips() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStrategyDataBackupStrategyBackUpTable) *string { return v.Ips }).(pulumi.StringPtrOutput)
}

func (o BackupStrategyDataBackupStrategyBackUpTableOutput) Rip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStrategyDataBackupStrategyBackUpTable) *string { return v.Rip }).(pulumi.StringPtrOutput)
}

func (o BackupStrategyDataBackupStrategyBackUpTableOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v BackupStrategyDataBackupStrategyBackUpTable) string { return v.Table }).(pulumi.StringOutput)
}

func (o BackupStrategyDataBackupStrategyBackUpTableOutput) TotalBytes() pulumi.IntOutput {
	return o.ApplyT(func(v BackupStrategyDataBackupStrategyBackUpTable) int { return v.TotalBytes }).(pulumi.IntOutput)
}

func (o BackupStrategyDataBackupStrategyBackUpTableOutput) VCluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStrategyDataBackupStrategyBackUpTable) *string { return v.VCluster }).(pulumi.StringPtrOutput)
}

func (o BackupStrategyDataBackupStrategyBackUpTableOutput) ZooPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStrategyDataBackupStrategyBackUpTable) *string { return v.ZooPath }).(pulumi.StringPtrOutput)
}

type BackupStrategyDataBackupStrategyBackUpTableArrayOutput struct{ *pulumi.OutputState }

func (BackupStrategyDataBackupStrategyBackUpTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupStrategyDataBackupStrategyBackUpTable)(nil)).Elem()
}

func (o BackupStrategyDataBackupStrategyBackUpTableArrayOutput) ToBackupStrategyDataBackupStrategyBackUpTableArrayOutput() BackupStrategyDataBackupStrategyBackUpTableArrayOutput {
	return o
}

func (o BackupStrategyDataBackupStrategyBackUpTableArrayOutput) ToBackupStrategyDataBackupStrategyBackUpTableArrayOutputWithContext(ctx context.Context) BackupStrategyDataBackupStrategyBackUpTableArrayOutput {
	return o
}

func (o BackupStrategyDataBackupStrategyBackUpTableArrayOutput) Index(i pulumi.IntInput) BackupStrategyDataBackupStrategyBackUpTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupStrategyDataBackupStrategyBackUpTable {
		return vs[0].([]BackupStrategyDataBackupStrategyBackUpTable)[vs[1].(int)]
	}).(BackupStrategyDataBackupStrategyBackUpTableOutput)
}

type BackupStrategyMetaBackupStrategy struct {
	ExecuteHour *int    `pulumi:"executeHour"`
	RetainDays  *int    `pulumi:"retainDays"`
	WeekDays    *string `pulumi:"weekDays"`
}

// BackupStrategyMetaBackupStrategyInput is an input type that accepts BackupStrategyMetaBackupStrategyArgs and BackupStrategyMetaBackupStrategyOutput values.
// You can construct a concrete instance of `BackupStrategyMetaBackupStrategyInput` via:
//
//	BackupStrategyMetaBackupStrategyArgs{...}
type BackupStrategyMetaBackupStrategyInput interface {
	pulumi.Input

	ToBackupStrategyMetaBackupStrategyOutput() BackupStrategyMetaBackupStrategyOutput
	ToBackupStrategyMetaBackupStrategyOutputWithContext(context.Context) BackupStrategyMetaBackupStrategyOutput
}

type BackupStrategyMetaBackupStrategyArgs struct {
	ExecuteHour pulumi.IntPtrInput    `pulumi:"executeHour"`
	RetainDays  pulumi.IntPtrInput    `pulumi:"retainDays"`
	WeekDays    pulumi.StringPtrInput `pulumi:"weekDays"`
}

func (BackupStrategyMetaBackupStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStrategyMetaBackupStrategy)(nil)).Elem()
}

func (i BackupStrategyMetaBackupStrategyArgs) ToBackupStrategyMetaBackupStrategyOutput() BackupStrategyMetaBackupStrategyOutput {
	return i.ToBackupStrategyMetaBackupStrategyOutputWithContext(context.Background())
}

func (i BackupStrategyMetaBackupStrategyArgs) ToBackupStrategyMetaBackupStrategyOutputWithContext(ctx context.Context) BackupStrategyMetaBackupStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStrategyMetaBackupStrategyOutput)
}

// BackupStrategyMetaBackupStrategyArrayInput is an input type that accepts BackupStrategyMetaBackupStrategyArray and BackupStrategyMetaBackupStrategyArrayOutput values.
// You can construct a concrete instance of `BackupStrategyMetaBackupStrategyArrayInput` via:
//
//	BackupStrategyMetaBackupStrategyArray{ BackupStrategyMetaBackupStrategyArgs{...} }
type BackupStrategyMetaBackupStrategyArrayInput interface {
	pulumi.Input

	ToBackupStrategyMetaBackupStrategyArrayOutput() BackupStrategyMetaBackupStrategyArrayOutput
	ToBackupStrategyMetaBackupStrategyArrayOutputWithContext(context.Context) BackupStrategyMetaBackupStrategyArrayOutput
}

type BackupStrategyMetaBackupStrategyArray []BackupStrategyMetaBackupStrategyInput

func (BackupStrategyMetaBackupStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupStrategyMetaBackupStrategy)(nil)).Elem()
}

func (i BackupStrategyMetaBackupStrategyArray) ToBackupStrategyMetaBackupStrategyArrayOutput() BackupStrategyMetaBackupStrategyArrayOutput {
	return i.ToBackupStrategyMetaBackupStrategyArrayOutputWithContext(context.Background())
}

func (i BackupStrategyMetaBackupStrategyArray) ToBackupStrategyMetaBackupStrategyArrayOutputWithContext(ctx context.Context) BackupStrategyMetaBackupStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStrategyMetaBackupStrategyArrayOutput)
}

type BackupStrategyMetaBackupStrategyOutput struct{ *pulumi.OutputState }

func (BackupStrategyMetaBackupStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupStrategyMetaBackupStrategy)(nil)).Elem()
}

func (o BackupStrategyMetaBackupStrategyOutput) ToBackupStrategyMetaBackupStrategyOutput() BackupStrategyMetaBackupStrategyOutput {
	return o
}

func (o BackupStrategyMetaBackupStrategyOutput) ToBackupStrategyMetaBackupStrategyOutputWithContext(ctx context.Context) BackupStrategyMetaBackupStrategyOutput {
	return o
}

func (o BackupStrategyMetaBackupStrategyOutput) ExecuteHour() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackupStrategyMetaBackupStrategy) *int { return v.ExecuteHour }).(pulumi.IntPtrOutput)
}

func (o BackupStrategyMetaBackupStrategyOutput) RetainDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v BackupStrategyMetaBackupStrategy) *int { return v.RetainDays }).(pulumi.IntPtrOutput)
}

func (o BackupStrategyMetaBackupStrategyOutput) WeekDays() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupStrategyMetaBackupStrategy) *string { return v.WeekDays }).(pulumi.StringPtrOutput)
}

type BackupStrategyMetaBackupStrategyArrayOutput struct{ *pulumi.OutputState }

func (BackupStrategyMetaBackupStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupStrategyMetaBackupStrategy)(nil)).Elem()
}

func (o BackupStrategyMetaBackupStrategyArrayOutput) ToBackupStrategyMetaBackupStrategyArrayOutput() BackupStrategyMetaBackupStrategyArrayOutput {
	return o
}

func (o BackupStrategyMetaBackupStrategyArrayOutput) ToBackupStrategyMetaBackupStrategyArrayOutputWithContext(ctx context.Context) BackupStrategyMetaBackupStrategyArrayOutput {
	return o
}

func (o BackupStrategyMetaBackupStrategyArrayOutput) Index(i pulumi.IntInput) BackupStrategyMetaBackupStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupStrategyMetaBackupStrategy {
		return vs[0].([]BackupStrategyMetaBackupStrategy)[vs[1].(int)]
	}).(BackupStrategyMetaBackupStrategyOutput)
}

type InstanceCommonSpec struct {
	Count    int    `pulumi:"count"`
	DiskSize int    `pulumi:"diskSize"`
	SpecName string `pulumi:"specName"`
}

// InstanceCommonSpecInput is an input type that accepts InstanceCommonSpecArgs and InstanceCommonSpecOutput values.
// You can construct a concrete instance of `InstanceCommonSpecInput` via:
//
//	InstanceCommonSpecArgs{...}
type InstanceCommonSpecInput interface {
	pulumi.Input

	ToInstanceCommonSpecOutput() InstanceCommonSpecOutput
	ToInstanceCommonSpecOutputWithContext(context.Context) InstanceCommonSpecOutput
}

type InstanceCommonSpecArgs struct {
	Count    pulumi.IntInput    `pulumi:"count"`
	DiskSize pulumi.IntInput    `pulumi:"diskSize"`
	SpecName pulumi.StringInput `pulumi:"specName"`
}

func (InstanceCommonSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCommonSpec)(nil)).Elem()
}

func (i InstanceCommonSpecArgs) ToInstanceCommonSpecOutput() InstanceCommonSpecOutput {
	return i.ToInstanceCommonSpecOutputWithContext(context.Background())
}

func (i InstanceCommonSpecArgs) ToInstanceCommonSpecOutputWithContext(ctx context.Context) InstanceCommonSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCommonSpecOutput)
}

func (i InstanceCommonSpecArgs) ToInstanceCommonSpecPtrOutput() InstanceCommonSpecPtrOutput {
	return i.ToInstanceCommonSpecPtrOutputWithContext(context.Background())
}

func (i InstanceCommonSpecArgs) ToInstanceCommonSpecPtrOutputWithContext(ctx context.Context) InstanceCommonSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCommonSpecOutput).ToInstanceCommonSpecPtrOutputWithContext(ctx)
}

// InstanceCommonSpecPtrInput is an input type that accepts InstanceCommonSpecArgs, InstanceCommonSpecPtr and InstanceCommonSpecPtrOutput values.
// You can construct a concrete instance of `InstanceCommonSpecPtrInput` via:
//
//	        InstanceCommonSpecArgs{...}
//
//	or:
//
//	        nil
type InstanceCommonSpecPtrInput interface {
	pulumi.Input

	ToInstanceCommonSpecPtrOutput() InstanceCommonSpecPtrOutput
	ToInstanceCommonSpecPtrOutputWithContext(context.Context) InstanceCommonSpecPtrOutput
}

type instanceCommonSpecPtrType InstanceCommonSpecArgs

func InstanceCommonSpecPtr(v *InstanceCommonSpecArgs) InstanceCommonSpecPtrInput {
	return (*instanceCommonSpecPtrType)(v)
}

func (*instanceCommonSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceCommonSpec)(nil)).Elem()
}

func (i *instanceCommonSpecPtrType) ToInstanceCommonSpecPtrOutput() InstanceCommonSpecPtrOutput {
	return i.ToInstanceCommonSpecPtrOutputWithContext(context.Background())
}

func (i *instanceCommonSpecPtrType) ToInstanceCommonSpecPtrOutputWithContext(ctx context.Context) InstanceCommonSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCommonSpecPtrOutput)
}

type InstanceCommonSpecOutput struct{ *pulumi.OutputState }

func (InstanceCommonSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCommonSpec)(nil)).Elem()
}

func (o InstanceCommonSpecOutput) ToInstanceCommonSpecOutput() InstanceCommonSpecOutput {
	return o
}

func (o InstanceCommonSpecOutput) ToInstanceCommonSpecOutputWithContext(ctx context.Context) InstanceCommonSpecOutput {
	return o
}

func (o InstanceCommonSpecOutput) ToInstanceCommonSpecPtrOutput() InstanceCommonSpecPtrOutput {
	return o.ToInstanceCommonSpecPtrOutputWithContext(context.Background())
}

func (o InstanceCommonSpecOutput) ToInstanceCommonSpecPtrOutputWithContext(ctx context.Context) InstanceCommonSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceCommonSpec) *InstanceCommonSpec {
		return &v
	}).(InstanceCommonSpecPtrOutput)
}

func (o InstanceCommonSpecOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceCommonSpec) int { return v.Count }).(pulumi.IntOutput)
}

func (o InstanceCommonSpecOutput) DiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceCommonSpec) int { return v.DiskSize }).(pulumi.IntOutput)
}

func (o InstanceCommonSpecOutput) SpecName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceCommonSpec) string { return v.SpecName }).(pulumi.StringOutput)
}

type InstanceCommonSpecPtrOutput struct{ *pulumi.OutputState }

func (InstanceCommonSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceCommonSpec)(nil)).Elem()
}

func (o InstanceCommonSpecPtrOutput) ToInstanceCommonSpecPtrOutput() InstanceCommonSpecPtrOutput {
	return o
}

func (o InstanceCommonSpecPtrOutput) ToInstanceCommonSpecPtrOutputWithContext(ctx context.Context) InstanceCommonSpecPtrOutput {
	return o
}

func (o InstanceCommonSpecPtrOutput) Elem() InstanceCommonSpecOutput {
	return o.ApplyT(func(v *InstanceCommonSpec) InstanceCommonSpec {
		if v != nil {
			return *v
		}
		var ret InstanceCommonSpec
		return ret
	}).(InstanceCommonSpecOutput)
}

func (o InstanceCommonSpecPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceCommonSpec) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

func (o InstanceCommonSpecPtrOutput) DiskSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceCommonSpec) *int {
		if v == nil {
			return nil
		}
		return &v.DiskSize
	}).(pulumi.IntPtrOutput)
}

func (o InstanceCommonSpecPtrOutput) SpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceCommonSpec) *string {
		if v == nil {
			return nil
		}
		return &v.SpecName
	}).(pulumi.StringPtrOutput)
}

type InstanceDataSpec struct {
	Count    int    `pulumi:"count"`
	DiskSize int    `pulumi:"diskSize"`
	SpecName string `pulumi:"specName"`
}

// InstanceDataSpecInput is an input type that accepts InstanceDataSpecArgs and InstanceDataSpecOutput values.
// You can construct a concrete instance of `InstanceDataSpecInput` via:
//
//	InstanceDataSpecArgs{...}
type InstanceDataSpecInput interface {
	pulumi.Input

	ToInstanceDataSpecOutput() InstanceDataSpecOutput
	ToInstanceDataSpecOutputWithContext(context.Context) InstanceDataSpecOutput
}

type InstanceDataSpecArgs struct {
	Count    pulumi.IntInput    `pulumi:"count"`
	DiskSize pulumi.IntInput    `pulumi:"diskSize"`
	SpecName pulumi.StringInput `pulumi:"specName"`
}

func (InstanceDataSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDataSpec)(nil)).Elem()
}

func (i InstanceDataSpecArgs) ToInstanceDataSpecOutput() InstanceDataSpecOutput {
	return i.ToInstanceDataSpecOutputWithContext(context.Background())
}

func (i InstanceDataSpecArgs) ToInstanceDataSpecOutputWithContext(ctx context.Context) InstanceDataSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDataSpecOutput)
}

func (i InstanceDataSpecArgs) ToInstanceDataSpecPtrOutput() InstanceDataSpecPtrOutput {
	return i.ToInstanceDataSpecPtrOutputWithContext(context.Background())
}

func (i InstanceDataSpecArgs) ToInstanceDataSpecPtrOutputWithContext(ctx context.Context) InstanceDataSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDataSpecOutput).ToInstanceDataSpecPtrOutputWithContext(ctx)
}

// InstanceDataSpecPtrInput is an input type that accepts InstanceDataSpecArgs, InstanceDataSpecPtr and InstanceDataSpecPtrOutput values.
// You can construct a concrete instance of `InstanceDataSpecPtrInput` via:
//
//	        InstanceDataSpecArgs{...}
//
//	or:
//
//	        nil
type InstanceDataSpecPtrInput interface {
	pulumi.Input

	ToInstanceDataSpecPtrOutput() InstanceDataSpecPtrOutput
	ToInstanceDataSpecPtrOutputWithContext(context.Context) InstanceDataSpecPtrOutput
}

type instanceDataSpecPtrType InstanceDataSpecArgs

func InstanceDataSpecPtr(v *InstanceDataSpecArgs) InstanceDataSpecPtrInput {
	return (*instanceDataSpecPtrType)(v)
}

func (*instanceDataSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceDataSpec)(nil)).Elem()
}

func (i *instanceDataSpecPtrType) ToInstanceDataSpecPtrOutput() InstanceDataSpecPtrOutput {
	return i.ToInstanceDataSpecPtrOutputWithContext(context.Background())
}

func (i *instanceDataSpecPtrType) ToInstanceDataSpecPtrOutputWithContext(ctx context.Context) InstanceDataSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDataSpecPtrOutput)
}

type InstanceDataSpecOutput struct{ *pulumi.OutputState }

func (InstanceDataSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDataSpec)(nil)).Elem()
}

func (o InstanceDataSpecOutput) ToInstanceDataSpecOutput() InstanceDataSpecOutput {
	return o
}

func (o InstanceDataSpecOutput) ToInstanceDataSpecOutputWithContext(ctx context.Context) InstanceDataSpecOutput {
	return o
}

func (o InstanceDataSpecOutput) ToInstanceDataSpecPtrOutput() InstanceDataSpecPtrOutput {
	return o.ToInstanceDataSpecPtrOutputWithContext(context.Background())
}

func (o InstanceDataSpecOutput) ToInstanceDataSpecPtrOutputWithContext(ctx context.Context) InstanceDataSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceDataSpec) *InstanceDataSpec {
		return &v
	}).(InstanceDataSpecPtrOutput)
}

func (o InstanceDataSpecOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceDataSpec) int { return v.Count }).(pulumi.IntOutput)
}

func (o InstanceDataSpecOutput) DiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceDataSpec) int { return v.DiskSize }).(pulumi.IntOutput)
}

func (o InstanceDataSpecOutput) SpecName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceDataSpec) string { return v.SpecName }).(pulumi.StringOutput)
}

type InstanceDataSpecPtrOutput struct{ *pulumi.OutputState }

func (InstanceDataSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceDataSpec)(nil)).Elem()
}

func (o InstanceDataSpecPtrOutput) ToInstanceDataSpecPtrOutput() InstanceDataSpecPtrOutput {
	return o
}

func (o InstanceDataSpecPtrOutput) ToInstanceDataSpecPtrOutputWithContext(ctx context.Context) InstanceDataSpecPtrOutput {
	return o
}

func (o InstanceDataSpecPtrOutput) Elem() InstanceDataSpecOutput {
	return o.ApplyT(func(v *InstanceDataSpec) InstanceDataSpec {
		if v != nil {
			return *v
		}
		var ret InstanceDataSpec
		return ret
	}).(InstanceDataSpecOutput)
}

func (o InstanceDataSpecPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceDataSpec) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

func (o InstanceDataSpecPtrOutput) DiskSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceDataSpec) *int {
		if v == nil {
			return nil
		}
		return &v.DiskSize
	}).(pulumi.IntPtrOutput)
}

func (o InstanceDataSpecPtrOutput) SpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceDataSpec) *string {
		if v == nil {
			return nil
		}
		return &v.SpecName
	}).(pulumi.StringPtrOutput)
}

type GetBackupJobDetailTableContent struct {
	Database   string `pulumi:"database"`
	Ips        string `pulumi:"ips"`
	Rip        string `pulumi:"rip"`
	Table      string `pulumi:"table"`
	TotalBytes int    `pulumi:"totalBytes"`
	VCluster   string `pulumi:"vCluster"`
	ZooPath    string `pulumi:"zooPath"`
}

// GetBackupJobDetailTableContentInput is an input type that accepts GetBackupJobDetailTableContentArgs and GetBackupJobDetailTableContentOutput values.
// You can construct a concrete instance of `GetBackupJobDetailTableContentInput` via:
//
//	GetBackupJobDetailTableContentArgs{...}
type GetBackupJobDetailTableContentInput interface {
	pulumi.Input

	ToGetBackupJobDetailTableContentOutput() GetBackupJobDetailTableContentOutput
	ToGetBackupJobDetailTableContentOutputWithContext(context.Context) GetBackupJobDetailTableContentOutput
}

type GetBackupJobDetailTableContentArgs struct {
	Database   pulumi.StringInput `pulumi:"database"`
	Ips        pulumi.StringInput `pulumi:"ips"`
	Rip        pulumi.StringInput `pulumi:"rip"`
	Table      pulumi.StringInput `pulumi:"table"`
	TotalBytes pulumi.IntInput    `pulumi:"totalBytes"`
	VCluster   pulumi.StringInput `pulumi:"vCluster"`
	ZooPath    pulumi.StringInput `pulumi:"zooPath"`
}

func (GetBackupJobDetailTableContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupJobDetailTableContent)(nil)).Elem()
}

func (i GetBackupJobDetailTableContentArgs) ToGetBackupJobDetailTableContentOutput() GetBackupJobDetailTableContentOutput {
	return i.ToGetBackupJobDetailTableContentOutputWithContext(context.Background())
}

func (i GetBackupJobDetailTableContentArgs) ToGetBackupJobDetailTableContentOutputWithContext(ctx context.Context) GetBackupJobDetailTableContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupJobDetailTableContentOutput)
}

// GetBackupJobDetailTableContentArrayInput is an input type that accepts GetBackupJobDetailTableContentArray and GetBackupJobDetailTableContentArrayOutput values.
// You can construct a concrete instance of `GetBackupJobDetailTableContentArrayInput` via:
//
//	GetBackupJobDetailTableContentArray{ GetBackupJobDetailTableContentArgs{...} }
type GetBackupJobDetailTableContentArrayInput interface {
	pulumi.Input

	ToGetBackupJobDetailTableContentArrayOutput() GetBackupJobDetailTableContentArrayOutput
	ToGetBackupJobDetailTableContentArrayOutputWithContext(context.Context) GetBackupJobDetailTableContentArrayOutput
}

type GetBackupJobDetailTableContentArray []GetBackupJobDetailTableContentInput

func (GetBackupJobDetailTableContentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackupJobDetailTableContent)(nil)).Elem()
}

func (i GetBackupJobDetailTableContentArray) ToGetBackupJobDetailTableContentArrayOutput() GetBackupJobDetailTableContentArrayOutput {
	return i.ToGetBackupJobDetailTableContentArrayOutputWithContext(context.Background())
}

func (i GetBackupJobDetailTableContentArray) ToGetBackupJobDetailTableContentArrayOutputWithContext(ctx context.Context) GetBackupJobDetailTableContentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupJobDetailTableContentArrayOutput)
}

type GetBackupJobDetailTableContentOutput struct{ *pulumi.OutputState }

func (GetBackupJobDetailTableContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupJobDetailTableContent)(nil)).Elem()
}

func (o GetBackupJobDetailTableContentOutput) ToGetBackupJobDetailTableContentOutput() GetBackupJobDetailTableContentOutput {
	return o
}

func (o GetBackupJobDetailTableContentOutput) ToGetBackupJobDetailTableContentOutputWithContext(ctx context.Context) GetBackupJobDetailTableContentOutput {
	return o
}

func (o GetBackupJobDetailTableContentOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobDetailTableContent) string { return v.Database }).(pulumi.StringOutput)
}

func (o GetBackupJobDetailTableContentOutput) Ips() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobDetailTableContent) string { return v.Ips }).(pulumi.StringOutput)
}

func (o GetBackupJobDetailTableContentOutput) Rip() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobDetailTableContent) string { return v.Rip }).(pulumi.StringOutput)
}

func (o GetBackupJobDetailTableContentOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobDetailTableContent) string { return v.Table }).(pulumi.StringOutput)
}

func (o GetBackupJobDetailTableContentOutput) TotalBytes() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackupJobDetailTableContent) int { return v.TotalBytes }).(pulumi.IntOutput)
}

func (o GetBackupJobDetailTableContentOutput) VCluster() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobDetailTableContent) string { return v.VCluster }).(pulumi.StringOutput)
}

func (o GetBackupJobDetailTableContentOutput) ZooPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobDetailTableContent) string { return v.ZooPath }).(pulumi.StringOutput)
}

type GetBackupJobDetailTableContentArrayOutput struct{ *pulumi.OutputState }

func (GetBackupJobDetailTableContentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackupJobDetailTableContent)(nil)).Elem()
}

func (o GetBackupJobDetailTableContentArrayOutput) ToGetBackupJobDetailTableContentArrayOutput() GetBackupJobDetailTableContentArrayOutput {
	return o
}

func (o GetBackupJobDetailTableContentArrayOutput) ToGetBackupJobDetailTableContentArrayOutputWithContext(ctx context.Context) GetBackupJobDetailTableContentArrayOutput {
	return o
}

func (o GetBackupJobDetailTableContentArrayOutput) Index(i pulumi.IntInput) GetBackupJobDetailTableContentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackupJobDetailTableContent {
		return vs[0].([]GetBackupJobDetailTableContent)[vs[1].(int)]
	}).(GetBackupJobDetailTableContentOutput)
}

type GetBackupJobsBackUpJob struct {
	BackUpSize int    `pulumi:"backUpSize"`
	BackUpTime string `pulumi:"backUpTime"`
	BackUpType string `pulumi:"backUpType"`
	ExpireTime string `pulumi:"expireTime"`
	JobId      int    `pulumi:"jobId"`
	JobStatus  string `pulumi:"jobStatus"`
	Snapshot   string `pulumi:"snapshot"`
}

// GetBackupJobsBackUpJobInput is an input type that accepts GetBackupJobsBackUpJobArgs and GetBackupJobsBackUpJobOutput values.
// You can construct a concrete instance of `GetBackupJobsBackUpJobInput` via:
//
//	GetBackupJobsBackUpJobArgs{...}
type GetBackupJobsBackUpJobInput interface {
	pulumi.Input

	ToGetBackupJobsBackUpJobOutput() GetBackupJobsBackUpJobOutput
	ToGetBackupJobsBackUpJobOutputWithContext(context.Context) GetBackupJobsBackUpJobOutput
}

type GetBackupJobsBackUpJobArgs struct {
	BackUpSize pulumi.IntInput    `pulumi:"backUpSize"`
	BackUpTime pulumi.StringInput `pulumi:"backUpTime"`
	BackUpType pulumi.StringInput `pulumi:"backUpType"`
	ExpireTime pulumi.StringInput `pulumi:"expireTime"`
	JobId      pulumi.IntInput    `pulumi:"jobId"`
	JobStatus  pulumi.StringInput `pulumi:"jobStatus"`
	Snapshot   pulumi.StringInput `pulumi:"snapshot"`
}

func (GetBackupJobsBackUpJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupJobsBackUpJob)(nil)).Elem()
}

func (i GetBackupJobsBackUpJobArgs) ToGetBackupJobsBackUpJobOutput() GetBackupJobsBackUpJobOutput {
	return i.ToGetBackupJobsBackUpJobOutputWithContext(context.Background())
}

func (i GetBackupJobsBackUpJobArgs) ToGetBackupJobsBackUpJobOutputWithContext(ctx context.Context) GetBackupJobsBackUpJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupJobsBackUpJobOutput)
}

// GetBackupJobsBackUpJobArrayInput is an input type that accepts GetBackupJobsBackUpJobArray and GetBackupJobsBackUpJobArrayOutput values.
// You can construct a concrete instance of `GetBackupJobsBackUpJobArrayInput` via:
//
//	GetBackupJobsBackUpJobArray{ GetBackupJobsBackUpJobArgs{...} }
type GetBackupJobsBackUpJobArrayInput interface {
	pulumi.Input

	ToGetBackupJobsBackUpJobArrayOutput() GetBackupJobsBackUpJobArrayOutput
	ToGetBackupJobsBackUpJobArrayOutputWithContext(context.Context) GetBackupJobsBackUpJobArrayOutput
}

type GetBackupJobsBackUpJobArray []GetBackupJobsBackUpJobInput

func (GetBackupJobsBackUpJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackupJobsBackUpJob)(nil)).Elem()
}

func (i GetBackupJobsBackUpJobArray) ToGetBackupJobsBackUpJobArrayOutput() GetBackupJobsBackUpJobArrayOutput {
	return i.ToGetBackupJobsBackUpJobArrayOutputWithContext(context.Background())
}

func (i GetBackupJobsBackUpJobArray) ToGetBackupJobsBackUpJobArrayOutputWithContext(ctx context.Context) GetBackupJobsBackUpJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupJobsBackUpJobArrayOutput)
}

type GetBackupJobsBackUpJobOutput struct{ *pulumi.OutputState }

func (GetBackupJobsBackUpJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupJobsBackUpJob)(nil)).Elem()
}

func (o GetBackupJobsBackUpJobOutput) ToGetBackupJobsBackUpJobOutput() GetBackupJobsBackUpJobOutput {
	return o
}

func (o GetBackupJobsBackUpJobOutput) ToGetBackupJobsBackUpJobOutputWithContext(ctx context.Context) GetBackupJobsBackUpJobOutput {
	return o
}

func (o GetBackupJobsBackUpJobOutput) BackUpSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackupJobsBackUpJob) int { return v.BackUpSize }).(pulumi.IntOutput)
}

func (o GetBackupJobsBackUpJobOutput) BackUpTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsBackUpJob) string { return v.BackUpTime }).(pulumi.StringOutput)
}

func (o GetBackupJobsBackUpJobOutput) BackUpType() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsBackUpJob) string { return v.BackUpType }).(pulumi.StringOutput)
}

func (o GetBackupJobsBackUpJobOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsBackUpJob) string { return v.ExpireTime }).(pulumi.StringOutput)
}

func (o GetBackupJobsBackUpJobOutput) JobId() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackupJobsBackUpJob) int { return v.JobId }).(pulumi.IntOutput)
}

func (o GetBackupJobsBackUpJobOutput) JobStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsBackUpJob) string { return v.JobStatus }).(pulumi.StringOutput)
}

func (o GetBackupJobsBackUpJobOutput) Snapshot() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupJobsBackUpJob) string { return v.Snapshot }).(pulumi.StringOutput)
}

type GetBackupJobsBackUpJobArrayOutput struct{ *pulumi.OutputState }

func (GetBackupJobsBackUpJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackupJobsBackUpJob)(nil)).Elem()
}

func (o GetBackupJobsBackUpJobArrayOutput) ToGetBackupJobsBackUpJobArrayOutput() GetBackupJobsBackUpJobArrayOutput {
	return o
}

func (o GetBackupJobsBackUpJobArrayOutput) ToGetBackupJobsBackUpJobArrayOutputWithContext(ctx context.Context) GetBackupJobsBackUpJobArrayOutput {
	return o
}

func (o GetBackupJobsBackUpJobArrayOutput) Index(i pulumi.IntInput) GetBackupJobsBackUpJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackupJobsBackUpJob {
		return vs[0].([]GetBackupJobsBackUpJob)[vs[1].(int)]
	}).(GetBackupJobsBackUpJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupStrategyDataBackupStrategyInput)(nil)).Elem(), BackupStrategyDataBackupStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupStrategyDataBackupStrategyArrayInput)(nil)).Elem(), BackupStrategyDataBackupStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupStrategyDataBackupStrategyBackUpTableInput)(nil)).Elem(), BackupStrategyDataBackupStrategyBackUpTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupStrategyDataBackupStrategyBackUpTableArrayInput)(nil)).Elem(), BackupStrategyDataBackupStrategyBackUpTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupStrategyMetaBackupStrategyInput)(nil)).Elem(), BackupStrategyMetaBackupStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupStrategyMetaBackupStrategyArrayInput)(nil)).Elem(), BackupStrategyMetaBackupStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceCommonSpecInput)(nil)).Elem(), InstanceCommonSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceCommonSpecPtrInput)(nil)).Elem(), InstanceCommonSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDataSpecInput)(nil)).Elem(), InstanceDataSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDataSpecPtrInput)(nil)).Elem(), InstanceDataSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupJobDetailTableContentInput)(nil)).Elem(), GetBackupJobDetailTableContentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupJobDetailTableContentArrayInput)(nil)).Elem(), GetBackupJobDetailTableContentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupJobsBackUpJobInput)(nil)).Elem(), GetBackupJobsBackUpJobArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupJobsBackUpJobArrayInput)(nil)).Elem(), GetBackupJobsBackUpJobArray{})
	pulumi.RegisterOutputType(BackupStrategyDataBackupStrategyOutput{})
	pulumi.RegisterOutputType(BackupStrategyDataBackupStrategyArrayOutput{})
	pulumi.RegisterOutputType(BackupStrategyDataBackupStrategyBackUpTableOutput{})
	pulumi.RegisterOutputType(BackupStrategyDataBackupStrategyBackUpTableArrayOutput{})
	pulumi.RegisterOutputType(BackupStrategyMetaBackupStrategyOutput{})
	pulumi.RegisterOutputType(BackupStrategyMetaBackupStrategyArrayOutput{})
	pulumi.RegisterOutputType(InstanceCommonSpecOutput{})
	pulumi.RegisterOutputType(InstanceCommonSpecPtrOutput{})
	pulumi.RegisterOutputType(InstanceDataSpecOutput{})
	pulumi.RegisterOutputType(InstanceDataSpecPtrOutput{})
	pulumi.RegisterOutputType(GetBackupJobDetailTableContentOutput{})
	pulumi.RegisterOutputType(GetBackupJobDetailTableContentArrayOutput{})
	pulumi.RegisterOutputType(GetBackupJobsBackUpJobOutput{})
	pulumi.RegisterOutputType(GetBackupJobsBackUpJobArrayOutput{})
}
