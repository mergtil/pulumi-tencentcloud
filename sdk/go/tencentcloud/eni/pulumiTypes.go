// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eni

import (
	"context"
	"reflect"

	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type EniIpv4 struct {
	Description *string `pulumi:"description"`
	Ip          string  `pulumi:"ip"`
	Primary     bool    `pulumi:"primary"`
}

// EniIpv4Input is an input type that accepts EniIpv4Args and EniIpv4Output values.
// You can construct a concrete instance of `EniIpv4Input` via:
//
//	EniIpv4Args{...}
type EniIpv4Input interface {
	pulumi.Input

	ToEniIpv4Output() EniIpv4Output
	ToEniIpv4OutputWithContext(context.Context) EniIpv4Output
}

type EniIpv4Args struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Ip          pulumi.StringInput    `pulumi:"ip"`
	Primary     pulumi.BoolInput      `pulumi:"primary"`
}

func (EniIpv4Args) ElementType() reflect.Type {
	return reflect.TypeOf((*EniIpv4)(nil)).Elem()
}

func (i EniIpv4Args) ToEniIpv4Output() EniIpv4Output {
	return i.ToEniIpv4OutputWithContext(context.Background())
}

func (i EniIpv4Args) ToEniIpv4OutputWithContext(ctx context.Context) EniIpv4Output {
	return pulumi.ToOutputWithContext(ctx, i).(EniIpv4Output)
}

// EniIpv4ArrayInput is an input type that accepts EniIpv4Array and EniIpv4ArrayOutput values.
// You can construct a concrete instance of `EniIpv4ArrayInput` via:
//
//	EniIpv4Array{ EniIpv4Args{...} }
type EniIpv4ArrayInput interface {
	pulumi.Input

	ToEniIpv4ArrayOutput() EniIpv4ArrayOutput
	ToEniIpv4ArrayOutputWithContext(context.Context) EniIpv4ArrayOutput
}

type EniIpv4Array []EniIpv4Input

func (EniIpv4Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EniIpv4)(nil)).Elem()
}

func (i EniIpv4Array) ToEniIpv4ArrayOutput() EniIpv4ArrayOutput {
	return i.ToEniIpv4ArrayOutputWithContext(context.Background())
}

func (i EniIpv4Array) ToEniIpv4ArrayOutputWithContext(ctx context.Context) EniIpv4ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniIpv4ArrayOutput)
}

type EniIpv4Output struct{ *pulumi.OutputState }

func (EniIpv4Output) ElementType() reflect.Type {
	return reflect.TypeOf((*EniIpv4)(nil)).Elem()
}

func (o EniIpv4Output) ToEniIpv4Output() EniIpv4Output {
	return o
}

func (o EniIpv4Output) ToEniIpv4OutputWithContext(ctx context.Context) EniIpv4Output {
	return o
}

func (o EniIpv4Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EniIpv4) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o EniIpv4Output) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v EniIpv4) string { return v.Ip }).(pulumi.StringOutput)
}

func (o EniIpv4Output) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v EniIpv4) bool { return v.Primary }).(pulumi.BoolOutput)
}

type EniIpv4ArrayOutput struct{ *pulumi.OutputState }

func (EniIpv4ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EniIpv4)(nil)).Elem()
}

func (o EniIpv4ArrayOutput) ToEniIpv4ArrayOutput() EniIpv4ArrayOutput {
	return o
}

func (o EniIpv4ArrayOutput) ToEniIpv4ArrayOutputWithContext(ctx context.Context) EniIpv4ArrayOutput {
	return o
}

func (o EniIpv4ArrayOutput) Index(i pulumi.IntInput) EniIpv4Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EniIpv4 {
		return vs[0].([]EniIpv4)[vs[1].(int)]
	}).(EniIpv4Output)
}

type EniIpv4Info struct {
	Description *string `pulumi:"description"`
	Ip          *string `pulumi:"ip"`
	Primary     *bool   `pulumi:"primary"`
}

// EniIpv4InfoInput is an input type that accepts EniIpv4InfoArgs and EniIpv4InfoOutput values.
// You can construct a concrete instance of `EniIpv4InfoInput` via:
//
//	EniIpv4InfoArgs{...}
type EniIpv4InfoInput interface {
	pulumi.Input

	ToEniIpv4InfoOutput() EniIpv4InfoOutput
	ToEniIpv4InfoOutputWithContext(context.Context) EniIpv4InfoOutput
}

type EniIpv4InfoArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	Ip          pulumi.StringPtrInput `pulumi:"ip"`
	Primary     pulumi.BoolPtrInput   `pulumi:"primary"`
}

func (EniIpv4InfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EniIpv4Info)(nil)).Elem()
}

func (i EniIpv4InfoArgs) ToEniIpv4InfoOutput() EniIpv4InfoOutput {
	return i.ToEniIpv4InfoOutputWithContext(context.Background())
}

func (i EniIpv4InfoArgs) ToEniIpv4InfoOutputWithContext(ctx context.Context) EniIpv4InfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniIpv4InfoOutput)
}

// EniIpv4InfoArrayInput is an input type that accepts EniIpv4InfoArray and EniIpv4InfoArrayOutput values.
// You can construct a concrete instance of `EniIpv4InfoArrayInput` via:
//
//	EniIpv4InfoArray{ EniIpv4InfoArgs{...} }
type EniIpv4InfoArrayInput interface {
	pulumi.Input

	ToEniIpv4InfoArrayOutput() EniIpv4InfoArrayOutput
	ToEniIpv4InfoArrayOutputWithContext(context.Context) EniIpv4InfoArrayOutput
}

type EniIpv4InfoArray []EniIpv4InfoInput

func (EniIpv4InfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EniIpv4Info)(nil)).Elem()
}

func (i EniIpv4InfoArray) ToEniIpv4InfoArrayOutput() EniIpv4InfoArrayOutput {
	return i.ToEniIpv4InfoArrayOutputWithContext(context.Background())
}

func (i EniIpv4InfoArray) ToEniIpv4InfoArrayOutputWithContext(ctx context.Context) EniIpv4InfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniIpv4InfoArrayOutput)
}

type EniIpv4InfoOutput struct{ *pulumi.OutputState }

func (EniIpv4InfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EniIpv4Info)(nil)).Elem()
}

func (o EniIpv4InfoOutput) ToEniIpv4InfoOutput() EniIpv4InfoOutput {
	return o
}

func (o EniIpv4InfoOutput) ToEniIpv4InfoOutputWithContext(ctx context.Context) EniIpv4InfoOutput {
	return o
}

func (o EniIpv4InfoOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EniIpv4Info) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o EniIpv4InfoOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EniIpv4Info) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

func (o EniIpv4InfoOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EniIpv4Info) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

type EniIpv4InfoArrayOutput struct{ *pulumi.OutputState }

func (EniIpv4InfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EniIpv4Info)(nil)).Elem()
}

func (o EniIpv4InfoArrayOutput) ToEniIpv4InfoArrayOutput() EniIpv4InfoArrayOutput {
	return o
}

func (o EniIpv4InfoArrayOutput) ToEniIpv4InfoArrayOutputWithContext(ctx context.Context) EniIpv4InfoArrayOutput {
	return o
}

func (o EniIpv4InfoArrayOutput) Index(i pulumi.IntInput) EniIpv4InfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EniIpv4Info {
		return vs[0].([]EniIpv4Info)[vs[1].(int)]
	}).(EniIpv4InfoOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EniIpv4Input)(nil)).Elem(), EniIpv4Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*EniIpv4ArrayInput)(nil)).Elem(), EniIpv4Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*EniIpv4InfoInput)(nil)).Elem(), EniIpv4InfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EniIpv4InfoArrayInput)(nil)).Elem(), EniIpv4InfoArray{})
	pulumi.RegisterOutputType(EniIpv4Output{})
	pulumi.RegisterOutputType(EniIpv4ArrayOutput{})
	pulumi.RegisterOutputType(EniIpv4InfoOutput{})
	pulumi.RegisterOutputType(EniIpv4InfoArrayOutput{})
}
