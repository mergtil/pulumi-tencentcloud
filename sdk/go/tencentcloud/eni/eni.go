// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eni

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Eni struct {
	pulumi.CustomResourceState

	// Creation time of the ENI.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the ENI, maximum length 60.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The number of intranet IPv4s. When it is greater than 1, there is only one primary intranet IP. The others are auxiliary
	// intranet IPs, which conflict with `ipv4s`.
	Ipv4Count pulumi.IntPtrOutput `pulumi:"ipv4Count"`
	// An information list of IPv4s. Each element contains the following attributes:
	Ipv4Infos EniIpv4InfoArrayOutput `pulumi:"ipv4Infos"`
	// Applying for intranet IPv4s collection, conflict with `ipv4_count`. When there are multiple ipv4s, can only be one
	// primary IP, and the maximum length of the array is 30. Each element contains the following attributes:
	Ipv4s EniIpv4ArrayOutput `pulumi:"ipv4s"`
	// MAC address.
	Mac pulumi.StringOutput `pulumi:"mac"`
	// Name of the ENI, maximum length 60.
	Name pulumi.StringOutput `pulumi:"name"`
	// Indicates whether the IP is primary.
	Primary pulumi.BoolOutput `pulumi:"primary"`
	// A set of security group IDs.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// State of the ENI.
	State pulumi.StringOutput `pulumi:"state"`
	// ID of the subnet within this vpc.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Tags of the ENI.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// ID of the vpc.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewEni registers a new resource with the given unique name, arguments, and options.
func NewEni(ctx *pulumi.Context,
	name string, args *EniArgs, opts ...pulumi.ResourceOption) (*Eni, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Eni
	err := ctx.RegisterResource("tencentcloud:Eni/eni:Eni", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEni gets an existing Eni resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEni(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EniState, opts ...pulumi.ResourceOption) (*Eni, error) {
	var resource Eni
	err := ctx.ReadResource("tencentcloud:Eni/eni:Eni", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Eni resources.
type eniState struct {
	// Creation time of the ENI.
	CreateTime *string `pulumi:"createTime"`
	// Description of the ENI, maximum length 60.
	Description *string `pulumi:"description"`
	// The number of intranet IPv4s. When it is greater than 1, there is only one primary intranet IP. The others are auxiliary
	// intranet IPs, which conflict with `ipv4s`.
	Ipv4Count *int `pulumi:"ipv4Count"`
	// An information list of IPv4s. Each element contains the following attributes:
	Ipv4Infos []EniIpv4Info `pulumi:"ipv4Infos"`
	// Applying for intranet IPv4s collection, conflict with `ipv4_count`. When there are multiple ipv4s, can only be one
	// primary IP, and the maximum length of the array is 30. Each element contains the following attributes:
	Ipv4s []EniIpv4 `pulumi:"ipv4s"`
	// MAC address.
	Mac *string `pulumi:"mac"`
	// Name of the ENI, maximum length 60.
	Name *string `pulumi:"name"`
	// Indicates whether the IP is primary.
	Primary *bool `pulumi:"primary"`
	// A set of security group IDs.
	SecurityGroups []string `pulumi:"securityGroups"`
	// State of the ENI.
	State *string `pulumi:"state"`
	// ID of the subnet within this vpc.
	SubnetId *string `pulumi:"subnetId"`
	// Tags of the ENI.
	Tags map[string]interface{} `pulumi:"tags"`
	// ID of the vpc.
	VpcId *string `pulumi:"vpcId"`
}

type EniState struct {
	// Creation time of the ENI.
	CreateTime pulumi.StringPtrInput
	// Description of the ENI, maximum length 60.
	Description pulumi.StringPtrInput
	// The number of intranet IPv4s. When it is greater than 1, there is only one primary intranet IP. The others are auxiliary
	// intranet IPs, which conflict with `ipv4s`.
	Ipv4Count pulumi.IntPtrInput
	// An information list of IPv4s. Each element contains the following attributes:
	Ipv4Infos EniIpv4InfoArrayInput
	// Applying for intranet IPv4s collection, conflict with `ipv4_count`. When there are multiple ipv4s, can only be one
	// primary IP, and the maximum length of the array is 30. Each element contains the following attributes:
	Ipv4s EniIpv4ArrayInput
	// MAC address.
	Mac pulumi.StringPtrInput
	// Name of the ENI, maximum length 60.
	Name pulumi.StringPtrInput
	// Indicates whether the IP is primary.
	Primary pulumi.BoolPtrInput
	// A set of security group IDs.
	SecurityGroups pulumi.StringArrayInput
	// State of the ENI.
	State pulumi.StringPtrInput
	// ID of the subnet within this vpc.
	SubnetId pulumi.StringPtrInput
	// Tags of the ENI.
	Tags pulumi.MapInput
	// ID of the vpc.
	VpcId pulumi.StringPtrInput
}

func (EniState) ElementType() reflect.Type {
	return reflect.TypeOf((*eniState)(nil)).Elem()
}

type eniArgs struct {
	// Description of the ENI, maximum length 60.
	Description *string `pulumi:"description"`
	// The number of intranet IPv4s. When it is greater than 1, there is only one primary intranet IP. The others are auxiliary
	// intranet IPs, which conflict with `ipv4s`.
	Ipv4Count *int `pulumi:"ipv4Count"`
	// Applying for intranet IPv4s collection, conflict with `ipv4_count`. When there are multiple ipv4s, can only be one
	// primary IP, and the maximum length of the array is 30. Each element contains the following attributes:
	Ipv4s []EniIpv4 `pulumi:"ipv4s"`
	// Name of the ENI, maximum length 60.
	Name *string `pulumi:"name"`
	// A set of security group IDs.
	SecurityGroups []string `pulumi:"securityGroups"`
	// ID of the subnet within this vpc.
	SubnetId string `pulumi:"subnetId"`
	// Tags of the ENI.
	Tags map[string]interface{} `pulumi:"tags"`
	// ID of the vpc.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Eni resource.
type EniArgs struct {
	// Description of the ENI, maximum length 60.
	Description pulumi.StringPtrInput
	// The number of intranet IPv4s. When it is greater than 1, there is only one primary intranet IP. The others are auxiliary
	// intranet IPs, which conflict with `ipv4s`.
	Ipv4Count pulumi.IntPtrInput
	// Applying for intranet IPv4s collection, conflict with `ipv4_count`. When there are multiple ipv4s, can only be one
	// primary IP, and the maximum length of the array is 30. Each element contains the following attributes:
	Ipv4s EniIpv4ArrayInput
	// Name of the ENI, maximum length 60.
	Name pulumi.StringPtrInput
	// A set of security group IDs.
	SecurityGroups pulumi.StringArrayInput
	// ID of the subnet within this vpc.
	SubnetId pulumi.StringInput
	// Tags of the ENI.
	Tags pulumi.MapInput
	// ID of the vpc.
	VpcId pulumi.StringInput
}

func (EniArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eniArgs)(nil)).Elem()
}

type EniInput interface {
	pulumi.Input

	ToEniOutput() EniOutput
	ToEniOutputWithContext(ctx context.Context) EniOutput
}

func (*Eni) ElementType() reflect.Type {
	return reflect.TypeOf((**Eni)(nil)).Elem()
}

func (i *Eni) ToEniOutput() EniOutput {
	return i.ToEniOutputWithContext(context.Background())
}

func (i *Eni) ToEniOutputWithContext(ctx context.Context) EniOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniOutput)
}

// EniArrayInput is an input type that accepts EniArray and EniArrayOutput values.
// You can construct a concrete instance of `EniArrayInput` via:
//
//	EniArray{ EniArgs{...} }
type EniArrayInput interface {
	pulumi.Input

	ToEniArrayOutput() EniArrayOutput
	ToEniArrayOutputWithContext(context.Context) EniArrayOutput
}

type EniArray []EniInput

func (EniArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Eni)(nil)).Elem()
}

func (i EniArray) ToEniArrayOutput() EniArrayOutput {
	return i.ToEniArrayOutputWithContext(context.Background())
}

func (i EniArray) ToEniArrayOutputWithContext(ctx context.Context) EniArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniArrayOutput)
}

// EniMapInput is an input type that accepts EniMap and EniMapOutput values.
// You can construct a concrete instance of `EniMapInput` via:
//
//	EniMap{ "key": EniArgs{...} }
type EniMapInput interface {
	pulumi.Input

	ToEniMapOutput() EniMapOutput
	ToEniMapOutputWithContext(context.Context) EniMapOutput
}

type EniMap map[string]EniInput

func (EniMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Eni)(nil)).Elem()
}

func (i EniMap) ToEniMapOutput() EniMapOutput {
	return i.ToEniMapOutputWithContext(context.Background())
}

func (i EniMap) ToEniMapOutputWithContext(ctx context.Context) EniMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniMapOutput)
}

type EniOutput struct{ *pulumi.OutputState }

func (EniOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Eni)(nil)).Elem()
}

func (o EniOutput) ToEniOutput() EniOutput {
	return o
}

func (o EniOutput) ToEniOutputWithContext(ctx context.Context) EniOutput {
	return o
}

// Creation time of the ENI.
func (o EniOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the ENI, maximum length 60.
func (o EniOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The number of intranet IPv4s. When it is greater than 1, there is only one primary intranet IP. The others are auxiliary
// intranet IPs, which conflict with `ipv4s`.
func (o EniOutput) Ipv4Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Eni) pulumi.IntPtrOutput { return v.Ipv4Count }).(pulumi.IntPtrOutput)
}

// An information list of IPv4s. Each element contains the following attributes:
func (o EniOutput) Ipv4Infos() EniIpv4InfoArrayOutput {
	return o.ApplyT(func(v *Eni) EniIpv4InfoArrayOutput { return v.Ipv4Infos }).(EniIpv4InfoArrayOutput)
}

// Applying for intranet IPv4s collection, conflict with `ipv4_count`. When there are multiple ipv4s, can only be one
// primary IP, and the maximum length of the array is 30. Each element contains the following attributes:
func (o EniOutput) Ipv4s() EniIpv4ArrayOutput {
	return o.ApplyT(func(v *Eni) EniIpv4ArrayOutput { return v.Ipv4s }).(EniIpv4ArrayOutput)
}

// MAC address.
func (o EniOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.Mac }).(pulumi.StringOutput)
}

// Name of the ENI, maximum length 60.
func (o EniOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Indicates whether the IP is primary.
func (o EniOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v *Eni) pulumi.BoolOutput { return v.Primary }).(pulumi.BoolOutput)
}

// A set of security group IDs.
func (o EniOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// State of the ENI.
func (o EniOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// ID of the subnet within this vpc.
func (o EniOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Tags of the ENI.
func (o EniOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Eni) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// ID of the vpc.
func (o EniOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type EniArrayOutput struct{ *pulumi.OutputState }

func (EniArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Eni)(nil)).Elem()
}

func (o EniArrayOutput) ToEniArrayOutput() EniArrayOutput {
	return o
}

func (o EniArrayOutput) ToEniArrayOutputWithContext(ctx context.Context) EniArrayOutput {
	return o
}

func (o EniArrayOutput) Index(i pulumi.IntInput) EniOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Eni {
		return vs[0].([]*Eni)[vs[1].(int)]
	}).(EniOutput)
}

type EniMapOutput struct{ *pulumi.OutputState }

func (EniMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Eni)(nil)).Elem()
}

func (o EniMapOutput) ToEniMapOutput() EniMapOutput {
	return o
}

func (o EniMapOutput) ToEniMapOutputWithContext(ctx context.Context) EniMapOutput {
	return o
}

func (o EniMapOutput) MapIndex(k pulumi.StringInput) EniOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Eni {
		return vs[0].(map[string]*Eni)[vs[1].(string)]
	}).(EniOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EniInput)(nil)).Elem(), &Eni{})
	pulumi.RegisterInputType(reflect.TypeOf((*EniArrayInput)(nil)).Elem(), EniArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EniMapInput)(nil)).Elem(), EniMap{})
	pulumi.RegisterOutputType(EniOutput{})
	pulumi.RegisterOutputType(EniArrayOutput{})
	pulumi.RegisterOutputType(EniMapOutput{})
}
