// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SwitchForUpgrade struct {
	pulumi.CustomResourceState

	// Instance ID in the format of cdb-c1nl9rpv. It is the same as the instance ID displayed on the TencentDB Console page.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewSwitchForUpgrade registers a new resource with the given unique name, arguments, and options.
func NewSwitchForUpgrade(ctx *pulumi.Context,
	name string, args *SwitchForUpgradeArgs, opts ...pulumi.ResourceOption) (*SwitchForUpgrade, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwitchForUpgrade
	err := ctx.RegisterResource("tencentcloud:Mysql/switchForUpgrade:SwitchForUpgrade", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwitchForUpgrade gets an existing SwitchForUpgrade resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwitchForUpgrade(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwitchForUpgradeState, opts ...pulumi.ResourceOption) (*SwitchForUpgrade, error) {
	var resource SwitchForUpgrade
	err := ctx.ReadResource("tencentcloud:Mysql/switchForUpgrade:SwitchForUpgrade", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwitchForUpgrade resources.
type switchForUpgradeState struct {
	// Instance ID in the format of cdb-c1nl9rpv. It is the same as the instance ID displayed on the TencentDB Console page.
	InstanceId *string `pulumi:"instanceId"`
}

type SwitchForUpgradeState struct {
	// Instance ID in the format of cdb-c1nl9rpv. It is the same as the instance ID displayed on the TencentDB Console page.
	InstanceId pulumi.StringPtrInput
}

func (SwitchForUpgradeState) ElementType() reflect.Type {
	return reflect.TypeOf((*switchForUpgradeState)(nil)).Elem()
}

type switchForUpgradeArgs struct {
	// Instance ID in the format of cdb-c1nl9rpv. It is the same as the instance ID displayed on the TencentDB Console page.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a SwitchForUpgrade resource.
type SwitchForUpgradeArgs struct {
	// Instance ID in the format of cdb-c1nl9rpv. It is the same as the instance ID displayed on the TencentDB Console page.
	InstanceId pulumi.StringInput
}

func (SwitchForUpgradeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*switchForUpgradeArgs)(nil)).Elem()
}

type SwitchForUpgradeInput interface {
	pulumi.Input

	ToSwitchForUpgradeOutput() SwitchForUpgradeOutput
	ToSwitchForUpgradeOutputWithContext(ctx context.Context) SwitchForUpgradeOutput
}

func (*SwitchForUpgrade) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchForUpgrade)(nil)).Elem()
}

func (i *SwitchForUpgrade) ToSwitchForUpgradeOutput() SwitchForUpgradeOutput {
	return i.ToSwitchForUpgradeOutputWithContext(context.Background())
}

func (i *SwitchForUpgrade) ToSwitchForUpgradeOutputWithContext(ctx context.Context) SwitchForUpgradeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchForUpgradeOutput)
}

// SwitchForUpgradeArrayInput is an input type that accepts SwitchForUpgradeArray and SwitchForUpgradeArrayOutput values.
// You can construct a concrete instance of `SwitchForUpgradeArrayInput` via:
//
//	SwitchForUpgradeArray{ SwitchForUpgradeArgs{...} }
type SwitchForUpgradeArrayInput interface {
	pulumi.Input

	ToSwitchForUpgradeArrayOutput() SwitchForUpgradeArrayOutput
	ToSwitchForUpgradeArrayOutputWithContext(context.Context) SwitchForUpgradeArrayOutput
}

type SwitchForUpgradeArray []SwitchForUpgradeInput

func (SwitchForUpgradeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchForUpgrade)(nil)).Elem()
}

func (i SwitchForUpgradeArray) ToSwitchForUpgradeArrayOutput() SwitchForUpgradeArrayOutput {
	return i.ToSwitchForUpgradeArrayOutputWithContext(context.Background())
}

func (i SwitchForUpgradeArray) ToSwitchForUpgradeArrayOutputWithContext(ctx context.Context) SwitchForUpgradeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchForUpgradeArrayOutput)
}

// SwitchForUpgradeMapInput is an input type that accepts SwitchForUpgradeMap and SwitchForUpgradeMapOutput values.
// You can construct a concrete instance of `SwitchForUpgradeMapInput` via:
//
//	SwitchForUpgradeMap{ "key": SwitchForUpgradeArgs{...} }
type SwitchForUpgradeMapInput interface {
	pulumi.Input

	ToSwitchForUpgradeMapOutput() SwitchForUpgradeMapOutput
	ToSwitchForUpgradeMapOutputWithContext(context.Context) SwitchForUpgradeMapOutput
}

type SwitchForUpgradeMap map[string]SwitchForUpgradeInput

func (SwitchForUpgradeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchForUpgrade)(nil)).Elem()
}

func (i SwitchForUpgradeMap) ToSwitchForUpgradeMapOutput() SwitchForUpgradeMapOutput {
	return i.ToSwitchForUpgradeMapOutputWithContext(context.Background())
}

func (i SwitchForUpgradeMap) ToSwitchForUpgradeMapOutputWithContext(ctx context.Context) SwitchForUpgradeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwitchForUpgradeMapOutput)
}

type SwitchForUpgradeOutput struct{ *pulumi.OutputState }

func (SwitchForUpgradeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwitchForUpgrade)(nil)).Elem()
}

func (o SwitchForUpgradeOutput) ToSwitchForUpgradeOutput() SwitchForUpgradeOutput {
	return o
}

func (o SwitchForUpgradeOutput) ToSwitchForUpgradeOutputWithContext(ctx context.Context) SwitchForUpgradeOutput {
	return o
}

// Instance ID in the format of cdb-c1nl9rpv. It is the same as the instance ID displayed on the TencentDB Console page.
func (o SwitchForUpgradeOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SwitchForUpgrade) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type SwitchForUpgradeArrayOutput struct{ *pulumi.OutputState }

func (SwitchForUpgradeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwitchForUpgrade)(nil)).Elem()
}

func (o SwitchForUpgradeArrayOutput) ToSwitchForUpgradeArrayOutput() SwitchForUpgradeArrayOutput {
	return o
}

func (o SwitchForUpgradeArrayOutput) ToSwitchForUpgradeArrayOutputWithContext(ctx context.Context) SwitchForUpgradeArrayOutput {
	return o
}

func (o SwitchForUpgradeArrayOutput) Index(i pulumi.IntInput) SwitchForUpgradeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwitchForUpgrade {
		return vs[0].([]*SwitchForUpgrade)[vs[1].(int)]
	}).(SwitchForUpgradeOutput)
}

type SwitchForUpgradeMapOutput struct{ *pulumi.OutputState }

func (SwitchForUpgradeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwitchForUpgrade)(nil)).Elem()
}

func (o SwitchForUpgradeMapOutput) ToSwitchForUpgradeMapOutput() SwitchForUpgradeMapOutput {
	return o
}

func (o SwitchForUpgradeMapOutput) ToSwitchForUpgradeMapOutputWithContext(ctx context.Context) SwitchForUpgradeMapOutput {
	return o
}

func (o SwitchForUpgradeMapOutput) MapIndex(k pulumi.StringInput) SwitchForUpgradeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwitchForUpgrade {
		return vs[0].(map[string]*SwitchForUpgrade)[vs[1].(string)]
	}).(SwitchForUpgradeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchForUpgradeInput)(nil)).Elem(), &SwitchForUpgrade{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchForUpgradeArrayInput)(nil)).Elem(), SwitchForUpgradeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwitchForUpgradeMapInput)(nil)).Elem(), SwitchForUpgradeMap{})
	pulumi.RegisterOutputType(SwitchForUpgradeOutput{})
	pulumi.RegisterOutputType(SwitchForUpgradeArrayOutput{})
	pulumi.RegisterOutputType(SwitchForUpgradeMapOutput{})
}
