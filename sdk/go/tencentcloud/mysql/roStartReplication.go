// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RoStartReplication struct {
	pulumi.CustomResourceState

	// Read-Only instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewRoStartReplication registers a new resource with the given unique name, arguments, and options.
func NewRoStartReplication(ctx *pulumi.Context,
	name string, args *RoStartReplicationArgs, opts ...pulumi.ResourceOption) (*RoStartReplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoStartReplication
	err := ctx.RegisterResource("tencentcloud:Mysql/roStartReplication:RoStartReplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoStartReplication gets an existing RoStartReplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoStartReplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoStartReplicationState, opts ...pulumi.ResourceOption) (*RoStartReplication, error) {
	var resource RoStartReplication
	err := ctx.ReadResource("tencentcloud:Mysql/roStartReplication:RoStartReplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoStartReplication resources.
type roStartReplicationState struct {
	// Read-Only instance ID.
	InstanceId *string `pulumi:"instanceId"`
}

type RoStartReplicationState struct {
	// Read-Only instance ID.
	InstanceId pulumi.StringPtrInput
}

func (RoStartReplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*roStartReplicationState)(nil)).Elem()
}

type roStartReplicationArgs struct {
	// Read-Only instance ID.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a RoStartReplication resource.
type RoStartReplicationArgs struct {
	// Read-Only instance ID.
	InstanceId pulumi.StringInput
}

func (RoStartReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roStartReplicationArgs)(nil)).Elem()
}

type RoStartReplicationInput interface {
	pulumi.Input

	ToRoStartReplicationOutput() RoStartReplicationOutput
	ToRoStartReplicationOutputWithContext(ctx context.Context) RoStartReplicationOutput
}

func (*RoStartReplication) ElementType() reflect.Type {
	return reflect.TypeOf((**RoStartReplication)(nil)).Elem()
}

func (i *RoStartReplication) ToRoStartReplicationOutput() RoStartReplicationOutput {
	return i.ToRoStartReplicationOutputWithContext(context.Background())
}

func (i *RoStartReplication) ToRoStartReplicationOutputWithContext(ctx context.Context) RoStartReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoStartReplicationOutput)
}

// RoStartReplicationArrayInput is an input type that accepts RoStartReplicationArray and RoStartReplicationArrayOutput values.
// You can construct a concrete instance of `RoStartReplicationArrayInput` via:
//
//	RoStartReplicationArray{ RoStartReplicationArgs{...} }
type RoStartReplicationArrayInput interface {
	pulumi.Input

	ToRoStartReplicationArrayOutput() RoStartReplicationArrayOutput
	ToRoStartReplicationArrayOutputWithContext(context.Context) RoStartReplicationArrayOutput
}

type RoStartReplicationArray []RoStartReplicationInput

func (RoStartReplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoStartReplication)(nil)).Elem()
}

func (i RoStartReplicationArray) ToRoStartReplicationArrayOutput() RoStartReplicationArrayOutput {
	return i.ToRoStartReplicationArrayOutputWithContext(context.Background())
}

func (i RoStartReplicationArray) ToRoStartReplicationArrayOutputWithContext(ctx context.Context) RoStartReplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoStartReplicationArrayOutput)
}

// RoStartReplicationMapInput is an input type that accepts RoStartReplicationMap and RoStartReplicationMapOutput values.
// You can construct a concrete instance of `RoStartReplicationMapInput` via:
//
//	RoStartReplicationMap{ "key": RoStartReplicationArgs{...} }
type RoStartReplicationMapInput interface {
	pulumi.Input

	ToRoStartReplicationMapOutput() RoStartReplicationMapOutput
	ToRoStartReplicationMapOutputWithContext(context.Context) RoStartReplicationMapOutput
}

type RoStartReplicationMap map[string]RoStartReplicationInput

func (RoStartReplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoStartReplication)(nil)).Elem()
}

func (i RoStartReplicationMap) ToRoStartReplicationMapOutput() RoStartReplicationMapOutput {
	return i.ToRoStartReplicationMapOutputWithContext(context.Background())
}

func (i RoStartReplicationMap) ToRoStartReplicationMapOutputWithContext(ctx context.Context) RoStartReplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoStartReplicationMapOutput)
}

type RoStartReplicationOutput struct{ *pulumi.OutputState }

func (RoStartReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoStartReplication)(nil)).Elem()
}

func (o RoStartReplicationOutput) ToRoStartReplicationOutput() RoStartReplicationOutput {
	return o
}

func (o RoStartReplicationOutput) ToRoStartReplicationOutputWithContext(ctx context.Context) RoStartReplicationOutput {
	return o
}

// Read-Only instance ID.
func (o RoStartReplicationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoStartReplication) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type RoStartReplicationArrayOutput struct{ *pulumi.OutputState }

func (RoStartReplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoStartReplication)(nil)).Elem()
}

func (o RoStartReplicationArrayOutput) ToRoStartReplicationArrayOutput() RoStartReplicationArrayOutput {
	return o
}

func (o RoStartReplicationArrayOutput) ToRoStartReplicationArrayOutputWithContext(ctx context.Context) RoStartReplicationArrayOutput {
	return o
}

func (o RoStartReplicationArrayOutput) Index(i pulumi.IntInput) RoStartReplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoStartReplication {
		return vs[0].([]*RoStartReplication)[vs[1].(int)]
	}).(RoStartReplicationOutput)
}

type RoStartReplicationMapOutput struct{ *pulumi.OutputState }

func (RoStartReplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoStartReplication)(nil)).Elem()
}

func (o RoStartReplicationMapOutput) ToRoStartReplicationMapOutput() RoStartReplicationMapOutput {
	return o
}

func (o RoStartReplicationMapOutput) ToRoStartReplicationMapOutputWithContext(ctx context.Context) RoStartReplicationMapOutput {
	return o
}

func (o RoStartReplicationMapOutput) MapIndex(k pulumi.StringInput) RoStartReplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoStartReplication {
		return vs[0].(map[string]*RoStartReplication)[vs[1].(string)]
	}).(RoStartReplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoStartReplicationInput)(nil)).Elem(), &RoStartReplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoStartReplicationArrayInput)(nil)).Elem(), RoStartReplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoStartReplicationMapInput)(nil)).Elem(), RoStartReplicationMap{})
	pulumi.RegisterOutputType(RoStartReplicationOutput{})
	pulumi.RegisterOutputType(RoStartReplicationArrayOutput{})
	pulumi.RegisterOutputType(RoStartReplicationMapOutput{})
}
