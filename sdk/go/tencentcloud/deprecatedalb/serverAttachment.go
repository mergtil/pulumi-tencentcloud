// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deprecatedalb

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServerAttachment struct {
	pulumi.CustomResourceState

	// list of backend server.
	Backends ServerAttachmentBackendArrayOutput `pulumi:"backends"`
	// listener ID.
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// loadbalancer ID.
	LoadbalancerId pulumi.StringOutput `pulumi:"loadbalancerId"`
	// location ID, only support for layer 7 loadbalancer.
	LocationId pulumi.StringOutput `pulumi:"locationId"`
	// The protocol type, http or tcp.
	ProtocolType pulumi.StringOutput `pulumi:"protocolType"`
}

// NewServerAttachment registers a new resource with the given unique name, arguments, and options.
func NewServerAttachment(ctx *pulumi.Context,
	name string, args *ServerAttachmentArgs, opts ...pulumi.ResourceOption) (*ServerAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Backends == nil {
		return nil, errors.New("invalid value for required argument 'Backends'")
	}
	if args.ListenerId == nil {
		return nil, errors.New("invalid value for required argument 'ListenerId'")
	}
	if args.LoadbalancerId == nil {
		return nil, errors.New("invalid value for required argument 'LoadbalancerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerAttachment
	err := ctx.RegisterResource("tencentcloud:Deprecatedalb/serverAttachment:ServerAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerAttachment gets an existing ServerAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerAttachmentState, opts ...pulumi.ResourceOption) (*ServerAttachment, error) {
	var resource ServerAttachment
	err := ctx.ReadResource("tencentcloud:Deprecatedalb/serverAttachment:ServerAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerAttachment resources.
type serverAttachmentState struct {
	// list of backend server.
	Backends []ServerAttachmentBackend `pulumi:"backends"`
	// listener ID.
	ListenerId *string `pulumi:"listenerId"`
	// loadbalancer ID.
	LoadbalancerId *string `pulumi:"loadbalancerId"`
	// location ID, only support for layer 7 loadbalancer.
	LocationId *string `pulumi:"locationId"`
	// The protocol type, http or tcp.
	ProtocolType *string `pulumi:"protocolType"`
}

type ServerAttachmentState struct {
	// list of backend server.
	Backends ServerAttachmentBackendArrayInput
	// listener ID.
	ListenerId pulumi.StringPtrInput
	// loadbalancer ID.
	LoadbalancerId pulumi.StringPtrInput
	// location ID, only support for layer 7 loadbalancer.
	LocationId pulumi.StringPtrInput
	// The protocol type, http or tcp.
	ProtocolType pulumi.StringPtrInput
}

func (ServerAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverAttachmentState)(nil)).Elem()
}

type serverAttachmentArgs struct {
	// list of backend server.
	Backends []ServerAttachmentBackend `pulumi:"backends"`
	// listener ID.
	ListenerId string `pulumi:"listenerId"`
	// loadbalancer ID.
	LoadbalancerId string `pulumi:"loadbalancerId"`
	// location ID, only support for layer 7 loadbalancer.
	LocationId *string `pulumi:"locationId"`
}

// The set of arguments for constructing a ServerAttachment resource.
type ServerAttachmentArgs struct {
	// list of backend server.
	Backends ServerAttachmentBackendArrayInput
	// listener ID.
	ListenerId pulumi.StringInput
	// loadbalancer ID.
	LoadbalancerId pulumi.StringInput
	// location ID, only support for layer 7 loadbalancer.
	LocationId pulumi.StringPtrInput
}

func (ServerAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverAttachmentArgs)(nil)).Elem()
}

type ServerAttachmentInput interface {
	pulumi.Input

	ToServerAttachmentOutput() ServerAttachmentOutput
	ToServerAttachmentOutputWithContext(ctx context.Context) ServerAttachmentOutput
}

func (*ServerAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerAttachment)(nil)).Elem()
}

func (i *ServerAttachment) ToServerAttachmentOutput() ServerAttachmentOutput {
	return i.ToServerAttachmentOutputWithContext(context.Background())
}

func (i *ServerAttachment) ToServerAttachmentOutputWithContext(ctx context.Context) ServerAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerAttachmentOutput)
}

// ServerAttachmentArrayInput is an input type that accepts ServerAttachmentArray and ServerAttachmentArrayOutput values.
// You can construct a concrete instance of `ServerAttachmentArrayInput` via:
//
//	ServerAttachmentArray{ ServerAttachmentArgs{...} }
type ServerAttachmentArrayInput interface {
	pulumi.Input

	ToServerAttachmentArrayOutput() ServerAttachmentArrayOutput
	ToServerAttachmentArrayOutputWithContext(context.Context) ServerAttachmentArrayOutput
}

type ServerAttachmentArray []ServerAttachmentInput

func (ServerAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerAttachment)(nil)).Elem()
}

func (i ServerAttachmentArray) ToServerAttachmentArrayOutput() ServerAttachmentArrayOutput {
	return i.ToServerAttachmentArrayOutputWithContext(context.Background())
}

func (i ServerAttachmentArray) ToServerAttachmentArrayOutputWithContext(ctx context.Context) ServerAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerAttachmentArrayOutput)
}

// ServerAttachmentMapInput is an input type that accepts ServerAttachmentMap and ServerAttachmentMapOutput values.
// You can construct a concrete instance of `ServerAttachmentMapInput` via:
//
//	ServerAttachmentMap{ "key": ServerAttachmentArgs{...} }
type ServerAttachmentMapInput interface {
	pulumi.Input

	ToServerAttachmentMapOutput() ServerAttachmentMapOutput
	ToServerAttachmentMapOutputWithContext(context.Context) ServerAttachmentMapOutput
}

type ServerAttachmentMap map[string]ServerAttachmentInput

func (ServerAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerAttachment)(nil)).Elem()
}

func (i ServerAttachmentMap) ToServerAttachmentMapOutput() ServerAttachmentMapOutput {
	return i.ToServerAttachmentMapOutputWithContext(context.Background())
}

func (i ServerAttachmentMap) ToServerAttachmentMapOutputWithContext(ctx context.Context) ServerAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerAttachmentMapOutput)
}

type ServerAttachmentOutput struct{ *pulumi.OutputState }

func (ServerAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerAttachment)(nil)).Elem()
}

func (o ServerAttachmentOutput) ToServerAttachmentOutput() ServerAttachmentOutput {
	return o
}

func (o ServerAttachmentOutput) ToServerAttachmentOutputWithContext(ctx context.Context) ServerAttachmentOutput {
	return o
}

// list of backend server.
func (o ServerAttachmentOutput) Backends() ServerAttachmentBackendArrayOutput {
	return o.ApplyT(func(v *ServerAttachment) ServerAttachmentBackendArrayOutput { return v.Backends }).(ServerAttachmentBackendArrayOutput)
}

// listener ID.
func (o ServerAttachmentOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerAttachment) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

// loadbalancer ID.
func (o ServerAttachmentOutput) LoadbalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerAttachment) pulumi.StringOutput { return v.LoadbalancerId }).(pulumi.StringOutput)
}

// location ID, only support for layer 7 loadbalancer.
func (o ServerAttachmentOutput) LocationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerAttachment) pulumi.StringOutput { return v.LocationId }).(pulumi.StringOutput)
}

// The protocol type, http or tcp.
func (o ServerAttachmentOutput) ProtocolType() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerAttachment) pulumi.StringOutput { return v.ProtocolType }).(pulumi.StringOutput)
}

type ServerAttachmentArrayOutput struct{ *pulumi.OutputState }

func (ServerAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerAttachment)(nil)).Elem()
}

func (o ServerAttachmentArrayOutput) ToServerAttachmentArrayOutput() ServerAttachmentArrayOutput {
	return o
}

func (o ServerAttachmentArrayOutput) ToServerAttachmentArrayOutputWithContext(ctx context.Context) ServerAttachmentArrayOutput {
	return o
}

func (o ServerAttachmentArrayOutput) Index(i pulumi.IntInput) ServerAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerAttachment {
		return vs[0].([]*ServerAttachment)[vs[1].(int)]
	}).(ServerAttachmentOutput)
}

type ServerAttachmentMapOutput struct{ *pulumi.OutputState }

func (ServerAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerAttachment)(nil)).Elem()
}

func (o ServerAttachmentMapOutput) ToServerAttachmentMapOutput() ServerAttachmentMapOutput {
	return o
}

func (o ServerAttachmentMapOutput) ToServerAttachmentMapOutputWithContext(ctx context.Context) ServerAttachmentMapOutput {
	return o
}

func (o ServerAttachmentMapOutput) MapIndex(k pulumi.StringInput) ServerAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerAttachment {
		return vs[0].(map[string]*ServerAttachment)[vs[1].(string)]
	}).(ServerAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerAttachmentInput)(nil)).Elem(), &ServerAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerAttachmentArrayInput)(nil)).Elem(), ServerAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerAttachmentMapInput)(nil)).Elem(), ServerAttachmentMap{})
	pulumi.RegisterOutputType(ServerAttachmentOutput{})
	pulumi.RegisterOutputType(ServerAttachmentArrayOutput{})
	pulumi.RegisterOutputType(ServerAttachmentMapOutput{})
}
