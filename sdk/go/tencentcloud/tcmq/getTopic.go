// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tcmq

import (
	"context"
	"reflect"

	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupTopic(ctx *pulumi.Context, args *LookupTopicArgs, opts ...pulumi.InvokeOption) (*LookupTopicResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTopicResult
	err := ctx.Invoke("tencentcloud:Tcmq/getTopic:getTopic", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTopic.
type LookupTopicArgs struct {
	Filters          []GetTopicFilter `pulumi:"filters"`
	IsTagFilter      *bool            `pulumi:"isTagFilter"`
	Limit            *int             `pulumi:"limit"`
	Offset           *int             `pulumi:"offset"`
	ResultOutputFile *string          `pulumi:"resultOutputFile"`
	TopicName        *string          `pulumi:"topicName"`
	TopicNameLists   []string         `pulumi:"topicNameLists"`
}

// A collection of values returned by getTopic.
type LookupTopicResult struct {
	Filters []GetTopicFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id               string              `pulumi:"id"`
	IsTagFilter      *bool               `pulumi:"isTagFilter"`
	Limit            *int                `pulumi:"limit"`
	Offset           *int                `pulumi:"offset"`
	ResultOutputFile *string             `pulumi:"resultOutputFile"`
	TopicLists       []GetTopicTopicList `pulumi:"topicLists"`
	TopicName        *string             `pulumi:"topicName"`
	TopicNameLists   []string            `pulumi:"topicNameLists"`
}

func LookupTopicOutput(ctx *pulumi.Context, args LookupTopicOutputArgs, opts ...pulumi.InvokeOption) LookupTopicResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTopicResult, error) {
			args := v.(LookupTopicArgs)
			r, err := LookupTopic(ctx, &args, opts...)
			var s LookupTopicResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTopicResultOutput)
}

// A collection of arguments for invoking getTopic.
type LookupTopicOutputArgs struct {
	Filters          GetTopicFilterArrayInput `pulumi:"filters"`
	IsTagFilter      pulumi.BoolPtrInput      `pulumi:"isTagFilter"`
	Limit            pulumi.IntPtrInput       `pulumi:"limit"`
	Offset           pulumi.IntPtrInput       `pulumi:"offset"`
	ResultOutputFile pulumi.StringPtrInput    `pulumi:"resultOutputFile"`
	TopicName        pulumi.StringPtrInput    `pulumi:"topicName"`
	TopicNameLists   pulumi.StringArrayInput  `pulumi:"topicNameLists"`
}

func (LookupTopicOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTopicArgs)(nil)).Elem()
}

// A collection of values returned by getTopic.
type LookupTopicResultOutput struct{ *pulumi.OutputState }

func (LookupTopicResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTopicResult)(nil)).Elem()
}

func (o LookupTopicResultOutput) ToLookupTopicResultOutput() LookupTopicResultOutput {
	return o
}

func (o LookupTopicResultOutput) ToLookupTopicResultOutputWithContext(ctx context.Context) LookupTopicResultOutput {
	return o
}

func (o LookupTopicResultOutput) Filters() GetTopicFilterArrayOutput {
	return o.ApplyT(func(v LookupTopicResult) []GetTopicFilter { return v.Filters }).(GetTopicFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupTopicResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupTopicResultOutput) IsTagFilter() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupTopicResult) *bool { return v.IsTagFilter }).(pulumi.BoolPtrOutput)
}

func (o LookupTopicResultOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupTopicResult) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

func (o LookupTopicResultOutput) Offset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupTopicResult) *int { return v.Offset }).(pulumi.IntPtrOutput)
}

func (o LookupTopicResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTopicResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o LookupTopicResultOutput) TopicLists() GetTopicTopicListArrayOutput {
	return o.ApplyT(func(v LookupTopicResult) []GetTopicTopicList { return v.TopicLists }).(GetTopicTopicListArrayOutput)
}

func (o LookupTopicResultOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTopicResult) *string { return v.TopicName }).(pulumi.StringPtrOutput)
}

func (o LookupTopicResultOutput) TopicNameLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTopicResult) []string { return v.TopicNameLists }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTopicResultOutput{})
}
