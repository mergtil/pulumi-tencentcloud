// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tcmq

import (
	"context"
	"reflect"

	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupSubscribe(ctx *pulumi.Context, args *LookupSubscribeArgs, opts ...pulumi.InvokeOption) (*LookupSubscribeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSubscribeResult
	err := ctx.Invoke("tencentcloud:Tcmq/getSubscribe:getSubscribe", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubscribe.
type LookupSubscribeArgs struct {
	Limit            *int    `pulumi:"limit"`
	Offset           *int    `pulumi:"offset"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	SubscriptionName *string `pulumi:"subscriptionName"`
	TopicName        string  `pulumi:"topicName"`
}

// A collection of values returned by getSubscribe.
type LookupSubscribeResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id                string                         `pulumi:"id"`
	Limit             *int                           `pulumi:"limit"`
	Offset            *int                           `pulumi:"offset"`
	ResultOutputFile  *string                        `pulumi:"resultOutputFile"`
	SubscriptionLists []GetSubscribeSubscriptionList `pulumi:"subscriptionLists"`
	SubscriptionName  *string                        `pulumi:"subscriptionName"`
	TopicName         string                         `pulumi:"topicName"`
}

func LookupSubscribeOutput(ctx *pulumi.Context, args LookupSubscribeOutputArgs, opts ...pulumi.InvokeOption) LookupSubscribeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSubscribeResult, error) {
			args := v.(LookupSubscribeArgs)
			r, err := LookupSubscribe(ctx, &args, opts...)
			var s LookupSubscribeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSubscribeResultOutput)
}

// A collection of arguments for invoking getSubscribe.
type LookupSubscribeOutputArgs struct {
	Limit            pulumi.IntPtrInput    `pulumi:"limit"`
	Offset           pulumi.IntPtrInput    `pulumi:"offset"`
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	SubscriptionName pulumi.StringPtrInput `pulumi:"subscriptionName"`
	TopicName        pulumi.StringInput    `pulumi:"topicName"`
}

func (LookupSubscribeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubscribeArgs)(nil)).Elem()
}

// A collection of values returned by getSubscribe.
type LookupSubscribeResultOutput struct{ *pulumi.OutputState }

func (LookupSubscribeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubscribeResult)(nil)).Elem()
}

func (o LookupSubscribeResultOutput) ToLookupSubscribeResultOutput() LookupSubscribeResultOutput {
	return o
}

func (o LookupSubscribeResultOutput) ToLookupSubscribeResultOutputWithContext(ctx context.Context) LookupSubscribeResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSubscribeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscribeResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSubscribeResultOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupSubscribeResult) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

func (o LookupSubscribeResultOutput) Offset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupSubscribeResult) *int { return v.Offset }).(pulumi.IntPtrOutput)
}

func (o LookupSubscribeResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubscribeResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o LookupSubscribeResultOutput) SubscriptionLists() GetSubscribeSubscriptionListArrayOutput {
	return o.ApplyT(func(v LookupSubscribeResult) []GetSubscribeSubscriptionList { return v.SubscriptionLists }).(GetSubscribeSubscriptionListArrayOutput)
}

func (o LookupSubscribeResultOutput) SubscriptionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSubscribeResult) *string { return v.SubscriptionName }).(pulumi.StringPtrOutput)
}

func (o LookupSubscribeResultOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubscribeResult) string { return v.TopicName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubscribeResultOutput{})
}
