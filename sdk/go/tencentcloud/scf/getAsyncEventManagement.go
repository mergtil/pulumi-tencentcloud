// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package scf

import (
	"context"
	"reflect"

	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetAsyncEventManagement(ctx *pulumi.Context, args *GetAsyncEventManagementArgs, opts ...pulumi.InvokeOption) (*GetAsyncEventManagementResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAsyncEventManagementResult
	err := ctx.Invoke("tencentcloud:Scf/getAsyncEventManagement:getAsyncEventManagement", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAsyncEventManagement.
type GetAsyncEventManagementArgs struct {
	FunctionName     string   `pulumi:"functionName"`
	InvokeRequestId  *string  `pulumi:"invokeRequestId"`
	InvokeTypes      []string `pulumi:"invokeTypes"`
	Namespace        *string  `pulumi:"namespace"`
	Order            *string  `pulumi:"order"`
	Orderby          *string  `pulumi:"orderby"`
	Qualifier        *string  `pulumi:"qualifier"`
	ResultOutputFile *string  `pulumi:"resultOutputFile"`
	Statuses         []string `pulumi:"statuses"`
}

// A collection of values returned by getAsyncEventManagement.
type GetAsyncEventManagementResult struct {
	EventLists   []GetAsyncEventManagementEventList `pulumi:"eventLists"`
	FunctionName string                             `pulumi:"functionName"`
	// The provider-assigned unique ID for this managed resource.
	Id               string   `pulumi:"id"`
	InvokeRequestId  *string  `pulumi:"invokeRequestId"`
	InvokeTypes      []string `pulumi:"invokeTypes"`
	Namespace        *string  `pulumi:"namespace"`
	Order            *string  `pulumi:"order"`
	Orderby          *string  `pulumi:"orderby"`
	Qualifier        *string  `pulumi:"qualifier"`
	ResultOutputFile *string  `pulumi:"resultOutputFile"`
	Statuses         []string `pulumi:"statuses"`
}

func GetAsyncEventManagementOutput(ctx *pulumi.Context, args GetAsyncEventManagementOutputArgs, opts ...pulumi.InvokeOption) GetAsyncEventManagementResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAsyncEventManagementResult, error) {
			args := v.(GetAsyncEventManagementArgs)
			r, err := GetAsyncEventManagement(ctx, &args, opts...)
			var s GetAsyncEventManagementResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAsyncEventManagementResultOutput)
}

// A collection of arguments for invoking getAsyncEventManagement.
type GetAsyncEventManagementOutputArgs struct {
	FunctionName     pulumi.StringInput      `pulumi:"functionName"`
	InvokeRequestId  pulumi.StringPtrInput   `pulumi:"invokeRequestId"`
	InvokeTypes      pulumi.StringArrayInput `pulumi:"invokeTypes"`
	Namespace        pulumi.StringPtrInput   `pulumi:"namespace"`
	Order            pulumi.StringPtrInput   `pulumi:"order"`
	Orderby          pulumi.StringPtrInput   `pulumi:"orderby"`
	Qualifier        pulumi.StringPtrInput   `pulumi:"qualifier"`
	ResultOutputFile pulumi.StringPtrInput   `pulumi:"resultOutputFile"`
	Statuses         pulumi.StringArrayInput `pulumi:"statuses"`
}

func (GetAsyncEventManagementOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAsyncEventManagementArgs)(nil)).Elem()
}

// A collection of values returned by getAsyncEventManagement.
type GetAsyncEventManagementResultOutput struct{ *pulumi.OutputState }

func (GetAsyncEventManagementResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAsyncEventManagementResult)(nil)).Elem()
}

func (o GetAsyncEventManagementResultOutput) ToGetAsyncEventManagementResultOutput() GetAsyncEventManagementResultOutput {
	return o
}

func (o GetAsyncEventManagementResultOutput) ToGetAsyncEventManagementResultOutputWithContext(ctx context.Context) GetAsyncEventManagementResultOutput {
	return o
}

func (o GetAsyncEventManagementResultOutput) EventLists() GetAsyncEventManagementEventListArrayOutput {
	return o.ApplyT(func(v GetAsyncEventManagementResult) []GetAsyncEventManagementEventList { return v.EventLists }).(GetAsyncEventManagementEventListArrayOutput)
}

func (o GetAsyncEventManagementResultOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAsyncEventManagementResult) string { return v.FunctionName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAsyncEventManagementResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAsyncEventManagementResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetAsyncEventManagementResultOutput) InvokeRequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAsyncEventManagementResult) *string { return v.InvokeRequestId }).(pulumi.StringPtrOutput)
}

func (o GetAsyncEventManagementResultOutput) InvokeTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAsyncEventManagementResult) []string { return v.InvokeTypes }).(pulumi.StringArrayOutput)
}

func (o GetAsyncEventManagementResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAsyncEventManagementResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o GetAsyncEventManagementResultOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAsyncEventManagementResult) *string { return v.Order }).(pulumi.StringPtrOutput)
}

func (o GetAsyncEventManagementResultOutput) Orderby() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAsyncEventManagementResult) *string { return v.Orderby }).(pulumi.StringPtrOutput)
}

func (o GetAsyncEventManagementResultOutput) Qualifier() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAsyncEventManagementResult) *string { return v.Qualifier }).(pulumi.StringPtrOutput)
}

func (o GetAsyncEventManagementResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAsyncEventManagementResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o GetAsyncEventManagementResultOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAsyncEventManagementResult) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAsyncEventManagementResultOutput{})
}
