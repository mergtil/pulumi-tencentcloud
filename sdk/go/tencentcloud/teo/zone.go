// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package teo

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Zone struct {
	pulumi.CustomResourceState

	// Acceleration area of the zone. Valid values: `mainland`, `overseas`.
	Area pulumi.StringOutput `pulumi:"area"`
	// Specifies whether CNAME acceleration is enabled. Valid values: `enabled`, `disabled`.
	CnameSpeedUp pulumi.StringOutput `pulumi:"cnameSpeedUp"`
	// Ownership verification status of the site when it accesses via CNAME.- `finished`: The site is verified.- `pending`: The
	// site is waiting for verification.
	CnameStatus pulumi.StringOutput `pulumi:"cnameStatus"`
	// Site creation date.
	CreatedOn pulumi.StringOutput `pulumi:"createdOn"`
	// Site modification date.
	ModifiedOn pulumi.StringOutput `pulumi:"modifiedOn"`
	// List of name servers assigned by Tencent Cloud.
	NameServers pulumi.StringArrayOutput `pulumi:"nameServers"`
	// Name server used by the site.
	OriginalNameServers pulumi.StringArrayOutput `pulumi:"originalNameServers"`
	// Indicates whether the site is disabled.
	Paused pulumi.BoolOutput `pulumi:"paused"`
	// Plan type of the zone. See details in data source `zone_available_plans`.
	PlanType pulumi.StringOutput `pulumi:"planType"`
	// Billing resources of the zone.
	Resources ZoneResourceArrayOutput `pulumi:"resources"`
	// Site status. Valid values:- `active`: NS is switched.- `pending`: NS is not switched.- `moved`: NS is moved.-
	// `deactivated`: this site is blocked.
	Status pulumi.StringOutput `pulumi:"status"`
	// Tag description list.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// Specifies how the site is connected to EdgeOne.- `full`: The site is connected via NS.- `partial`: The site is connected
	// via CNAME.
	Type pulumi.StringOutput `pulumi:"type"`
	// User-defined name server information. Note: This field may return null, indicating that no valid value can be obtained.
	VanityNameServers ZoneVanityNameServersPtrOutput `pulumi:"vanityNameServers"`
	// User-defined name server IP information. Note: This field may return null, indicating that no valid value can be
	// obtained.
	VanityNameServersIps ZoneVanityNameServersIpArrayOutput `pulumi:"vanityNameServersIps"`
	// Site ID.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
	// Site name.
	ZoneName pulumi.StringOutput `pulumi:"zoneName"`
}

// NewZone registers a new resource with the given unique name, arguments, and options.
func NewZone(ctx *pulumi.Context,
	name string, args *ZoneArgs, opts ...pulumi.ResourceOption) (*Zone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PlanType == nil {
		return nil, errors.New("invalid value for required argument 'PlanType'")
	}
	if args.ZoneName == nil {
		return nil, errors.New("invalid value for required argument 'ZoneName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Zone
	err := ctx.RegisterResource("tencentcloud:Teo/zone:Zone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZone gets an existing Zone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneState, opts ...pulumi.ResourceOption) (*Zone, error) {
	var resource Zone
	err := ctx.ReadResource("tencentcloud:Teo/zone:Zone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Zone resources.
type zoneState struct {
	// Acceleration area of the zone. Valid values: `mainland`, `overseas`.
	Area *string `pulumi:"area"`
	// Specifies whether CNAME acceleration is enabled. Valid values: `enabled`, `disabled`.
	CnameSpeedUp *string `pulumi:"cnameSpeedUp"`
	// Ownership verification status of the site when it accesses via CNAME.- `finished`: The site is verified.- `pending`: The
	// site is waiting for verification.
	CnameStatus *string `pulumi:"cnameStatus"`
	// Site creation date.
	CreatedOn *string `pulumi:"createdOn"`
	// Site modification date.
	ModifiedOn *string `pulumi:"modifiedOn"`
	// List of name servers assigned by Tencent Cloud.
	NameServers []string `pulumi:"nameServers"`
	// Name server used by the site.
	OriginalNameServers []string `pulumi:"originalNameServers"`
	// Indicates whether the site is disabled.
	Paused *bool `pulumi:"paused"`
	// Plan type of the zone. See details in data source `zone_available_plans`.
	PlanType *string `pulumi:"planType"`
	// Billing resources of the zone.
	Resources []ZoneResource `pulumi:"resources"`
	// Site status. Valid values:- `active`: NS is switched.- `pending`: NS is not switched.- `moved`: NS is moved.-
	// `deactivated`: this site is blocked.
	Status *string `pulumi:"status"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
	// Specifies how the site is connected to EdgeOne.- `full`: The site is connected via NS.- `partial`: The site is connected
	// via CNAME.
	Type *string `pulumi:"type"`
	// User-defined name server information. Note: This field may return null, indicating that no valid value can be obtained.
	VanityNameServers *ZoneVanityNameServers `pulumi:"vanityNameServers"`
	// User-defined name server IP information. Note: This field may return null, indicating that no valid value can be
	// obtained.
	VanityNameServersIps []ZoneVanityNameServersIp `pulumi:"vanityNameServersIps"`
	// Site ID.
	ZoneId *string `pulumi:"zoneId"`
	// Site name.
	ZoneName *string `pulumi:"zoneName"`
}

type ZoneState struct {
	// Acceleration area of the zone. Valid values: `mainland`, `overseas`.
	Area pulumi.StringPtrInput
	// Specifies whether CNAME acceleration is enabled. Valid values: `enabled`, `disabled`.
	CnameSpeedUp pulumi.StringPtrInput
	// Ownership verification status of the site when it accesses via CNAME.- `finished`: The site is verified.- `pending`: The
	// site is waiting for verification.
	CnameStatus pulumi.StringPtrInput
	// Site creation date.
	CreatedOn pulumi.StringPtrInput
	// Site modification date.
	ModifiedOn pulumi.StringPtrInput
	// List of name servers assigned by Tencent Cloud.
	NameServers pulumi.StringArrayInput
	// Name server used by the site.
	OriginalNameServers pulumi.StringArrayInput
	// Indicates whether the site is disabled.
	Paused pulumi.BoolPtrInput
	// Plan type of the zone. See details in data source `zone_available_plans`.
	PlanType pulumi.StringPtrInput
	// Billing resources of the zone.
	Resources ZoneResourceArrayInput
	// Site status. Valid values:- `active`: NS is switched.- `pending`: NS is not switched.- `moved`: NS is moved.-
	// `deactivated`: this site is blocked.
	Status pulumi.StringPtrInput
	// Tag description list.
	Tags pulumi.MapInput
	// Specifies how the site is connected to EdgeOne.- `full`: The site is connected via NS.- `partial`: The site is connected
	// via CNAME.
	Type pulumi.StringPtrInput
	// User-defined name server information. Note: This field may return null, indicating that no valid value can be obtained.
	VanityNameServers ZoneVanityNameServersPtrInput
	// User-defined name server IP information. Note: This field may return null, indicating that no valid value can be
	// obtained.
	VanityNameServersIps ZoneVanityNameServersIpArrayInput
	// Site ID.
	ZoneId pulumi.StringPtrInput
	// Site name.
	ZoneName pulumi.StringPtrInput
}

func (ZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneState)(nil)).Elem()
}

type zoneArgs struct {
	// Specifies whether CNAME acceleration is enabled. Valid values: `enabled`, `disabled`.
	CnameSpeedUp *string `pulumi:"cnameSpeedUp"`
	// Indicates whether the site is disabled.
	Paused *bool `pulumi:"paused"`
	// Plan type of the zone. See details in data source `zone_available_plans`.
	PlanType string `pulumi:"planType"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
	// Specifies how the site is connected to EdgeOne.- `full`: The site is connected via NS.- `partial`: The site is connected
	// via CNAME.
	Type *string `pulumi:"type"`
	// User-defined name server information. Note: This field may return null, indicating that no valid value can be obtained.
	VanityNameServers *ZoneVanityNameServers `pulumi:"vanityNameServers"`
	// Site name.
	ZoneName string `pulumi:"zoneName"`
}

// The set of arguments for constructing a Zone resource.
type ZoneArgs struct {
	// Specifies whether CNAME acceleration is enabled. Valid values: `enabled`, `disabled`.
	CnameSpeedUp pulumi.StringPtrInput
	// Indicates whether the site is disabled.
	Paused pulumi.BoolPtrInput
	// Plan type of the zone. See details in data source `zone_available_plans`.
	PlanType pulumi.StringInput
	// Tag description list.
	Tags pulumi.MapInput
	// Specifies how the site is connected to EdgeOne.- `full`: The site is connected via NS.- `partial`: The site is connected
	// via CNAME.
	Type pulumi.StringPtrInput
	// User-defined name server information. Note: This field may return null, indicating that no valid value can be obtained.
	VanityNameServers ZoneVanityNameServersPtrInput
	// Site name.
	ZoneName pulumi.StringInput
}

func (ZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneArgs)(nil)).Elem()
}

type ZoneInput interface {
	pulumi.Input

	ToZoneOutput() ZoneOutput
	ToZoneOutputWithContext(ctx context.Context) ZoneOutput
}

func (*Zone) ElementType() reflect.Type {
	return reflect.TypeOf((**Zone)(nil)).Elem()
}

func (i *Zone) ToZoneOutput() ZoneOutput {
	return i.ToZoneOutputWithContext(context.Background())
}

func (i *Zone) ToZoneOutputWithContext(ctx context.Context) ZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneOutput)
}

// ZoneArrayInput is an input type that accepts ZoneArray and ZoneArrayOutput values.
// You can construct a concrete instance of `ZoneArrayInput` via:
//
//	ZoneArray{ ZoneArgs{...} }
type ZoneArrayInput interface {
	pulumi.Input

	ToZoneArrayOutput() ZoneArrayOutput
	ToZoneArrayOutputWithContext(context.Context) ZoneArrayOutput
}

type ZoneArray []ZoneInput

func (ZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Zone)(nil)).Elem()
}

func (i ZoneArray) ToZoneArrayOutput() ZoneArrayOutput {
	return i.ToZoneArrayOutputWithContext(context.Background())
}

func (i ZoneArray) ToZoneArrayOutputWithContext(ctx context.Context) ZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneArrayOutput)
}

// ZoneMapInput is an input type that accepts ZoneMap and ZoneMapOutput values.
// You can construct a concrete instance of `ZoneMapInput` via:
//
//	ZoneMap{ "key": ZoneArgs{...} }
type ZoneMapInput interface {
	pulumi.Input

	ToZoneMapOutput() ZoneMapOutput
	ToZoneMapOutputWithContext(context.Context) ZoneMapOutput
}

type ZoneMap map[string]ZoneInput

func (ZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Zone)(nil)).Elem()
}

func (i ZoneMap) ToZoneMapOutput() ZoneMapOutput {
	return i.ToZoneMapOutputWithContext(context.Background())
}

func (i ZoneMap) ToZoneMapOutputWithContext(ctx context.Context) ZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneMapOutput)
}

type ZoneOutput struct{ *pulumi.OutputState }

func (ZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Zone)(nil)).Elem()
}

func (o ZoneOutput) ToZoneOutput() ZoneOutput {
	return o
}

func (o ZoneOutput) ToZoneOutputWithContext(ctx context.Context) ZoneOutput {
	return o
}

// Acceleration area of the zone. Valid values: `mainland`, `overseas`.
func (o ZoneOutput) Area() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.Area }).(pulumi.StringOutput)
}

// Specifies whether CNAME acceleration is enabled. Valid values: `enabled`, `disabled`.
func (o ZoneOutput) CnameSpeedUp() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.CnameSpeedUp }).(pulumi.StringOutput)
}

// Ownership verification status of the site when it accesses via CNAME.- `finished`: The site is verified.- `pending`: The
// site is waiting for verification.
func (o ZoneOutput) CnameStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.CnameStatus }).(pulumi.StringOutput)
}

// Site creation date.
func (o ZoneOutput) CreatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.CreatedOn }).(pulumi.StringOutput)
}

// Site modification date.
func (o ZoneOutput) ModifiedOn() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.ModifiedOn }).(pulumi.StringOutput)
}

// List of name servers assigned by Tencent Cloud.
func (o ZoneOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringArrayOutput { return v.NameServers }).(pulumi.StringArrayOutput)
}

// Name server used by the site.
func (o ZoneOutput) OriginalNameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringArrayOutput { return v.OriginalNameServers }).(pulumi.StringArrayOutput)
}

// Indicates whether the site is disabled.
func (o ZoneOutput) Paused() pulumi.BoolOutput {
	return o.ApplyT(func(v *Zone) pulumi.BoolOutput { return v.Paused }).(pulumi.BoolOutput)
}

// Plan type of the zone. See details in data source `zone_available_plans`.
func (o ZoneOutput) PlanType() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.PlanType }).(pulumi.StringOutput)
}

// Billing resources of the zone.
func (o ZoneOutput) Resources() ZoneResourceArrayOutput {
	return o.ApplyT(func(v *Zone) ZoneResourceArrayOutput { return v.Resources }).(ZoneResourceArrayOutput)
}

// Site status. Valid values:- `active`: NS is switched.- `pending`: NS is not switched.- `moved`: NS is moved.-
// `deactivated`: this site is blocked.
func (o ZoneOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Tag description list.
func (o ZoneOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Zone) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// Specifies how the site is connected to EdgeOne.- `full`: The site is connected via NS.- `partial`: The site is connected
// via CNAME.
func (o ZoneOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// User-defined name server information. Note: This field may return null, indicating that no valid value can be obtained.
func (o ZoneOutput) VanityNameServers() ZoneVanityNameServersPtrOutput {
	return o.ApplyT(func(v *Zone) ZoneVanityNameServersPtrOutput { return v.VanityNameServers }).(ZoneVanityNameServersPtrOutput)
}

// User-defined name server IP information. Note: This field may return null, indicating that no valid value can be
// obtained.
func (o ZoneOutput) VanityNameServersIps() ZoneVanityNameServersIpArrayOutput {
	return o.ApplyT(func(v *Zone) ZoneVanityNameServersIpArrayOutput { return v.VanityNameServersIps }).(ZoneVanityNameServersIpArrayOutput)
}

// Site ID.
func (o ZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

// Site name.
func (o ZoneOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.ZoneName }).(pulumi.StringOutput)
}

type ZoneArrayOutput struct{ *pulumi.OutputState }

func (ZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Zone)(nil)).Elem()
}

func (o ZoneArrayOutput) ToZoneArrayOutput() ZoneArrayOutput {
	return o
}

func (o ZoneArrayOutput) ToZoneArrayOutputWithContext(ctx context.Context) ZoneArrayOutput {
	return o
}

func (o ZoneArrayOutput) Index(i pulumi.IntInput) ZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Zone {
		return vs[0].([]*Zone)[vs[1].(int)]
	}).(ZoneOutput)
}

type ZoneMapOutput struct{ *pulumi.OutputState }

func (ZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Zone)(nil)).Elem()
}

func (o ZoneMapOutput) ToZoneMapOutput() ZoneMapOutput {
	return o
}

func (o ZoneMapOutput) ToZoneMapOutputWithContext(ctx context.Context) ZoneMapOutput {
	return o
}

func (o ZoneMapOutput) MapIndex(k pulumi.StringInput) ZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Zone {
		return vs[0].(map[string]*Zone)[vs[1].(string)]
	}).(ZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneInput)(nil)).Elem(), &Zone{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneArrayInput)(nil)).Elem(), ZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneMapInput)(nil)).Elem(), ZoneMap{})
	pulumi.RegisterOutputType(ZoneOutput{})
	pulumi.RegisterOutputType(ZoneArrayOutput{})
	pulumi.RegisterOutputType(ZoneMapOutput{})
}
