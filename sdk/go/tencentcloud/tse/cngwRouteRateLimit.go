// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tse

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CngwRouteRateLimit struct {
	pulumi.CustomResourceState

	// gateway ID.
	GatewayId pulumi.StringOutput `pulumi:"gatewayId"`
	// rate limit configuration.
	LimitDetail CngwRouteRateLimitLimitDetailOutput `pulumi:"limitDetail"`
	// Route id, or route name.
	RouteId pulumi.StringOutput `pulumi:"routeId"`
}

// NewCngwRouteRateLimit registers a new resource with the given unique name, arguments, and options.
func NewCngwRouteRateLimit(ctx *pulumi.Context,
	name string, args *CngwRouteRateLimitArgs, opts ...pulumi.ResourceOption) (*CngwRouteRateLimit, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayId == nil {
		return nil, errors.New("invalid value for required argument 'GatewayId'")
	}
	if args.LimitDetail == nil {
		return nil, errors.New("invalid value for required argument 'LimitDetail'")
	}
	if args.RouteId == nil {
		return nil, errors.New("invalid value for required argument 'RouteId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CngwRouteRateLimit
	err := ctx.RegisterResource("tencentcloud:Tse/cngwRouteRateLimit:CngwRouteRateLimit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCngwRouteRateLimit gets an existing CngwRouteRateLimit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCngwRouteRateLimit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CngwRouteRateLimitState, opts ...pulumi.ResourceOption) (*CngwRouteRateLimit, error) {
	var resource CngwRouteRateLimit
	err := ctx.ReadResource("tencentcloud:Tse/cngwRouteRateLimit:CngwRouteRateLimit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CngwRouteRateLimit resources.
type cngwRouteRateLimitState struct {
	// gateway ID.
	GatewayId *string `pulumi:"gatewayId"`
	// rate limit configuration.
	LimitDetail *CngwRouteRateLimitLimitDetail `pulumi:"limitDetail"`
	// Route id, or route name.
	RouteId *string `pulumi:"routeId"`
}

type CngwRouteRateLimitState struct {
	// gateway ID.
	GatewayId pulumi.StringPtrInput
	// rate limit configuration.
	LimitDetail CngwRouteRateLimitLimitDetailPtrInput
	// Route id, or route name.
	RouteId pulumi.StringPtrInput
}

func (CngwRouteRateLimitState) ElementType() reflect.Type {
	return reflect.TypeOf((*cngwRouteRateLimitState)(nil)).Elem()
}

type cngwRouteRateLimitArgs struct {
	// gateway ID.
	GatewayId string `pulumi:"gatewayId"`
	// rate limit configuration.
	LimitDetail CngwRouteRateLimitLimitDetail `pulumi:"limitDetail"`
	// Route id, or route name.
	RouteId string `pulumi:"routeId"`
}

// The set of arguments for constructing a CngwRouteRateLimit resource.
type CngwRouteRateLimitArgs struct {
	// gateway ID.
	GatewayId pulumi.StringInput
	// rate limit configuration.
	LimitDetail CngwRouteRateLimitLimitDetailInput
	// Route id, or route name.
	RouteId pulumi.StringInput
}

func (CngwRouteRateLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cngwRouteRateLimitArgs)(nil)).Elem()
}

type CngwRouteRateLimitInput interface {
	pulumi.Input

	ToCngwRouteRateLimitOutput() CngwRouteRateLimitOutput
	ToCngwRouteRateLimitOutputWithContext(ctx context.Context) CngwRouteRateLimitOutput
}

func (*CngwRouteRateLimit) ElementType() reflect.Type {
	return reflect.TypeOf((**CngwRouteRateLimit)(nil)).Elem()
}

func (i *CngwRouteRateLimit) ToCngwRouteRateLimitOutput() CngwRouteRateLimitOutput {
	return i.ToCngwRouteRateLimitOutputWithContext(context.Background())
}

func (i *CngwRouteRateLimit) ToCngwRouteRateLimitOutputWithContext(ctx context.Context) CngwRouteRateLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwRouteRateLimitOutput)
}

// CngwRouteRateLimitArrayInput is an input type that accepts CngwRouteRateLimitArray and CngwRouteRateLimitArrayOutput values.
// You can construct a concrete instance of `CngwRouteRateLimitArrayInput` via:
//
//	CngwRouteRateLimitArray{ CngwRouteRateLimitArgs{...} }
type CngwRouteRateLimitArrayInput interface {
	pulumi.Input

	ToCngwRouteRateLimitArrayOutput() CngwRouteRateLimitArrayOutput
	ToCngwRouteRateLimitArrayOutputWithContext(context.Context) CngwRouteRateLimitArrayOutput
}

type CngwRouteRateLimitArray []CngwRouteRateLimitInput

func (CngwRouteRateLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CngwRouteRateLimit)(nil)).Elem()
}

func (i CngwRouteRateLimitArray) ToCngwRouteRateLimitArrayOutput() CngwRouteRateLimitArrayOutput {
	return i.ToCngwRouteRateLimitArrayOutputWithContext(context.Background())
}

func (i CngwRouteRateLimitArray) ToCngwRouteRateLimitArrayOutputWithContext(ctx context.Context) CngwRouteRateLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwRouteRateLimitArrayOutput)
}

// CngwRouteRateLimitMapInput is an input type that accepts CngwRouteRateLimitMap and CngwRouteRateLimitMapOutput values.
// You can construct a concrete instance of `CngwRouteRateLimitMapInput` via:
//
//	CngwRouteRateLimitMap{ "key": CngwRouteRateLimitArgs{...} }
type CngwRouteRateLimitMapInput interface {
	pulumi.Input

	ToCngwRouteRateLimitMapOutput() CngwRouteRateLimitMapOutput
	ToCngwRouteRateLimitMapOutputWithContext(context.Context) CngwRouteRateLimitMapOutput
}

type CngwRouteRateLimitMap map[string]CngwRouteRateLimitInput

func (CngwRouteRateLimitMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CngwRouteRateLimit)(nil)).Elem()
}

func (i CngwRouteRateLimitMap) ToCngwRouteRateLimitMapOutput() CngwRouteRateLimitMapOutput {
	return i.ToCngwRouteRateLimitMapOutputWithContext(context.Background())
}

func (i CngwRouteRateLimitMap) ToCngwRouteRateLimitMapOutputWithContext(ctx context.Context) CngwRouteRateLimitMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwRouteRateLimitMapOutput)
}

type CngwRouteRateLimitOutput struct{ *pulumi.OutputState }

func (CngwRouteRateLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CngwRouteRateLimit)(nil)).Elem()
}

func (o CngwRouteRateLimitOutput) ToCngwRouteRateLimitOutput() CngwRouteRateLimitOutput {
	return o
}

func (o CngwRouteRateLimitOutput) ToCngwRouteRateLimitOutputWithContext(ctx context.Context) CngwRouteRateLimitOutput {
	return o
}

// gateway ID.
func (o CngwRouteRateLimitOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwRouteRateLimit) pulumi.StringOutput { return v.GatewayId }).(pulumi.StringOutput)
}

// rate limit configuration.
func (o CngwRouteRateLimitOutput) LimitDetail() CngwRouteRateLimitLimitDetailOutput {
	return o.ApplyT(func(v *CngwRouteRateLimit) CngwRouteRateLimitLimitDetailOutput { return v.LimitDetail }).(CngwRouteRateLimitLimitDetailOutput)
}

// Route id, or route name.
func (o CngwRouteRateLimitOutput) RouteId() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwRouteRateLimit) pulumi.StringOutput { return v.RouteId }).(pulumi.StringOutput)
}

type CngwRouteRateLimitArrayOutput struct{ *pulumi.OutputState }

func (CngwRouteRateLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CngwRouteRateLimit)(nil)).Elem()
}

func (o CngwRouteRateLimitArrayOutput) ToCngwRouteRateLimitArrayOutput() CngwRouteRateLimitArrayOutput {
	return o
}

func (o CngwRouteRateLimitArrayOutput) ToCngwRouteRateLimitArrayOutputWithContext(ctx context.Context) CngwRouteRateLimitArrayOutput {
	return o
}

func (o CngwRouteRateLimitArrayOutput) Index(i pulumi.IntInput) CngwRouteRateLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CngwRouteRateLimit {
		return vs[0].([]*CngwRouteRateLimit)[vs[1].(int)]
	}).(CngwRouteRateLimitOutput)
}

type CngwRouteRateLimitMapOutput struct{ *pulumi.OutputState }

func (CngwRouteRateLimitMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CngwRouteRateLimit)(nil)).Elem()
}

func (o CngwRouteRateLimitMapOutput) ToCngwRouteRateLimitMapOutput() CngwRouteRateLimitMapOutput {
	return o
}

func (o CngwRouteRateLimitMapOutput) ToCngwRouteRateLimitMapOutputWithContext(ctx context.Context) CngwRouteRateLimitMapOutput {
	return o
}

func (o CngwRouteRateLimitMapOutput) MapIndex(k pulumi.StringInput) CngwRouteRateLimitOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CngwRouteRateLimit {
		return vs[0].(map[string]*CngwRouteRateLimit)[vs[1].(string)]
	}).(CngwRouteRateLimitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CngwRouteRateLimitInput)(nil)).Elem(), &CngwRouteRateLimit{})
	pulumi.RegisterInputType(reflect.TypeOf((*CngwRouteRateLimitArrayInput)(nil)).Elem(), CngwRouteRateLimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CngwRouteRateLimitMapInput)(nil)).Elem(), CngwRouteRateLimitMap{})
	pulumi.RegisterOutputType(CngwRouteRateLimitOutput{})
	pulumi.RegisterOutputType(CngwRouteRateLimitArrayOutput{})
	pulumi.RegisterOutputType(CngwRouteRateLimitMapOutput{})
}
