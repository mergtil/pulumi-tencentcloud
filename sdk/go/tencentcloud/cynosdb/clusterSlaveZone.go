// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cynosdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClusterSlaveZone struct {
	pulumi.CustomResourceState

	// The ID of cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Slave zone.
	SlaveZone pulumi.StringOutput `pulumi:"slaveZone"`
}

// NewClusterSlaveZone registers a new resource with the given unique name, arguments, and options.
func NewClusterSlaveZone(ctx *pulumi.Context,
	name string, args *ClusterSlaveZoneArgs, opts ...pulumi.ResourceOption) (*ClusterSlaveZone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.SlaveZone == nil {
		return nil, errors.New("invalid value for required argument 'SlaveZone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterSlaveZone
	err := ctx.RegisterResource("tencentcloud:Cynosdb/clusterSlaveZone:ClusterSlaveZone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterSlaveZone gets an existing ClusterSlaveZone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterSlaveZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterSlaveZoneState, opts ...pulumi.ResourceOption) (*ClusterSlaveZone, error) {
	var resource ClusterSlaveZone
	err := ctx.ReadResource("tencentcloud:Cynosdb/clusterSlaveZone:ClusterSlaveZone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterSlaveZone resources.
type clusterSlaveZoneState struct {
	// The ID of cluster.
	ClusterId *string `pulumi:"clusterId"`
	// Slave zone.
	SlaveZone *string `pulumi:"slaveZone"`
}

type ClusterSlaveZoneState struct {
	// The ID of cluster.
	ClusterId pulumi.StringPtrInput
	// Slave zone.
	SlaveZone pulumi.StringPtrInput
}

func (ClusterSlaveZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSlaveZoneState)(nil)).Elem()
}

type clusterSlaveZoneArgs struct {
	// The ID of cluster.
	ClusterId string `pulumi:"clusterId"`
	// Slave zone.
	SlaveZone string `pulumi:"slaveZone"`
}

// The set of arguments for constructing a ClusterSlaveZone resource.
type ClusterSlaveZoneArgs struct {
	// The ID of cluster.
	ClusterId pulumi.StringInput
	// Slave zone.
	SlaveZone pulumi.StringInput
}

func (ClusterSlaveZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterSlaveZoneArgs)(nil)).Elem()
}

type ClusterSlaveZoneInput interface {
	pulumi.Input

	ToClusterSlaveZoneOutput() ClusterSlaveZoneOutput
	ToClusterSlaveZoneOutputWithContext(ctx context.Context) ClusterSlaveZoneOutput
}

func (*ClusterSlaveZone) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSlaveZone)(nil)).Elem()
}

func (i *ClusterSlaveZone) ToClusterSlaveZoneOutput() ClusterSlaveZoneOutput {
	return i.ToClusterSlaveZoneOutputWithContext(context.Background())
}

func (i *ClusterSlaveZone) ToClusterSlaveZoneOutputWithContext(ctx context.Context) ClusterSlaveZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSlaveZoneOutput)
}

// ClusterSlaveZoneArrayInput is an input type that accepts ClusterSlaveZoneArray and ClusterSlaveZoneArrayOutput values.
// You can construct a concrete instance of `ClusterSlaveZoneArrayInput` via:
//
//	ClusterSlaveZoneArray{ ClusterSlaveZoneArgs{...} }
type ClusterSlaveZoneArrayInput interface {
	pulumi.Input

	ToClusterSlaveZoneArrayOutput() ClusterSlaveZoneArrayOutput
	ToClusterSlaveZoneArrayOutputWithContext(context.Context) ClusterSlaveZoneArrayOutput
}

type ClusterSlaveZoneArray []ClusterSlaveZoneInput

func (ClusterSlaveZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterSlaveZone)(nil)).Elem()
}

func (i ClusterSlaveZoneArray) ToClusterSlaveZoneArrayOutput() ClusterSlaveZoneArrayOutput {
	return i.ToClusterSlaveZoneArrayOutputWithContext(context.Background())
}

func (i ClusterSlaveZoneArray) ToClusterSlaveZoneArrayOutputWithContext(ctx context.Context) ClusterSlaveZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSlaveZoneArrayOutput)
}

// ClusterSlaveZoneMapInput is an input type that accepts ClusterSlaveZoneMap and ClusterSlaveZoneMapOutput values.
// You can construct a concrete instance of `ClusterSlaveZoneMapInput` via:
//
//	ClusterSlaveZoneMap{ "key": ClusterSlaveZoneArgs{...} }
type ClusterSlaveZoneMapInput interface {
	pulumi.Input

	ToClusterSlaveZoneMapOutput() ClusterSlaveZoneMapOutput
	ToClusterSlaveZoneMapOutputWithContext(context.Context) ClusterSlaveZoneMapOutput
}

type ClusterSlaveZoneMap map[string]ClusterSlaveZoneInput

func (ClusterSlaveZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterSlaveZone)(nil)).Elem()
}

func (i ClusterSlaveZoneMap) ToClusterSlaveZoneMapOutput() ClusterSlaveZoneMapOutput {
	return i.ToClusterSlaveZoneMapOutputWithContext(context.Background())
}

func (i ClusterSlaveZoneMap) ToClusterSlaveZoneMapOutputWithContext(ctx context.Context) ClusterSlaveZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSlaveZoneMapOutput)
}

type ClusterSlaveZoneOutput struct{ *pulumi.OutputState }

func (ClusterSlaveZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterSlaveZone)(nil)).Elem()
}

func (o ClusterSlaveZoneOutput) ToClusterSlaveZoneOutput() ClusterSlaveZoneOutput {
	return o
}

func (o ClusterSlaveZoneOutput) ToClusterSlaveZoneOutputWithContext(ctx context.Context) ClusterSlaveZoneOutput {
	return o
}

// The ID of cluster.
func (o ClusterSlaveZoneOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSlaveZone) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Slave zone.
func (o ClusterSlaveZoneOutput) SlaveZone() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterSlaveZone) pulumi.StringOutput { return v.SlaveZone }).(pulumi.StringOutput)
}

type ClusterSlaveZoneArrayOutput struct{ *pulumi.OutputState }

func (ClusterSlaveZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterSlaveZone)(nil)).Elem()
}

func (o ClusterSlaveZoneArrayOutput) ToClusterSlaveZoneArrayOutput() ClusterSlaveZoneArrayOutput {
	return o
}

func (o ClusterSlaveZoneArrayOutput) ToClusterSlaveZoneArrayOutputWithContext(ctx context.Context) ClusterSlaveZoneArrayOutput {
	return o
}

func (o ClusterSlaveZoneArrayOutput) Index(i pulumi.IntInput) ClusterSlaveZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterSlaveZone {
		return vs[0].([]*ClusterSlaveZone)[vs[1].(int)]
	}).(ClusterSlaveZoneOutput)
}

type ClusterSlaveZoneMapOutput struct{ *pulumi.OutputState }

func (ClusterSlaveZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterSlaveZone)(nil)).Elem()
}

func (o ClusterSlaveZoneMapOutput) ToClusterSlaveZoneMapOutput() ClusterSlaveZoneMapOutput {
	return o
}

func (o ClusterSlaveZoneMapOutput) ToClusterSlaveZoneMapOutputWithContext(ctx context.Context) ClusterSlaveZoneMapOutput {
	return o
}

func (o ClusterSlaveZoneMapOutput) MapIndex(k pulumi.StringInput) ClusterSlaveZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterSlaveZone {
		return vs[0].(map[string]*ClusterSlaveZone)[vs[1].(string)]
	}).(ClusterSlaveZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSlaveZoneInput)(nil)).Elem(), &ClusterSlaveZone{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSlaveZoneArrayInput)(nil)).Elem(), ClusterSlaveZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSlaveZoneMapInput)(nil)).Elem(), ClusterSlaveZoneMap{})
	pulumi.RegisterOutputType(ClusterSlaveZoneOutput{})
	pulumi.RegisterOutputType(ClusterSlaveZoneArrayOutput{})
	pulumi.RegisterOutputType(ClusterSlaveZoneMapOutput{})
}
