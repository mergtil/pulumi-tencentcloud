// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tcaplus

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Idl struct {
	pulumi.CustomResourceState

	// ID of the TcaplusDB cluster to which the table group belongs.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// IDL file content of the TcaplusDB table.
	FileContent pulumi.StringOutput `pulumi:"fileContent"`
	// File ext type of the IDL file. If `file_type` is `PROTO`, `file_ext_type` must be 'proto'; If `file_type` is `TDR`,
	// `file_ext_type` must be 'xml'.
	FileExtType pulumi.StringOutput `pulumi:"fileExtType"`
	// Name of the IDL file.
	FileName pulumi.StringOutput `pulumi:"fileName"`
	// Type of the IDL file. Valid values are PROTO and TDR.
	FileType pulumi.StringOutput `pulumi:"fileType"`
	// Table info of the IDL.
	TableInfos IdlTableInfoArrayOutput `pulumi:"tableInfos"`
	// ID of the table group to which the IDL file belongs.
	TablegroupId pulumi.StringOutput `pulumi:"tablegroupId"`
}

// NewIdl registers a new resource with the given unique name, arguments, and options.
func NewIdl(ctx *pulumi.Context,
	name string, args *IdlArgs, opts ...pulumi.ResourceOption) (*Idl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.FileContent == nil {
		return nil, errors.New("invalid value for required argument 'FileContent'")
	}
	if args.FileExtType == nil {
		return nil, errors.New("invalid value for required argument 'FileExtType'")
	}
	if args.FileName == nil {
		return nil, errors.New("invalid value for required argument 'FileName'")
	}
	if args.FileType == nil {
		return nil, errors.New("invalid value for required argument 'FileType'")
	}
	if args.TablegroupId == nil {
		return nil, errors.New("invalid value for required argument 'TablegroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Idl
	err := ctx.RegisterResource("tencentcloud:Tcaplus/idl:Idl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdl gets an existing Idl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdlState, opts ...pulumi.ResourceOption) (*Idl, error) {
	var resource Idl
	err := ctx.ReadResource("tencentcloud:Tcaplus/idl:Idl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Idl resources.
type idlState struct {
	// ID of the TcaplusDB cluster to which the table group belongs.
	ClusterId *string `pulumi:"clusterId"`
	// IDL file content of the TcaplusDB table.
	FileContent *string `pulumi:"fileContent"`
	// File ext type of the IDL file. If `file_type` is `PROTO`, `file_ext_type` must be 'proto'; If `file_type` is `TDR`,
	// `file_ext_type` must be 'xml'.
	FileExtType *string `pulumi:"fileExtType"`
	// Name of the IDL file.
	FileName *string `pulumi:"fileName"`
	// Type of the IDL file. Valid values are PROTO and TDR.
	FileType *string `pulumi:"fileType"`
	// Table info of the IDL.
	TableInfos []IdlTableInfo `pulumi:"tableInfos"`
	// ID of the table group to which the IDL file belongs.
	TablegroupId *string `pulumi:"tablegroupId"`
}

type IdlState struct {
	// ID of the TcaplusDB cluster to which the table group belongs.
	ClusterId pulumi.StringPtrInput
	// IDL file content of the TcaplusDB table.
	FileContent pulumi.StringPtrInput
	// File ext type of the IDL file. If `file_type` is `PROTO`, `file_ext_type` must be 'proto'; If `file_type` is `TDR`,
	// `file_ext_type` must be 'xml'.
	FileExtType pulumi.StringPtrInput
	// Name of the IDL file.
	FileName pulumi.StringPtrInput
	// Type of the IDL file. Valid values are PROTO and TDR.
	FileType pulumi.StringPtrInput
	// Table info of the IDL.
	TableInfos IdlTableInfoArrayInput
	// ID of the table group to which the IDL file belongs.
	TablegroupId pulumi.StringPtrInput
}

func (IdlState) ElementType() reflect.Type {
	return reflect.TypeOf((*idlState)(nil)).Elem()
}

type idlArgs struct {
	// ID of the TcaplusDB cluster to which the table group belongs.
	ClusterId string `pulumi:"clusterId"`
	// IDL file content of the TcaplusDB table.
	FileContent string `pulumi:"fileContent"`
	// File ext type of the IDL file. If `file_type` is `PROTO`, `file_ext_type` must be 'proto'; If `file_type` is `TDR`,
	// `file_ext_type` must be 'xml'.
	FileExtType string `pulumi:"fileExtType"`
	// Name of the IDL file.
	FileName string `pulumi:"fileName"`
	// Type of the IDL file. Valid values are PROTO and TDR.
	FileType string `pulumi:"fileType"`
	// ID of the table group to which the IDL file belongs.
	TablegroupId string `pulumi:"tablegroupId"`
}

// The set of arguments for constructing a Idl resource.
type IdlArgs struct {
	// ID of the TcaplusDB cluster to which the table group belongs.
	ClusterId pulumi.StringInput
	// IDL file content of the TcaplusDB table.
	FileContent pulumi.StringInput
	// File ext type of the IDL file. If `file_type` is `PROTO`, `file_ext_type` must be 'proto'; If `file_type` is `TDR`,
	// `file_ext_type` must be 'xml'.
	FileExtType pulumi.StringInput
	// Name of the IDL file.
	FileName pulumi.StringInput
	// Type of the IDL file. Valid values are PROTO and TDR.
	FileType pulumi.StringInput
	// ID of the table group to which the IDL file belongs.
	TablegroupId pulumi.StringInput
}

func (IdlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*idlArgs)(nil)).Elem()
}

type IdlInput interface {
	pulumi.Input

	ToIdlOutput() IdlOutput
	ToIdlOutputWithContext(ctx context.Context) IdlOutput
}

func (*Idl) ElementType() reflect.Type {
	return reflect.TypeOf((**Idl)(nil)).Elem()
}

func (i *Idl) ToIdlOutput() IdlOutput {
	return i.ToIdlOutputWithContext(context.Background())
}

func (i *Idl) ToIdlOutputWithContext(ctx context.Context) IdlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdlOutput)
}

// IdlArrayInput is an input type that accepts IdlArray and IdlArrayOutput values.
// You can construct a concrete instance of `IdlArrayInput` via:
//
//	IdlArray{ IdlArgs{...} }
type IdlArrayInput interface {
	pulumi.Input

	ToIdlArrayOutput() IdlArrayOutput
	ToIdlArrayOutputWithContext(context.Context) IdlArrayOutput
}

type IdlArray []IdlInput

func (IdlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Idl)(nil)).Elem()
}

func (i IdlArray) ToIdlArrayOutput() IdlArrayOutput {
	return i.ToIdlArrayOutputWithContext(context.Background())
}

func (i IdlArray) ToIdlArrayOutputWithContext(ctx context.Context) IdlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdlArrayOutput)
}

// IdlMapInput is an input type that accepts IdlMap and IdlMapOutput values.
// You can construct a concrete instance of `IdlMapInput` via:
//
//	IdlMap{ "key": IdlArgs{...} }
type IdlMapInput interface {
	pulumi.Input

	ToIdlMapOutput() IdlMapOutput
	ToIdlMapOutputWithContext(context.Context) IdlMapOutput
}

type IdlMap map[string]IdlInput

func (IdlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Idl)(nil)).Elem()
}

func (i IdlMap) ToIdlMapOutput() IdlMapOutput {
	return i.ToIdlMapOutputWithContext(context.Background())
}

func (i IdlMap) ToIdlMapOutputWithContext(ctx context.Context) IdlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdlMapOutput)
}

type IdlOutput struct{ *pulumi.OutputState }

func (IdlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Idl)(nil)).Elem()
}

func (o IdlOutput) ToIdlOutput() IdlOutput {
	return o
}

func (o IdlOutput) ToIdlOutputWithContext(ctx context.Context) IdlOutput {
	return o
}

// ID of the TcaplusDB cluster to which the table group belongs.
func (o IdlOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Idl) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// IDL file content of the TcaplusDB table.
func (o IdlOutput) FileContent() pulumi.StringOutput {
	return o.ApplyT(func(v *Idl) pulumi.StringOutput { return v.FileContent }).(pulumi.StringOutput)
}

// File ext type of the IDL file. If `file_type` is `PROTO`, `file_ext_type` must be 'proto'; If `file_type` is `TDR`,
// `file_ext_type` must be 'xml'.
func (o IdlOutput) FileExtType() pulumi.StringOutput {
	return o.ApplyT(func(v *Idl) pulumi.StringOutput { return v.FileExtType }).(pulumi.StringOutput)
}

// Name of the IDL file.
func (o IdlOutput) FileName() pulumi.StringOutput {
	return o.ApplyT(func(v *Idl) pulumi.StringOutput { return v.FileName }).(pulumi.StringOutput)
}

// Type of the IDL file. Valid values are PROTO and TDR.
func (o IdlOutput) FileType() pulumi.StringOutput {
	return o.ApplyT(func(v *Idl) pulumi.StringOutput { return v.FileType }).(pulumi.StringOutput)
}

// Table info of the IDL.
func (o IdlOutput) TableInfos() IdlTableInfoArrayOutput {
	return o.ApplyT(func(v *Idl) IdlTableInfoArrayOutput { return v.TableInfos }).(IdlTableInfoArrayOutput)
}

// ID of the table group to which the IDL file belongs.
func (o IdlOutput) TablegroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Idl) pulumi.StringOutput { return v.TablegroupId }).(pulumi.StringOutput)
}

type IdlArrayOutput struct{ *pulumi.OutputState }

func (IdlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Idl)(nil)).Elem()
}

func (o IdlArrayOutput) ToIdlArrayOutput() IdlArrayOutput {
	return o
}

func (o IdlArrayOutput) ToIdlArrayOutputWithContext(ctx context.Context) IdlArrayOutput {
	return o
}

func (o IdlArrayOutput) Index(i pulumi.IntInput) IdlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Idl {
		return vs[0].([]*Idl)[vs[1].(int)]
	}).(IdlOutput)
}

type IdlMapOutput struct{ *pulumi.OutputState }

func (IdlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Idl)(nil)).Elem()
}

func (o IdlMapOutput) ToIdlMapOutput() IdlMapOutput {
	return o
}

func (o IdlMapOutput) ToIdlMapOutputWithContext(ctx context.Context) IdlMapOutput {
	return o
}

func (o IdlMapOutput) MapIndex(k pulumi.StringInput) IdlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Idl {
		return vs[0].(map[string]*Idl)[vs[1].(string)]
	}).(IdlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdlInput)(nil)).Elem(), &Idl{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdlArrayInput)(nil)).Elem(), IdlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdlMapInput)(nil)).Elem(), IdlMap{})
	pulumi.RegisterOutputType(IdlOutput{})
	pulumi.RegisterOutputType(IdlArrayOutput{})
	pulumi.RegisterOutputType(IdlMapOutput{})
}
