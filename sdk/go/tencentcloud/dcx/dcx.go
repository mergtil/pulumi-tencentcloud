// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcx

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Dcx struct {
	pulumi.CustomResourceState

	// Bandwidth of the DC.
	Bandwidth pulumi.IntOutput `pulumi:"bandwidth"`
	// BGP ASN of the user. A required field within BGP.
	BgpAsn pulumi.IntOutput `pulumi:"bgpAsn"`
	// BGP key of the user.
	BgpAuthKey pulumi.StringPtrOutput `pulumi:"bgpAuthKey"`
	// Creation time of resource.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Interconnect IP of the DC within client.
	CustomerAddress pulumi.StringOutput `pulumi:"customerAddress"`
	// ID of the DC to be queried, application deployment offline.
	DcId pulumi.StringOutput `pulumi:"dcId"`
	// Connection owner, who is the current customer by default. The developer account ID should be entered for shared
	// connections.
	DcOwnerAccount pulumi.StringOutput `pulumi:"dcOwnerAccount"`
	// ID of the DC Gateway. Currently only new in the console.
	DcgId pulumi.StringOutput `pulumi:"dcgId"`
	// Name of the dedicated tunnel.
	Name pulumi.StringOutput `pulumi:"name"`
	// Type of the network. Valid value: `VPC`, `BMVPC` and `CCN`. The default value is `VPC`.
	NetworkType pulumi.StringPtrOutput `pulumi:"networkType"`
	// Static route, the network address of the user IDC. It can be modified after setting but cannot be deleted. AN unable
	// field within BGP.
	RouteFilterPrefixes pulumi.StringArrayOutput `pulumi:"routeFilterPrefixes"`
	// Type of the route, and available values include BGP and STATIC. The default value is `BGP`.
	RouteType pulumi.StringPtrOutput `pulumi:"routeType"`
	// State of the dedicated tunnels. Valid value: `PENDING`, `ALLOCATING`, `ALLOCATED`, `ALTERING`, `DELETING`, `DELETED`,
	// `COMFIRMING` and `REJECTED`.
	State pulumi.StringOutput `pulumi:"state"`
	// Interconnect IP of the DC within Tencent.
	TencentAddress pulumi.StringOutput `pulumi:"tencentAddress"`
	// Vlan of the dedicated tunnels. Valid value ranges: (0~3000). `0` means that only one tunnel can be created for the
	// physical connect.
	Vlan pulumi.IntPtrOutput `pulumi:"vlan"`
	// ID of the VPC or BMVPC.
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
}

// NewDcx registers a new resource with the given unique name, arguments, and options.
func NewDcx(ctx *pulumi.Context,
	name string, args *DcxArgs, opts ...pulumi.ResourceOption) (*Dcx, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DcId == nil {
		return nil, errors.New("invalid value for required argument 'DcId'")
	}
	if args.DcgId == nil {
		return nil, errors.New("invalid value for required argument 'DcgId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dcx
	err := ctx.RegisterResource("tencentcloud:Dcx/dcx:Dcx", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDcx gets an existing Dcx resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDcx(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DcxState, opts ...pulumi.ResourceOption) (*Dcx, error) {
	var resource Dcx
	err := ctx.ReadResource("tencentcloud:Dcx/dcx:Dcx", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dcx resources.
type dcxState struct {
	// Bandwidth of the DC.
	Bandwidth *int `pulumi:"bandwidth"`
	// BGP ASN of the user. A required field within BGP.
	BgpAsn *int `pulumi:"bgpAsn"`
	// BGP key of the user.
	BgpAuthKey *string `pulumi:"bgpAuthKey"`
	// Creation time of resource.
	CreateTime *string `pulumi:"createTime"`
	// Interconnect IP of the DC within client.
	CustomerAddress *string `pulumi:"customerAddress"`
	// ID of the DC to be queried, application deployment offline.
	DcId *string `pulumi:"dcId"`
	// Connection owner, who is the current customer by default. The developer account ID should be entered for shared
	// connections.
	DcOwnerAccount *string `pulumi:"dcOwnerAccount"`
	// ID of the DC Gateway. Currently only new in the console.
	DcgId *string `pulumi:"dcgId"`
	// Name of the dedicated tunnel.
	Name *string `pulumi:"name"`
	// Type of the network. Valid value: `VPC`, `BMVPC` and `CCN`. The default value is `VPC`.
	NetworkType *string `pulumi:"networkType"`
	// Static route, the network address of the user IDC. It can be modified after setting but cannot be deleted. AN unable
	// field within BGP.
	RouteFilterPrefixes []string `pulumi:"routeFilterPrefixes"`
	// Type of the route, and available values include BGP and STATIC. The default value is `BGP`.
	RouteType *string `pulumi:"routeType"`
	// State of the dedicated tunnels. Valid value: `PENDING`, `ALLOCATING`, `ALLOCATED`, `ALTERING`, `DELETING`, `DELETED`,
	// `COMFIRMING` and `REJECTED`.
	State *string `pulumi:"state"`
	// Interconnect IP of the DC within Tencent.
	TencentAddress *string `pulumi:"tencentAddress"`
	// Vlan of the dedicated tunnels. Valid value ranges: (0~3000). `0` means that only one tunnel can be created for the
	// physical connect.
	Vlan *int `pulumi:"vlan"`
	// ID of the VPC or BMVPC.
	VpcId *string `pulumi:"vpcId"`
}

type DcxState struct {
	// Bandwidth of the DC.
	Bandwidth pulumi.IntPtrInput
	// BGP ASN of the user. A required field within BGP.
	BgpAsn pulumi.IntPtrInput
	// BGP key of the user.
	BgpAuthKey pulumi.StringPtrInput
	// Creation time of resource.
	CreateTime pulumi.StringPtrInput
	// Interconnect IP of the DC within client.
	CustomerAddress pulumi.StringPtrInput
	// ID of the DC to be queried, application deployment offline.
	DcId pulumi.StringPtrInput
	// Connection owner, who is the current customer by default. The developer account ID should be entered for shared
	// connections.
	DcOwnerAccount pulumi.StringPtrInput
	// ID of the DC Gateway. Currently only new in the console.
	DcgId pulumi.StringPtrInput
	// Name of the dedicated tunnel.
	Name pulumi.StringPtrInput
	// Type of the network. Valid value: `VPC`, `BMVPC` and `CCN`. The default value is `VPC`.
	NetworkType pulumi.StringPtrInput
	// Static route, the network address of the user IDC. It can be modified after setting but cannot be deleted. AN unable
	// field within BGP.
	RouteFilterPrefixes pulumi.StringArrayInput
	// Type of the route, and available values include BGP and STATIC. The default value is `BGP`.
	RouteType pulumi.StringPtrInput
	// State of the dedicated tunnels. Valid value: `PENDING`, `ALLOCATING`, `ALLOCATED`, `ALTERING`, `DELETING`, `DELETED`,
	// `COMFIRMING` and `REJECTED`.
	State pulumi.StringPtrInput
	// Interconnect IP of the DC within Tencent.
	TencentAddress pulumi.StringPtrInput
	// Vlan of the dedicated tunnels. Valid value ranges: (0~3000). `0` means that only one tunnel can be created for the
	// physical connect.
	Vlan pulumi.IntPtrInput
	// ID of the VPC or BMVPC.
	VpcId pulumi.StringPtrInput
}

func (DcxState) ElementType() reflect.Type {
	return reflect.TypeOf((*dcxState)(nil)).Elem()
}

type dcxArgs struct {
	// Bandwidth of the DC.
	Bandwidth *int `pulumi:"bandwidth"`
	// BGP ASN of the user. A required field within BGP.
	BgpAsn *int `pulumi:"bgpAsn"`
	// BGP key of the user.
	BgpAuthKey *string `pulumi:"bgpAuthKey"`
	// Interconnect IP of the DC within client.
	CustomerAddress *string `pulumi:"customerAddress"`
	// ID of the DC to be queried, application deployment offline.
	DcId string `pulumi:"dcId"`
	// Connection owner, who is the current customer by default. The developer account ID should be entered for shared
	// connections.
	DcOwnerAccount *string `pulumi:"dcOwnerAccount"`
	// ID of the DC Gateway. Currently only new in the console.
	DcgId string `pulumi:"dcgId"`
	// Name of the dedicated tunnel.
	Name *string `pulumi:"name"`
	// Type of the network. Valid value: `VPC`, `BMVPC` and `CCN`. The default value is `VPC`.
	NetworkType *string `pulumi:"networkType"`
	// Static route, the network address of the user IDC. It can be modified after setting but cannot be deleted. AN unable
	// field within BGP.
	RouteFilterPrefixes []string `pulumi:"routeFilterPrefixes"`
	// Type of the route, and available values include BGP and STATIC. The default value is `BGP`.
	RouteType *string `pulumi:"routeType"`
	// Interconnect IP of the DC within Tencent.
	TencentAddress *string `pulumi:"tencentAddress"`
	// Vlan of the dedicated tunnels. Valid value ranges: (0~3000). `0` means that only one tunnel can be created for the
	// physical connect.
	Vlan *int `pulumi:"vlan"`
	// ID of the VPC or BMVPC.
	VpcId *string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Dcx resource.
type DcxArgs struct {
	// Bandwidth of the DC.
	Bandwidth pulumi.IntPtrInput
	// BGP ASN of the user. A required field within BGP.
	BgpAsn pulumi.IntPtrInput
	// BGP key of the user.
	BgpAuthKey pulumi.StringPtrInput
	// Interconnect IP of the DC within client.
	CustomerAddress pulumi.StringPtrInput
	// ID of the DC to be queried, application deployment offline.
	DcId pulumi.StringInput
	// Connection owner, who is the current customer by default. The developer account ID should be entered for shared
	// connections.
	DcOwnerAccount pulumi.StringPtrInput
	// ID of the DC Gateway. Currently only new in the console.
	DcgId pulumi.StringInput
	// Name of the dedicated tunnel.
	Name pulumi.StringPtrInput
	// Type of the network. Valid value: `VPC`, `BMVPC` and `CCN`. The default value is `VPC`.
	NetworkType pulumi.StringPtrInput
	// Static route, the network address of the user IDC. It can be modified after setting but cannot be deleted. AN unable
	// field within BGP.
	RouteFilterPrefixes pulumi.StringArrayInput
	// Type of the route, and available values include BGP and STATIC. The default value is `BGP`.
	RouteType pulumi.StringPtrInput
	// Interconnect IP of the DC within Tencent.
	TencentAddress pulumi.StringPtrInput
	// Vlan of the dedicated tunnels. Valid value ranges: (0~3000). `0` means that only one tunnel can be created for the
	// physical connect.
	Vlan pulumi.IntPtrInput
	// ID of the VPC or BMVPC.
	VpcId pulumi.StringPtrInput
}

func (DcxArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dcxArgs)(nil)).Elem()
}

type DcxInput interface {
	pulumi.Input

	ToDcxOutput() DcxOutput
	ToDcxOutputWithContext(ctx context.Context) DcxOutput
}

func (*Dcx) ElementType() reflect.Type {
	return reflect.TypeOf((**Dcx)(nil)).Elem()
}

func (i *Dcx) ToDcxOutput() DcxOutput {
	return i.ToDcxOutputWithContext(context.Background())
}

func (i *Dcx) ToDcxOutputWithContext(ctx context.Context) DcxOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DcxOutput)
}

// DcxArrayInput is an input type that accepts DcxArray and DcxArrayOutput values.
// You can construct a concrete instance of `DcxArrayInput` via:
//
//	DcxArray{ DcxArgs{...} }
type DcxArrayInput interface {
	pulumi.Input

	ToDcxArrayOutput() DcxArrayOutput
	ToDcxArrayOutputWithContext(context.Context) DcxArrayOutput
}

type DcxArray []DcxInput

func (DcxArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dcx)(nil)).Elem()
}

func (i DcxArray) ToDcxArrayOutput() DcxArrayOutput {
	return i.ToDcxArrayOutputWithContext(context.Background())
}

func (i DcxArray) ToDcxArrayOutputWithContext(ctx context.Context) DcxArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DcxArrayOutput)
}

// DcxMapInput is an input type that accepts DcxMap and DcxMapOutput values.
// You can construct a concrete instance of `DcxMapInput` via:
//
//	DcxMap{ "key": DcxArgs{...} }
type DcxMapInput interface {
	pulumi.Input

	ToDcxMapOutput() DcxMapOutput
	ToDcxMapOutputWithContext(context.Context) DcxMapOutput
}

type DcxMap map[string]DcxInput

func (DcxMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dcx)(nil)).Elem()
}

func (i DcxMap) ToDcxMapOutput() DcxMapOutput {
	return i.ToDcxMapOutputWithContext(context.Background())
}

func (i DcxMap) ToDcxMapOutputWithContext(ctx context.Context) DcxMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DcxMapOutput)
}

type DcxOutput struct{ *pulumi.OutputState }

func (DcxOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dcx)(nil)).Elem()
}

func (o DcxOutput) ToDcxOutput() DcxOutput {
	return o
}

func (o DcxOutput) ToDcxOutputWithContext(ctx context.Context) DcxOutput {
	return o
}

// Bandwidth of the DC.
func (o DcxOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Dcx) pulumi.IntOutput { return v.Bandwidth }).(pulumi.IntOutput)
}

// BGP ASN of the user. A required field within BGP.
func (o DcxOutput) BgpAsn() pulumi.IntOutput {
	return o.ApplyT(func(v *Dcx) pulumi.IntOutput { return v.BgpAsn }).(pulumi.IntOutput)
}

// BGP key of the user.
func (o DcxOutput) BgpAuthKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dcx) pulumi.StringPtrOutput { return v.BgpAuthKey }).(pulumi.StringPtrOutput)
}

// Creation time of resource.
func (o DcxOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Dcx) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Interconnect IP of the DC within client.
func (o DcxOutput) CustomerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Dcx) pulumi.StringOutput { return v.CustomerAddress }).(pulumi.StringOutput)
}

// ID of the DC to be queried, application deployment offline.
func (o DcxOutput) DcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Dcx) pulumi.StringOutput { return v.DcId }).(pulumi.StringOutput)
}

// Connection owner, who is the current customer by default. The developer account ID should be entered for shared
// connections.
func (o DcxOutput) DcOwnerAccount() pulumi.StringOutput {
	return o.ApplyT(func(v *Dcx) pulumi.StringOutput { return v.DcOwnerAccount }).(pulumi.StringOutput)
}

// ID of the DC Gateway. Currently only new in the console.
func (o DcxOutput) DcgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Dcx) pulumi.StringOutput { return v.DcgId }).(pulumi.StringOutput)
}

// Name of the dedicated tunnel.
func (o DcxOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Dcx) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Type of the network. Valid value: `VPC`, `BMVPC` and `CCN`. The default value is `VPC`.
func (o DcxOutput) NetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dcx) pulumi.StringPtrOutput { return v.NetworkType }).(pulumi.StringPtrOutput)
}

// Static route, the network address of the user IDC. It can be modified after setting but cannot be deleted. AN unable
// field within BGP.
func (o DcxOutput) RouteFilterPrefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Dcx) pulumi.StringArrayOutput { return v.RouteFilterPrefixes }).(pulumi.StringArrayOutput)
}

// Type of the route, and available values include BGP and STATIC. The default value is `BGP`.
func (o DcxOutput) RouteType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dcx) pulumi.StringPtrOutput { return v.RouteType }).(pulumi.StringPtrOutput)
}

// State of the dedicated tunnels. Valid value: `PENDING`, `ALLOCATING`, `ALLOCATED`, `ALTERING`, `DELETING`, `DELETED`,
// `COMFIRMING` and `REJECTED`.
func (o DcxOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Dcx) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Interconnect IP of the DC within Tencent.
func (o DcxOutput) TencentAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Dcx) pulumi.StringOutput { return v.TencentAddress }).(pulumi.StringOutput)
}

// Vlan of the dedicated tunnels. Valid value ranges: (0~3000). `0` means that only one tunnel can be created for the
// physical connect.
func (o DcxOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Dcx) pulumi.IntPtrOutput { return v.Vlan }).(pulumi.IntPtrOutput)
}

// ID of the VPC or BMVPC.
func (o DcxOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dcx) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

type DcxArrayOutput struct{ *pulumi.OutputState }

func (DcxArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dcx)(nil)).Elem()
}

func (o DcxArrayOutput) ToDcxArrayOutput() DcxArrayOutput {
	return o
}

func (o DcxArrayOutput) ToDcxArrayOutputWithContext(ctx context.Context) DcxArrayOutput {
	return o
}

func (o DcxArrayOutput) Index(i pulumi.IntInput) DcxOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dcx {
		return vs[0].([]*Dcx)[vs[1].(int)]
	}).(DcxOutput)
}

type DcxMapOutput struct{ *pulumi.OutputState }

func (DcxMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dcx)(nil)).Elem()
}

func (o DcxMapOutput) ToDcxMapOutput() DcxMapOutput {
	return o
}

func (o DcxMapOutput) ToDcxMapOutputWithContext(ctx context.Context) DcxMapOutput {
	return o
}

func (o DcxMapOutput) MapIndex(k pulumi.StringInput) DcxOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dcx {
		return vs[0].(map[string]*Dcx)[vs[1].(string)]
	}).(DcxOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DcxInput)(nil)).Elem(), &Dcx{})
	pulumi.RegisterInputType(reflect.TypeOf((*DcxArrayInput)(nil)).Elem(), DcxArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DcxMapInput)(nil)).Elem(), DcxMap{})
	pulumi.RegisterOutputType(DcxOutput{})
	pulumi.RegisterOutputType(DcxArrayOutput{})
	pulumi.RegisterOutputType(DcxMapOutput{})
}
