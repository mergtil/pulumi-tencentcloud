// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dnspod

import (
	"context"
	"reflect"

	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type GetRecordsRecordCountInfo struct {
	ListCount      int `pulumi:"listCount"`
	SubdomainCount int `pulumi:"subdomainCount"`
	TotalCount     int `pulumi:"totalCount"`
}

// GetRecordsRecordCountInfoInput is an input type that accepts GetRecordsRecordCountInfoArgs and GetRecordsRecordCountInfoOutput values.
// You can construct a concrete instance of `GetRecordsRecordCountInfoInput` via:
//
//	GetRecordsRecordCountInfoArgs{...}
type GetRecordsRecordCountInfoInput interface {
	pulumi.Input

	ToGetRecordsRecordCountInfoOutput() GetRecordsRecordCountInfoOutput
	ToGetRecordsRecordCountInfoOutputWithContext(context.Context) GetRecordsRecordCountInfoOutput
}

type GetRecordsRecordCountInfoArgs struct {
	ListCount      pulumi.IntInput `pulumi:"listCount"`
	SubdomainCount pulumi.IntInput `pulumi:"subdomainCount"`
	TotalCount     pulumi.IntInput `pulumi:"totalCount"`
}

func (GetRecordsRecordCountInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsRecordCountInfo)(nil)).Elem()
}

func (i GetRecordsRecordCountInfoArgs) ToGetRecordsRecordCountInfoOutput() GetRecordsRecordCountInfoOutput {
	return i.ToGetRecordsRecordCountInfoOutputWithContext(context.Background())
}

func (i GetRecordsRecordCountInfoArgs) ToGetRecordsRecordCountInfoOutputWithContext(ctx context.Context) GetRecordsRecordCountInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordsRecordCountInfoOutput)
}

// GetRecordsRecordCountInfoArrayInput is an input type that accepts GetRecordsRecordCountInfoArray and GetRecordsRecordCountInfoArrayOutput values.
// You can construct a concrete instance of `GetRecordsRecordCountInfoArrayInput` via:
//
//	GetRecordsRecordCountInfoArray{ GetRecordsRecordCountInfoArgs{...} }
type GetRecordsRecordCountInfoArrayInput interface {
	pulumi.Input

	ToGetRecordsRecordCountInfoArrayOutput() GetRecordsRecordCountInfoArrayOutput
	ToGetRecordsRecordCountInfoArrayOutputWithContext(context.Context) GetRecordsRecordCountInfoArrayOutput
}

type GetRecordsRecordCountInfoArray []GetRecordsRecordCountInfoInput

func (GetRecordsRecordCountInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordsRecordCountInfo)(nil)).Elem()
}

func (i GetRecordsRecordCountInfoArray) ToGetRecordsRecordCountInfoArrayOutput() GetRecordsRecordCountInfoArrayOutput {
	return i.ToGetRecordsRecordCountInfoArrayOutputWithContext(context.Background())
}

func (i GetRecordsRecordCountInfoArray) ToGetRecordsRecordCountInfoArrayOutputWithContext(ctx context.Context) GetRecordsRecordCountInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordsRecordCountInfoArrayOutput)
}

type GetRecordsRecordCountInfoOutput struct{ *pulumi.OutputState }

func (GetRecordsRecordCountInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsRecordCountInfo)(nil)).Elem()
}

func (o GetRecordsRecordCountInfoOutput) ToGetRecordsRecordCountInfoOutput() GetRecordsRecordCountInfoOutput {
	return o
}

func (o GetRecordsRecordCountInfoOutput) ToGetRecordsRecordCountInfoOutputWithContext(ctx context.Context) GetRecordsRecordCountInfoOutput {
	return o
}

func (o GetRecordsRecordCountInfoOutput) ListCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetRecordsRecordCountInfo) int { return v.ListCount }).(pulumi.IntOutput)
}

func (o GetRecordsRecordCountInfoOutput) SubdomainCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetRecordsRecordCountInfo) int { return v.SubdomainCount }).(pulumi.IntOutput)
}

func (o GetRecordsRecordCountInfoOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetRecordsRecordCountInfo) int { return v.TotalCount }).(pulumi.IntOutput)
}

type GetRecordsRecordCountInfoArrayOutput struct{ *pulumi.OutputState }

func (GetRecordsRecordCountInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordsRecordCountInfo)(nil)).Elem()
}

func (o GetRecordsRecordCountInfoArrayOutput) ToGetRecordsRecordCountInfoArrayOutput() GetRecordsRecordCountInfoArrayOutput {
	return o
}

func (o GetRecordsRecordCountInfoArrayOutput) ToGetRecordsRecordCountInfoArrayOutputWithContext(ctx context.Context) GetRecordsRecordCountInfoArrayOutput {
	return o
}

func (o GetRecordsRecordCountInfoArrayOutput) Index(i pulumi.IntInput) GetRecordsRecordCountInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRecordsRecordCountInfo {
		return vs[0].([]GetRecordsRecordCountInfo)[vs[1].(int)]
	}).(GetRecordsRecordCountInfoOutput)
}

type GetRecordsResult struct {
	Line          string `pulumi:"line"`
	LineId        string `pulumi:"lineId"`
	MonitorStatus string `pulumi:"monitorStatus"`
	Mx            int    `pulumi:"mx"`
	Name          string `pulumi:"name"`
	RecordId      int    `pulumi:"recordId"`
	Remark        string `pulumi:"remark"`
	Status        string `pulumi:"status"`
	Ttl           int    `pulumi:"ttl"`
	Type          string `pulumi:"type"`
	UpdatedOn     string `pulumi:"updatedOn"`
	Value         string `pulumi:"value"`
	Weight        int    `pulumi:"weight"`
}

// GetRecordsResultInput is an input type that accepts GetRecordsResultArgs and GetRecordsResultOutput values.
// You can construct a concrete instance of `GetRecordsResultInput` via:
//
//	GetRecordsResultArgs{...}
type GetRecordsResultInput interface {
	pulumi.Input

	ToGetRecordsResultOutput() GetRecordsResultOutput
	ToGetRecordsResultOutputWithContext(context.Context) GetRecordsResultOutput
}

type GetRecordsResultArgs struct {
	Line          pulumi.StringInput `pulumi:"line"`
	LineId        pulumi.StringInput `pulumi:"lineId"`
	MonitorStatus pulumi.StringInput `pulumi:"monitorStatus"`
	Mx            pulumi.IntInput    `pulumi:"mx"`
	Name          pulumi.StringInput `pulumi:"name"`
	RecordId      pulumi.IntInput    `pulumi:"recordId"`
	Remark        pulumi.StringInput `pulumi:"remark"`
	Status        pulumi.StringInput `pulumi:"status"`
	Ttl           pulumi.IntInput    `pulumi:"ttl"`
	Type          pulumi.StringInput `pulumi:"type"`
	UpdatedOn     pulumi.StringInput `pulumi:"updatedOn"`
	Value         pulumi.StringInput `pulumi:"value"`
	Weight        pulumi.IntInput    `pulumi:"weight"`
}

func (GetRecordsResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsResult)(nil)).Elem()
}

func (i GetRecordsResultArgs) ToGetRecordsResultOutput() GetRecordsResultOutput {
	return i.ToGetRecordsResultOutputWithContext(context.Background())
}

func (i GetRecordsResultArgs) ToGetRecordsResultOutputWithContext(ctx context.Context) GetRecordsResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordsResultOutput)
}

// GetRecordsResultArrayInput is an input type that accepts GetRecordsResultArray and GetRecordsResultArrayOutput values.
// You can construct a concrete instance of `GetRecordsResultArrayInput` via:
//
//	GetRecordsResultArray{ GetRecordsResultArgs{...} }
type GetRecordsResultArrayInput interface {
	pulumi.Input

	ToGetRecordsResultArrayOutput() GetRecordsResultArrayOutput
	ToGetRecordsResultArrayOutputWithContext(context.Context) GetRecordsResultArrayOutput
}

type GetRecordsResultArray []GetRecordsResultInput

func (GetRecordsResultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordsResult)(nil)).Elem()
}

func (i GetRecordsResultArray) ToGetRecordsResultArrayOutput() GetRecordsResultArrayOutput {
	return i.ToGetRecordsResultArrayOutputWithContext(context.Background())
}

func (i GetRecordsResultArray) ToGetRecordsResultArrayOutputWithContext(ctx context.Context) GetRecordsResultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordsResultArrayOutput)
}

type GetRecordsResultOutput struct{ *pulumi.OutputState }

func (GetRecordsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsResult)(nil)).Elem()
}

func (o GetRecordsResultOutput) ToGetRecordsResultOutput() GetRecordsResultOutput {
	return o
}

func (o GetRecordsResultOutput) ToGetRecordsResultOutputWithContext(ctx context.Context) GetRecordsResultOutput {
	return o
}

func (o GetRecordsResultOutput) Line() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResult) string { return v.Line }).(pulumi.StringOutput)
}

func (o GetRecordsResultOutput) LineId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResult) string { return v.LineId }).(pulumi.StringOutput)
}

func (o GetRecordsResultOutput) MonitorStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResult) string { return v.MonitorStatus }).(pulumi.StringOutput)
}

func (o GetRecordsResultOutput) Mx() pulumi.IntOutput {
	return o.ApplyT(func(v GetRecordsResult) int { return v.Mx }).(pulumi.IntOutput)
}

func (o GetRecordsResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetRecordsResultOutput) RecordId() pulumi.IntOutput {
	return o.ApplyT(func(v GetRecordsResult) int { return v.RecordId }).(pulumi.IntOutput)
}

func (o GetRecordsResultOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResult) string { return v.Remark }).(pulumi.StringOutput)
}

func (o GetRecordsResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o GetRecordsResultOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v GetRecordsResult) int { return v.Ttl }).(pulumi.IntOutput)
}

func (o GetRecordsResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetRecordsResultOutput) UpdatedOn() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResult) string { return v.UpdatedOn }).(pulumi.StringOutput)
}

func (o GetRecordsResultOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsResult) string { return v.Value }).(pulumi.StringOutput)
}

func (o GetRecordsResultOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetRecordsResult) int { return v.Weight }).(pulumi.IntOutput)
}

type GetRecordsResultArrayOutput struct{ *pulumi.OutputState }

func (GetRecordsResultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordsResult)(nil)).Elem()
}

func (o GetRecordsResultArrayOutput) ToGetRecordsResultArrayOutput() GetRecordsResultArrayOutput {
	return o
}

func (o GetRecordsResultArrayOutput) ToGetRecordsResultArrayOutputWithContext(ctx context.Context) GetRecordsResultArrayOutput {
	return o
}

func (o GetRecordsResultArrayOutput) Index(i pulumi.IntInput) GetRecordsResultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRecordsResult {
		return vs[0].([]GetRecordsResult)[vs[1].(int)]
	}).(GetRecordsResultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordsRecordCountInfoInput)(nil)).Elem(), GetRecordsRecordCountInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordsRecordCountInfoArrayInput)(nil)).Elem(), GetRecordsRecordCountInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordsResultInput)(nil)).Elem(), GetRecordsResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordsResultArrayInput)(nil)).Elem(), GetRecordsResultArray{})
	pulumi.RegisterOutputType(GetRecordsRecordCountInfoOutput{})
	pulumi.RegisterOutputType(GetRecordsRecordCountInfoArrayOutput{})
	pulumi.RegisterOutputType(GetRecordsResultOutput{})
	pulumi.RegisterOutputType(GetRecordsResultArrayOutput{})
}
