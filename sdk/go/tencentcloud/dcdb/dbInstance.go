// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DbInstance struct {
	pulumi.CustomResourceState

	// Automatic renewal flag, 0 means the default state (the user has not set it, that is, the initial state is manual
	// renewal, and the user has activated the prepaid non-stop privilege and will also perform automatic renewal). 1 means
	// automatic renewal, 2 means no automatic renewal (user setting). if the business has no concept of renewal or automatic
	// renewal is not required, it needs to be set to 0.
	AutoRenewFlag pulumi.IntPtrOutput `pulumi:"autoRenewFlag"`
	// Whether to automatically use vouchers for payment, not used by default.
	AutoVoucher pulumi.BoolPtrOutput `pulumi:"autoVoucher"`
	// Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. 8.0.18 - MySQL 8.0.18; 10.1.9 - Mariadb 10.1.9;
	// 5.7.17 - Percona 5.7.17 If not filled, the default is 5.7.17, which means Percona 5.7.17.
	DbVersionId pulumi.StringPtrOutput `pulumi:"dbVersionId"`
	// DCN source instance ID.
	DcnInstanceId pulumi.StringPtrOutput `pulumi:"dcnInstanceId"`
	// DCN source region.
	DcnRegion pulumi.StringPtrOutput `pulumi:"dcnRegion"`
	// Whether to open the extranet access.
	ExtranetAccess pulumi.BoolPtrOutput `pulumi:"extranetAccess"`
	// parameter list. The optional values of this interface are: character_set_server (character set, must be passed),
	// lower_case_table_names (table name is case sensitive, must be passed, 0 - sensitive; 1 - insensitive), innodb_page_size
	// (innodb data page, default 16K), sync_mode ( Synchronous mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong
	// synchronous degenerate. The default is strong synchronous degenerate) .
	InitParams DbInstanceInitParamArrayOutput `pulumi:"initParams"`
	// Instance name, you can set the name of the instance independently through this field.
	InstanceName pulumi.StringPtrOutput `pulumi:"instanceName"`
	// Whether to support IPv6.
	Ipv6Flag pulumi.IntPtrOutput `pulumi:"ipv6Flag"`
	// The length of time you want to buy, unit: month.
	Period pulumi.IntOutput `pulumi:"period"`
	// Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default
	// project.
	ProjectId pulumi.IntPtrOutput `pulumi:"projectId"`
	// Array of tag key-value pairs.
	ResourceTags DbInstanceResourceTagArrayOutput `pulumi:"resourceTags"`
	// Security group ids, the security group can be passed in the form of an array, compatible with the previous
	// SecurityGroupId parameter.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// The number of instance fragments, the optional range is 2-8, and new fragments can be added to a maximum of 64 fragments
	// by upgrading the instance.
	ShardCount pulumi.IntOutput `pulumi:"shardCount"`
	// Shard memory size, unit: GB, can pass DescribeShardSpec Query the instance specification to obtain.
	ShardMemory pulumi.IntOutput `pulumi:"shardMemory"`
	// Number of single shard nodes, can pass DescribeShardSpec Query the instance specification to obtain.
	ShardNodeCount pulumi.IntOutput `pulumi:"shardNodeCount"`
	// Shard storage size, unit: GB, can pass DescribeShardSpec Query the instance specification to obtain.
	ShardStorage pulumi.IntOutput `pulumi:"shardStorage"`
	// Virtual private network subnet ID, required when VpcId is not empty.
	SubnetId pulumi.StringPtrOutput `pulumi:"subnetId"`
	// The field is required to specify VIP.
	Vip pulumi.StringOutput `pulumi:"vip"`
	// The field is required to specify VIPv6.
	Vipv6 pulumi.StringOutput `pulumi:"vipv6"`
	// Voucher ID list, currently only supports specifying one voucher.
	VoucherIds pulumi.StringArrayOutput `pulumi:"voucherIds"`
	// Virtual private network ID, if not passed or passed empty, it means that it is created as a basic network.
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
	// Intranet port.
	Vport pulumi.IntOutput `pulumi:"vport"`
	// The availability zone distribution of shard nodes can be filled with up to two availability zones. When the shard
	// specification is one master and two slaves, two of the nodes are in the first availability zone.Note that the current
	// availability zone that can be sold needs to be pulled through the DescribeDCDBSaleInfo interface.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewDbInstance registers a new resource with the given unique name, arguments, and options.
func NewDbInstance(ctx *pulumi.Context,
	name string, args *DbInstanceArgs, opts ...pulumi.ResourceOption) (*DbInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Period == nil {
		return nil, errors.New("invalid value for required argument 'Period'")
	}
	if args.ShardCount == nil {
		return nil, errors.New("invalid value for required argument 'ShardCount'")
	}
	if args.ShardMemory == nil {
		return nil, errors.New("invalid value for required argument 'ShardMemory'")
	}
	if args.ShardNodeCount == nil {
		return nil, errors.New("invalid value for required argument 'ShardNodeCount'")
	}
	if args.ShardStorage == nil {
		return nil, errors.New("invalid value for required argument 'ShardStorage'")
	}
	if args.Zones == nil {
		return nil, errors.New("invalid value for required argument 'Zones'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DbInstance
	err := ctx.RegisterResource("tencentcloud:Dcdb/dbInstance:DbInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbInstance gets an existing DbInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbInstanceState, opts ...pulumi.ResourceOption) (*DbInstance, error) {
	var resource DbInstance
	err := ctx.ReadResource("tencentcloud:Dcdb/dbInstance:DbInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbInstance resources.
type dbInstanceState struct {
	// Automatic renewal flag, 0 means the default state (the user has not set it, that is, the initial state is manual
	// renewal, and the user has activated the prepaid non-stop privilege and will also perform automatic renewal). 1 means
	// automatic renewal, 2 means no automatic renewal (user setting). if the business has no concept of renewal or automatic
	// renewal is not required, it needs to be set to 0.
	AutoRenewFlag *int `pulumi:"autoRenewFlag"`
	// Whether to automatically use vouchers for payment, not used by default.
	AutoVoucher *bool `pulumi:"autoVoucher"`
	// Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. 8.0.18 - MySQL 8.0.18; 10.1.9 - Mariadb 10.1.9;
	// 5.7.17 - Percona 5.7.17 If not filled, the default is 5.7.17, which means Percona 5.7.17.
	DbVersionId *string `pulumi:"dbVersionId"`
	// DCN source instance ID.
	DcnInstanceId *string `pulumi:"dcnInstanceId"`
	// DCN source region.
	DcnRegion *string `pulumi:"dcnRegion"`
	// Whether to open the extranet access.
	ExtranetAccess *bool `pulumi:"extranetAccess"`
	// parameter list. The optional values of this interface are: character_set_server (character set, must be passed),
	// lower_case_table_names (table name is case sensitive, must be passed, 0 - sensitive; 1 - insensitive), innodb_page_size
	// (innodb data page, default 16K), sync_mode ( Synchronous mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong
	// synchronous degenerate. The default is strong synchronous degenerate) .
	InitParams []DbInstanceInitParam `pulumi:"initParams"`
	// Instance name, you can set the name of the instance independently through this field.
	InstanceName *string `pulumi:"instanceName"`
	// Whether to support IPv6.
	Ipv6Flag *int `pulumi:"ipv6Flag"`
	// The length of time you want to buy, unit: month.
	Period *int `pulumi:"period"`
	// Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default
	// project.
	ProjectId *int `pulumi:"projectId"`
	// Array of tag key-value pairs.
	ResourceTags []DbInstanceResourceTag `pulumi:"resourceTags"`
	// Security group ids, the security group can be passed in the form of an array, compatible with the previous
	// SecurityGroupId parameter.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The number of instance fragments, the optional range is 2-8, and new fragments can be added to a maximum of 64 fragments
	// by upgrading the instance.
	ShardCount *int `pulumi:"shardCount"`
	// Shard memory size, unit: GB, can pass DescribeShardSpec Query the instance specification to obtain.
	ShardMemory *int `pulumi:"shardMemory"`
	// Number of single shard nodes, can pass DescribeShardSpec Query the instance specification to obtain.
	ShardNodeCount *int `pulumi:"shardNodeCount"`
	// Shard storage size, unit: GB, can pass DescribeShardSpec Query the instance specification to obtain.
	ShardStorage *int `pulumi:"shardStorage"`
	// Virtual private network subnet ID, required when VpcId is not empty.
	SubnetId *string `pulumi:"subnetId"`
	// The field is required to specify VIP.
	Vip *string `pulumi:"vip"`
	// The field is required to specify VIPv6.
	Vipv6 *string `pulumi:"vipv6"`
	// Voucher ID list, currently only supports specifying one voucher.
	VoucherIds []string `pulumi:"voucherIds"`
	// Virtual private network ID, if not passed or passed empty, it means that it is created as a basic network.
	VpcId *string `pulumi:"vpcId"`
	// Intranet port.
	Vport *int `pulumi:"vport"`
	// The availability zone distribution of shard nodes can be filled with up to two availability zones. When the shard
	// specification is one master and two slaves, two of the nodes are in the first availability zone.Note that the current
	// availability zone that can be sold needs to be pulled through the DescribeDCDBSaleInfo interface.
	Zones []string `pulumi:"zones"`
}

type DbInstanceState struct {
	// Automatic renewal flag, 0 means the default state (the user has not set it, that is, the initial state is manual
	// renewal, and the user has activated the prepaid non-stop privilege and will also perform automatic renewal). 1 means
	// automatic renewal, 2 means no automatic renewal (user setting). if the business has no concept of renewal or automatic
	// renewal is not required, it needs to be set to 0.
	AutoRenewFlag pulumi.IntPtrInput
	// Whether to automatically use vouchers for payment, not used by default.
	AutoVoucher pulumi.BoolPtrInput
	// Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. 8.0.18 - MySQL 8.0.18; 10.1.9 - Mariadb 10.1.9;
	// 5.7.17 - Percona 5.7.17 If not filled, the default is 5.7.17, which means Percona 5.7.17.
	DbVersionId pulumi.StringPtrInput
	// DCN source instance ID.
	DcnInstanceId pulumi.StringPtrInput
	// DCN source region.
	DcnRegion pulumi.StringPtrInput
	// Whether to open the extranet access.
	ExtranetAccess pulumi.BoolPtrInput
	// parameter list. The optional values of this interface are: character_set_server (character set, must be passed),
	// lower_case_table_names (table name is case sensitive, must be passed, 0 - sensitive; 1 - insensitive), innodb_page_size
	// (innodb data page, default 16K), sync_mode ( Synchronous mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong
	// synchronous degenerate. The default is strong synchronous degenerate) .
	InitParams DbInstanceInitParamArrayInput
	// Instance name, you can set the name of the instance independently through this field.
	InstanceName pulumi.StringPtrInput
	// Whether to support IPv6.
	Ipv6Flag pulumi.IntPtrInput
	// The length of time you want to buy, unit: month.
	Period pulumi.IntPtrInput
	// Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default
	// project.
	ProjectId pulumi.IntPtrInput
	// Array of tag key-value pairs.
	ResourceTags DbInstanceResourceTagArrayInput
	// Security group ids, the security group can be passed in the form of an array, compatible with the previous
	// SecurityGroupId parameter.
	SecurityGroupIds pulumi.StringArrayInput
	// The number of instance fragments, the optional range is 2-8, and new fragments can be added to a maximum of 64 fragments
	// by upgrading the instance.
	ShardCount pulumi.IntPtrInput
	// Shard memory size, unit: GB, can pass DescribeShardSpec Query the instance specification to obtain.
	ShardMemory pulumi.IntPtrInput
	// Number of single shard nodes, can pass DescribeShardSpec Query the instance specification to obtain.
	ShardNodeCount pulumi.IntPtrInput
	// Shard storage size, unit: GB, can pass DescribeShardSpec Query the instance specification to obtain.
	ShardStorage pulumi.IntPtrInput
	// Virtual private network subnet ID, required when VpcId is not empty.
	SubnetId pulumi.StringPtrInput
	// The field is required to specify VIP.
	Vip pulumi.StringPtrInput
	// The field is required to specify VIPv6.
	Vipv6 pulumi.StringPtrInput
	// Voucher ID list, currently only supports specifying one voucher.
	VoucherIds pulumi.StringArrayInput
	// Virtual private network ID, if not passed or passed empty, it means that it is created as a basic network.
	VpcId pulumi.StringPtrInput
	// Intranet port.
	Vport pulumi.IntPtrInput
	// The availability zone distribution of shard nodes can be filled with up to two availability zones. When the shard
	// specification is one master and two slaves, two of the nodes are in the first availability zone.Note that the current
	// availability zone that can be sold needs to be pulled through the DescribeDCDBSaleInfo interface.
	Zones pulumi.StringArrayInput
}

func (DbInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbInstanceState)(nil)).Elem()
}

type dbInstanceArgs struct {
	// Automatic renewal flag, 0 means the default state (the user has not set it, that is, the initial state is manual
	// renewal, and the user has activated the prepaid non-stop privilege and will also perform automatic renewal). 1 means
	// automatic renewal, 2 means no automatic renewal (user setting). if the business has no concept of renewal or automatic
	// renewal is not required, it needs to be set to 0.
	AutoRenewFlag *int `pulumi:"autoRenewFlag"`
	// Whether to automatically use vouchers for payment, not used by default.
	AutoVoucher *bool `pulumi:"autoVoucher"`
	// Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. 8.0.18 - MySQL 8.0.18; 10.1.9 - Mariadb 10.1.9;
	// 5.7.17 - Percona 5.7.17 If not filled, the default is 5.7.17, which means Percona 5.7.17.
	DbVersionId *string `pulumi:"dbVersionId"`
	// DCN source instance ID.
	DcnInstanceId *string `pulumi:"dcnInstanceId"`
	// DCN source region.
	DcnRegion *string `pulumi:"dcnRegion"`
	// Whether to open the extranet access.
	ExtranetAccess *bool `pulumi:"extranetAccess"`
	// parameter list. The optional values of this interface are: character_set_server (character set, must be passed),
	// lower_case_table_names (table name is case sensitive, must be passed, 0 - sensitive; 1 - insensitive), innodb_page_size
	// (innodb data page, default 16K), sync_mode ( Synchronous mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong
	// synchronous degenerate. The default is strong synchronous degenerate) .
	InitParams []DbInstanceInitParam `pulumi:"initParams"`
	// Instance name, you can set the name of the instance independently through this field.
	InstanceName *string `pulumi:"instanceName"`
	// Whether to support IPv6.
	Ipv6Flag *int `pulumi:"ipv6Flag"`
	// The length of time you want to buy, unit: month.
	Period int `pulumi:"period"`
	// Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default
	// project.
	ProjectId *int `pulumi:"projectId"`
	// Array of tag key-value pairs.
	ResourceTags []DbInstanceResourceTag `pulumi:"resourceTags"`
	// Security group ids, the security group can be passed in the form of an array, compatible with the previous
	// SecurityGroupId parameter.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The number of instance fragments, the optional range is 2-8, and new fragments can be added to a maximum of 64 fragments
	// by upgrading the instance.
	ShardCount int `pulumi:"shardCount"`
	// Shard memory size, unit: GB, can pass DescribeShardSpec Query the instance specification to obtain.
	ShardMemory int `pulumi:"shardMemory"`
	// Number of single shard nodes, can pass DescribeShardSpec Query the instance specification to obtain.
	ShardNodeCount int `pulumi:"shardNodeCount"`
	// Shard storage size, unit: GB, can pass DescribeShardSpec Query the instance specification to obtain.
	ShardStorage int `pulumi:"shardStorage"`
	// Virtual private network subnet ID, required when VpcId is not empty.
	SubnetId *string `pulumi:"subnetId"`
	// The field is required to specify VIP.
	Vip *string `pulumi:"vip"`
	// The field is required to specify VIPv6.
	Vipv6 *string `pulumi:"vipv6"`
	// Voucher ID list, currently only supports specifying one voucher.
	VoucherIds []string `pulumi:"voucherIds"`
	// Virtual private network ID, if not passed or passed empty, it means that it is created as a basic network.
	VpcId *string `pulumi:"vpcId"`
	// The availability zone distribution of shard nodes can be filled with up to two availability zones. When the shard
	// specification is one master and two slaves, two of the nodes are in the first availability zone.Note that the current
	// availability zone that can be sold needs to be pulled through the DescribeDCDBSaleInfo interface.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a DbInstance resource.
type DbInstanceArgs struct {
	// Automatic renewal flag, 0 means the default state (the user has not set it, that is, the initial state is manual
	// renewal, and the user has activated the prepaid non-stop privilege and will also perform automatic renewal). 1 means
	// automatic renewal, 2 means no automatic renewal (user setting). if the business has no concept of renewal or automatic
	// renewal is not required, it needs to be set to 0.
	AutoRenewFlag pulumi.IntPtrInput
	// Whether to automatically use vouchers for payment, not used by default.
	AutoVoucher pulumi.BoolPtrInput
	// Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. 8.0.18 - MySQL 8.0.18; 10.1.9 - Mariadb 10.1.9;
	// 5.7.17 - Percona 5.7.17 If not filled, the default is 5.7.17, which means Percona 5.7.17.
	DbVersionId pulumi.StringPtrInput
	// DCN source instance ID.
	DcnInstanceId pulumi.StringPtrInput
	// DCN source region.
	DcnRegion pulumi.StringPtrInput
	// Whether to open the extranet access.
	ExtranetAccess pulumi.BoolPtrInput
	// parameter list. The optional values of this interface are: character_set_server (character set, must be passed),
	// lower_case_table_names (table name is case sensitive, must be passed, 0 - sensitive; 1 - insensitive), innodb_page_size
	// (innodb data page, default 16K), sync_mode ( Synchronous mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong
	// synchronous degenerate. The default is strong synchronous degenerate) .
	InitParams DbInstanceInitParamArrayInput
	// Instance name, you can set the name of the instance independently through this field.
	InstanceName pulumi.StringPtrInput
	// Whether to support IPv6.
	Ipv6Flag pulumi.IntPtrInput
	// The length of time you want to buy, unit: month.
	Period pulumi.IntInput
	// Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default
	// project.
	ProjectId pulumi.IntPtrInput
	// Array of tag key-value pairs.
	ResourceTags DbInstanceResourceTagArrayInput
	// Security group ids, the security group can be passed in the form of an array, compatible with the previous
	// SecurityGroupId parameter.
	SecurityGroupIds pulumi.StringArrayInput
	// The number of instance fragments, the optional range is 2-8, and new fragments can be added to a maximum of 64 fragments
	// by upgrading the instance.
	ShardCount pulumi.IntInput
	// Shard memory size, unit: GB, can pass DescribeShardSpec Query the instance specification to obtain.
	ShardMemory pulumi.IntInput
	// Number of single shard nodes, can pass DescribeShardSpec Query the instance specification to obtain.
	ShardNodeCount pulumi.IntInput
	// Shard storage size, unit: GB, can pass DescribeShardSpec Query the instance specification to obtain.
	ShardStorage pulumi.IntInput
	// Virtual private network subnet ID, required when VpcId is not empty.
	SubnetId pulumi.StringPtrInput
	// The field is required to specify VIP.
	Vip pulumi.StringPtrInput
	// The field is required to specify VIPv6.
	Vipv6 pulumi.StringPtrInput
	// Voucher ID list, currently only supports specifying one voucher.
	VoucherIds pulumi.StringArrayInput
	// Virtual private network ID, if not passed or passed empty, it means that it is created as a basic network.
	VpcId pulumi.StringPtrInput
	// The availability zone distribution of shard nodes can be filled with up to two availability zones. When the shard
	// specification is one master and two slaves, two of the nodes are in the first availability zone.Note that the current
	// availability zone that can be sold needs to be pulled through the DescribeDCDBSaleInfo interface.
	Zones pulumi.StringArrayInput
}

func (DbInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbInstanceArgs)(nil)).Elem()
}

type DbInstanceInput interface {
	pulumi.Input

	ToDbInstanceOutput() DbInstanceOutput
	ToDbInstanceOutputWithContext(ctx context.Context) DbInstanceOutput
}

func (*DbInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**DbInstance)(nil)).Elem()
}

func (i *DbInstance) ToDbInstanceOutput() DbInstanceOutput {
	return i.ToDbInstanceOutputWithContext(context.Background())
}

func (i *DbInstance) ToDbInstanceOutputWithContext(ctx context.Context) DbInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbInstanceOutput)
}

// DbInstanceArrayInput is an input type that accepts DbInstanceArray and DbInstanceArrayOutput values.
// You can construct a concrete instance of `DbInstanceArrayInput` via:
//
//	DbInstanceArray{ DbInstanceArgs{...} }
type DbInstanceArrayInput interface {
	pulumi.Input

	ToDbInstanceArrayOutput() DbInstanceArrayOutput
	ToDbInstanceArrayOutputWithContext(context.Context) DbInstanceArrayOutput
}

type DbInstanceArray []DbInstanceInput

func (DbInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbInstance)(nil)).Elem()
}

func (i DbInstanceArray) ToDbInstanceArrayOutput() DbInstanceArrayOutput {
	return i.ToDbInstanceArrayOutputWithContext(context.Background())
}

func (i DbInstanceArray) ToDbInstanceArrayOutputWithContext(ctx context.Context) DbInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbInstanceArrayOutput)
}

// DbInstanceMapInput is an input type that accepts DbInstanceMap and DbInstanceMapOutput values.
// You can construct a concrete instance of `DbInstanceMapInput` via:
//
//	DbInstanceMap{ "key": DbInstanceArgs{...} }
type DbInstanceMapInput interface {
	pulumi.Input

	ToDbInstanceMapOutput() DbInstanceMapOutput
	ToDbInstanceMapOutputWithContext(context.Context) DbInstanceMapOutput
}

type DbInstanceMap map[string]DbInstanceInput

func (DbInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbInstance)(nil)).Elem()
}

func (i DbInstanceMap) ToDbInstanceMapOutput() DbInstanceMapOutput {
	return i.ToDbInstanceMapOutputWithContext(context.Background())
}

func (i DbInstanceMap) ToDbInstanceMapOutputWithContext(ctx context.Context) DbInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbInstanceMapOutput)
}

type DbInstanceOutput struct{ *pulumi.OutputState }

func (DbInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbInstance)(nil)).Elem()
}

func (o DbInstanceOutput) ToDbInstanceOutput() DbInstanceOutput {
	return o
}

func (o DbInstanceOutput) ToDbInstanceOutputWithContext(ctx context.Context) DbInstanceOutput {
	return o
}

// Automatic renewal flag, 0 means the default state (the user has not set it, that is, the initial state is manual
// renewal, and the user has activated the prepaid non-stop privilege and will also perform automatic renewal). 1 means
// automatic renewal, 2 means no automatic renewal (user setting). if the business has no concept of renewal or automatic
// renewal is not required, it needs to be set to 0.
func (o DbInstanceOutput) AutoRenewFlag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.IntPtrOutput { return v.AutoRenewFlag }).(pulumi.IntPtrOutput)
}

// Whether to automatically use vouchers for payment, not used by default.
func (o DbInstanceOutput) AutoVoucher() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.BoolPtrOutput { return v.AutoVoucher }).(pulumi.BoolPtrOutput)
}

// Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. 8.0.18 - MySQL 8.0.18; 10.1.9 - Mariadb 10.1.9;
// 5.7.17 - Percona 5.7.17 If not filled, the default is 5.7.17, which means Percona 5.7.17.
func (o DbInstanceOutput) DbVersionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringPtrOutput { return v.DbVersionId }).(pulumi.StringPtrOutput)
}

// DCN source instance ID.
func (o DbInstanceOutput) DcnInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringPtrOutput { return v.DcnInstanceId }).(pulumi.StringPtrOutput)
}

// DCN source region.
func (o DbInstanceOutput) DcnRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringPtrOutput { return v.DcnRegion }).(pulumi.StringPtrOutput)
}

// Whether to open the extranet access.
func (o DbInstanceOutput) ExtranetAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.BoolPtrOutput { return v.ExtranetAccess }).(pulumi.BoolPtrOutput)
}

// parameter list. The optional values of this interface are: character_set_server (character set, must be passed),
// lower_case_table_names (table name is case sensitive, must be passed, 0 - sensitive; 1 - insensitive), innodb_page_size
// (innodb data page, default 16K), sync_mode ( Synchronous mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong
// synchronous degenerate. The default is strong synchronous degenerate) .
func (o DbInstanceOutput) InitParams() DbInstanceInitParamArrayOutput {
	return o.ApplyT(func(v *DbInstance) DbInstanceInitParamArrayOutput { return v.InitParams }).(DbInstanceInitParamArrayOutput)
}

// Instance name, you can set the name of the instance independently through this field.
func (o DbInstanceOutput) InstanceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringPtrOutput { return v.InstanceName }).(pulumi.StringPtrOutput)
}

// Whether to support IPv6.
func (o DbInstanceOutput) Ipv6Flag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.IntPtrOutput { return v.Ipv6Flag }).(pulumi.IntPtrOutput)
}

// The length of time you want to buy, unit: month.
func (o DbInstanceOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.IntOutput { return v.Period }).(pulumi.IntOutput)
}

// Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default
// project.
func (o DbInstanceOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.IntPtrOutput { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// Array of tag key-value pairs.
func (o DbInstanceOutput) ResourceTags() DbInstanceResourceTagArrayOutput {
	return o.ApplyT(func(v *DbInstance) DbInstanceResourceTagArrayOutput { return v.ResourceTags }).(DbInstanceResourceTagArrayOutput)
}

// Security group ids, the security group can be passed in the form of an array, compatible with the previous
// SecurityGroupId parameter.
func (o DbInstanceOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The number of instance fragments, the optional range is 2-8, and new fragments can be added to a maximum of 64 fragments
// by upgrading the instance.
func (o DbInstanceOutput) ShardCount() pulumi.IntOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.IntOutput { return v.ShardCount }).(pulumi.IntOutput)
}

// Shard memory size, unit: GB, can pass DescribeShardSpec Query the instance specification to obtain.
func (o DbInstanceOutput) ShardMemory() pulumi.IntOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.IntOutput { return v.ShardMemory }).(pulumi.IntOutput)
}

// Number of single shard nodes, can pass DescribeShardSpec Query the instance specification to obtain.
func (o DbInstanceOutput) ShardNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.IntOutput { return v.ShardNodeCount }).(pulumi.IntOutput)
}

// Shard storage size, unit: GB, can pass DescribeShardSpec Query the instance specification to obtain.
func (o DbInstanceOutput) ShardStorage() pulumi.IntOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.IntOutput { return v.ShardStorage }).(pulumi.IntOutput)
}

// Virtual private network subnet ID, required when VpcId is not empty.
func (o DbInstanceOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringPtrOutput { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The field is required to specify VIP.
func (o DbInstanceOutput) Vip() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.Vip }).(pulumi.StringOutput)
}

// The field is required to specify VIPv6.
func (o DbInstanceOutput) Vipv6() pulumi.StringOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringOutput { return v.Vipv6 }).(pulumi.StringOutput)
}

// Voucher ID list, currently only supports specifying one voucher.
func (o DbInstanceOutput) VoucherIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringArrayOutput { return v.VoucherIds }).(pulumi.StringArrayOutput)
}

// Virtual private network ID, if not passed or passed empty, it means that it is created as a basic network.
func (o DbInstanceOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

// Intranet port.
func (o DbInstanceOutput) Vport() pulumi.IntOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.IntOutput { return v.Vport }).(pulumi.IntOutput)
}

// The availability zone distribution of shard nodes can be filled with up to two availability zones. When the shard
// specification is one master and two slaves, two of the nodes are in the first availability zone.Note that the current
// availability zone that can be sold needs to be pulled through the DescribeDCDBSaleInfo interface.
func (o DbInstanceOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DbInstance) pulumi.StringArrayOutput { return v.Zones }).(pulumi.StringArrayOutput)
}

type DbInstanceArrayOutput struct{ *pulumi.OutputState }

func (DbInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbInstance)(nil)).Elem()
}

func (o DbInstanceArrayOutput) ToDbInstanceArrayOutput() DbInstanceArrayOutput {
	return o
}

func (o DbInstanceArrayOutput) ToDbInstanceArrayOutputWithContext(ctx context.Context) DbInstanceArrayOutput {
	return o
}

func (o DbInstanceArrayOutput) Index(i pulumi.IntInput) DbInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbInstance {
		return vs[0].([]*DbInstance)[vs[1].(int)]
	}).(DbInstanceOutput)
}

type DbInstanceMapOutput struct{ *pulumi.OutputState }

func (DbInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbInstance)(nil)).Elem()
}

func (o DbInstanceMapOutput) ToDbInstanceMapOutput() DbInstanceMapOutput {
	return o
}

func (o DbInstanceMapOutput) ToDbInstanceMapOutputWithContext(ctx context.Context) DbInstanceMapOutput {
	return o
}

func (o DbInstanceMapOutput) MapIndex(k pulumi.StringInput) DbInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbInstance {
		return vs[0].(map[string]*DbInstance)[vs[1].(string)]
	}).(DbInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbInstanceInput)(nil)).Elem(), &DbInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbInstanceArrayInput)(nil)).Elem(), DbInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbInstanceMapInput)(nil)).Elem(), DbInstanceMap{})
	pulumi.RegisterOutputType(DbInstanceOutput{})
	pulumi.RegisterOutputType(DbInstanceArrayOutput{})
	pulumi.RegisterOutputType(DbInstanceMapOutput{})
}
