// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deprecatedmonitor

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BindingObject struct {
	pulumi.CustomResourceState

	// A list objects. Each element contains the following attributes:
	Dimensions BindingObjectDimensionArrayOutput `pulumi:"dimensions"`
	// Policy group ID for binding objects.
	GroupId pulumi.IntOutput `pulumi:"groupId"`
}

// NewBindingObject registers a new resource with the given unique name, arguments, and options.
func NewBindingObject(ctx *pulumi.Context,
	name string, args *BindingObjectArgs, opts ...pulumi.ResourceOption) (*BindingObject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dimensions == nil {
		return nil, errors.New("invalid value for required argument 'Dimensions'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BindingObject
	err := ctx.RegisterResource("tencentcloud:Deprecatedmonitor/bindingObject:BindingObject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBindingObject gets an existing BindingObject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBindingObject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BindingObjectState, opts ...pulumi.ResourceOption) (*BindingObject, error) {
	var resource BindingObject
	err := ctx.ReadResource("tencentcloud:Deprecatedmonitor/bindingObject:BindingObject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BindingObject resources.
type bindingObjectState struct {
	// A list objects. Each element contains the following attributes:
	Dimensions []BindingObjectDimension `pulumi:"dimensions"`
	// Policy group ID for binding objects.
	GroupId *int `pulumi:"groupId"`
}

type BindingObjectState struct {
	// A list objects. Each element contains the following attributes:
	Dimensions BindingObjectDimensionArrayInput
	// Policy group ID for binding objects.
	GroupId pulumi.IntPtrInput
}

func (BindingObjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*bindingObjectState)(nil)).Elem()
}

type bindingObjectArgs struct {
	// A list objects. Each element contains the following attributes:
	Dimensions []BindingObjectDimension `pulumi:"dimensions"`
	// Policy group ID for binding objects.
	GroupId int `pulumi:"groupId"`
}

// The set of arguments for constructing a BindingObject resource.
type BindingObjectArgs struct {
	// A list objects. Each element contains the following attributes:
	Dimensions BindingObjectDimensionArrayInput
	// Policy group ID for binding objects.
	GroupId pulumi.IntInput
}

func (BindingObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bindingObjectArgs)(nil)).Elem()
}

type BindingObjectInput interface {
	pulumi.Input

	ToBindingObjectOutput() BindingObjectOutput
	ToBindingObjectOutputWithContext(ctx context.Context) BindingObjectOutput
}

func (*BindingObject) ElementType() reflect.Type {
	return reflect.TypeOf((**BindingObject)(nil)).Elem()
}

func (i *BindingObject) ToBindingObjectOutput() BindingObjectOutput {
	return i.ToBindingObjectOutputWithContext(context.Background())
}

func (i *BindingObject) ToBindingObjectOutputWithContext(ctx context.Context) BindingObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingObjectOutput)
}

// BindingObjectArrayInput is an input type that accepts BindingObjectArray and BindingObjectArrayOutput values.
// You can construct a concrete instance of `BindingObjectArrayInput` via:
//
//	BindingObjectArray{ BindingObjectArgs{...} }
type BindingObjectArrayInput interface {
	pulumi.Input

	ToBindingObjectArrayOutput() BindingObjectArrayOutput
	ToBindingObjectArrayOutputWithContext(context.Context) BindingObjectArrayOutput
}

type BindingObjectArray []BindingObjectInput

func (BindingObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BindingObject)(nil)).Elem()
}

func (i BindingObjectArray) ToBindingObjectArrayOutput() BindingObjectArrayOutput {
	return i.ToBindingObjectArrayOutputWithContext(context.Background())
}

func (i BindingObjectArray) ToBindingObjectArrayOutputWithContext(ctx context.Context) BindingObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingObjectArrayOutput)
}

// BindingObjectMapInput is an input type that accepts BindingObjectMap and BindingObjectMapOutput values.
// You can construct a concrete instance of `BindingObjectMapInput` via:
//
//	BindingObjectMap{ "key": BindingObjectArgs{...} }
type BindingObjectMapInput interface {
	pulumi.Input

	ToBindingObjectMapOutput() BindingObjectMapOutput
	ToBindingObjectMapOutputWithContext(context.Context) BindingObjectMapOutput
}

type BindingObjectMap map[string]BindingObjectInput

func (BindingObjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BindingObject)(nil)).Elem()
}

func (i BindingObjectMap) ToBindingObjectMapOutput() BindingObjectMapOutput {
	return i.ToBindingObjectMapOutputWithContext(context.Background())
}

func (i BindingObjectMap) ToBindingObjectMapOutputWithContext(ctx context.Context) BindingObjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindingObjectMapOutput)
}

type BindingObjectOutput struct{ *pulumi.OutputState }

func (BindingObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BindingObject)(nil)).Elem()
}

func (o BindingObjectOutput) ToBindingObjectOutput() BindingObjectOutput {
	return o
}

func (o BindingObjectOutput) ToBindingObjectOutputWithContext(ctx context.Context) BindingObjectOutput {
	return o
}

// A list objects. Each element contains the following attributes:
func (o BindingObjectOutput) Dimensions() BindingObjectDimensionArrayOutput {
	return o.ApplyT(func(v *BindingObject) BindingObjectDimensionArrayOutput { return v.Dimensions }).(BindingObjectDimensionArrayOutput)
}

// Policy group ID for binding objects.
func (o BindingObjectOutput) GroupId() pulumi.IntOutput {
	return o.ApplyT(func(v *BindingObject) pulumi.IntOutput { return v.GroupId }).(pulumi.IntOutput)
}

type BindingObjectArrayOutput struct{ *pulumi.OutputState }

func (BindingObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BindingObject)(nil)).Elem()
}

func (o BindingObjectArrayOutput) ToBindingObjectArrayOutput() BindingObjectArrayOutput {
	return o
}

func (o BindingObjectArrayOutput) ToBindingObjectArrayOutputWithContext(ctx context.Context) BindingObjectArrayOutput {
	return o
}

func (o BindingObjectArrayOutput) Index(i pulumi.IntInput) BindingObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BindingObject {
		return vs[0].([]*BindingObject)[vs[1].(int)]
	}).(BindingObjectOutput)
}

type BindingObjectMapOutput struct{ *pulumi.OutputState }

func (BindingObjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BindingObject)(nil)).Elem()
}

func (o BindingObjectMapOutput) ToBindingObjectMapOutput() BindingObjectMapOutput {
	return o
}

func (o BindingObjectMapOutput) ToBindingObjectMapOutputWithContext(ctx context.Context) BindingObjectMapOutput {
	return o
}

func (o BindingObjectMapOutput) MapIndex(k pulumi.StringInput) BindingObjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BindingObject {
		return vs[0].(map[string]*BindingObject)[vs[1].(string)]
	}).(BindingObjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BindingObjectInput)(nil)).Elem(), &BindingObject{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingObjectArrayInput)(nil)).Elem(), BindingObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindingObjectMapInput)(nil)).Elem(), BindingObjectMap{})
	pulumi.RegisterOutputType(BindingObjectOutput{})
	pulumi.RegisterOutputType(BindingObjectArrayOutput{})
	pulumi.RegisterOutputType(BindingObjectMapOutput{})
}
