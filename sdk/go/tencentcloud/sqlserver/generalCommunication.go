// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sqlserver

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GeneralCommunication struct {
	pulumi.CustomResourceState

	// ID of instances.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewGeneralCommunication registers a new resource with the given unique name, arguments, and options.
func NewGeneralCommunication(ctx *pulumi.Context,
	name string, args *GeneralCommunicationArgs, opts ...pulumi.ResourceOption) (*GeneralCommunication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GeneralCommunication
	err := ctx.RegisterResource("tencentcloud:Sqlserver/generalCommunication:GeneralCommunication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGeneralCommunication gets an existing GeneralCommunication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGeneralCommunication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GeneralCommunicationState, opts ...pulumi.ResourceOption) (*GeneralCommunication, error) {
	var resource GeneralCommunication
	err := ctx.ReadResource("tencentcloud:Sqlserver/generalCommunication:GeneralCommunication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GeneralCommunication resources.
type generalCommunicationState struct {
	// ID of instances.
	InstanceId *string `pulumi:"instanceId"`
}

type GeneralCommunicationState struct {
	// ID of instances.
	InstanceId pulumi.StringPtrInput
}

func (GeneralCommunicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*generalCommunicationState)(nil)).Elem()
}

type generalCommunicationArgs struct {
	// ID of instances.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a GeneralCommunication resource.
type GeneralCommunicationArgs struct {
	// ID of instances.
	InstanceId pulumi.StringInput
}

func (GeneralCommunicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*generalCommunicationArgs)(nil)).Elem()
}

type GeneralCommunicationInput interface {
	pulumi.Input

	ToGeneralCommunicationOutput() GeneralCommunicationOutput
	ToGeneralCommunicationOutputWithContext(ctx context.Context) GeneralCommunicationOutput
}

func (*GeneralCommunication) ElementType() reflect.Type {
	return reflect.TypeOf((**GeneralCommunication)(nil)).Elem()
}

func (i *GeneralCommunication) ToGeneralCommunicationOutput() GeneralCommunicationOutput {
	return i.ToGeneralCommunicationOutputWithContext(context.Background())
}

func (i *GeneralCommunication) ToGeneralCommunicationOutputWithContext(ctx context.Context) GeneralCommunicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneralCommunicationOutput)
}

// GeneralCommunicationArrayInput is an input type that accepts GeneralCommunicationArray and GeneralCommunicationArrayOutput values.
// You can construct a concrete instance of `GeneralCommunicationArrayInput` via:
//
//	GeneralCommunicationArray{ GeneralCommunicationArgs{...} }
type GeneralCommunicationArrayInput interface {
	pulumi.Input

	ToGeneralCommunicationArrayOutput() GeneralCommunicationArrayOutput
	ToGeneralCommunicationArrayOutputWithContext(context.Context) GeneralCommunicationArrayOutput
}

type GeneralCommunicationArray []GeneralCommunicationInput

func (GeneralCommunicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GeneralCommunication)(nil)).Elem()
}

func (i GeneralCommunicationArray) ToGeneralCommunicationArrayOutput() GeneralCommunicationArrayOutput {
	return i.ToGeneralCommunicationArrayOutputWithContext(context.Background())
}

func (i GeneralCommunicationArray) ToGeneralCommunicationArrayOutputWithContext(ctx context.Context) GeneralCommunicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneralCommunicationArrayOutput)
}

// GeneralCommunicationMapInput is an input type that accepts GeneralCommunicationMap and GeneralCommunicationMapOutput values.
// You can construct a concrete instance of `GeneralCommunicationMapInput` via:
//
//	GeneralCommunicationMap{ "key": GeneralCommunicationArgs{...} }
type GeneralCommunicationMapInput interface {
	pulumi.Input

	ToGeneralCommunicationMapOutput() GeneralCommunicationMapOutput
	ToGeneralCommunicationMapOutputWithContext(context.Context) GeneralCommunicationMapOutput
}

type GeneralCommunicationMap map[string]GeneralCommunicationInput

func (GeneralCommunicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GeneralCommunication)(nil)).Elem()
}

func (i GeneralCommunicationMap) ToGeneralCommunicationMapOutput() GeneralCommunicationMapOutput {
	return i.ToGeneralCommunicationMapOutputWithContext(context.Background())
}

func (i GeneralCommunicationMap) ToGeneralCommunicationMapOutputWithContext(ctx context.Context) GeneralCommunicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneralCommunicationMapOutput)
}

type GeneralCommunicationOutput struct{ *pulumi.OutputState }

func (GeneralCommunicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GeneralCommunication)(nil)).Elem()
}

func (o GeneralCommunicationOutput) ToGeneralCommunicationOutput() GeneralCommunicationOutput {
	return o
}

func (o GeneralCommunicationOutput) ToGeneralCommunicationOutputWithContext(ctx context.Context) GeneralCommunicationOutput {
	return o
}

// ID of instances.
func (o GeneralCommunicationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *GeneralCommunication) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type GeneralCommunicationArrayOutput struct{ *pulumi.OutputState }

func (GeneralCommunicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GeneralCommunication)(nil)).Elem()
}

func (o GeneralCommunicationArrayOutput) ToGeneralCommunicationArrayOutput() GeneralCommunicationArrayOutput {
	return o
}

func (o GeneralCommunicationArrayOutput) ToGeneralCommunicationArrayOutputWithContext(ctx context.Context) GeneralCommunicationArrayOutput {
	return o
}

func (o GeneralCommunicationArrayOutput) Index(i pulumi.IntInput) GeneralCommunicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GeneralCommunication {
		return vs[0].([]*GeneralCommunication)[vs[1].(int)]
	}).(GeneralCommunicationOutput)
}

type GeneralCommunicationMapOutput struct{ *pulumi.OutputState }

func (GeneralCommunicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GeneralCommunication)(nil)).Elem()
}

func (o GeneralCommunicationMapOutput) ToGeneralCommunicationMapOutput() GeneralCommunicationMapOutput {
	return o
}

func (o GeneralCommunicationMapOutput) ToGeneralCommunicationMapOutputWithContext(ctx context.Context) GeneralCommunicationMapOutput {
	return o
}

func (o GeneralCommunicationMapOutput) MapIndex(k pulumi.StringInput) GeneralCommunicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GeneralCommunication {
		return vs[0].(map[string]*GeneralCommunication)[vs[1].(string)]
	}).(GeneralCommunicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GeneralCommunicationInput)(nil)).Elem(), &GeneralCommunication{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneralCommunicationArrayInput)(nil)).Elem(), GeneralCommunicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneralCommunicationMapInput)(nil)).Elem(), GeneralCommunicationMap{})
	pulumi.RegisterOutputType(GeneralCommunicationOutput{})
	pulumi.RegisterOutputType(GeneralCommunicationArrayOutput{})
	pulumi.RegisterOutputType(GeneralCommunicationMapOutput{})
}
