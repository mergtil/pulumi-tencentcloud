// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sqlserver

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabaseTde struct {
	pulumi.CustomResourceState

	// Database name list.
	DbNames pulumi.StringArrayOutput `pulumi:"dbNames"`
	// `enable` - enable encryption, `disable` - disable encryption.
	Encryption pulumi.StringOutput `pulumi:"encryption"`
	// Instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewDatabaseTde registers a new resource with the given unique name, arguments, and options.
func NewDatabaseTde(ctx *pulumi.Context,
	name string, args *DatabaseTdeArgs, opts ...pulumi.ResourceOption) (*DatabaseTde, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbNames == nil {
		return nil, errors.New("invalid value for required argument 'DbNames'")
	}
	if args.Encryption == nil {
		return nil, errors.New("invalid value for required argument 'Encryption'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseTde
	err := ctx.RegisterResource("tencentcloud:Sqlserver/databaseTde:DatabaseTde", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseTde gets an existing DatabaseTde resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseTde(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseTdeState, opts ...pulumi.ResourceOption) (*DatabaseTde, error) {
	var resource DatabaseTde
	err := ctx.ReadResource("tencentcloud:Sqlserver/databaseTde:DatabaseTde", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseTde resources.
type databaseTdeState struct {
	// Database name list.
	DbNames []string `pulumi:"dbNames"`
	// `enable` - enable encryption, `disable` - disable encryption.
	Encryption *string `pulumi:"encryption"`
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
}

type DatabaseTdeState struct {
	// Database name list.
	DbNames pulumi.StringArrayInput
	// `enable` - enable encryption, `disable` - disable encryption.
	Encryption pulumi.StringPtrInput
	// Instance ID.
	InstanceId pulumi.StringPtrInput
}

func (DatabaseTdeState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseTdeState)(nil)).Elem()
}

type databaseTdeArgs struct {
	// Database name list.
	DbNames []string `pulumi:"dbNames"`
	// `enable` - enable encryption, `disable` - disable encryption.
	Encryption string `pulumi:"encryption"`
	// Instance ID.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a DatabaseTde resource.
type DatabaseTdeArgs struct {
	// Database name list.
	DbNames pulumi.StringArrayInput
	// `enable` - enable encryption, `disable` - disable encryption.
	Encryption pulumi.StringInput
	// Instance ID.
	InstanceId pulumi.StringInput
}

func (DatabaseTdeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseTdeArgs)(nil)).Elem()
}

type DatabaseTdeInput interface {
	pulumi.Input

	ToDatabaseTdeOutput() DatabaseTdeOutput
	ToDatabaseTdeOutputWithContext(ctx context.Context) DatabaseTdeOutput
}

func (*DatabaseTde) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseTde)(nil)).Elem()
}

func (i *DatabaseTde) ToDatabaseTdeOutput() DatabaseTdeOutput {
	return i.ToDatabaseTdeOutputWithContext(context.Background())
}

func (i *DatabaseTde) ToDatabaseTdeOutputWithContext(ctx context.Context) DatabaseTdeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTdeOutput)
}

// DatabaseTdeArrayInput is an input type that accepts DatabaseTdeArray and DatabaseTdeArrayOutput values.
// You can construct a concrete instance of `DatabaseTdeArrayInput` via:
//
//	DatabaseTdeArray{ DatabaseTdeArgs{...} }
type DatabaseTdeArrayInput interface {
	pulumi.Input

	ToDatabaseTdeArrayOutput() DatabaseTdeArrayOutput
	ToDatabaseTdeArrayOutputWithContext(context.Context) DatabaseTdeArrayOutput
}

type DatabaseTdeArray []DatabaseTdeInput

func (DatabaseTdeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseTde)(nil)).Elem()
}

func (i DatabaseTdeArray) ToDatabaseTdeArrayOutput() DatabaseTdeArrayOutput {
	return i.ToDatabaseTdeArrayOutputWithContext(context.Background())
}

func (i DatabaseTdeArray) ToDatabaseTdeArrayOutputWithContext(ctx context.Context) DatabaseTdeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTdeArrayOutput)
}

// DatabaseTdeMapInput is an input type that accepts DatabaseTdeMap and DatabaseTdeMapOutput values.
// You can construct a concrete instance of `DatabaseTdeMapInput` via:
//
//	DatabaseTdeMap{ "key": DatabaseTdeArgs{...} }
type DatabaseTdeMapInput interface {
	pulumi.Input

	ToDatabaseTdeMapOutput() DatabaseTdeMapOutput
	ToDatabaseTdeMapOutputWithContext(context.Context) DatabaseTdeMapOutput
}

type DatabaseTdeMap map[string]DatabaseTdeInput

func (DatabaseTdeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseTde)(nil)).Elem()
}

func (i DatabaseTdeMap) ToDatabaseTdeMapOutput() DatabaseTdeMapOutput {
	return i.ToDatabaseTdeMapOutputWithContext(context.Background())
}

func (i DatabaseTdeMap) ToDatabaseTdeMapOutputWithContext(ctx context.Context) DatabaseTdeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseTdeMapOutput)
}

type DatabaseTdeOutput struct{ *pulumi.OutputState }

func (DatabaseTdeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseTde)(nil)).Elem()
}

func (o DatabaseTdeOutput) ToDatabaseTdeOutput() DatabaseTdeOutput {
	return o
}

func (o DatabaseTdeOutput) ToDatabaseTdeOutputWithContext(ctx context.Context) DatabaseTdeOutput {
	return o
}

// Database name list.
func (o DatabaseTdeOutput) DbNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseTde) pulumi.StringArrayOutput { return v.DbNames }).(pulumi.StringArrayOutput)
}

// `enable` - enable encryption, `disable` - disable encryption.
func (o DatabaseTdeOutput) Encryption() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseTde) pulumi.StringOutput { return v.Encryption }).(pulumi.StringOutput)
}

// Instance ID.
func (o DatabaseTdeOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseTde) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type DatabaseTdeArrayOutput struct{ *pulumi.OutputState }

func (DatabaseTdeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseTde)(nil)).Elem()
}

func (o DatabaseTdeArrayOutput) ToDatabaseTdeArrayOutput() DatabaseTdeArrayOutput {
	return o
}

func (o DatabaseTdeArrayOutput) ToDatabaseTdeArrayOutputWithContext(ctx context.Context) DatabaseTdeArrayOutput {
	return o
}

func (o DatabaseTdeArrayOutput) Index(i pulumi.IntInput) DatabaseTdeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseTde {
		return vs[0].([]*DatabaseTde)[vs[1].(int)]
	}).(DatabaseTdeOutput)
}

type DatabaseTdeMapOutput struct{ *pulumi.OutputState }

func (DatabaseTdeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseTde)(nil)).Elem()
}

func (o DatabaseTdeMapOutput) ToDatabaseTdeMapOutput() DatabaseTdeMapOutput {
	return o
}

func (o DatabaseTdeMapOutput) ToDatabaseTdeMapOutputWithContext(ctx context.Context) DatabaseTdeMapOutput {
	return o
}

func (o DatabaseTdeMapOutput) MapIndex(k pulumi.StringInput) DatabaseTdeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseTde {
		return vs[0].(map[string]*DatabaseTde)[vs[1].(string)]
	}).(DatabaseTdeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTdeInput)(nil)).Elem(), &DatabaseTde{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTdeArrayInput)(nil)).Elem(), DatabaseTdeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseTdeMapInput)(nil)).Elem(), DatabaseTdeMap{})
	pulumi.RegisterOutputType(DatabaseTdeOutput{})
	pulumi.RegisterOutputType(DatabaseTdeArrayOutput{})
	pulumi.RegisterOutputType(DatabaseTdeMapOutput{})
}
