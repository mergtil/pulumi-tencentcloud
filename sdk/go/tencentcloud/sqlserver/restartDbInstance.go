// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sqlserver

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RestartDbInstance struct {
	pulumi.CustomResourceState

	// Instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewRestartDbInstance registers a new resource with the given unique name, arguments, and options.
func NewRestartDbInstance(ctx *pulumi.Context,
	name string, args *RestartDbInstanceArgs, opts ...pulumi.ResourceOption) (*RestartDbInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RestartDbInstance
	err := ctx.RegisterResource("tencentcloud:Sqlserver/restartDbInstance:RestartDbInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRestartDbInstance gets an existing RestartDbInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRestartDbInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RestartDbInstanceState, opts ...pulumi.ResourceOption) (*RestartDbInstance, error) {
	var resource RestartDbInstance
	err := ctx.ReadResource("tencentcloud:Sqlserver/restartDbInstance:RestartDbInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RestartDbInstance resources.
type restartDbInstanceState struct {
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
}

type RestartDbInstanceState struct {
	// Instance ID.
	InstanceId pulumi.StringPtrInput
}

func (RestartDbInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*restartDbInstanceState)(nil)).Elem()
}

type restartDbInstanceArgs struct {
	// Instance ID.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a RestartDbInstance resource.
type RestartDbInstanceArgs struct {
	// Instance ID.
	InstanceId pulumi.StringInput
}

func (RestartDbInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*restartDbInstanceArgs)(nil)).Elem()
}

type RestartDbInstanceInput interface {
	pulumi.Input

	ToRestartDbInstanceOutput() RestartDbInstanceOutput
	ToRestartDbInstanceOutputWithContext(ctx context.Context) RestartDbInstanceOutput
}

func (*RestartDbInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**RestartDbInstance)(nil)).Elem()
}

func (i *RestartDbInstance) ToRestartDbInstanceOutput() RestartDbInstanceOutput {
	return i.ToRestartDbInstanceOutputWithContext(context.Background())
}

func (i *RestartDbInstance) ToRestartDbInstanceOutputWithContext(ctx context.Context) RestartDbInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartDbInstanceOutput)
}

// RestartDbInstanceArrayInput is an input type that accepts RestartDbInstanceArray and RestartDbInstanceArrayOutput values.
// You can construct a concrete instance of `RestartDbInstanceArrayInput` via:
//
//	RestartDbInstanceArray{ RestartDbInstanceArgs{...} }
type RestartDbInstanceArrayInput interface {
	pulumi.Input

	ToRestartDbInstanceArrayOutput() RestartDbInstanceArrayOutput
	ToRestartDbInstanceArrayOutputWithContext(context.Context) RestartDbInstanceArrayOutput
}

type RestartDbInstanceArray []RestartDbInstanceInput

func (RestartDbInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RestartDbInstance)(nil)).Elem()
}

func (i RestartDbInstanceArray) ToRestartDbInstanceArrayOutput() RestartDbInstanceArrayOutput {
	return i.ToRestartDbInstanceArrayOutputWithContext(context.Background())
}

func (i RestartDbInstanceArray) ToRestartDbInstanceArrayOutputWithContext(ctx context.Context) RestartDbInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartDbInstanceArrayOutput)
}

// RestartDbInstanceMapInput is an input type that accepts RestartDbInstanceMap and RestartDbInstanceMapOutput values.
// You can construct a concrete instance of `RestartDbInstanceMapInput` via:
//
//	RestartDbInstanceMap{ "key": RestartDbInstanceArgs{...} }
type RestartDbInstanceMapInput interface {
	pulumi.Input

	ToRestartDbInstanceMapOutput() RestartDbInstanceMapOutput
	ToRestartDbInstanceMapOutputWithContext(context.Context) RestartDbInstanceMapOutput
}

type RestartDbInstanceMap map[string]RestartDbInstanceInput

func (RestartDbInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RestartDbInstance)(nil)).Elem()
}

func (i RestartDbInstanceMap) ToRestartDbInstanceMapOutput() RestartDbInstanceMapOutput {
	return i.ToRestartDbInstanceMapOutputWithContext(context.Background())
}

func (i RestartDbInstanceMap) ToRestartDbInstanceMapOutputWithContext(ctx context.Context) RestartDbInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartDbInstanceMapOutput)
}

type RestartDbInstanceOutput struct{ *pulumi.OutputState }

func (RestartDbInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestartDbInstance)(nil)).Elem()
}

func (o RestartDbInstanceOutput) ToRestartDbInstanceOutput() RestartDbInstanceOutput {
	return o
}

func (o RestartDbInstanceOutput) ToRestartDbInstanceOutputWithContext(ctx context.Context) RestartDbInstanceOutput {
	return o
}

// Instance ID.
func (o RestartDbInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RestartDbInstance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type RestartDbInstanceArrayOutput struct{ *pulumi.OutputState }

func (RestartDbInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RestartDbInstance)(nil)).Elem()
}

func (o RestartDbInstanceArrayOutput) ToRestartDbInstanceArrayOutput() RestartDbInstanceArrayOutput {
	return o
}

func (o RestartDbInstanceArrayOutput) ToRestartDbInstanceArrayOutputWithContext(ctx context.Context) RestartDbInstanceArrayOutput {
	return o
}

func (o RestartDbInstanceArrayOutput) Index(i pulumi.IntInput) RestartDbInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RestartDbInstance {
		return vs[0].([]*RestartDbInstance)[vs[1].(int)]
	}).(RestartDbInstanceOutput)
}

type RestartDbInstanceMapOutput struct{ *pulumi.OutputState }

func (RestartDbInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RestartDbInstance)(nil)).Elem()
}

func (o RestartDbInstanceMapOutput) ToRestartDbInstanceMapOutput() RestartDbInstanceMapOutput {
	return o
}

func (o RestartDbInstanceMapOutput) ToRestartDbInstanceMapOutputWithContext(ctx context.Context) RestartDbInstanceMapOutput {
	return o
}

func (o RestartDbInstanceMapOutput) MapIndex(k pulumi.StringInput) RestartDbInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RestartDbInstance {
		return vs[0].(map[string]*RestartDbInstance)[vs[1].(string)]
	}).(RestartDbInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RestartDbInstanceInput)(nil)).Elem(), &RestartDbInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestartDbInstanceArrayInput)(nil)).Elem(), RestartDbInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestartDbInstanceMapInput)(nil)).Elem(), RestartDbInstanceMap{})
	pulumi.RegisterOutputType(RestartDbInstanceOutput{})
	pulumi.RegisterOutputType(RestartDbInstanceArrayOutput{})
	pulumi.RegisterOutputType(RestartDbInstanceMapOutput{})
}
