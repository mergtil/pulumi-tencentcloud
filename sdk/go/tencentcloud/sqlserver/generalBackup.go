// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sqlserver

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GeneralBackup struct {
	pulumi.CustomResourceState

	// Backup name. If this parameter is left empty, a backup name in the format of [Instance ID]_[Backup start timestamp] will
	// be automatically generated.
	BackupName pulumi.StringOutput `pulumi:"backupName"`
	// List of names of databases to be backed up (required only for multi-database backup).
	DbNames pulumi.StringArrayOutput `pulumi:"dbNames"`
	// flow id.
	FlowId pulumi.StringOutput `pulumi:"flowId"`
	// Instance ID in the format of mssql-i1z41iwd.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Backup policy (0: instance backup, 1: multi-database backup).
	Strategy pulumi.IntOutput `pulumi:"strategy"`
}

// NewGeneralBackup registers a new resource with the given unique name, arguments, and options.
func NewGeneralBackup(ctx *pulumi.Context,
	name string, args *GeneralBackupArgs, opts ...pulumi.ResourceOption) (*GeneralBackup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GeneralBackup
	err := ctx.RegisterResource("tencentcloud:Sqlserver/generalBackup:GeneralBackup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGeneralBackup gets an existing GeneralBackup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGeneralBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GeneralBackupState, opts ...pulumi.ResourceOption) (*GeneralBackup, error) {
	var resource GeneralBackup
	err := ctx.ReadResource("tencentcloud:Sqlserver/generalBackup:GeneralBackup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GeneralBackup resources.
type generalBackupState struct {
	// Backup name. If this parameter is left empty, a backup name in the format of [Instance ID]_[Backup start timestamp] will
	// be automatically generated.
	BackupName *string `pulumi:"backupName"`
	// List of names of databases to be backed up (required only for multi-database backup).
	DbNames []string `pulumi:"dbNames"`
	// flow id.
	FlowId *string `pulumi:"flowId"`
	// Instance ID in the format of mssql-i1z41iwd.
	InstanceId *string `pulumi:"instanceId"`
	// Backup policy (0: instance backup, 1: multi-database backup).
	Strategy *int `pulumi:"strategy"`
}

type GeneralBackupState struct {
	// Backup name. If this parameter is left empty, a backup name in the format of [Instance ID]_[Backup start timestamp] will
	// be automatically generated.
	BackupName pulumi.StringPtrInput
	// List of names of databases to be backed up (required only for multi-database backup).
	DbNames pulumi.StringArrayInput
	// flow id.
	FlowId pulumi.StringPtrInput
	// Instance ID in the format of mssql-i1z41iwd.
	InstanceId pulumi.StringPtrInput
	// Backup policy (0: instance backup, 1: multi-database backup).
	Strategy pulumi.IntPtrInput
}

func (GeneralBackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*generalBackupState)(nil)).Elem()
}

type generalBackupArgs struct {
	// Backup name. If this parameter is left empty, a backup name in the format of [Instance ID]_[Backup start timestamp] will
	// be automatically generated.
	BackupName *string `pulumi:"backupName"`
	// List of names of databases to be backed up (required only for multi-database backup).
	DbNames []string `pulumi:"dbNames"`
	// Instance ID in the format of mssql-i1z41iwd.
	InstanceId string `pulumi:"instanceId"`
	// Backup policy (0: instance backup, 1: multi-database backup).
	Strategy *int `pulumi:"strategy"`
}

// The set of arguments for constructing a GeneralBackup resource.
type GeneralBackupArgs struct {
	// Backup name. If this parameter is left empty, a backup name in the format of [Instance ID]_[Backup start timestamp] will
	// be automatically generated.
	BackupName pulumi.StringPtrInput
	// List of names of databases to be backed up (required only for multi-database backup).
	DbNames pulumi.StringArrayInput
	// Instance ID in the format of mssql-i1z41iwd.
	InstanceId pulumi.StringInput
	// Backup policy (0: instance backup, 1: multi-database backup).
	Strategy pulumi.IntPtrInput
}

func (GeneralBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*generalBackupArgs)(nil)).Elem()
}

type GeneralBackupInput interface {
	pulumi.Input

	ToGeneralBackupOutput() GeneralBackupOutput
	ToGeneralBackupOutputWithContext(ctx context.Context) GeneralBackupOutput
}

func (*GeneralBackup) ElementType() reflect.Type {
	return reflect.TypeOf((**GeneralBackup)(nil)).Elem()
}

func (i *GeneralBackup) ToGeneralBackupOutput() GeneralBackupOutput {
	return i.ToGeneralBackupOutputWithContext(context.Background())
}

func (i *GeneralBackup) ToGeneralBackupOutputWithContext(ctx context.Context) GeneralBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneralBackupOutput)
}

// GeneralBackupArrayInput is an input type that accepts GeneralBackupArray and GeneralBackupArrayOutput values.
// You can construct a concrete instance of `GeneralBackupArrayInput` via:
//
//	GeneralBackupArray{ GeneralBackupArgs{...} }
type GeneralBackupArrayInput interface {
	pulumi.Input

	ToGeneralBackupArrayOutput() GeneralBackupArrayOutput
	ToGeneralBackupArrayOutputWithContext(context.Context) GeneralBackupArrayOutput
}

type GeneralBackupArray []GeneralBackupInput

func (GeneralBackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GeneralBackup)(nil)).Elem()
}

func (i GeneralBackupArray) ToGeneralBackupArrayOutput() GeneralBackupArrayOutput {
	return i.ToGeneralBackupArrayOutputWithContext(context.Background())
}

func (i GeneralBackupArray) ToGeneralBackupArrayOutputWithContext(ctx context.Context) GeneralBackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneralBackupArrayOutput)
}

// GeneralBackupMapInput is an input type that accepts GeneralBackupMap and GeneralBackupMapOutput values.
// You can construct a concrete instance of `GeneralBackupMapInput` via:
//
//	GeneralBackupMap{ "key": GeneralBackupArgs{...} }
type GeneralBackupMapInput interface {
	pulumi.Input

	ToGeneralBackupMapOutput() GeneralBackupMapOutput
	ToGeneralBackupMapOutputWithContext(context.Context) GeneralBackupMapOutput
}

type GeneralBackupMap map[string]GeneralBackupInput

func (GeneralBackupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GeneralBackup)(nil)).Elem()
}

func (i GeneralBackupMap) ToGeneralBackupMapOutput() GeneralBackupMapOutput {
	return i.ToGeneralBackupMapOutputWithContext(context.Background())
}

func (i GeneralBackupMap) ToGeneralBackupMapOutputWithContext(ctx context.Context) GeneralBackupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GeneralBackupMapOutput)
}

type GeneralBackupOutput struct{ *pulumi.OutputState }

func (GeneralBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GeneralBackup)(nil)).Elem()
}

func (o GeneralBackupOutput) ToGeneralBackupOutput() GeneralBackupOutput {
	return o
}

func (o GeneralBackupOutput) ToGeneralBackupOutputWithContext(ctx context.Context) GeneralBackupOutput {
	return o
}

// Backup name. If this parameter is left empty, a backup name in the format of [Instance ID]_[Backup start timestamp] will
// be automatically generated.
func (o GeneralBackupOutput) BackupName() pulumi.StringOutput {
	return o.ApplyT(func(v *GeneralBackup) pulumi.StringOutput { return v.BackupName }).(pulumi.StringOutput)
}

// List of names of databases to be backed up (required only for multi-database backup).
func (o GeneralBackupOutput) DbNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GeneralBackup) pulumi.StringArrayOutput { return v.DbNames }).(pulumi.StringArrayOutput)
}

// flow id.
func (o GeneralBackupOutput) FlowId() pulumi.StringOutput {
	return o.ApplyT(func(v *GeneralBackup) pulumi.StringOutput { return v.FlowId }).(pulumi.StringOutput)
}

// Instance ID in the format of mssql-i1z41iwd.
func (o GeneralBackupOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *GeneralBackup) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Backup policy (0: instance backup, 1: multi-database backup).
func (o GeneralBackupOutput) Strategy() pulumi.IntOutput {
	return o.ApplyT(func(v *GeneralBackup) pulumi.IntOutput { return v.Strategy }).(pulumi.IntOutput)
}

type GeneralBackupArrayOutput struct{ *pulumi.OutputState }

func (GeneralBackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GeneralBackup)(nil)).Elem()
}

func (o GeneralBackupArrayOutput) ToGeneralBackupArrayOutput() GeneralBackupArrayOutput {
	return o
}

func (o GeneralBackupArrayOutput) ToGeneralBackupArrayOutputWithContext(ctx context.Context) GeneralBackupArrayOutput {
	return o
}

func (o GeneralBackupArrayOutput) Index(i pulumi.IntInput) GeneralBackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GeneralBackup {
		return vs[0].([]*GeneralBackup)[vs[1].(int)]
	}).(GeneralBackupOutput)
}

type GeneralBackupMapOutput struct{ *pulumi.OutputState }

func (GeneralBackupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GeneralBackup)(nil)).Elem()
}

func (o GeneralBackupMapOutput) ToGeneralBackupMapOutput() GeneralBackupMapOutput {
	return o
}

func (o GeneralBackupMapOutput) ToGeneralBackupMapOutputWithContext(ctx context.Context) GeneralBackupMapOutput {
	return o
}

func (o GeneralBackupMapOutput) MapIndex(k pulumi.StringInput) GeneralBackupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GeneralBackup {
		return vs[0].(map[string]*GeneralBackup)[vs[1].(string)]
	}).(GeneralBackupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GeneralBackupInput)(nil)).Elem(), &GeneralBackup{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneralBackupArrayInput)(nil)).Elem(), GeneralBackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GeneralBackupMapInput)(nil)).Elem(), GeneralBackupMap{})
	pulumi.RegisterOutputType(GeneralBackupOutput{})
	pulumi.RegisterOutputType(GeneralBackupArrayOutput{})
	pulumi.RegisterOutputType(GeneralBackupMapOutput{})
}
