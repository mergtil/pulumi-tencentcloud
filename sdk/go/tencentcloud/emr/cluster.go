// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emr

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Cluster struct {
	pulumi.CustomResourceState

	// Display strategy of EMR instance.
	DisplayStrategy pulumi.StringOutput `pulumi:"displayStrategy"`
	// Access the external file system.
	ExtendFsField pulumi.StringPtrOutput `pulumi:"extendFsField"`
	// Created EMR instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Name of the instance, which can contain 6 to 36 English letters, Chinese characters, digits, dashes(-), or
	// underscores(_).
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// Instance login settings.
	LoginSettings pulumi.MapOutput `pulumi:"loginSettings"`
	// Whether to enable the cluster Master node public network. Value range: - NEED_MASTER_WAN: Indicates that the cluster
	// Master node public network is enabled. - NOT_NEED_MASTER_WAN: Indicates that it is not turned on. By default, the
	// cluster Master node internet is enabled.
	NeedMasterWan pulumi.StringPtrOutput `pulumi:"needMasterWan"`
	// The pay mode of instance. 0 represent POSTPAID_BY_HOUR, 1 represent PREPAID.
	PayMode pulumi.IntOutput `pulumi:"payMode"`
	// The location of the instance.
	Placement pulumi.MapOutput `pulumi:"placement"`
	// Product ID. Different products ID represents different EMR product versions. Value range: - 16: represents EMR-V2.3.0 -
	// 20: indicates EMR-V2.5.0 - 25: represents EMR-V3.1.0 - 27: represents KAFKA-V1.0.0 - 30: indicates EMR-V2.6.0 - 33:
	// represents EMR-V3.2.1 - 34: stands for EMR-V3.3.0 - 36: represents STARROCKS-V1.0.0 - 37: indicates EMR-V3.4.0 - 38:
	// represents EMR-V2.7.0 - 39: stands for STARROCKS-V1.1.0 - 41: represents DRUID-V1.1.0.
	ProductId pulumi.IntOutput `pulumi:"productId"`
	// Resource specification of EMR instance.
	ResourceSpec ClusterResourceSpecPtrOutput `pulumi:"resourceSpec"`
	// The ID of the security group to which the instance belongs, in the form of sg-xxxxxxxx.
	SgId pulumi.StringPtrOutput `pulumi:"sgId"`
	// The softwares of a EMR instance.
	Softwares pulumi.StringArrayOutput `pulumi:"softwares"`
	// The flag whether the instance support high availability.(0=>not support, 1=>support).
	SupportHa pulumi.IntOutput `pulumi:"supportHa"`
	// Tag description list.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// The length of time the instance was purchased. Use with TimeUnit.When TimeUnit is s, the parameter can only be filled in
	// at 3600, representing a metered instance. When TimeUnit is m, the number filled in by this parameter indicates the
	// length of purchase of the monthly instance of the package year, such as 1 for one month of purchase.
	TimeSpan pulumi.IntOutput `pulumi:"timeSpan"`
	// The unit of time in which the instance was purchased. When PayMode is 0, TimeUnit can only take values of s(second).
	// When PayMode is 1, TimeUnit can only take the value m(month).
	TimeUnit pulumi.StringOutput `pulumi:"timeUnit"`
	// The private net config of EMR instance.
	VpcSettings pulumi.MapOutput `pulumi:"vpcSettings"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayStrategy == nil {
		return nil, errors.New("invalid value for required argument 'DisplayStrategy'")
	}
	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	if args.LoginSettings == nil {
		return nil, errors.New("invalid value for required argument 'LoginSettings'")
	}
	if args.PayMode == nil {
		return nil, errors.New("invalid value for required argument 'PayMode'")
	}
	if args.Placement == nil {
		return nil, errors.New("invalid value for required argument 'Placement'")
	}
	if args.ProductId == nil {
		return nil, errors.New("invalid value for required argument 'ProductId'")
	}
	if args.Softwares == nil {
		return nil, errors.New("invalid value for required argument 'Softwares'")
	}
	if args.SupportHa == nil {
		return nil, errors.New("invalid value for required argument 'SupportHa'")
	}
	if args.TimeSpan == nil {
		return nil, errors.New("invalid value for required argument 'TimeSpan'")
	}
	if args.TimeUnit == nil {
		return nil, errors.New("invalid value for required argument 'TimeUnit'")
	}
	if args.VpcSettings == nil {
		return nil, errors.New("invalid value for required argument 'VpcSettings'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("tencentcloud:Emr/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("tencentcloud:Emr/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// Display strategy of EMR instance.
	DisplayStrategy *string `pulumi:"displayStrategy"`
	// Access the external file system.
	ExtendFsField *string `pulumi:"extendFsField"`
	// Created EMR instance id.
	InstanceId *string `pulumi:"instanceId"`
	// Name of the instance, which can contain 6 to 36 English letters, Chinese characters, digits, dashes(-), or
	// underscores(_).
	InstanceName *string `pulumi:"instanceName"`
	// Instance login settings.
	LoginSettings map[string]interface{} `pulumi:"loginSettings"`
	// Whether to enable the cluster Master node public network. Value range: - NEED_MASTER_WAN: Indicates that the cluster
	// Master node public network is enabled. - NOT_NEED_MASTER_WAN: Indicates that it is not turned on. By default, the
	// cluster Master node internet is enabled.
	NeedMasterWan *string `pulumi:"needMasterWan"`
	// The pay mode of instance. 0 represent POSTPAID_BY_HOUR, 1 represent PREPAID.
	PayMode *int `pulumi:"payMode"`
	// The location of the instance.
	Placement map[string]interface{} `pulumi:"placement"`
	// Product ID. Different products ID represents different EMR product versions. Value range: - 16: represents EMR-V2.3.0 -
	// 20: indicates EMR-V2.5.0 - 25: represents EMR-V3.1.0 - 27: represents KAFKA-V1.0.0 - 30: indicates EMR-V2.6.0 - 33:
	// represents EMR-V3.2.1 - 34: stands for EMR-V3.3.0 - 36: represents STARROCKS-V1.0.0 - 37: indicates EMR-V3.4.0 - 38:
	// represents EMR-V2.7.0 - 39: stands for STARROCKS-V1.1.0 - 41: represents DRUID-V1.1.0.
	ProductId *int `pulumi:"productId"`
	// Resource specification of EMR instance.
	ResourceSpec *ClusterResourceSpec `pulumi:"resourceSpec"`
	// The ID of the security group to which the instance belongs, in the form of sg-xxxxxxxx.
	SgId *string `pulumi:"sgId"`
	// The softwares of a EMR instance.
	Softwares []string `pulumi:"softwares"`
	// The flag whether the instance support high availability.(0=>not support, 1=>support).
	SupportHa *int `pulumi:"supportHa"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
	// The length of time the instance was purchased. Use with TimeUnit.When TimeUnit is s, the parameter can only be filled in
	// at 3600, representing a metered instance. When TimeUnit is m, the number filled in by this parameter indicates the
	// length of purchase of the monthly instance of the package year, such as 1 for one month of purchase.
	TimeSpan *int `pulumi:"timeSpan"`
	// The unit of time in which the instance was purchased. When PayMode is 0, TimeUnit can only take values of s(second).
	// When PayMode is 1, TimeUnit can only take the value m(month).
	TimeUnit *string `pulumi:"timeUnit"`
	// The private net config of EMR instance.
	VpcSettings map[string]interface{} `pulumi:"vpcSettings"`
}

type ClusterState struct {
	// Display strategy of EMR instance.
	DisplayStrategy pulumi.StringPtrInput
	// Access the external file system.
	ExtendFsField pulumi.StringPtrInput
	// Created EMR instance id.
	InstanceId pulumi.StringPtrInput
	// Name of the instance, which can contain 6 to 36 English letters, Chinese characters, digits, dashes(-), or
	// underscores(_).
	InstanceName pulumi.StringPtrInput
	// Instance login settings.
	LoginSettings pulumi.MapInput
	// Whether to enable the cluster Master node public network. Value range: - NEED_MASTER_WAN: Indicates that the cluster
	// Master node public network is enabled. - NOT_NEED_MASTER_WAN: Indicates that it is not turned on. By default, the
	// cluster Master node internet is enabled.
	NeedMasterWan pulumi.StringPtrInput
	// The pay mode of instance. 0 represent POSTPAID_BY_HOUR, 1 represent PREPAID.
	PayMode pulumi.IntPtrInput
	// The location of the instance.
	Placement pulumi.MapInput
	// Product ID. Different products ID represents different EMR product versions. Value range: - 16: represents EMR-V2.3.0 -
	// 20: indicates EMR-V2.5.0 - 25: represents EMR-V3.1.0 - 27: represents KAFKA-V1.0.0 - 30: indicates EMR-V2.6.0 - 33:
	// represents EMR-V3.2.1 - 34: stands for EMR-V3.3.0 - 36: represents STARROCKS-V1.0.0 - 37: indicates EMR-V3.4.0 - 38:
	// represents EMR-V2.7.0 - 39: stands for STARROCKS-V1.1.0 - 41: represents DRUID-V1.1.0.
	ProductId pulumi.IntPtrInput
	// Resource specification of EMR instance.
	ResourceSpec ClusterResourceSpecPtrInput
	// The ID of the security group to which the instance belongs, in the form of sg-xxxxxxxx.
	SgId pulumi.StringPtrInput
	// The softwares of a EMR instance.
	Softwares pulumi.StringArrayInput
	// The flag whether the instance support high availability.(0=>not support, 1=>support).
	SupportHa pulumi.IntPtrInput
	// Tag description list.
	Tags pulumi.MapInput
	// The length of time the instance was purchased. Use with TimeUnit.When TimeUnit is s, the parameter can only be filled in
	// at 3600, representing a metered instance. When TimeUnit is m, the number filled in by this parameter indicates the
	// length of purchase of the monthly instance of the package year, such as 1 for one month of purchase.
	TimeSpan pulumi.IntPtrInput
	// The unit of time in which the instance was purchased. When PayMode is 0, TimeUnit can only take values of s(second).
	// When PayMode is 1, TimeUnit can only take the value m(month).
	TimeUnit pulumi.StringPtrInput
	// The private net config of EMR instance.
	VpcSettings pulumi.MapInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// Display strategy of EMR instance.
	DisplayStrategy string `pulumi:"displayStrategy"`
	// Access the external file system.
	ExtendFsField *string `pulumi:"extendFsField"`
	// Name of the instance, which can contain 6 to 36 English letters, Chinese characters, digits, dashes(-), or
	// underscores(_).
	InstanceName string `pulumi:"instanceName"`
	// Instance login settings.
	LoginSettings map[string]interface{} `pulumi:"loginSettings"`
	// Whether to enable the cluster Master node public network. Value range: - NEED_MASTER_WAN: Indicates that the cluster
	// Master node public network is enabled. - NOT_NEED_MASTER_WAN: Indicates that it is not turned on. By default, the
	// cluster Master node internet is enabled.
	NeedMasterWan *string `pulumi:"needMasterWan"`
	// The pay mode of instance. 0 represent POSTPAID_BY_HOUR, 1 represent PREPAID.
	PayMode int `pulumi:"payMode"`
	// The location of the instance.
	Placement map[string]interface{} `pulumi:"placement"`
	// Product ID. Different products ID represents different EMR product versions. Value range: - 16: represents EMR-V2.3.0 -
	// 20: indicates EMR-V2.5.0 - 25: represents EMR-V3.1.0 - 27: represents KAFKA-V1.0.0 - 30: indicates EMR-V2.6.0 - 33:
	// represents EMR-V3.2.1 - 34: stands for EMR-V3.3.0 - 36: represents STARROCKS-V1.0.0 - 37: indicates EMR-V3.4.0 - 38:
	// represents EMR-V2.7.0 - 39: stands for STARROCKS-V1.1.0 - 41: represents DRUID-V1.1.0.
	ProductId int `pulumi:"productId"`
	// Resource specification of EMR instance.
	ResourceSpec *ClusterResourceSpec `pulumi:"resourceSpec"`
	// The ID of the security group to which the instance belongs, in the form of sg-xxxxxxxx.
	SgId *string `pulumi:"sgId"`
	// The softwares of a EMR instance.
	Softwares []string `pulumi:"softwares"`
	// The flag whether the instance support high availability.(0=>not support, 1=>support).
	SupportHa int `pulumi:"supportHa"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
	// The length of time the instance was purchased. Use with TimeUnit.When TimeUnit is s, the parameter can only be filled in
	// at 3600, representing a metered instance. When TimeUnit is m, the number filled in by this parameter indicates the
	// length of purchase of the monthly instance of the package year, such as 1 for one month of purchase.
	TimeSpan int `pulumi:"timeSpan"`
	// The unit of time in which the instance was purchased. When PayMode is 0, TimeUnit can only take values of s(second).
	// When PayMode is 1, TimeUnit can only take the value m(month).
	TimeUnit string `pulumi:"timeUnit"`
	// The private net config of EMR instance.
	VpcSettings map[string]interface{} `pulumi:"vpcSettings"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Display strategy of EMR instance.
	DisplayStrategy pulumi.StringInput
	// Access the external file system.
	ExtendFsField pulumi.StringPtrInput
	// Name of the instance, which can contain 6 to 36 English letters, Chinese characters, digits, dashes(-), or
	// underscores(_).
	InstanceName pulumi.StringInput
	// Instance login settings.
	LoginSettings pulumi.MapInput
	// Whether to enable the cluster Master node public network. Value range: - NEED_MASTER_WAN: Indicates that the cluster
	// Master node public network is enabled. - NOT_NEED_MASTER_WAN: Indicates that it is not turned on. By default, the
	// cluster Master node internet is enabled.
	NeedMasterWan pulumi.StringPtrInput
	// The pay mode of instance. 0 represent POSTPAID_BY_HOUR, 1 represent PREPAID.
	PayMode pulumi.IntInput
	// The location of the instance.
	Placement pulumi.MapInput
	// Product ID. Different products ID represents different EMR product versions. Value range: - 16: represents EMR-V2.3.0 -
	// 20: indicates EMR-V2.5.0 - 25: represents EMR-V3.1.0 - 27: represents KAFKA-V1.0.0 - 30: indicates EMR-V2.6.0 - 33:
	// represents EMR-V3.2.1 - 34: stands for EMR-V3.3.0 - 36: represents STARROCKS-V1.0.0 - 37: indicates EMR-V3.4.0 - 38:
	// represents EMR-V2.7.0 - 39: stands for STARROCKS-V1.1.0 - 41: represents DRUID-V1.1.0.
	ProductId pulumi.IntInput
	// Resource specification of EMR instance.
	ResourceSpec ClusterResourceSpecPtrInput
	// The ID of the security group to which the instance belongs, in the form of sg-xxxxxxxx.
	SgId pulumi.StringPtrInput
	// The softwares of a EMR instance.
	Softwares pulumi.StringArrayInput
	// The flag whether the instance support high availability.(0=>not support, 1=>support).
	SupportHa pulumi.IntInput
	// Tag description list.
	Tags pulumi.MapInput
	// The length of time the instance was purchased. Use with TimeUnit.When TimeUnit is s, the parameter can only be filled in
	// at 3600, representing a metered instance. When TimeUnit is m, the number filled in by this parameter indicates the
	// length of purchase of the monthly instance of the package year, such as 1 for one month of purchase.
	TimeSpan pulumi.IntInput
	// The unit of time in which the instance was purchased. When PayMode is 0, TimeUnit can only take values of s(second).
	// When PayMode is 1, TimeUnit can only take the value m(month).
	TimeUnit pulumi.StringInput
	// The private net config of EMR instance.
	VpcSettings pulumi.MapInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// Display strategy of EMR instance.
func (o ClusterOutput) DisplayStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.DisplayStrategy }).(pulumi.StringOutput)
}

// Access the external file system.
func (o ClusterOutput) ExtendFsField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ExtendFsField }).(pulumi.StringPtrOutput)
}

// Created EMR instance id.
func (o ClusterOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Name of the instance, which can contain 6 to 36 English letters, Chinese characters, digits, dashes(-), or
// underscores(_).
func (o ClusterOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// Instance login settings.
func (o ClusterOutput) LoginSettings() pulumi.MapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.MapOutput { return v.LoginSettings }).(pulumi.MapOutput)
}

// Whether to enable the cluster Master node public network. Value range: - NEED_MASTER_WAN: Indicates that the cluster
// Master node public network is enabled. - NOT_NEED_MASTER_WAN: Indicates that it is not turned on. By default, the
// cluster Master node internet is enabled.
func (o ClusterOutput) NeedMasterWan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.NeedMasterWan }).(pulumi.StringPtrOutput)
}

// The pay mode of instance. 0 represent POSTPAID_BY_HOUR, 1 represent PREPAID.
func (o ClusterOutput) PayMode() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.PayMode }).(pulumi.IntOutput)
}

// The location of the instance.
func (o ClusterOutput) Placement() pulumi.MapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.MapOutput { return v.Placement }).(pulumi.MapOutput)
}

// Product ID. Different products ID represents different EMR product versions. Value range: - 16: represents EMR-V2.3.0 -
// 20: indicates EMR-V2.5.0 - 25: represents EMR-V3.1.0 - 27: represents KAFKA-V1.0.0 - 30: indicates EMR-V2.6.0 - 33:
// represents EMR-V3.2.1 - 34: stands for EMR-V3.3.0 - 36: represents STARROCKS-V1.0.0 - 37: indicates EMR-V3.4.0 - 38:
// represents EMR-V2.7.0 - 39: stands for STARROCKS-V1.1.0 - 41: represents DRUID-V1.1.0.
func (o ClusterOutput) ProductId() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.ProductId }).(pulumi.IntOutput)
}

// Resource specification of EMR instance.
func (o ClusterOutput) ResourceSpec() ClusterResourceSpecPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterResourceSpecPtrOutput { return v.ResourceSpec }).(ClusterResourceSpecPtrOutput)
}

// The ID of the security group to which the instance belongs, in the form of sg-xxxxxxxx.
func (o ClusterOutput) SgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.SgId }).(pulumi.StringPtrOutput)
}

// The softwares of a EMR instance.
func (o ClusterOutput) Softwares() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.Softwares }).(pulumi.StringArrayOutput)
}

// The flag whether the instance support high availability.(0=>not support, 1=>support).
func (o ClusterOutput) SupportHa() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.SupportHa }).(pulumi.IntOutput)
}

// Tag description list.
func (o ClusterOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// The length of time the instance was purchased. Use with TimeUnit.When TimeUnit is s, the parameter can only be filled in
// at 3600, representing a metered instance. When TimeUnit is m, the number filled in by this parameter indicates the
// length of purchase of the monthly instance of the package year, such as 1 for one month of purchase.
func (o ClusterOutput) TimeSpan() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.TimeSpan }).(pulumi.IntOutput)
}

// The unit of time in which the instance was purchased. When PayMode is 0, TimeUnit can only take values of s(second).
// When PayMode is 1, TimeUnit can only take the value m(month).
func (o ClusterOutput) TimeUnit() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.TimeUnit }).(pulumi.StringOutput)
}

// The private net config of EMR instance.
func (o ClusterOutput) VpcSettings() pulumi.MapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.MapOutput { return v.VpcSettings }).(pulumi.MapOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
