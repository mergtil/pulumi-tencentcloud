// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ccn

import (
	"context"
	"reflect"

	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Ccn struct {
	pulumi.CustomResourceState

	// The speed limit type. Valid values: `INTER_REGION_LIMIT`, `OUTER_REGION_LIMIT`. `OUTER_REGION_LIMIT` represents the
	// regional export speed limit, `INTER_REGION_LIMIT` is the inter-regional speed limit. The default is
	// `OUTER_REGION_LIMIT`.
	BandwidthLimitType pulumi.StringPtrOutput `pulumi:"bandwidthLimitType"`
	// Billing mode. Valid values: `PREPAID`, `POSTPAID`. `PREPAID` means prepaid, which means annual and monthly subscription,
	// `POSTPAID` means post-payment, which means billing by volume. The default is `POSTPAID`. The prepaid model only supports
	// inter-regional speed limit, and the post-paid model supports inter-regional speed limit and regional export speed limit.
	ChargeType pulumi.StringPtrOutput `pulumi:"chargeType"`
	// Creation time of resource.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of CCN, and maximum length does not exceed 100 bytes.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Number of attached instances.
	InstanceCount pulumi.IntOutput `pulumi:"instanceCount"`
	// Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
	Name pulumi.StringOutput `pulumi:"name"`
	// Service quality of CCN. Valid values: `PT`, `AU`, `AG`. The default is `AU`.
	Qos pulumi.StringPtrOutput `pulumi:"qos"`
	// States of instance. Valid values: `ISOLATED`(arrears) and `AVAILABLE`.
	State pulumi.StringOutput `pulumi:"state"`
	// Instance tag.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewCcn registers a new resource with the given unique name, arguments, and options.
func NewCcn(ctx *pulumi.Context,
	name string, args *CcnArgs, opts ...pulumi.ResourceOption) (*Ccn, error) {
	if args == nil {
		args = &CcnArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ccn
	err := ctx.RegisterResource("tencentcloud:Ccn/ccn:Ccn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCcn gets an existing Ccn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCcn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CcnState, opts ...pulumi.ResourceOption) (*Ccn, error) {
	var resource Ccn
	err := ctx.ReadResource("tencentcloud:Ccn/ccn:Ccn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ccn resources.
type ccnState struct {
	// The speed limit type. Valid values: `INTER_REGION_LIMIT`, `OUTER_REGION_LIMIT`. `OUTER_REGION_LIMIT` represents the
	// regional export speed limit, `INTER_REGION_LIMIT` is the inter-regional speed limit. The default is
	// `OUTER_REGION_LIMIT`.
	BandwidthLimitType *string `pulumi:"bandwidthLimitType"`
	// Billing mode. Valid values: `PREPAID`, `POSTPAID`. `PREPAID` means prepaid, which means annual and monthly subscription,
	// `POSTPAID` means post-payment, which means billing by volume. The default is `POSTPAID`. The prepaid model only supports
	// inter-regional speed limit, and the post-paid model supports inter-regional speed limit and regional export speed limit.
	ChargeType *string `pulumi:"chargeType"`
	// Creation time of resource.
	CreateTime *string `pulumi:"createTime"`
	// Description of CCN, and maximum length does not exceed 100 bytes.
	Description *string `pulumi:"description"`
	// Number of attached instances.
	InstanceCount *int `pulumi:"instanceCount"`
	// Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
	Name *string `pulumi:"name"`
	// Service quality of CCN. Valid values: `PT`, `AU`, `AG`. The default is `AU`.
	Qos *string `pulumi:"qos"`
	// States of instance. Valid values: `ISOLATED`(arrears) and `AVAILABLE`.
	State *string `pulumi:"state"`
	// Instance tag.
	Tags map[string]interface{} `pulumi:"tags"`
}

type CcnState struct {
	// The speed limit type. Valid values: `INTER_REGION_LIMIT`, `OUTER_REGION_LIMIT`. `OUTER_REGION_LIMIT` represents the
	// regional export speed limit, `INTER_REGION_LIMIT` is the inter-regional speed limit. The default is
	// `OUTER_REGION_LIMIT`.
	BandwidthLimitType pulumi.StringPtrInput
	// Billing mode. Valid values: `PREPAID`, `POSTPAID`. `PREPAID` means prepaid, which means annual and monthly subscription,
	// `POSTPAID` means post-payment, which means billing by volume. The default is `POSTPAID`. The prepaid model only supports
	// inter-regional speed limit, and the post-paid model supports inter-regional speed limit and regional export speed limit.
	ChargeType pulumi.StringPtrInput
	// Creation time of resource.
	CreateTime pulumi.StringPtrInput
	// Description of CCN, and maximum length does not exceed 100 bytes.
	Description pulumi.StringPtrInput
	// Number of attached instances.
	InstanceCount pulumi.IntPtrInput
	// Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
	Name pulumi.StringPtrInput
	// Service quality of CCN. Valid values: `PT`, `AU`, `AG`. The default is `AU`.
	Qos pulumi.StringPtrInput
	// States of instance. Valid values: `ISOLATED`(arrears) and `AVAILABLE`.
	State pulumi.StringPtrInput
	// Instance tag.
	Tags pulumi.MapInput
}

func (CcnState) ElementType() reflect.Type {
	return reflect.TypeOf((*ccnState)(nil)).Elem()
}

type ccnArgs struct {
	// The speed limit type. Valid values: `INTER_REGION_LIMIT`, `OUTER_REGION_LIMIT`. `OUTER_REGION_LIMIT` represents the
	// regional export speed limit, `INTER_REGION_LIMIT` is the inter-regional speed limit. The default is
	// `OUTER_REGION_LIMIT`.
	BandwidthLimitType *string `pulumi:"bandwidthLimitType"`
	// Billing mode. Valid values: `PREPAID`, `POSTPAID`. `PREPAID` means prepaid, which means annual and monthly subscription,
	// `POSTPAID` means post-payment, which means billing by volume. The default is `POSTPAID`. The prepaid model only supports
	// inter-regional speed limit, and the post-paid model supports inter-regional speed limit and regional export speed limit.
	ChargeType *string `pulumi:"chargeType"`
	// Description of CCN, and maximum length does not exceed 100 bytes.
	Description *string `pulumi:"description"`
	// Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
	Name *string `pulumi:"name"`
	// Service quality of CCN. Valid values: `PT`, `AU`, `AG`. The default is `AU`.
	Qos *string `pulumi:"qos"`
	// Instance tag.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a Ccn resource.
type CcnArgs struct {
	// The speed limit type. Valid values: `INTER_REGION_LIMIT`, `OUTER_REGION_LIMIT`. `OUTER_REGION_LIMIT` represents the
	// regional export speed limit, `INTER_REGION_LIMIT` is the inter-regional speed limit. The default is
	// `OUTER_REGION_LIMIT`.
	BandwidthLimitType pulumi.StringPtrInput
	// Billing mode. Valid values: `PREPAID`, `POSTPAID`. `PREPAID` means prepaid, which means annual and monthly subscription,
	// `POSTPAID` means post-payment, which means billing by volume. The default is `POSTPAID`. The prepaid model only supports
	// inter-regional speed limit, and the post-paid model supports inter-regional speed limit and regional export speed limit.
	ChargeType pulumi.StringPtrInput
	// Description of CCN, and maximum length does not exceed 100 bytes.
	Description pulumi.StringPtrInput
	// Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
	Name pulumi.StringPtrInput
	// Service quality of CCN. Valid values: `PT`, `AU`, `AG`. The default is `AU`.
	Qos pulumi.StringPtrInput
	// Instance tag.
	Tags pulumi.MapInput
}

func (CcnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ccnArgs)(nil)).Elem()
}

type CcnInput interface {
	pulumi.Input

	ToCcnOutput() CcnOutput
	ToCcnOutputWithContext(ctx context.Context) CcnOutput
}

func (*Ccn) ElementType() reflect.Type {
	return reflect.TypeOf((**Ccn)(nil)).Elem()
}

func (i *Ccn) ToCcnOutput() CcnOutput {
	return i.ToCcnOutputWithContext(context.Background())
}

func (i *Ccn) ToCcnOutputWithContext(ctx context.Context) CcnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcnOutput)
}

// CcnArrayInput is an input type that accepts CcnArray and CcnArrayOutput values.
// You can construct a concrete instance of `CcnArrayInput` via:
//
//	CcnArray{ CcnArgs{...} }
type CcnArrayInput interface {
	pulumi.Input

	ToCcnArrayOutput() CcnArrayOutput
	ToCcnArrayOutputWithContext(context.Context) CcnArrayOutput
}

type CcnArray []CcnInput

func (CcnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ccn)(nil)).Elem()
}

func (i CcnArray) ToCcnArrayOutput() CcnArrayOutput {
	return i.ToCcnArrayOutputWithContext(context.Background())
}

func (i CcnArray) ToCcnArrayOutputWithContext(ctx context.Context) CcnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcnArrayOutput)
}

// CcnMapInput is an input type that accepts CcnMap and CcnMapOutput values.
// You can construct a concrete instance of `CcnMapInput` via:
//
//	CcnMap{ "key": CcnArgs{...} }
type CcnMapInput interface {
	pulumi.Input

	ToCcnMapOutput() CcnMapOutput
	ToCcnMapOutputWithContext(context.Context) CcnMapOutput
}

type CcnMap map[string]CcnInput

func (CcnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ccn)(nil)).Elem()
}

func (i CcnMap) ToCcnMapOutput() CcnMapOutput {
	return i.ToCcnMapOutputWithContext(context.Background())
}

func (i CcnMap) ToCcnMapOutputWithContext(ctx context.Context) CcnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcnMapOutput)
}

type CcnOutput struct{ *pulumi.OutputState }

func (CcnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ccn)(nil)).Elem()
}

func (o CcnOutput) ToCcnOutput() CcnOutput {
	return o
}

func (o CcnOutput) ToCcnOutputWithContext(ctx context.Context) CcnOutput {
	return o
}

// The speed limit type. Valid values: `INTER_REGION_LIMIT`, `OUTER_REGION_LIMIT`. `OUTER_REGION_LIMIT` represents the
// regional export speed limit, `INTER_REGION_LIMIT` is the inter-regional speed limit. The default is
// `OUTER_REGION_LIMIT`.
func (o CcnOutput) BandwidthLimitType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ccn) pulumi.StringPtrOutput { return v.BandwidthLimitType }).(pulumi.StringPtrOutput)
}

// Billing mode. Valid values: `PREPAID`, `POSTPAID`. `PREPAID` means prepaid, which means annual and monthly subscription,
// `POSTPAID` means post-payment, which means billing by volume. The default is `POSTPAID`. The prepaid model only supports
// inter-regional speed limit, and the post-paid model supports inter-regional speed limit and regional export speed limit.
func (o CcnOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ccn) pulumi.StringPtrOutput { return v.ChargeType }).(pulumi.StringPtrOutput)
}

// Creation time of resource.
func (o CcnOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Ccn) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of CCN, and maximum length does not exceed 100 bytes.
func (o CcnOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ccn) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Number of attached instances.
func (o CcnOutput) InstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Ccn) pulumi.IntOutput { return v.InstanceCount }).(pulumi.IntOutput)
}

// Name of the CCN to be queried, and maximum length does not exceed 60 bytes.
func (o CcnOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ccn) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Service quality of CCN. Valid values: `PT`, `AU`, `AG`. The default is `AU`.
func (o CcnOutput) Qos() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ccn) pulumi.StringPtrOutput { return v.Qos }).(pulumi.StringPtrOutput)
}

// States of instance. Valid values: `ISOLATED`(arrears) and `AVAILABLE`.
func (o CcnOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Ccn) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Instance tag.
func (o CcnOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Ccn) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

type CcnArrayOutput struct{ *pulumi.OutputState }

func (CcnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ccn)(nil)).Elem()
}

func (o CcnArrayOutput) ToCcnArrayOutput() CcnArrayOutput {
	return o
}

func (o CcnArrayOutput) ToCcnArrayOutputWithContext(ctx context.Context) CcnArrayOutput {
	return o
}

func (o CcnArrayOutput) Index(i pulumi.IntInput) CcnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ccn {
		return vs[0].([]*Ccn)[vs[1].(int)]
	}).(CcnOutput)
}

type CcnMapOutput struct{ *pulumi.OutputState }

func (CcnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ccn)(nil)).Elem()
}

func (o CcnMapOutput) ToCcnMapOutput() CcnMapOutput {
	return o
}

func (o CcnMapOutput) ToCcnMapOutputWithContext(ctx context.Context) CcnMapOutput {
	return o
}

func (o CcnMapOutput) MapIndex(k pulumi.StringInput) CcnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ccn {
		return vs[0].(map[string]*Ccn)[vs[1].(string)]
	}).(CcnOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CcnInput)(nil)).Elem(), &Ccn{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcnArrayInput)(nil)).Elem(), CcnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcnMapInput)(nil)).Elem(), CcnMap{})
	pulumi.RegisterOutputType(CcnOutput{})
	pulumi.RegisterOutputType(CcnArrayOutput{})
	pulumi.RegisterOutputType(CcnMapOutput{})
}
