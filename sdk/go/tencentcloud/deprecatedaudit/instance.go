// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deprecatedaudit

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Instance struct {
	pulumi.CustomResourceState

	// Indicate whether to turn on audit logging or not.
	AuditSwitch pulumi.BoolOutput `pulumi:"auditSwitch"`
	// Name of the cos bucket to save audit log. Caution: the validation of existing cos bucket will not be checked by
	// terraform.
	CosBucket pulumi.StringOutput `pulumi:"cosBucket"`
	// Region of the cos bucket.
	CosRegion pulumi.StringOutput `pulumi:"cosRegion"`
	// Indicate whether the log is encrypt with KMS algorithm or not.
	EnableKmsEncry pulumi.BoolPtrOutput `pulumi:"enableKmsEncry"`
	// Existing CMK unique key. This field can be get by data source `tencentcloud_audit_key_alias`. Caution: the region of the
	// KMS must be as same as the `cos_region`.
	KeyId pulumi.StringPtrOutput `pulumi:"keyId"`
	// The log file name prefix. The length ranges from 3 to 40. If not set, the account ID will be the log file prefix.
	LogFilePrefix pulumi.StringOutput `pulumi:"logFilePrefix"`
	// Name of audit. Valid length ranges from 3 to 128. Only alpha character or numbers or '_' supported.
	Name pulumi.StringOutput `pulumi:"name"`
	// Event attribute filter. Valid values: `1`, `2`, `3`. `1` for readonly, `2` for write-only, `3` for all.
	ReadWriteAttribute pulumi.IntOutput `pulumi:"readWriteAttribute"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuditSwitch == nil {
		return nil, errors.New("invalid value for required argument 'AuditSwitch'")
	}
	if args.CosBucket == nil {
		return nil, errors.New("invalid value for required argument 'CosBucket'")
	}
	if args.CosRegion == nil {
		return nil, errors.New("invalid value for required argument 'CosRegion'")
	}
	if args.ReadWriteAttribute == nil {
		return nil, errors.New("invalid value for required argument 'ReadWriteAttribute'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("tencentcloud:Deprecatedaudit/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("tencentcloud:Deprecatedaudit/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// Indicate whether to turn on audit logging or not.
	AuditSwitch *bool `pulumi:"auditSwitch"`
	// Name of the cos bucket to save audit log. Caution: the validation of existing cos bucket will not be checked by
	// terraform.
	CosBucket *string `pulumi:"cosBucket"`
	// Region of the cos bucket.
	CosRegion *string `pulumi:"cosRegion"`
	// Indicate whether the log is encrypt with KMS algorithm or not.
	EnableKmsEncry *bool `pulumi:"enableKmsEncry"`
	// Existing CMK unique key. This field can be get by data source `tencentcloud_audit_key_alias`. Caution: the region of the
	// KMS must be as same as the `cos_region`.
	KeyId *string `pulumi:"keyId"`
	// The log file name prefix. The length ranges from 3 to 40. If not set, the account ID will be the log file prefix.
	LogFilePrefix *string `pulumi:"logFilePrefix"`
	// Name of audit. Valid length ranges from 3 to 128. Only alpha character or numbers or '_' supported.
	Name *string `pulumi:"name"`
	// Event attribute filter. Valid values: `1`, `2`, `3`. `1` for readonly, `2` for write-only, `3` for all.
	ReadWriteAttribute *int `pulumi:"readWriteAttribute"`
}

type InstanceState struct {
	// Indicate whether to turn on audit logging or not.
	AuditSwitch pulumi.BoolPtrInput
	// Name of the cos bucket to save audit log. Caution: the validation of existing cos bucket will not be checked by
	// terraform.
	CosBucket pulumi.StringPtrInput
	// Region of the cos bucket.
	CosRegion pulumi.StringPtrInput
	// Indicate whether the log is encrypt with KMS algorithm or not.
	EnableKmsEncry pulumi.BoolPtrInput
	// Existing CMK unique key. This field can be get by data source `tencentcloud_audit_key_alias`. Caution: the region of the
	// KMS must be as same as the `cos_region`.
	KeyId pulumi.StringPtrInput
	// The log file name prefix. The length ranges from 3 to 40. If not set, the account ID will be the log file prefix.
	LogFilePrefix pulumi.StringPtrInput
	// Name of audit. Valid length ranges from 3 to 128. Only alpha character or numbers or '_' supported.
	Name pulumi.StringPtrInput
	// Event attribute filter. Valid values: `1`, `2`, `3`. `1` for readonly, `2` for write-only, `3` for all.
	ReadWriteAttribute pulumi.IntPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// Indicate whether to turn on audit logging or not.
	AuditSwitch bool `pulumi:"auditSwitch"`
	// Name of the cos bucket to save audit log. Caution: the validation of existing cos bucket will not be checked by
	// terraform.
	CosBucket string `pulumi:"cosBucket"`
	// Region of the cos bucket.
	CosRegion string `pulumi:"cosRegion"`
	// Indicate whether the log is encrypt with KMS algorithm or not.
	EnableKmsEncry *bool `pulumi:"enableKmsEncry"`
	// Existing CMK unique key. This field can be get by data source `tencentcloud_audit_key_alias`. Caution: the region of the
	// KMS must be as same as the `cos_region`.
	KeyId *string `pulumi:"keyId"`
	// The log file name prefix. The length ranges from 3 to 40. If not set, the account ID will be the log file prefix.
	LogFilePrefix *string `pulumi:"logFilePrefix"`
	// Name of audit. Valid length ranges from 3 to 128. Only alpha character or numbers or '_' supported.
	Name *string `pulumi:"name"`
	// Event attribute filter. Valid values: `1`, `2`, `3`. `1` for readonly, `2` for write-only, `3` for all.
	ReadWriteAttribute int `pulumi:"readWriteAttribute"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Indicate whether to turn on audit logging or not.
	AuditSwitch pulumi.BoolInput
	// Name of the cos bucket to save audit log. Caution: the validation of existing cos bucket will not be checked by
	// terraform.
	CosBucket pulumi.StringInput
	// Region of the cos bucket.
	CosRegion pulumi.StringInput
	// Indicate whether the log is encrypt with KMS algorithm or not.
	EnableKmsEncry pulumi.BoolPtrInput
	// Existing CMK unique key. This field can be get by data source `tencentcloud_audit_key_alias`. Caution: the region of the
	// KMS must be as same as the `cos_region`.
	KeyId pulumi.StringPtrInput
	// The log file name prefix. The length ranges from 3 to 40. If not set, the account ID will be the log file prefix.
	LogFilePrefix pulumi.StringPtrInput
	// Name of audit. Valid length ranges from 3 to 128. Only alpha character or numbers or '_' supported.
	Name pulumi.StringPtrInput
	// Event attribute filter. Valid values: `1`, `2`, `3`. `1` for readonly, `2` for write-only, `3` for all.
	ReadWriteAttribute pulumi.IntInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// Indicate whether to turn on audit logging or not.
func (o InstanceOutput) AuditSwitch() pulumi.BoolOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolOutput { return v.AuditSwitch }).(pulumi.BoolOutput)
}

// Name of the cos bucket to save audit log. Caution: the validation of existing cos bucket will not be checked by
// terraform.
func (o InstanceOutput) CosBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.CosBucket }).(pulumi.StringOutput)
}

// Region of the cos bucket.
func (o InstanceOutput) CosRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.CosRegion }).(pulumi.StringOutput)
}

// Indicate whether the log is encrypt with KMS algorithm or not.
func (o InstanceOutput) EnableKmsEncry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.EnableKmsEncry }).(pulumi.BoolPtrOutput)
}

// Existing CMK unique key. This field can be get by data source `tencentcloud_audit_key_alias`. Caution: the region of the
// KMS must be as same as the `cos_region`.
func (o InstanceOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.KeyId }).(pulumi.StringPtrOutput)
}

// The log file name prefix. The length ranges from 3 to 40. If not set, the account ID will be the log file prefix.
func (o InstanceOutput) LogFilePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.LogFilePrefix }).(pulumi.StringOutput)
}

// Name of audit. Valid length ranges from 3 to 128. Only alpha character or numbers or '_' supported.
func (o InstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Event attribute filter. Valid values: `1`, `2`, `3`. `1` for readonly, `2` for write-only, `3` for all.
func (o InstanceOutput) ReadWriteAttribute() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.ReadWriteAttribute }).(pulumi.IntOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
