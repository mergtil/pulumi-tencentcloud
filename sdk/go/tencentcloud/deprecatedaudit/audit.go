// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deprecatedaudit

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Audit struct {
	pulumi.CustomResourceState

	// Indicate whether to turn on audit logging or not.
	AuditSwitch pulumi.BoolOutput `pulumi:"auditSwitch"`
	// Name of the cos bucket to save audit log. Caution: the validation of existing cos bucket will not be checked by
	// terraform.
	CosBucket pulumi.StringOutput `pulumi:"cosBucket"`
	// Region of the cos bucket.
	CosRegion pulumi.StringOutput `pulumi:"cosRegion"`
	// Indicate whether the log is encrypt with KMS algorithm or not.
	EnableKmsEncry pulumi.BoolPtrOutput `pulumi:"enableKmsEncry"`
	// Existing CMK unique key. This field can be get by data source `tencentcloud_audit_key_alias`. Caution: the region of the
	// KMS must be as same as the `cos_region`.
	KeyId pulumi.StringPtrOutput `pulumi:"keyId"`
	// The log file name prefix. The length ranges from 3 to 40. If not set, the account ID will be the log file prefix.
	LogFilePrefix pulumi.StringOutput `pulumi:"logFilePrefix"`
	// Name of audit. Valid length ranges from 3 to 128. Only alpha character or numbers or '_' supported.
	Name pulumi.StringOutput `pulumi:"name"`
	// Event attribute filter. Valid values: `1`, `2`, `3`. `1` for readonly, `2` for write-only, `3` for all.
	ReadWriteAttribute pulumi.IntOutput `pulumi:"readWriteAttribute"`
}

// NewAudit registers a new resource with the given unique name, arguments, and options.
func NewAudit(ctx *pulumi.Context,
	name string, args *AuditArgs, opts ...pulumi.ResourceOption) (*Audit, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuditSwitch == nil {
		return nil, errors.New("invalid value for required argument 'AuditSwitch'")
	}
	if args.CosBucket == nil {
		return nil, errors.New("invalid value for required argument 'CosBucket'")
	}
	if args.CosRegion == nil {
		return nil, errors.New("invalid value for required argument 'CosRegion'")
	}
	if args.ReadWriteAttribute == nil {
		return nil, errors.New("invalid value for required argument 'ReadWriteAttribute'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Audit
	err := ctx.RegisterResource("tencentcloud:Deprecatedaudit/audit:Audit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAudit gets an existing Audit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAudit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuditState, opts ...pulumi.ResourceOption) (*Audit, error) {
	var resource Audit
	err := ctx.ReadResource("tencentcloud:Deprecatedaudit/audit:Audit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Audit resources.
type auditState struct {
	// Indicate whether to turn on audit logging or not.
	AuditSwitch *bool `pulumi:"auditSwitch"`
	// Name of the cos bucket to save audit log. Caution: the validation of existing cos bucket will not be checked by
	// terraform.
	CosBucket *string `pulumi:"cosBucket"`
	// Region of the cos bucket.
	CosRegion *string `pulumi:"cosRegion"`
	// Indicate whether the log is encrypt with KMS algorithm or not.
	EnableKmsEncry *bool `pulumi:"enableKmsEncry"`
	// Existing CMK unique key. This field can be get by data source `tencentcloud_audit_key_alias`. Caution: the region of the
	// KMS must be as same as the `cos_region`.
	KeyId *string `pulumi:"keyId"`
	// The log file name prefix. The length ranges from 3 to 40. If not set, the account ID will be the log file prefix.
	LogFilePrefix *string `pulumi:"logFilePrefix"`
	// Name of audit. Valid length ranges from 3 to 128. Only alpha character or numbers or '_' supported.
	Name *string `pulumi:"name"`
	// Event attribute filter. Valid values: `1`, `2`, `3`. `1` for readonly, `2` for write-only, `3` for all.
	ReadWriteAttribute *int `pulumi:"readWriteAttribute"`
}

type AuditState struct {
	// Indicate whether to turn on audit logging or not.
	AuditSwitch pulumi.BoolPtrInput
	// Name of the cos bucket to save audit log. Caution: the validation of existing cos bucket will not be checked by
	// terraform.
	CosBucket pulumi.StringPtrInput
	// Region of the cos bucket.
	CosRegion pulumi.StringPtrInput
	// Indicate whether the log is encrypt with KMS algorithm or not.
	EnableKmsEncry pulumi.BoolPtrInput
	// Existing CMK unique key. This field can be get by data source `tencentcloud_audit_key_alias`. Caution: the region of the
	// KMS must be as same as the `cos_region`.
	KeyId pulumi.StringPtrInput
	// The log file name prefix. The length ranges from 3 to 40. If not set, the account ID will be the log file prefix.
	LogFilePrefix pulumi.StringPtrInput
	// Name of audit. Valid length ranges from 3 to 128. Only alpha character or numbers or '_' supported.
	Name pulumi.StringPtrInput
	// Event attribute filter. Valid values: `1`, `2`, `3`. `1` for readonly, `2` for write-only, `3` for all.
	ReadWriteAttribute pulumi.IntPtrInput
}

func (AuditState) ElementType() reflect.Type {
	return reflect.TypeOf((*auditState)(nil)).Elem()
}

type auditArgs struct {
	// Indicate whether to turn on audit logging or not.
	AuditSwitch bool `pulumi:"auditSwitch"`
	// Name of the cos bucket to save audit log. Caution: the validation of existing cos bucket will not be checked by
	// terraform.
	CosBucket string `pulumi:"cosBucket"`
	// Region of the cos bucket.
	CosRegion string `pulumi:"cosRegion"`
	// Indicate whether the log is encrypt with KMS algorithm or not.
	EnableKmsEncry *bool `pulumi:"enableKmsEncry"`
	// Existing CMK unique key. This field can be get by data source `tencentcloud_audit_key_alias`. Caution: the region of the
	// KMS must be as same as the `cos_region`.
	KeyId *string `pulumi:"keyId"`
	// The log file name prefix. The length ranges from 3 to 40. If not set, the account ID will be the log file prefix.
	LogFilePrefix *string `pulumi:"logFilePrefix"`
	// Name of audit. Valid length ranges from 3 to 128. Only alpha character or numbers or '_' supported.
	Name *string `pulumi:"name"`
	// Event attribute filter. Valid values: `1`, `2`, `3`. `1` for readonly, `2` for write-only, `3` for all.
	ReadWriteAttribute int `pulumi:"readWriteAttribute"`
}

// The set of arguments for constructing a Audit resource.
type AuditArgs struct {
	// Indicate whether to turn on audit logging or not.
	AuditSwitch pulumi.BoolInput
	// Name of the cos bucket to save audit log. Caution: the validation of existing cos bucket will not be checked by
	// terraform.
	CosBucket pulumi.StringInput
	// Region of the cos bucket.
	CosRegion pulumi.StringInput
	// Indicate whether the log is encrypt with KMS algorithm or not.
	EnableKmsEncry pulumi.BoolPtrInput
	// Existing CMK unique key. This field can be get by data source `tencentcloud_audit_key_alias`. Caution: the region of the
	// KMS must be as same as the `cos_region`.
	KeyId pulumi.StringPtrInput
	// The log file name prefix. The length ranges from 3 to 40. If not set, the account ID will be the log file prefix.
	LogFilePrefix pulumi.StringPtrInput
	// Name of audit. Valid length ranges from 3 to 128. Only alpha character or numbers or '_' supported.
	Name pulumi.StringPtrInput
	// Event attribute filter. Valid values: `1`, `2`, `3`. `1` for readonly, `2` for write-only, `3` for all.
	ReadWriteAttribute pulumi.IntInput
}

func (AuditArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*auditArgs)(nil)).Elem()
}

type AuditInput interface {
	pulumi.Input

	ToAuditOutput() AuditOutput
	ToAuditOutputWithContext(ctx context.Context) AuditOutput
}

func (*Audit) ElementType() reflect.Type {
	return reflect.TypeOf((**Audit)(nil)).Elem()
}

func (i *Audit) ToAuditOutput() AuditOutput {
	return i.ToAuditOutputWithContext(context.Background())
}

func (i *Audit) ToAuditOutputWithContext(ctx context.Context) AuditOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditOutput)
}

// AuditArrayInput is an input type that accepts AuditArray and AuditArrayOutput values.
// You can construct a concrete instance of `AuditArrayInput` via:
//
//	AuditArray{ AuditArgs{...} }
type AuditArrayInput interface {
	pulumi.Input

	ToAuditArrayOutput() AuditArrayOutput
	ToAuditArrayOutputWithContext(context.Context) AuditArrayOutput
}

type AuditArray []AuditInput

func (AuditArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Audit)(nil)).Elem()
}

func (i AuditArray) ToAuditArrayOutput() AuditArrayOutput {
	return i.ToAuditArrayOutputWithContext(context.Background())
}

func (i AuditArray) ToAuditArrayOutputWithContext(ctx context.Context) AuditArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditArrayOutput)
}

// AuditMapInput is an input type that accepts AuditMap and AuditMapOutput values.
// You can construct a concrete instance of `AuditMapInput` via:
//
//	AuditMap{ "key": AuditArgs{...} }
type AuditMapInput interface {
	pulumi.Input

	ToAuditMapOutput() AuditMapOutput
	ToAuditMapOutputWithContext(context.Context) AuditMapOutput
}

type AuditMap map[string]AuditInput

func (AuditMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Audit)(nil)).Elem()
}

func (i AuditMap) ToAuditMapOutput() AuditMapOutput {
	return i.ToAuditMapOutputWithContext(context.Background())
}

func (i AuditMap) ToAuditMapOutputWithContext(ctx context.Context) AuditMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditMapOutput)
}

type AuditOutput struct{ *pulumi.OutputState }

func (AuditOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Audit)(nil)).Elem()
}

func (o AuditOutput) ToAuditOutput() AuditOutput {
	return o
}

func (o AuditOutput) ToAuditOutputWithContext(ctx context.Context) AuditOutput {
	return o
}

// Indicate whether to turn on audit logging or not.
func (o AuditOutput) AuditSwitch() pulumi.BoolOutput {
	return o.ApplyT(func(v *Audit) pulumi.BoolOutput { return v.AuditSwitch }).(pulumi.BoolOutput)
}

// Name of the cos bucket to save audit log. Caution: the validation of existing cos bucket will not be checked by
// terraform.
func (o AuditOutput) CosBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *Audit) pulumi.StringOutput { return v.CosBucket }).(pulumi.StringOutput)
}

// Region of the cos bucket.
func (o AuditOutput) CosRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *Audit) pulumi.StringOutput { return v.CosRegion }).(pulumi.StringOutput)
}

// Indicate whether the log is encrypt with KMS algorithm or not.
func (o AuditOutput) EnableKmsEncry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Audit) pulumi.BoolPtrOutput { return v.EnableKmsEncry }).(pulumi.BoolPtrOutput)
}

// Existing CMK unique key. This field can be get by data source `tencentcloud_audit_key_alias`. Caution: the region of the
// KMS must be as same as the `cos_region`.
func (o AuditOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Audit) pulumi.StringPtrOutput { return v.KeyId }).(pulumi.StringPtrOutput)
}

// The log file name prefix. The length ranges from 3 to 40. If not set, the account ID will be the log file prefix.
func (o AuditOutput) LogFilePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *Audit) pulumi.StringOutput { return v.LogFilePrefix }).(pulumi.StringOutput)
}

// Name of audit. Valid length ranges from 3 to 128. Only alpha character or numbers or '_' supported.
func (o AuditOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Audit) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Event attribute filter. Valid values: `1`, `2`, `3`. `1` for readonly, `2` for write-only, `3` for all.
func (o AuditOutput) ReadWriteAttribute() pulumi.IntOutput {
	return o.ApplyT(func(v *Audit) pulumi.IntOutput { return v.ReadWriteAttribute }).(pulumi.IntOutput)
}

type AuditArrayOutput struct{ *pulumi.OutputState }

func (AuditArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Audit)(nil)).Elem()
}

func (o AuditArrayOutput) ToAuditArrayOutput() AuditArrayOutput {
	return o
}

func (o AuditArrayOutput) ToAuditArrayOutputWithContext(ctx context.Context) AuditArrayOutput {
	return o
}

func (o AuditArrayOutput) Index(i pulumi.IntInput) AuditOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Audit {
		return vs[0].([]*Audit)[vs[1].(int)]
	}).(AuditOutput)
}

type AuditMapOutput struct{ *pulumi.OutputState }

func (AuditMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Audit)(nil)).Elem()
}

func (o AuditMapOutput) ToAuditMapOutput() AuditMapOutput {
	return o
}

func (o AuditMapOutput) ToAuditMapOutputWithContext(ctx context.Context) AuditMapOutput {
	return o
}

func (o AuditMapOutput) MapIndex(k pulumi.StringInput) AuditOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Audit {
		return vs[0].(map[string]*Audit)[vs[1].(string)]
	}).(AuditOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditInput)(nil)).Elem(), &Audit{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditArrayInput)(nil)).Elem(), AuditArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditMapInput)(nil)).Elem(), AuditMap{})
	pulumi.RegisterOutputType(AuditOutput{})
	pulumi.RegisterOutputType(AuditArrayOutput{})
	pulumi.RegisterOutputType(AuditMapOutput{})
}
