// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dnat

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Dnat struct {
	pulumi.CustomResourceState

	// Description of the NAT forward.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Network address of the EIP.
	ElasticIp pulumi.StringOutput `pulumi:"elasticIp"`
	// Port of the EIP.
	ElasticPort pulumi.StringOutput `pulumi:"elasticPort"`
	// ID of the NAT gateway.
	NatId pulumi.StringOutput `pulumi:"natId"`
	// Network address of the backend service.
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// Port of intranet.
	PrivatePort pulumi.StringOutput `pulumi:"privatePort"`
	// Type of the network protocol. Valid value: `TCP` and `UDP`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// ID of the VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewDnat registers a new resource with the given unique name, arguments, and options.
func NewDnat(ctx *pulumi.Context,
	name string, args *DnatArgs, opts ...pulumi.ResourceOption) (*Dnat, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ElasticIp == nil {
		return nil, errors.New("invalid value for required argument 'ElasticIp'")
	}
	if args.ElasticPort == nil {
		return nil, errors.New("invalid value for required argument 'ElasticPort'")
	}
	if args.NatId == nil {
		return nil, errors.New("invalid value for required argument 'NatId'")
	}
	if args.PrivateIp == nil {
		return nil, errors.New("invalid value for required argument 'PrivateIp'")
	}
	if args.PrivatePort == nil {
		return nil, errors.New("invalid value for required argument 'PrivatePort'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dnat
	err := ctx.RegisterResource("tencentcloud:Dnat/dnat:Dnat", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnat gets an existing Dnat resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnat(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnatState, opts ...pulumi.ResourceOption) (*Dnat, error) {
	var resource Dnat
	err := ctx.ReadResource("tencentcloud:Dnat/dnat:Dnat", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dnat resources.
type dnatState struct {
	// Description of the NAT forward.
	Description *string `pulumi:"description"`
	// Network address of the EIP.
	ElasticIp *string `pulumi:"elasticIp"`
	// Port of the EIP.
	ElasticPort *string `pulumi:"elasticPort"`
	// ID of the NAT gateway.
	NatId *string `pulumi:"natId"`
	// Network address of the backend service.
	PrivateIp *string `pulumi:"privateIp"`
	// Port of intranet.
	PrivatePort *string `pulumi:"privatePort"`
	// Type of the network protocol. Valid value: `TCP` and `UDP`.
	Protocol *string `pulumi:"protocol"`
	// ID of the VPC.
	VpcId *string `pulumi:"vpcId"`
}

type DnatState struct {
	// Description of the NAT forward.
	Description pulumi.StringPtrInput
	// Network address of the EIP.
	ElasticIp pulumi.StringPtrInput
	// Port of the EIP.
	ElasticPort pulumi.StringPtrInput
	// ID of the NAT gateway.
	NatId pulumi.StringPtrInput
	// Network address of the backend service.
	PrivateIp pulumi.StringPtrInput
	// Port of intranet.
	PrivatePort pulumi.StringPtrInput
	// Type of the network protocol. Valid value: `TCP` and `UDP`.
	Protocol pulumi.StringPtrInput
	// ID of the VPC.
	VpcId pulumi.StringPtrInput
}

func (DnatState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnatState)(nil)).Elem()
}

type dnatArgs struct {
	// Description of the NAT forward.
	Description *string `pulumi:"description"`
	// Network address of the EIP.
	ElasticIp string `pulumi:"elasticIp"`
	// Port of the EIP.
	ElasticPort string `pulumi:"elasticPort"`
	// ID of the NAT gateway.
	NatId string `pulumi:"natId"`
	// Network address of the backend service.
	PrivateIp string `pulumi:"privateIp"`
	// Port of intranet.
	PrivatePort string `pulumi:"privatePort"`
	// Type of the network protocol. Valid value: `TCP` and `UDP`.
	Protocol string `pulumi:"protocol"`
	// ID of the VPC.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Dnat resource.
type DnatArgs struct {
	// Description of the NAT forward.
	Description pulumi.StringPtrInput
	// Network address of the EIP.
	ElasticIp pulumi.StringInput
	// Port of the EIP.
	ElasticPort pulumi.StringInput
	// ID of the NAT gateway.
	NatId pulumi.StringInput
	// Network address of the backend service.
	PrivateIp pulumi.StringInput
	// Port of intranet.
	PrivatePort pulumi.StringInput
	// Type of the network protocol. Valid value: `TCP` and `UDP`.
	Protocol pulumi.StringInput
	// ID of the VPC.
	VpcId pulumi.StringInput
}

func (DnatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnatArgs)(nil)).Elem()
}

type DnatInput interface {
	pulumi.Input

	ToDnatOutput() DnatOutput
	ToDnatOutputWithContext(ctx context.Context) DnatOutput
}

func (*Dnat) ElementType() reflect.Type {
	return reflect.TypeOf((**Dnat)(nil)).Elem()
}

func (i *Dnat) ToDnatOutput() DnatOutput {
	return i.ToDnatOutputWithContext(context.Background())
}

func (i *Dnat) ToDnatOutputWithContext(ctx context.Context) DnatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnatOutput)
}

// DnatArrayInput is an input type that accepts DnatArray and DnatArrayOutput values.
// You can construct a concrete instance of `DnatArrayInput` via:
//
//	DnatArray{ DnatArgs{...} }
type DnatArrayInput interface {
	pulumi.Input

	ToDnatArrayOutput() DnatArrayOutput
	ToDnatArrayOutputWithContext(context.Context) DnatArrayOutput
}

type DnatArray []DnatInput

func (DnatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dnat)(nil)).Elem()
}

func (i DnatArray) ToDnatArrayOutput() DnatArrayOutput {
	return i.ToDnatArrayOutputWithContext(context.Background())
}

func (i DnatArray) ToDnatArrayOutputWithContext(ctx context.Context) DnatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnatArrayOutput)
}

// DnatMapInput is an input type that accepts DnatMap and DnatMapOutput values.
// You can construct a concrete instance of `DnatMapInput` via:
//
//	DnatMap{ "key": DnatArgs{...} }
type DnatMapInput interface {
	pulumi.Input

	ToDnatMapOutput() DnatMapOutput
	ToDnatMapOutputWithContext(context.Context) DnatMapOutput
}

type DnatMap map[string]DnatInput

func (DnatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dnat)(nil)).Elem()
}

func (i DnatMap) ToDnatMapOutput() DnatMapOutput {
	return i.ToDnatMapOutputWithContext(context.Background())
}

func (i DnatMap) ToDnatMapOutputWithContext(ctx context.Context) DnatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnatMapOutput)
}

type DnatOutput struct{ *pulumi.OutputState }

func (DnatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dnat)(nil)).Elem()
}

func (o DnatOutput) ToDnatOutput() DnatOutput {
	return o
}

func (o DnatOutput) ToDnatOutputWithContext(ctx context.Context) DnatOutput {
	return o
}

// Description of the NAT forward.
func (o DnatOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dnat) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Network address of the EIP.
func (o DnatOutput) ElasticIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Dnat) pulumi.StringOutput { return v.ElasticIp }).(pulumi.StringOutput)
}

// Port of the EIP.
func (o DnatOutput) ElasticPort() pulumi.StringOutput {
	return o.ApplyT(func(v *Dnat) pulumi.StringOutput { return v.ElasticPort }).(pulumi.StringOutput)
}

// ID of the NAT gateway.
func (o DnatOutput) NatId() pulumi.StringOutput {
	return o.ApplyT(func(v *Dnat) pulumi.StringOutput { return v.NatId }).(pulumi.StringOutput)
}

// Network address of the backend service.
func (o DnatOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Dnat) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

// Port of intranet.
func (o DnatOutput) PrivatePort() pulumi.StringOutput {
	return o.ApplyT(func(v *Dnat) pulumi.StringOutput { return v.PrivatePort }).(pulumi.StringOutput)
}

// Type of the network protocol. Valid value: `TCP` and `UDP`.
func (o DnatOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Dnat) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// ID of the VPC.
func (o DnatOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Dnat) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type DnatArrayOutput struct{ *pulumi.OutputState }

func (DnatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dnat)(nil)).Elem()
}

func (o DnatArrayOutput) ToDnatArrayOutput() DnatArrayOutput {
	return o
}

func (o DnatArrayOutput) ToDnatArrayOutputWithContext(ctx context.Context) DnatArrayOutput {
	return o
}

func (o DnatArrayOutput) Index(i pulumi.IntInput) DnatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dnat {
		return vs[0].([]*Dnat)[vs[1].(int)]
	}).(DnatOutput)
}

type DnatMapOutput struct{ *pulumi.OutputState }

func (DnatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dnat)(nil)).Elem()
}

func (o DnatMapOutput) ToDnatMapOutput() DnatMapOutput {
	return o
}

func (o DnatMapOutput) ToDnatMapOutputWithContext(ctx context.Context) DnatMapOutput {
	return o
}

func (o DnatMapOutput) MapIndex(k pulumi.StringInput) DnatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dnat {
		return vs[0].(map[string]*Dnat)[vs[1].(string)]
	}).(DnatOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnatInput)(nil)).Elem(), &Dnat{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnatArrayInput)(nil)).Elem(), DnatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnatMapInput)(nil)).Elem(), DnatMap{})
	pulumi.RegisterOutputType(DnatOutput{})
	pulumi.RegisterOutputType(DnatArrayOutput{})
	pulumi.RegisterOutputType(DnatMapOutput{})
}
