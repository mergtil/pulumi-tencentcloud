// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deprecatedcontainer

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Cluster struct {
	pulumi.CustomResourceState

	// The network bandwidth of the node.
	Bandwidth pulumi.IntOutput `pulumi:"bandwidth"`
	// The network type of the node.
	BandwidthType pulumi.StringOutput `pulumi:"bandwidthType"`
	// The CIDR which the cluster is going to use.
	ClusterCidr pulumi.StringOutput `pulumi:"clusterCidr"`
	// The description of the cluster.
	ClusterDesc pulumi.StringPtrOutput `pulumi:"clusterDesc"`
	// The name of the cluster.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// The kubernetes version of the cluster.
	ClusterVersion pulumi.StringPtrOutput `pulumi:"clusterVersion"`
	// The cpu of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Cpu pulumi.IntPtrOutput `pulumi:"cpu"`
	// The type of node needed by cvm.
	CvmType pulumi.StringPtrOutput `pulumi:"cvmType"`
	// The docker graph path is going to mounted.
	DockerGraphPath pulumi.StringPtrOutput `pulumi:"dockerGraphPath"`
	// The node number is going to create in the cluster.
	GoodsNum pulumi.IntOutput `pulumi:"goodsNum"`
	// The name ot node.
	InstanceName pulumi.StringPtrOutput `pulumi:"instanceName"`
	// The instance type of the node needed by cvm.
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// Describe whether the node enable the gateway capability.
	IsVpcGateway pulumi.IntOutput `pulumi:"isVpcGateway"`
	// The key_id of each node(if using key pair to access).
	KeyId pulumi.StringPtrOutput `pulumi:"keyId"`
	// The kubernetes version of the cluster.
	KubernetesVersion pulumi.StringOutput `pulumi:"kubernetesVersion"`
	// The memory of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Mem pulumi.IntPtrOutput `pulumi:"mem"`
	// The path which volume is going to be mounted.
	MountTarget pulumi.StringPtrOutput `pulumi:"mountTarget"`
	// The node number of the cluster.
	NodesNum pulumi.IntOutput `pulumi:"nodesNum"`
	// The node status of the cluster.
	NodesStatus pulumi.StringOutput `pulumi:"nodesStatus"`
	// The system os name of the node.
	OsName pulumi.StringOutput `pulumi:"osName"`
	// The password of each node.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The puchase duration of the node needed by cvm.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// Indicate whether wan ip is needed.
	RequireWanIp pulumi.IntPtrOutput `pulumi:"requireWanIp"`
	// The size of the root volume.
	RootSize pulumi.IntOutput `pulumi:"rootSize"`
	// The type of the root volume. see more from CVM.
	RootType pulumi.StringPtrOutput `pulumi:"rootType"`
	// The security group id.
	SgId pulumi.StringPtrOutput `pulumi:"sgId"`
	// The size of the data volume.
	StorageSize pulumi.IntOutput `pulumi:"storageSize"`
	// The type of the data volume. see more from CVM.
	StorageType pulumi.StringPtrOutput `pulumi:"storageType"`
	// The subnet id which the node stays in.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The total cpu of the cluster.
	TotalCpu pulumi.IntOutput `pulumi:"totalCpu"`
	// The total memory of the cluster.
	TotalMem pulumi.IntOutput `pulumi:"totalMem"`
	// Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
	Unschedulable pulumi.IntPtrOutput `pulumi:"unschedulable"`
	// User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
	// CCS api documents.
	UserScript pulumi.StringPtrOutput `pulumi:"userScript"`
	// Specify vpc which the node(s) stay in.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The zone which the node stays in.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bandwidth == nil {
		return nil, errors.New("invalid value for required argument 'Bandwidth'")
	}
	if args.BandwidthType == nil {
		return nil, errors.New("invalid value for required argument 'BandwidthType'")
	}
	if args.ClusterCidr == nil {
		return nil, errors.New("invalid value for required argument 'ClusterCidr'")
	}
	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.GoodsNum == nil {
		return nil, errors.New("invalid value for required argument 'GoodsNum'")
	}
	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	if args.IsVpcGateway == nil {
		return nil, errors.New("invalid value for required argument 'IsVpcGateway'")
	}
	if args.OsName == nil {
		return nil, errors.New("invalid value for required argument 'OsName'")
	}
	if args.RootSize == nil {
		return nil, errors.New("invalid value for required argument 'RootSize'")
	}
	if args.StorageSize == nil {
		return nil, errors.New("invalid value for required argument 'StorageSize'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("tencentcloud:Deprecatedcontainer/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("tencentcloud:Deprecatedcontainer/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// The network bandwidth of the node.
	Bandwidth *int `pulumi:"bandwidth"`
	// The network type of the node.
	BandwidthType *string `pulumi:"bandwidthType"`
	// The CIDR which the cluster is going to use.
	ClusterCidr *string `pulumi:"clusterCidr"`
	// The description of the cluster.
	ClusterDesc *string `pulumi:"clusterDesc"`
	// The name of the cluster.
	ClusterName *string `pulumi:"clusterName"`
	// The kubernetes version of the cluster.
	ClusterVersion *string `pulumi:"clusterVersion"`
	// The cpu of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Cpu *int `pulumi:"cpu"`
	// The type of node needed by cvm.
	CvmType *string `pulumi:"cvmType"`
	// The docker graph path is going to mounted.
	DockerGraphPath *string `pulumi:"dockerGraphPath"`
	// The node number is going to create in the cluster.
	GoodsNum *int `pulumi:"goodsNum"`
	// The name ot node.
	InstanceName *string `pulumi:"instanceName"`
	// The instance type of the node needed by cvm.
	InstanceType *string `pulumi:"instanceType"`
	// Describe whether the node enable the gateway capability.
	IsVpcGateway *int `pulumi:"isVpcGateway"`
	// The key_id of each node(if using key pair to access).
	KeyId *string `pulumi:"keyId"`
	// The kubernetes version of the cluster.
	KubernetesVersion *string `pulumi:"kubernetesVersion"`
	// The memory of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Mem *int `pulumi:"mem"`
	// The path which volume is going to be mounted.
	MountTarget *string `pulumi:"mountTarget"`
	// The node number of the cluster.
	NodesNum *int `pulumi:"nodesNum"`
	// The node status of the cluster.
	NodesStatus *string `pulumi:"nodesStatus"`
	// The system os name of the node.
	OsName *string `pulumi:"osName"`
	// The password of each node.
	Password *string `pulumi:"password"`
	// The puchase duration of the node needed by cvm.
	Period *int `pulumi:"period"`
	// Indicate whether wan ip is needed.
	RequireWanIp *int `pulumi:"requireWanIp"`
	// The size of the root volume.
	RootSize *int `pulumi:"rootSize"`
	// The type of the root volume. see more from CVM.
	RootType *string `pulumi:"rootType"`
	// The security group id.
	SgId *string `pulumi:"sgId"`
	// The size of the data volume.
	StorageSize *int `pulumi:"storageSize"`
	// The type of the data volume. see more from CVM.
	StorageType *string `pulumi:"storageType"`
	// The subnet id which the node stays in.
	SubnetId *string `pulumi:"subnetId"`
	// The total cpu of the cluster.
	TotalCpu *int `pulumi:"totalCpu"`
	// The total memory of the cluster.
	TotalMem *int `pulumi:"totalMem"`
	// Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
	Unschedulable *int `pulumi:"unschedulable"`
	// User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
	// CCS api documents.
	UserScript *string `pulumi:"userScript"`
	// Specify vpc which the node(s) stay in.
	VpcId *string `pulumi:"vpcId"`
	// The zone which the node stays in.
	ZoneId *string `pulumi:"zoneId"`
}

type ClusterState struct {
	// The network bandwidth of the node.
	Bandwidth pulumi.IntPtrInput
	// The network type of the node.
	BandwidthType pulumi.StringPtrInput
	// The CIDR which the cluster is going to use.
	ClusterCidr pulumi.StringPtrInput
	// The description of the cluster.
	ClusterDesc pulumi.StringPtrInput
	// The name of the cluster.
	ClusterName pulumi.StringPtrInput
	// The kubernetes version of the cluster.
	ClusterVersion pulumi.StringPtrInput
	// The cpu of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Cpu pulumi.IntPtrInput
	// The type of node needed by cvm.
	CvmType pulumi.StringPtrInput
	// The docker graph path is going to mounted.
	DockerGraphPath pulumi.StringPtrInput
	// The node number is going to create in the cluster.
	GoodsNum pulumi.IntPtrInput
	// The name ot node.
	InstanceName pulumi.StringPtrInput
	// The instance type of the node needed by cvm.
	InstanceType pulumi.StringPtrInput
	// Describe whether the node enable the gateway capability.
	IsVpcGateway pulumi.IntPtrInput
	// The key_id of each node(if using key pair to access).
	KeyId pulumi.StringPtrInput
	// The kubernetes version of the cluster.
	KubernetesVersion pulumi.StringPtrInput
	// The memory of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Mem pulumi.IntPtrInput
	// The path which volume is going to be mounted.
	MountTarget pulumi.StringPtrInput
	// The node number of the cluster.
	NodesNum pulumi.IntPtrInput
	// The node status of the cluster.
	NodesStatus pulumi.StringPtrInput
	// The system os name of the node.
	OsName pulumi.StringPtrInput
	// The password of each node.
	Password pulumi.StringPtrInput
	// The puchase duration of the node needed by cvm.
	Period pulumi.IntPtrInput
	// Indicate whether wan ip is needed.
	RequireWanIp pulumi.IntPtrInput
	// The size of the root volume.
	RootSize pulumi.IntPtrInput
	// The type of the root volume. see more from CVM.
	RootType pulumi.StringPtrInput
	// The security group id.
	SgId pulumi.StringPtrInput
	// The size of the data volume.
	StorageSize pulumi.IntPtrInput
	// The type of the data volume. see more from CVM.
	StorageType pulumi.StringPtrInput
	// The subnet id which the node stays in.
	SubnetId pulumi.StringPtrInput
	// The total cpu of the cluster.
	TotalCpu pulumi.IntPtrInput
	// The total memory of the cluster.
	TotalMem pulumi.IntPtrInput
	// Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
	Unschedulable pulumi.IntPtrInput
	// User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
	// CCS api documents.
	UserScript pulumi.StringPtrInput
	// Specify vpc which the node(s) stay in.
	VpcId pulumi.StringPtrInput
	// The zone which the node stays in.
	ZoneId pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// The network bandwidth of the node.
	Bandwidth int `pulumi:"bandwidth"`
	// The network type of the node.
	BandwidthType string `pulumi:"bandwidthType"`
	// The CIDR which the cluster is going to use.
	ClusterCidr string `pulumi:"clusterCidr"`
	// The description of the cluster.
	ClusterDesc *string `pulumi:"clusterDesc"`
	// The name of the cluster.
	ClusterName string `pulumi:"clusterName"`
	// The kubernetes version of the cluster.
	ClusterVersion *string `pulumi:"clusterVersion"`
	// The cpu of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Cpu *int `pulumi:"cpu"`
	// The type of node needed by cvm.
	CvmType *string `pulumi:"cvmType"`
	// The docker graph path is going to mounted.
	DockerGraphPath *string `pulumi:"dockerGraphPath"`
	// The node number is going to create in the cluster.
	GoodsNum int `pulumi:"goodsNum"`
	// The name ot node.
	InstanceName *string `pulumi:"instanceName"`
	// The instance type of the node needed by cvm.
	InstanceType string `pulumi:"instanceType"`
	// Describe whether the node enable the gateway capability.
	IsVpcGateway int `pulumi:"isVpcGateway"`
	// The key_id of each node(if using key pair to access).
	KeyId *string `pulumi:"keyId"`
	// The memory of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Mem *int `pulumi:"mem"`
	// The path which volume is going to be mounted.
	MountTarget *string `pulumi:"mountTarget"`
	// The system os name of the node.
	OsName string `pulumi:"osName"`
	// The password of each node.
	Password *string `pulumi:"password"`
	// The puchase duration of the node needed by cvm.
	Period *int `pulumi:"period"`
	// Indicate whether wan ip is needed.
	RequireWanIp *int `pulumi:"requireWanIp"`
	// The size of the root volume.
	RootSize int `pulumi:"rootSize"`
	// The type of the root volume. see more from CVM.
	RootType *string `pulumi:"rootType"`
	// The security group id.
	SgId *string `pulumi:"sgId"`
	// The size of the data volume.
	StorageSize int `pulumi:"storageSize"`
	// The type of the data volume. see more from CVM.
	StorageType *string `pulumi:"storageType"`
	// The subnet id which the node stays in.
	SubnetId string `pulumi:"subnetId"`
	// Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
	Unschedulable *int `pulumi:"unschedulable"`
	// User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
	// CCS api documents.
	UserScript *string `pulumi:"userScript"`
	// Specify vpc which the node(s) stay in.
	VpcId string `pulumi:"vpcId"`
	// The zone which the node stays in.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// The network bandwidth of the node.
	Bandwidth pulumi.IntInput
	// The network type of the node.
	BandwidthType pulumi.StringInput
	// The CIDR which the cluster is going to use.
	ClusterCidr pulumi.StringInput
	// The description of the cluster.
	ClusterDesc pulumi.StringPtrInput
	// The name of the cluster.
	ClusterName pulumi.StringInput
	// The kubernetes version of the cluster.
	ClusterVersion pulumi.StringPtrInput
	// The cpu of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Cpu pulumi.IntPtrInput
	// The type of node needed by cvm.
	CvmType pulumi.StringPtrInput
	// The docker graph path is going to mounted.
	DockerGraphPath pulumi.StringPtrInput
	// The node number is going to create in the cluster.
	GoodsNum pulumi.IntInput
	// The name ot node.
	InstanceName pulumi.StringPtrInput
	// The instance type of the node needed by cvm.
	InstanceType pulumi.StringInput
	// Describe whether the node enable the gateway capability.
	IsVpcGateway pulumi.IntInput
	// The key_id of each node(if using key pair to access).
	KeyId pulumi.StringPtrInput
	// The memory of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Mem pulumi.IntPtrInput
	// The path which volume is going to be mounted.
	MountTarget pulumi.StringPtrInput
	// The system os name of the node.
	OsName pulumi.StringInput
	// The password of each node.
	Password pulumi.StringPtrInput
	// The puchase duration of the node needed by cvm.
	Period pulumi.IntPtrInput
	// Indicate whether wan ip is needed.
	RequireWanIp pulumi.IntPtrInput
	// The size of the root volume.
	RootSize pulumi.IntInput
	// The type of the root volume. see more from CVM.
	RootType pulumi.StringPtrInput
	// The security group id.
	SgId pulumi.StringPtrInput
	// The size of the data volume.
	StorageSize pulumi.IntInput
	// The type of the data volume. see more from CVM.
	StorageType pulumi.StringPtrInput
	// The subnet id which the node stays in.
	SubnetId pulumi.StringInput
	// Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
	Unschedulable pulumi.IntPtrInput
	// User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
	// CCS api documents.
	UserScript pulumi.StringPtrInput
	// Specify vpc which the node(s) stay in.
	VpcId pulumi.StringInput
	// The zone which the node stays in.
	ZoneId pulumi.StringInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// The network bandwidth of the node.
func (o ClusterOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.Bandwidth }).(pulumi.IntOutput)
}

// The network type of the node.
func (o ClusterOutput) BandwidthType() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.BandwidthType }).(pulumi.StringOutput)
}

// The CIDR which the cluster is going to use.
func (o ClusterOutput) ClusterCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterCidr }).(pulumi.StringOutput)
}

// The description of the cluster.
func (o ClusterOutput) ClusterDesc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ClusterDesc }).(pulumi.StringPtrOutput)
}

// The name of the cluster.
func (o ClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// The kubernetes version of the cluster.
func (o ClusterOutput) ClusterVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ClusterVersion }).(pulumi.StringPtrOutput)
}

// The cpu of the node.
//
// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
func (o ClusterOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.Cpu }).(pulumi.IntPtrOutput)
}

// The type of node needed by cvm.
func (o ClusterOutput) CvmType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.CvmType }).(pulumi.StringPtrOutput)
}

// The docker graph path is going to mounted.
func (o ClusterOutput) DockerGraphPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.DockerGraphPath }).(pulumi.StringPtrOutput)
}

// The node number is going to create in the cluster.
func (o ClusterOutput) GoodsNum() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.GoodsNum }).(pulumi.IntOutput)
}

// The name ot node.
func (o ClusterOutput) InstanceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.InstanceName }).(pulumi.StringPtrOutput)
}

// The instance type of the node needed by cvm.
func (o ClusterOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.InstanceType }).(pulumi.StringOutput)
}

// Describe whether the node enable the gateway capability.
func (o ClusterOutput) IsVpcGateway() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.IsVpcGateway }).(pulumi.IntOutput)
}

// The key_id of each node(if using key pair to access).
func (o ClusterOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.KeyId }).(pulumi.StringPtrOutput)
}

// The kubernetes version of the cluster.
func (o ClusterOutput) KubernetesVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.KubernetesVersion }).(pulumi.StringOutput)
}

// The memory of the node.
//
// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
func (o ClusterOutput) Mem() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.Mem }).(pulumi.IntPtrOutput)
}

// The path which volume is going to be mounted.
func (o ClusterOutput) MountTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.MountTarget }).(pulumi.StringPtrOutput)
}

// The node number of the cluster.
func (o ClusterOutput) NodesNum() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.NodesNum }).(pulumi.IntOutput)
}

// The node status of the cluster.
func (o ClusterOutput) NodesStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.NodesStatus }).(pulumi.StringOutput)
}

// The system os name of the node.
func (o ClusterOutput) OsName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.OsName }).(pulumi.StringOutput)
}

// The password of each node.
func (o ClusterOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The puchase duration of the node needed by cvm.
func (o ClusterOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// Indicate whether wan ip is needed.
func (o ClusterOutput) RequireWanIp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.RequireWanIp }).(pulumi.IntPtrOutput)
}

// The size of the root volume.
func (o ClusterOutput) RootSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.RootSize }).(pulumi.IntOutput)
}

// The type of the root volume. see more from CVM.
func (o ClusterOutput) RootType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.RootType }).(pulumi.StringPtrOutput)
}

// The security group id.
func (o ClusterOutput) SgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.SgId }).(pulumi.StringPtrOutput)
}

// The size of the data volume.
func (o ClusterOutput) StorageSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.StorageSize }).(pulumi.IntOutput)
}

// The type of the data volume. see more from CVM.
func (o ClusterOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.StorageType }).(pulumi.StringPtrOutput)
}

// The subnet id which the node stays in.
func (o ClusterOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// The total cpu of the cluster.
func (o ClusterOutput) TotalCpu() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.TotalCpu }).(pulumi.IntOutput)
}

// The total memory of the cluster.
func (o ClusterOutput) TotalMem() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.TotalMem }).(pulumi.IntOutput)
}

// Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
func (o ClusterOutput) Unschedulable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.Unschedulable }).(pulumi.IntPtrOutput)
}

// User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
// CCS api documents.
func (o ClusterOutput) UserScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.UserScript }).(pulumi.StringPtrOutput)
}

// Specify vpc which the node(s) stay in.
func (o ClusterOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The zone which the node stays in.
func (o ClusterOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
