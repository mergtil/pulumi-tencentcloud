// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deprecatedcontainer

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClusterInstance struct {
	pulumi.CustomResourceState

	// Describe the reason when node is in abnormal state(if it was).
	AbnormalReason pulumi.StringOutput `pulumi:"abnormalReason"`
	// The network bandwidth of the node.
	Bandwidth pulumi.IntOutput `pulumi:"bandwidth"`
	// The network type of the node.
	BandwidthType pulumi.StringOutput `pulumi:"bandwidthType"`
	// The id of the cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The cpu of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Cpu pulumi.IntPtrOutput `pulumi:"cpu"`
	// The type of node needed by cvm.
	CvmType pulumi.StringPtrOutput `pulumi:"cvmType"`
	// The docker graph path is going to mounted.
	DockerGraphPath pulumi.StringPtrOutput `pulumi:"dockerGraphPath"`
	// An id identify the node, provided by cvm.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The name ot node.
	InstanceName pulumi.StringPtrOutput `pulumi:"instanceName"`
	// The instance type of the node needed by cvm.
	InstanceType pulumi.StringPtrOutput `pulumi:"instanceType"`
	// Describe whether the node is normal.
	IsNormal pulumi.IntOutput `pulumi:"isNormal"`
	// Describe whether the node enable the gateway capability.
	IsVpcGateway pulumi.IntOutput `pulumi:"isVpcGateway"`
	// The key_id of each node(if using key pair to access).
	KeyId pulumi.StringPtrOutput `pulumi:"keyId"`
	// Describe the lan ip of the node.
	LanIp pulumi.StringOutput `pulumi:"lanIp"`
	// The memory of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Mem pulumi.IntPtrOutput `pulumi:"mem"`
	// The path which volume is going to be mounted.
	MountTarget pulumi.StringPtrOutput `pulumi:"mountTarget"`
	// The password of each node.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The puchase duration of the node needed by cvm.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// Indicate whether wan ip is needed.
	RequireWanIp pulumi.IntPtrOutput `pulumi:"requireWanIp"`
	// The size of the root volume.
	RootSize pulumi.IntOutput `pulumi:"rootSize"`
	// The type of the root volume. see more from CVM.
	RootType pulumi.StringPtrOutput `pulumi:"rootType"`
	// The security group id.
	SgId pulumi.StringPtrOutput `pulumi:"sgId"`
	// The size of the data volume.
	StorageSize pulumi.IntOutput `pulumi:"storageSize"`
	// The type of the data volume. see more from CVM.
	StorageType pulumi.StringPtrOutput `pulumi:"storageType"`
	// The subnet id which the node stays in.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
	Unschedulable pulumi.IntPtrOutput `pulumi:"unschedulable"`
	// User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
	// CCS api documents.
	UserScript pulumi.StringPtrOutput `pulumi:"userScript"`
	// Describe the wan ip of the node.
	WanIp pulumi.StringOutput `pulumi:"wanIp"`
	// The zone which the node stays in.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewClusterInstance registers a new resource with the given unique name, arguments, and options.
func NewClusterInstance(ctx *pulumi.Context,
	name string, args *ClusterInstanceArgs, opts ...pulumi.ResourceOption) (*ClusterInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bandwidth == nil {
		return nil, errors.New("invalid value for required argument 'Bandwidth'")
	}
	if args.BandwidthType == nil {
		return nil, errors.New("invalid value for required argument 'BandwidthType'")
	}
	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.IsVpcGateway == nil {
		return nil, errors.New("invalid value for required argument 'IsVpcGateway'")
	}
	if args.RootSize == nil {
		return nil, errors.New("invalid value for required argument 'RootSize'")
	}
	if args.StorageSize == nil {
		return nil, errors.New("invalid value for required argument 'StorageSize'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterInstance
	err := ctx.RegisterResource("tencentcloud:Deprecatedcontainer/clusterInstance:ClusterInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterInstance gets an existing ClusterInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterInstanceState, opts ...pulumi.ResourceOption) (*ClusterInstance, error) {
	var resource ClusterInstance
	err := ctx.ReadResource("tencentcloud:Deprecatedcontainer/clusterInstance:ClusterInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterInstance resources.
type clusterInstanceState struct {
	// Describe the reason when node is in abnormal state(if it was).
	AbnormalReason *string `pulumi:"abnormalReason"`
	// The network bandwidth of the node.
	Bandwidth *int `pulumi:"bandwidth"`
	// The network type of the node.
	BandwidthType *string `pulumi:"bandwidthType"`
	// The id of the cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The cpu of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Cpu *int `pulumi:"cpu"`
	// The type of node needed by cvm.
	CvmType *string `pulumi:"cvmType"`
	// The docker graph path is going to mounted.
	DockerGraphPath *string `pulumi:"dockerGraphPath"`
	// An id identify the node, provided by cvm.
	InstanceId *string `pulumi:"instanceId"`
	// The name ot node.
	InstanceName *string `pulumi:"instanceName"`
	// The instance type of the node needed by cvm.
	InstanceType *string `pulumi:"instanceType"`
	// Describe whether the node is normal.
	IsNormal *int `pulumi:"isNormal"`
	// Describe whether the node enable the gateway capability.
	IsVpcGateway *int `pulumi:"isVpcGateway"`
	// The key_id of each node(if using key pair to access).
	KeyId *string `pulumi:"keyId"`
	// Describe the lan ip of the node.
	LanIp *string `pulumi:"lanIp"`
	// The memory of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Mem *int `pulumi:"mem"`
	// The path which volume is going to be mounted.
	MountTarget *string `pulumi:"mountTarget"`
	// The password of each node.
	Password *string `pulumi:"password"`
	// The puchase duration of the node needed by cvm.
	Period *int `pulumi:"period"`
	// Indicate whether wan ip is needed.
	RequireWanIp *int `pulumi:"requireWanIp"`
	// The size of the root volume.
	RootSize *int `pulumi:"rootSize"`
	// The type of the root volume. see more from CVM.
	RootType *string `pulumi:"rootType"`
	// The security group id.
	SgId *string `pulumi:"sgId"`
	// The size of the data volume.
	StorageSize *int `pulumi:"storageSize"`
	// The type of the data volume. see more from CVM.
	StorageType *string `pulumi:"storageType"`
	// The subnet id which the node stays in.
	SubnetId *string `pulumi:"subnetId"`
	// Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
	Unschedulable *int `pulumi:"unschedulable"`
	// User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
	// CCS api documents.
	UserScript *string `pulumi:"userScript"`
	// Describe the wan ip of the node.
	WanIp *string `pulumi:"wanIp"`
	// The zone which the node stays in.
	ZoneId *string `pulumi:"zoneId"`
}

type ClusterInstanceState struct {
	// Describe the reason when node is in abnormal state(if it was).
	AbnormalReason pulumi.StringPtrInput
	// The network bandwidth of the node.
	Bandwidth pulumi.IntPtrInput
	// The network type of the node.
	BandwidthType pulumi.StringPtrInput
	// The id of the cluster.
	ClusterId pulumi.StringPtrInput
	// The cpu of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Cpu pulumi.IntPtrInput
	// The type of node needed by cvm.
	CvmType pulumi.StringPtrInput
	// The docker graph path is going to mounted.
	DockerGraphPath pulumi.StringPtrInput
	// An id identify the node, provided by cvm.
	InstanceId pulumi.StringPtrInput
	// The name ot node.
	InstanceName pulumi.StringPtrInput
	// The instance type of the node needed by cvm.
	InstanceType pulumi.StringPtrInput
	// Describe whether the node is normal.
	IsNormal pulumi.IntPtrInput
	// Describe whether the node enable the gateway capability.
	IsVpcGateway pulumi.IntPtrInput
	// The key_id of each node(if using key pair to access).
	KeyId pulumi.StringPtrInput
	// Describe the lan ip of the node.
	LanIp pulumi.StringPtrInput
	// The memory of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Mem pulumi.IntPtrInput
	// The path which volume is going to be mounted.
	MountTarget pulumi.StringPtrInput
	// The password of each node.
	Password pulumi.StringPtrInput
	// The puchase duration of the node needed by cvm.
	Period pulumi.IntPtrInput
	// Indicate whether wan ip is needed.
	RequireWanIp pulumi.IntPtrInput
	// The size of the root volume.
	RootSize pulumi.IntPtrInput
	// The type of the root volume. see more from CVM.
	RootType pulumi.StringPtrInput
	// The security group id.
	SgId pulumi.StringPtrInput
	// The size of the data volume.
	StorageSize pulumi.IntPtrInput
	// The type of the data volume. see more from CVM.
	StorageType pulumi.StringPtrInput
	// The subnet id which the node stays in.
	SubnetId pulumi.StringPtrInput
	// Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
	Unschedulable pulumi.IntPtrInput
	// User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
	// CCS api documents.
	UserScript pulumi.StringPtrInput
	// Describe the wan ip of the node.
	WanIp pulumi.StringPtrInput
	// The zone which the node stays in.
	ZoneId pulumi.StringPtrInput
}

func (ClusterInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterInstanceState)(nil)).Elem()
}

type clusterInstanceArgs struct {
	// The network bandwidth of the node.
	Bandwidth int `pulumi:"bandwidth"`
	// The network type of the node.
	BandwidthType string `pulumi:"bandwidthType"`
	// The id of the cluster.
	ClusterId string `pulumi:"clusterId"`
	// The cpu of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Cpu *int `pulumi:"cpu"`
	// The type of node needed by cvm.
	CvmType *string `pulumi:"cvmType"`
	// The docker graph path is going to mounted.
	DockerGraphPath *string `pulumi:"dockerGraphPath"`
	// The name ot node.
	InstanceName *string `pulumi:"instanceName"`
	// The instance type of the node needed by cvm.
	InstanceType *string `pulumi:"instanceType"`
	// Describe whether the node enable the gateway capability.
	IsVpcGateway int `pulumi:"isVpcGateway"`
	// The key_id of each node(if using key pair to access).
	KeyId *string `pulumi:"keyId"`
	// The memory of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Mem *int `pulumi:"mem"`
	// The path which volume is going to be mounted.
	MountTarget *string `pulumi:"mountTarget"`
	// The password of each node.
	Password *string `pulumi:"password"`
	// The puchase duration of the node needed by cvm.
	Period *int `pulumi:"period"`
	// Indicate whether wan ip is needed.
	RequireWanIp *int `pulumi:"requireWanIp"`
	// The size of the root volume.
	RootSize int `pulumi:"rootSize"`
	// The type of the root volume. see more from CVM.
	RootType *string `pulumi:"rootType"`
	// The security group id.
	SgId *string `pulumi:"sgId"`
	// The size of the data volume.
	StorageSize int `pulumi:"storageSize"`
	// The type of the data volume. see more from CVM.
	StorageType *string `pulumi:"storageType"`
	// The subnet id which the node stays in.
	SubnetId string `pulumi:"subnetId"`
	// Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
	Unschedulable *int `pulumi:"unschedulable"`
	// User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
	// CCS api documents.
	UserScript *string `pulumi:"userScript"`
	// The zone which the node stays in.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a ClusterInstance resource.
type ClusterInstanceArgs struct {
	// The network bandwidth of the node.
	Bandwidth pulumi.IntInput
	// The network type of the node.
	BandwidthType pulumi.StringInput
	// The id of the cluster.
	ClusterId pulumi.StringInput
	// The cpu of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Cpu pulumi.IntPtrInput
	// The type of node needed by cvm.
	CvmType pulumi.StringPtrInput
	// The docker graph path is going to mounted.
	DockerGraphPath pulumi.StringPtrInput
	// The name ot node.
	InstanceName pulumi.StringPtrInput
	// The instance type of the node needed by cvm.
	InstanceType pulumi.StringPtrInput
	// Describe whether the node enable the gateway capability.
	IsVpcGateway pulumi.IntInput
	// The key_id of each node(if using key pair to access).
	KeyId pulumi.StringPtrInput
	// The memory of the node.
	//
	// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
	Mem pulumi.IntPtrInput
	// The path which volume is going to be mounted.
	MountTarget pulumi.StringPtrInput
	// The password of each node.
	Password pulumi.StringPtrInput
	// The puchase duration of the node needed by cvm.
	Period pulumi.IntPtrInput
	// Indicate whether wan ip is needed.
	RequireWanIp pulumi.IntPtrInput
	// The size of the root volume.
	RootSize pulumi.IntInput
	// The type of the root volume. see more from CVM.
	RootType pulumi.StringPtrInput
	// The security group id.
	SgId pulumi.StringPtrInput
	// The size of the data volume.
	StorageSize pulumi.IntInput
	// The type of the data volume. see more from CVM.
	StorageType pulumi.StringPtrInput
	// The subnet id which the node stays in.
	SubnetId pulumi.StringInput
	// Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
	Unschedulable pulumi.IntPtrInput
	// User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
	// CCS api documents.
	UserScript pulumi.StringPtrInput
	// The zone which the node stays in.
	ZoneId pulumi.StringInput
}

func (ClusterInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterInstanceArgs)(nil)).Elem()
}

type ClusterInstanceInput interface {
	pulumi.Input

	ToClusterInstanceOutput() ClusterInstanceOutput
	ToClusterInstanceOutputWithContext(ctx context.Context) ClusterInstanceOutput
}

func (*ClusterInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterInstance)(nil)).Elem()
}

func (i *ClusterInstance) ToClusterInstanceOutput() ClusterInstanceOutput {
	return i.ToClusterInstanceOutputWithContext(context.Background())
}

func (i *ClusterInstance) ToClusterInstanceOutputWithContext(ctx context.Context) ClusterInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterInstanceOutput)
}

// ClusterInstanceArrayInput is an input type that accepts ClusterInstanceArray and ClusterInstanceArrayOutput values.
// You can construct a concrete instance of `ClusterInstanceArrayInput` via:
//
//	ClusterInstanceArray{ ClusterInstanceArgs{...} }
type ClusterInstanceArrayInput interface {
	pulumi.Input

	ToClusterInstanceArrayOutput() ClusterInstanceArrayOutput
	ToClusterInstanceArrayOutputWithContext(context.Context) ClusterInstanceArrayOutput
}

type ClusterInstanceArray []ClusterInstanceInput

func (ClusterInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterInstance)(nil)).Elem()
}

func (i ClusterInstanceArray) ToClusterInstanceArrayOutput() ClusterInstanceArrayOutput {
	return i.ToClusterInstanceArrayOutputWithContext(context.Background())
}

func (i ClusterInstanceArray) ToClusterInstanceArrayOutputWithContext(ctx context.Context) ClusterInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterInstanceArrayOutput)
}

// ClusterInstanceMapInput is an input type that accepts ClusterInstanceMap and ClusterInstanceMapOutput values.
// You can construct a concrete instance of `ClusterInstanceMapInput` via:
//
//	ClusterInstanceMap{ "key": ClusterInstanceArgs{...} }
type ClusterInstanceMapInput interface {
	pulumi.Input

	ToClusterInstanceMapOutput() ClusterInstanceMapOutput
	ToClusterInstanceMapOutputWithContext(context.Context) ClusterInstanceMapOutput
}

type ClusterInstanceMap map[string]ClusterInstanceInput

func (ClusterInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterInstance)(nil)).Elem()
}

func (i ClusterInstanceMap) ToClusterInstanceMapOutput() ClusterInstanceMapOutput {
	return i.ToClusterInstanceMapOutputWithContext(context.Background())
}

func (i ClusterInstanceMap) ToClusterInstanceMapOutputWithContext(ctx context.Context) ClusterInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterInstanceMapOutput)
}

type ClusterInstanceOutput struct{ *pulumi.OutputState }

func (ClusterInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterInstance)(nil)).Elem()
}

func (o ClusterInstanceOutput) ToClusterInstanceOutput() ClusterInstanceOutput {
	return o
}

func (o ClusterInstanceOutput) ToClusterInstanceOutputWithContext(ctx context.Context) ClusterInstanceOutput {
	return o
}

// Describe the reason when node is in abnormal state(if it was).
func (o ClusterInstanceOutput) AbnormalReason() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.StringOutput { return v.AbnormalReason }).(pulumi.StringOutput)
}

// The network bandwidth of the node.
func (o ClusterInstanceOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.IntOutput { return v.Bandwidth }).(pulumi.IntOutput)
}

// The network type of the node.
func (o ClusterInstanceOutput) BandwidthType() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.StringOutput { return v.BandwidthType }).(pulumi.StringOutput)
}

// The id of the cluster.
func (o ClusterInstanceOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The cpu of the node.
//
// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
func (o ClusterInstanceOutput) Cpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.IntPtrOutput { return v.Cpu }).(pulumi.IntPtrOutput)
}

// The type of node needed by cvm.
func (o ClusterInstanceOutput) CvmType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.StringPtrOutput { return v.CvmType }).(pulumi.StringPtrOutput)
}

// The docker graph path is going to mounted.
func (o ClusterInstanceOutput) DockerGraphPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.StringPtrOutput { return v.DockerGraphPath }).(pulumi.StringPtrOutput)
}

// An id identify the node, provided by cvm.
func (o ClusterInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The name ot node.
func (o ClusterInstanceOutput) InstanceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.StringPtrOutput { return v.InstanceName }).(pulumi.StringPtrOutput)
}

// The instance type of the node needed by cvm.
func (o ClusterInstanceOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.StringPtrOutput { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// Describe whether the node is normal.
func (o ClusterInstanceOutput) IsNormal() pulumi.IntOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.IntOutput { return v.IsNormal }).(pulumi.IntOutput)
}

// Describe whether the node enable the gateway capability.
func (o ClusterInstanceOutput) IsVpcGateway() pulumi.IntOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.IntOutput { return v.IsVpcGateway }).(pulumi.IntOutput)
}

// The key_id of each node(if using key pair to access).
func (o ClusterInstanceOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.StringPtrOutput { return v.KeyId }).(pulumi.StringPtrOutput)
}

// Describe the lan ip of the node.
func (o ClusterInstanceOutput) LanIp() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.StringOutput { return v.LanIp }).(pulumi.StringOutput)
}

// The memory of the node.
//
// Deprecated: It has been deprecated from version 1.16.0. Set 'instance_type' instead.
func (o ClusterInstanceOutput) Mem() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.IntPtrOutput { return v.Mem }).(pulumi.IntPtrOutput)
}

// The path which volume is going to be mounted.
func (o ClusterInstanceOutput) MountTarget() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.StringPtrOutput { return v.MountTarget }).(pulumi.StringPtrOutput)
}

// The password of each node.
func (o ClusterInstanceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The puchase duration of the node needed by cvm.
func (o ClusterInstanceOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// Indicate whether wan ip is needed.
func (o ClusterInstanceOutput) RequireWanIp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.IntPtrOutput { return v.RequireWanIp }).(pulumi.IntPtrOutput)
}

// The size of the root volume.
func (o ClusterInstanceOutput) RootSize() pulumi.IntOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.IntOutput { return v.RootSize }).(pulumi.IntOutput)
}

// The type of the root volume. see more from CVM.
func (o ClusterInstanceOutput) RootType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.StringPtrOutput { return v.RootType }).(pulumi.StringPtrOutput)
}

// The security group id.
func (o ClusterInstanceOutput) SgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.StringPtrOutput { return v.SgId }).(pulumi.StringPtrOutput)
}

// The size of the data volume.
func (o ClusterInstanceOutput) StorageSize() pulumi.IntOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.IntOutput { return v.StorageSize }).(pulumi.IntOutput)
}

// The type of the data volume. see more from CVM.
func (o ClusterInstanceOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.StringPtrOutput { return v.StorageType }).(pulumi.StringPtrOutput)
}

// The subnet id which the node stays in.
func (o ClusterInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Determine whether the node will be schedulable. 0 is the default meaning node will be schedulable. 1 for unschedulable.
func (o ClusterInstanceOutput) Unschedulable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.IntPtrOutput { return v.Unschedulable }).(pulumi.IntPtrOutput)
}

// User defined script in a base64-format. The script runs after the kubernetes component is ready on node. see more from
// CCS api documents.
func (o ClusterInstanceOutput) UserScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.StringPtrOutput { return v.UserScript }).(pulumi.StringPtrOutput)
}

// Describe the wan ip of the node.
func (o ClusterInstanceOutput) WanIp() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.StringOutput { return v.WanIp }).(pulumi.StringOutput)
}

// The zone which the node stays in.
func (o ClusterInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterInstance) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type ClusterInstanceArrayOutput struct{ *pulumi.OutputState }

func (ClusterInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterInstance)(nil)).Elem()
}

func (o ClusterInstanceArrayOutput) ToClusterInstanceArrayOutput() ClusterInstanceArrayOutput {
	return o
}

func (o ClusterInstanceArrayOutput) ToClusterInstanceArrayOutputWithContext(ctx context.Context) ClusterInstanceArrayOutput {
	return o
}

func (o ClusterInstanceArrayOutput) Index(i pulumi.IntInput) ClusterInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterInstance {
		return vs[0].([]*ClusterInstance)[vs[1].(int)]
	}).(ClusterInstanceOutput)
}

type ClusterInstanceMapOutput struct{ *pulumi.OutputState }

func (ClusterInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterInstance)(nil)).Elem()
}

func (o ClusterInstanceMapOutput) ToClusterInstanceMapOutput() ClusterInstanceMapOutput {
	return o
}

func (o ClusterInstanceMapOutput) ToClusterInstanceMapOutputWithContext(ctx context.Context) ClusterInstanceMapOutput {
	return o
}

func (o ClusterInstanceMapOutput) MapIndex(k pulumi.StringInput) ClusterInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterInstance {
		return vs[0].(map[string]*ClusterInstance)[vs[1].(string)]
	}).(ClusterInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInstanceInput)(nil)).Elem(), &ClusterInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInstanceArrayInput)(nil)).Elem(), ClusterInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInstanceMapInput)(nil)).Elem(), ClusterInstanceMap{})
	pulumi.RegisterOutputType(ClusterInstanceOutput{})
	pulumi.RegisterOutputType(ClusterInstanceArrayOutput{})
	pulumi.RegisterOutputType(ClusterInstanceMapOutput{})
}
