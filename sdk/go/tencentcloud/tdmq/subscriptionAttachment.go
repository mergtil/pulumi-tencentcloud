// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tdmq

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SubscriptionAttachment struct {
	pulumi.CustomResourceState

	// Whether to automatically create dead letters and retry topics, True means to create, False means not to create, the
	// default is to automatically create dead letters and retry topics.
	AutoCreatePolicyTopic pulumi.BoolPtrOutput `pulumi:"autoCreatePolicyTopic"`
	// ID of the Pulsar cluster.
	ClusterId pulumi.StringPtrOutput `pulumi:"clusterId"`
	// Environment (namespace) name.
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// Remarks, within 128 characters.
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
	// Subscriber name, no more than 128 characters.
	SubscriptionName pulumi.StringOutput `pulumi:"subscriptionName"`
	// topic name.
	TopicName pulumi.StringOutput `pulumi:"topicName"`
}

// NewSubscriptionAttachment registers a new resource with the given unique name, arguments, and options.
func NewSubscriptionAttachment(ctx *pulumi.Context,
	name string, args *SubscriptionAttachmentArgs, opts ...pulumi.ResourceOption) (*SubscriptionAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.SubscriptionName == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionName'")
	}
	if args.TopicName == nil {
		return nil, errors.New("invalid value for required argument 'TopicName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubscriptionAttachment
	err := ctx.RegisterResource("tencentcloud:Tdmq/subscriptionAttachment:SubscriptionAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubscriptionAttachment gets an existing SubscriptionAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubscriptionAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubscriptionAttachmentState, opts ...pulumi.ResourceOption) (*SubscriptionAttachment, error) {
	var resource SubscriptionAttachment
	err := ctx.ReadResource("tencentcloud:Tdmq/subscriptionAttachment:SubscriptionAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubscriptionAttachment resources.
type subscriptionAttachmentState struct {
	// Whether to automatically create dead letters and retry topics, True means to create, False means not to create, the
	// default is to automatically create dead letters and retry topics.
	AutoCreatePolicyTopic *bool `pulumi:"autoCreatePolicyTopic"`
	// ID of the Pulsar cluster.
	ClusterId *string `pulumi:"clusterId"`
	// Environment (namespace) name.
	EnvironmentId *string `pulumi:"environmentId"`
	// Remarks, within 128 characters.
	Remark *string `pulumi:"remark"`
	// Subscriber name, no more than 128 characters.
	SubscriptionName *string `pulumi:"subscriptionName"`
	// topic name.
	TopicName *string `pulumi:"topicName"`
}

type SubscriptionAttachmentState struct {
	// Whether to automatically create dead letters and retry topics, True means to create, False means not to create, the
	// default is to automatically create dead letters and retry topics.
	AutoCreatePolicyTopic pulumi.BoolPtrInput
	// ID of the Pulsar cluster.
	ClusterId pulumi.StringPtrInput
	// Environment (namespace) name.
	EnvironmentId pulumi.StringPtrInput
	// Remarks, within 128 characters.
	Remark pulumi.StringPtrInput
	// Subscriber name, no more than 128 characters.
	SubscriptionName pulumi.StringPtrInput
	// topic name.
	TopicName pulumi.StringPtrInput
}

func (SubscriptionAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionAttachmentState)(nil)).Elem()
}

type subscriptionAttachmentArgs struct {
	// Whether to automatically create dead letters and retry topics, True means to create, False means not to create, the
	// default is to automatically create dead letters and retry topics.
	AutoCreatePolicyTopic *bool `pulumi:"autoCreatePolicyTopic"`
	// ID of the Pulsar cluster.
	ClusterId *string `pulumi:"clusterId"`
	// Environment (namespace) name.
	EnvironmentId string `pulumi:"environmentId"`
	// Remarks, within 128 characters.
	Remark *string `pulumi:"remark"`
	// Subscriber name, no more than 128 characters.
	SubscriptionName string `pulumi:"subscriptionName"`
	// topic name.
	TopicName string `pulumi:"topicName"`
}

// The set of arguments for constructing a SubscriptionAttachment resource.
type SubscriptionAttachmentArgs struct {
	// Whether to automatically create dead letters and retry topics, True means to create, False means not to create, the
	// default is to automatically create dead letters and retry topics.
	AutoCreatePolicyTopic pulumi.BoolPtrInput
	// ID of the Pulsar cluster.
	ClusterId pulumi.StringPtrInput
	// Environment (namespace) name.
	EnvironmentId pulumi.StringInput
	// Remarks, within 128 characters.
	Remark pulumi.StringPtrInput
	// Subscriber name, no more than 128 characters.
	SubscriptionName pulumi.StringInput
	// topic name.
	TopicName pulumi.StringInput
}

func (SubscriptionAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subscriptionAttachmentArgs)(nil)).Elem()
}

type SubscriptionAttachmentInput interface {
	pulumi.Input

	ToSubscriptionAttachmentOutput() SubscriptionAttachmentOutput
	ToSubscriptionAttachmentOutputWithContext(ctx context.Context) SubscriptionAttachmentOutput
}

func (*SubscriptionAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionAttachment)(nil)).Elem()
}

func (i *SubscriptionAttachment) ToSubscriptionAttachmentOutput() SubscriptionAttachmentOutput {
	return i.ToSubscriptionAttachmentOutputWithContext(context.Background())
}

func (i *SubscriptionAttachment) ToSubscriptionAttachmentOutputWithContext(ctx context.Context) SubscriptionAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionAttachmentOutput)
}

// SubscriptionAttachmentArrayInput is an input type that accepts SubscriptionAttachmentArray and SubscriptionAttachmentArrayOutput values.
// You can construct a concrete instance of `SubscriptionAttachmentArrayInput` via:
//
//	SubscriptionAttachmentArray{ SubscriptionAttachmentArgs{...} }
type SubscriptionAttachmentArrayInput interface {
	pulumi.Input

	ToSubscriptionAttachmentArrayOutput() SubscriptionAttachmentArrayOutput
	ToSubscriptionAttachmentArrayOutputWithContext(context.Context) SubscriptionAttachmentArrayOutput
}

type SubscriptionAttachmentArray []SubscriptionAttachmentInput

func (SubscriptionAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionAttachment)(nil)).Elem()
}

func (i SubscriptionAttachmentArray) ToSubscriptionAttachmentArrayOutput() SubscriptionAttachmentArrayOutput {
	return i.ToSubscriptionAttachmentArrayOutputWithContext(context.Background())
}

func (i SubscriptionAttachmentArray) ToSubscriptionAttachmentArrayOutputWithContext(ctx context.Context) SubscriptionAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionAttachmentArrayOutput)
}

// SubscriptionAttachmentMapInput is an input type that accepts SubscriptionAttachmentMap and SubscriptionAttachmentMapOutput values.
// You can construct a concrete instance of `SubscriptionAttachmentMapInput` via:
//
//	SubscriptionAttachmentMap{ "key": SubscriptionAttachmentArgs{...} }
type SubscriptionAttachmentMapInput interface {
	pulumi.Input

	ToSubscriptionAttachmentMapOutput() SubscriptionAttachmentMapOutput
	ToSubscriptionAttachmentMapOutputWithContext(context.Context) SubscriptionAttachmentMapOutput
}

type SubscriptionAttachmentMap map[string]SubscriptionAttachmentInput

func (SubscriptionAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionAttachment)(nil)).Elem()
}

func (i SubscriptionAttachmentMap) ToSubscriptionAttachmentMapOutput() SubscriptionAttachmentMapOutput {
	return i.ToSubscriptionAttachmentMapOutputWithContext(context.Background())
}

func (i SubscriptionAttachmentMap) ToSubscriptionAttachmentMapOutputWithContext(ctx context.Context) SubscriptionAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubscriptionAttachmentMapOutput)
}

type SubscriptionAttachmentOutput struct{ *pulumi.OutputState }

func (SubscriptionAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubscriptionAttachment)(nil)).Elem()
}

func (o SubscriptionAttachmentOutput) ToSubscriptionAttachmentOutput() SubscriptionAttachmentOutput {
	return o
}

func (o SubscriptionAttachmentOutput) ToSubscriptionAttachmentOutputWithContext(ctx context.Context) SubscriptionAttachmentOutput {
	return o
}

// Whether to automatically create dead letters and retry topics, True means to create, False means not to create, the
// default is to automatically create dead letters and retry topics.
func (o SubscriptionAttachmentOutput) AutoCreatePolicyTopic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SubscriptionAttachment) pulumi.BoolPtrOutput { return v.AutoCreatePolicyTopic }).(pulumi.BoolPtrOutput)
}

// ID of the Pulsar cluster.
func (o SubscriptionAttachmentOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionAttachment) pulumi.StringPtrOutput { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// Environment (namespace) name.
func (o SubscriptionAttachmentOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionAttachment) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// Remarks, within 128 characters.
func (o SubscriptionAttachmentOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubscriptionAttachment) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

// Subscriber name, no more than 128 characters.
func (o SubscriptionAttachmentOutput) SubscriptionName() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionAttachment) pulumi.StringOutput { return v.SubscriptionName }).(pulumi.StringOutput)
}

// topic name.
func (o SubscriptionAttachmentOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *SubscriptionAttachment) pulumi.StringOutput { return v.TopicName }).(pulumi.StringOutput)
}

type SubscriptionAttachmentArrayOutput struct{ *pulumi.OutputState }

func (SubscriptionAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubscriptionAttachment)(nil)).Elem()
}

func (o SubscriptionAttachmentArrayOutput) ToSubscriptionAttachmentArrayOutput() SubscriptionAttachmentArrayOutput {
	return o
}

func (o SubscriptionAttachmentArrayOutput) ToSubscriptionAttachmentArrayOutputWithContext(ctx context.Context) SubscriptionAttachmentArrayOutput {
	return o
}

func (o SubscriptionAttachmentArrayOutput) Index(i pulumi.IntInput) SubscriptionAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubscriptionAttachment {
		return vs[0].([]*SubscriptionAttachment)[vs[1].(int)]
	}).(SubscriptionAttachmentOutput)
}

type SubscriptionAttachmentMapOutput struct{ *pulumi.OutputState }

func (SubscriptionAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubscriptionAttachment)(nil)).Elem()
}

func (o SubscriptionAttachmentMapOutput) ToSubscriptionAttachmentMapOutput() SubscriptionAttachmentMapOutput {
	return o
}

func (o SubscriptionAttachmentMapOutput) ToSubscriptionAttachmentMapOutputWithContext(ctx context.Context) SubscriptionAttachmentMapOutput {
	return o
}

func (o SubscriptionAttachmentMapOutput) MapIndex(k pulumi.StringInput) SubscriptionAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubscriptionAttachment {
		return vs[0].(map[string]*SubscriptionAttachment)[vs[1].(string)]
	}).(SubscriptionAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionAttachmentInput)(nil)).Elem(), &SubscriptionAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionAttachmentArrayInput)(nil)).Elem(), SubscriptionAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubscriptionAttachmentMapInput)(nil)).Elem(), SubscriptionAttachmentMap{})
	pulumi.RegisterOutputType(SubscriptionAttachmentOutput{})
	pulumi.RegisterOutputType(SubscriptionAttachmentArrayOutput{})
	pulumi.RegisterOutputType(SubscriptionAttachmentMapOutput{})
}
