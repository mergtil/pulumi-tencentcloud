// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tdmq

import (
	"context"
	"reflect"

	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupRocketmqTopic(ctx *pulumi.Context, args *LookupRocketmqTopicArgs, opts ...pulumi.InvokeOption) (*LookupRocketmqTopicResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRocketmqTopicResult
	err := ctx.Invoke("tencentcloud:Tdmq/getRocketmqTopic:getRocketmqTopic", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRocketmqTopic.
type LookupRocketmqTopicArgs struct {
	ClusterId        string   `pulumi:"clusterId"`
	FilterName       *string  `pulumi:"filterName"`
	FilterTypes      []string `pulumi:"filterTypes"`
	NamespaceId      string   `pulumi:"namespaceId"`
	ResultOutputFile *string  `pulumi:"resultOutputFile"`
}

// A collection of values returned by getRocketmqTopic.
type LookupRocketmqTopicResult struct {
	ClusterId   string   `pulumi:"clusterId"`
	FilterName  *string  `pulumi:"filterName"`
	FilterTypes []string `pulumi:"filterTypes"`
	// The provider-assigned unique ID for this managed resource.
	Id               string                  `pulumi:"id"`
	NamespaceId      string                  `pulumi:"namespaceId"`
	ResultOutputFile *string                 `pulumi:"resultOutputFile"`
	Topics           []GetRocketmqTopicTopic `pulumi:"topics"`
}

func LookupRocketmqTopicOutput(ctx *pulumi.Context, args LookupRocketmqTopicOutputArgs, opts ...pulumi.InvokeOption) LookupRocketmqTopicResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRocketmqTopicResult, error) {
			args := v.(LookupRocketmqTopicArgs)
			r, err := LookupRocketmqTopic(ctx, &args, opts...)
			var s LookupRocketmqTopicResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRocketmqTopicResultOutput)
}

// A collection of arguments for invoking getRocketmqTopic.
type LookupRocketmqTopicOutputArgs struct {
	ClusterId        pulumi.StringInput      `pulumi:"clusterId"`
	FilterName       pulumi.StringPtrInput   `pulumi:"filterName"`
	FilterTypes      pulumi.StringArrayInput `pulumi:"filterTypes"`
	NamespaceId      pulumi.StringInput      `pulumi:"namespaceId"`
	ResultOutputFile pulumi.StringPtrInput   `pulumi:"resultOutputFile"`
}

func (LookupRocketmqTopicOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRocketmqTopicArgs)(nil)).Elem()
}

// A collection of values returned by getRocketmqTopic.
type LookupRocketmqTopicResultOutput struct{ *pulumi.OutputState }

func (LookupRocketmqTopicResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRocketmqTopicResult)(nil)).Elem()
}

func (o LookupRocketmqTopicResultOutput) ToLookupRocketmqTopicResultOutput() LookupRocketmqTopicResultOutput {
	return o
}

func (o LookupRocketmqTopicResultOutput) ToLookupRocketmqTopicResultOutputWithContext(ctx context.Context) LookupRocketmqTopicResultOutput {
	return o
}

func (o LookupRocketmqTopicResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRocketmqTopicResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

func (o LookupRocketmqTopicResultOutput) FilterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRocketmqTopicResult) *string { return v.FilterName }).(pulumi.StringPtrOutput)
}

func (o LookupRocketmqTopicResultOutput) FilterTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRocketmqTopicResult) []string { return v.FilterTypes }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRocketmqTopicResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRocketmqTopicResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRocketmqTopicResultOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRocketmqTopicResult) string { return v.NamespaceId }).(pulumi.StringOutput)
}

func (o LookupRocketmqTopicResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRocketmqTopicResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o LookupRocketmqTopicResultOutput) Topics() GetRocketmqTopicTopicArrayOutput {
	return o.ApplyT(func(v LookupRocketmqTopicResult) []GetRocketmqTopicTopic { return v.Topics }).(GetRocketmqTopicTopicArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRocketmqTopicResultOutput{})
}
