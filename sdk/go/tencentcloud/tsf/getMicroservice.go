// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tsf

import (
	"context"
	"reflect"

	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupMicroservice(ctx *pulumi.Context, args *LookupMicroserviceArgs, opts ...pulumi.InvokeOption) (*LookupMicroserviceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMicroserviceResult
	err := ctx.Invoke("tencentcloud:Tsf/getMicroservice:getMicroservice", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMicroservice.
type LookupMicroserviceArgs struct {
	MicroserviceIdLists   []string `pulumi:"microserviceIdLists"`
	MicroserviceNameLists []string `pulumi:"microserviceNameLists"`
	NamespaceId           string   `pulumi:"namespaceId"`
	ResultOutputFile      *string  `pulumi:"resultOutputFile"`
	Statuses              []string `pulumi:"statuses"`
}

// A collection of values returned by getMicroservice.
type LookupMicroserviceResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id                    string                  `pulumi:"id"`
	MicroserviceIdLists   []string                `pulumi:"microserviceIdLists"`
	MicroserviceNameLists []string                `pulumi:"microserviceNameLists"`
	NamespaceId           string                  `pulumi:"namespaceId"`
	ResultOutputFile      *string                 `pulumi:"resultOutputFile"`
	Results               []GetMicroserviceResult `pulumi:"results"`
	Statuses              []string                `pulumi:"statuses"`
}

func LookupMicroserviceOutput(ctx *pulumi.Context, args LookupMicroserviceOutputArgs, opts ...pulumi.InvokeOption) LookupMicroserviceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMicroserviceResult, error) {
			args := v.(LookupMicroserviceArgs)
			r, err := LookupMicroservice(ctx, &args, opts...)
			var s LookupMicroserviceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMicroserviceResultOutput)
}

// A collection of arguments for invoking getMicroservice.
type LookupMicroserviceOutputArgs struct {
	MicroserviceIdLists   pulumi.StringArrayInput `pulumi:"microserviceIdLists"`
	MicroserviceNameLists pulumi.StringArrayInput `pulumi:"microserviceNameLists"`
	NamespaceId           pulumi.StringInput      `pulumi:"namespaceId"`
	ResultOutputFile      pulumi.StringPtrInput   `pulumi:"resultOutputFile"`
	Statuses              pulumi.StringArrayInput `pulumi:"statuses"`
}

func (LookupMicroserviceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMicroserviceArgs)(nil)).Elem()
}

// A collection of values returned by getMicroservice.
type LookupMicroserviceResultOutput struct{ *pulumi.OutputState }

func (LookupMicroserviceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMicroserviceResult)(nil)).Elem()
}

func (o LookupMicroserviceResultOutput) ToLookupMicroserviceResultOutput() LookupMicroserviceResultOutput {
	return o
}

func (o LookupMicroserviceResultOutput) ToLookupMicroserviceResultOutputWithContext(ctx context.Context) LookupMicroserviceResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMicroserviceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMicroserviceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupMicroserviceResultOutput) MicroserviceIdLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMicroserviceResult) []string { return v.MicroserviceIdLists }).(pulumi.StringArrayOutput)
}

func (o LookupMicroserviceResultOutput) MicroserviceNameLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMicroserviceResult) []string { return v.MicroserviceNameLists }).(pulumi.StringArrayOutput)
}

func (o LookupMicroserviceResultOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMicroserviceResult) string { return v.NamespaceId }).(pulumi.StringOutput)
}

func (o LookupMicroserviceResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMicroserviceResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o LookupMicroserviceResultOutput) Results() GetMicroserviceResultArrayOutput {
	return o.ApplyT(func(v LookupMicroserviceResult) []GetMicroserviceResult { return v.Results }).(GetMicroserviceResultArrayOutput)
}

func (o LookupMicroserviceResultOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMicroserviceResult) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMicroserviceResultOutput{})
}
