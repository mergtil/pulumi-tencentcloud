// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Listener struct {
	pulumi.CustomResourceState

	// ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the
	// ssl mode is `MUTUAL`.
	CertificateCaId pulumi.StringPtrOutput `pulumi:"certificateCaId"`
	// ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it
	// is available.
	CertificateId pulumi.StringPtrOutput `pulumi:"certificateId"`
	// Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL`
	// protocol and must be set when it is available.
	CertificateSslMode pulumi.StringPtrOutput `pulumi:"certificateSslMode"`
	// ID of the CLB.
	ClbId pulumi.StringOutput `pulumi:"clbId"`
	// Health check protocol. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is
	// required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`.
	HealthCheckContextType pulumi.StringPtrOutput `pulumi:"healthCheckContextType"`
	// Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3
	// consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener
	// allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	HealthCheckHealthNum pulumi.IntOutput `pulumi:"healthCheckHealthNum"`
	// HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of `health_check_type` of the health
	// check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means
	// http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx.If you want multiple return codes to indicate
	// health, need to add the corresponding values.
	HealthCheckHttpCode pulumi.IntPtrOutput `pulumi:"healthCheckHttpCode"`
	// HTTP health check domain of TCP listener.
	HealthCheckHttpDomain pulumi.StringPtrOutput `pulumi:"healthCheckHttpDomain"`
	// HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`.
	HealthCheckHttpMethod pulumi.StringOutput `pulumi:"healthCheckHttpMethod"`
	// HTTP health check path of TCP listener.
	HealthCheckHttpPath pulumi.StringPtrOutput `pulumi:"healthCheckHttpPath"`
	// The HTTP version of the backend service. When the value of `health_check_type` of the health check protocol is `HTTP`,
	// this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`.
	HealthCheckHttpVersion pulumi.StringPtrOutput `pulumi:"healthCheckHttpVersion"`
	// Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL
	// listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckIntervalTime pulumi.IntOutput `pulumi:"healthCheckIntervalTime"`
	// The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is
	// recommended to leave it blank. Only applicable to TCP/UDP listener.
	HealthCheckPort pulumi.IntPtrOutput `pulumi:"healthCheckPort"`
	// It represents the result returned by the health check. When the value of `health_check_type` of the health check
	// protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500.
	// When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in
	// `0123456789ABCDEF` and the length must be even digits.
	HealthCheckRecvContext pulumi.StringPtrOutput `pulumi:"healthCheckRecvContext"`
	// It represents the content of the request sent by the health check. When the value of `health_check_type` of the health
	// check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is
	// 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected
	// in `0123456789ABCDEF` and the length must be even digits.
	HealthCheckSendContext pulumi.StringPtrOutput `pulumi:"healthCheckSendContext"`
	// Indicates whether health check is enabled.
	HealthCheckSwitch pulumi.BoolOutput `pulumi:"healthCheckSwitch"`
	// Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less
	// than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol.
	HealthCheckTimeOut pulumi.IntOutput `pulumi:"healthCheckTimeOut"`
	// Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`.
	HealthCheckType pulumi.StringOutput `pulumi:"healthCheckType"`
	// Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3
	// consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows
	// direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckUnhealthNum pulumi.IntOutput `pulumi:"healthCheckUnhealthNum"`
	// ID of this CLB listener.
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and
	// hyphen '-'.
	ListenerName pulumi.StringOutput `pulumi:"listenerName"`
	// Port of the CLB listener.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`, `TCP_SSL` and `QUIC`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The
	// listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener
	// allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	Scheduler pulumi.StringPtrOutput `pulumi:"scheduler"`
	// Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not
	// available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS
	// listener needs to be configured in `tencentcloud_clb_listener_rule`.
	SessionExpireTime pulumi.IntPtrOutput `pulumi:"sessionExpireTime"`
	// Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for
	// each rule in `tencentcloud_clb_listener_rule`, otherwise all rules have a certificate.
	SniSwitch pulumi.BoolPtrOutput `pulumi:"sniSwitch"`
	// Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to
	// bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in
	// tencentcloud_clb_listener_rule.
	TargetType pulumi.StringOutput `pulumi:"targetType"`
}

// NewListener registers a new resource with the given unique name, arguments, and options.
func NewListener(ctx *pulumi.Context,
	name string, args *ListenerArgs, opts ...pulumi.ResourceOption) (*Listener, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClbId == nil {
		return nil, errors.New("invalid value for required argument 'ClbId'")
	}
	if args.ListenerName == nil {
		return nil, errors.New("invalid value for required argument 'ListenerName'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Listener
	err := ctx.RegisterResource("tencentcloud:Clb/listener:Listener", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListener gets an existing Listener resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListener(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListenerState, opts ...pulumi.ResourceOption) (*Listener, error) {
	var resource Listener
	err := ctx.ReadResource("tencentcloud:Clb/listener:Listener", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Listener resources.
type listenerState struct {
	// ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the
	// ssl mode is `MUTUAL`.
	CertificateCaId *string `pulumi:"certificateCaId"`
	// ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it
	// is available.
	CertificateId *string `pulumi:"certificateId"`
	// Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL`
	// protocol and must be set when it is available.
	CertificateSslMode *string `pulumi:"certificateSslMode"`
	// ID of the CLB.
	ClbId *string `pulumi:"clbId"`
	// Health check protocol. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is
	// required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`.
	HealthCheckContextType *string `pulumi:"healthCheckContextType"`
	// Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3
	// consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener
	// allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	HealthCheckHealthNum *int `pulumi:"healthCheckHealthNum"`
	// HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of `health_check_type` of the health
	// check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means
	// http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx.If you want multiple return codes to indicate
	// health, need to add the corresponding values.
	HealthCheckHttpCode *int `pulumi:"healthCheckHttpCode"`
	// HTTP health check domain of TCP listener.
	HealthCheckHttpDomain *string `pulumi:"healthCheckHttpDomain"`
	// HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`.
	HealthCheckHttpMethod *string `pulumi:"healthCheckHttpMethod"`
	// HTTP health check path of TCP listener.
	HealthCheckHttpPath *string `pulumi:"healthCheckHttpPath"`
	// The HTTP version of the backend service. When the value of `health_check_type` of the health check protocol is `HTTP`,
	// this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`.
	HealthCheckHttpVersion *string `pulumi:"healthCheckHttpVersion"`
	// Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL
	// listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckIntervalTime *int `pulumi:"healthCheckIntervalTime"`
	// The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is
	// recommended to leave it blank. Only applicable to TCP/UDP listener.
	HealthCheckPort *int `pulumi:"healthCheckPort"`
	// It represents the result returned by the health check. When the value of `health_check_type` of the health check
	// protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500.
	// When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in
	// `0123456789ABCDEF` and the length must be even digits.
	HealthCheckRecvContext *string `pulumi:"healthCheckRecvContext"`
	// It represents the content of the request sent by the health check. When the value of `health_check_type` of the health
	// check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is
	// 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected
	// in `0123456789ABCDEF` and the length must be even digits.
	HealthCheckSendContext *string `pulumi:"healthCheckSendContext"`
	// Indicates whether health check is enabled.
	HealthCheckSwitch *bool `pulumi:"healthCheckSwitch"`
	// Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less
	// than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol.
	HealthCheckTimeOut *int `pulumi:"healthCheckTimeOut"`
	// Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`.
	HealthCheckType *string `pulumi:"healthCheckType"`
	// Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3
	// consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows
	// direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckUnhealthNum *int `pulumi:"healthCheckUnhealthNum"`
	// ID of this CLB listener.
	ListenerId *string `pulumi:"listenerId"`
	// Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and
	// hyphen '-'.
	ListenerName *string `pulumi:"listenerName"`
	// Port of the CLB listener.
	Port *int `pulumi:"port"`
	// Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`, `TCP_SSL` and `QUIC`.
	Protocol *string `pulumi:"protocol"`
	// Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The
	// listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener
	// allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	Scheduler *string `pulumi:"scheduler"`
	// Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not
	// available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS
	// listener needs to be configured in `tencentcloud_clb_listener_rule`.
	SessionExpireTime *int `pulumi:"sessionExpireTime"`
	// Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for
	// each rule in `tencentcloud_clb_listener_rule`, otherwise all rules have a certificate.
	SniSwitch *bool `pulumi:"sniSwitch"`
	// Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to
	// bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in
	// tencentcloud_clb_listener_rule.
	TargetType *string `pulumi:"targetType"`
}

type ListenerState struct {
	// ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the
	// ssl mode is `MUTUAL`.
	CertificateCaId pulumi.StringPtrInput
	// ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it
	// is available.
	CertificateId pulumi.StringPtrInput
	// Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL`
	// protocol and must be set when it is available.
	CertificateSslMode pulumi.StringPtrInput
	// ID of the CLB.
	ClbId pulumi.StringPtrInput
	// Health check protocol. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is
	// required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`.
	HealthCheckContextType pulumi.StringPtrInput
	// Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3
	// consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener
	// allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	HealthCheckHealthNum pulumi.IntPtrInput
	// HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of `health_check_type` of the health
	// check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means
	// http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx.If you want multiple return codes to indicate
	// health, need to add the corresponding values.
	HealthCheckHttpCode pulumi.IntPtrInput
	// HTTP health check domain of TCP listener.
	HealthCheckHttpDomain pulumi.StringPtrInput
	// HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`.
	HealthCheckHttpMethod pulumi.StringPtrInput
	// HTTP health check path of TCP listener.
	HealthCheckHttpPath pulumi.StringPtrInput
	// The HTTP version of the backend service. When the value of `health_check_type` of the health check protocol is `HTTP`,
	// this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`.
	HealthCheckHttpVersion pulumi.StringPtrInput
	// Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL
	// listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckIntervalTime pulumi.IntPtrInput
	// The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is
	// recommended to leave it blank. Only applicable to TCP/UDP listener.
	HealthCheckPort pulumi.IntPtrInput
	// It represents the result returned by the health check. When the value of `health_check_type` of the health check
	// protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500.
	// When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in
	// `0123456789ABCDEF` and the length must be even digits.
	HealthCheckRecvContext pulumi.StringPtrInput
	// It represents the content of the request sent by the health check. When the value of `health_check_type` of the health
	// check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is
	// 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected
	// in `0123456789ABCDEF` and the length must be even digits.
	HealthCheckSendContext pulumi.StringPtrInput
	// Indicates whether health check is enabled.
	HealthCheckSwitch pulumi.BoolPtrInput
	// Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less
	// than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol.
	HealthCheckTimeOut pulumi.IntPtrInput
	// Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`.
	HealthCheckType pulumi.StringPtrInput
	// Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3
	// consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows
	// direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckUnhealthNum pulumi.IntPtrInput
	// ID of this CLB listener.
	ListenerId pulumi.StringPtrInput
	// Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and
	// hyphen '-'.
	ListenerName pulumi.StringPtrInput
	// Port of the CLB listener.
	Port pulumi.IntPtrInput
	// Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`, `TCP_SSL` and `QUIC`.
	Protocol pulumi.StringPtrInput
	// Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The
	// listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener
	// allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	Scheduler pulumi.StringPtrInput
	// Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not
	// available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS
	// listener needs to be configured in `tencentcloud_clb_listener_rule`.
	SessionExpireTime pulumi.IntPtrInput
	// Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for
	// each rule in `tencentcloud_clb_listener_rule`, otherwise all rules have a certificate.
	SniSwitch pulumi.BoolPtrInput
	// Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to
	// bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in
	// tencentcloud_clb_listener_rule.
	TargetType pulumi.StringPtrInput
}

func (ListenerState) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerState)(nil)).Elem()
}

type listenerArgs struct {
	// ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the
	// ssl mode is `MUTUAL`.
	CertificateCaId *string `pulumi:"certificateCaId"`
	// ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it
	// is available.
	CertificateId *string `pulumi:"certificateId"`
	// Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL`
	// protocol and must be set when it is available.
	CertificateSslMode *string `pulumi:"certificateSslMode"`
	// ID of the CLB.
	ClbId string `pulumi:"clbId"`
	// Health check protocol. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is
	// required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`.
	HealthCheckContextType *string `pulumi:"healthCheckContextType"`
	// Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3
	// consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener
	// allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	HealthCheckHealthNum *int `pulumi:"healthCheckHealthNum"`
	// HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of `health_check_type` of the health
	// check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means
	// http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx.If you want multiple return codes to indicate
	// health, need to add the corresponding values.
	HealthCheckHttpCode *int `pulumi:"healthCheckHttpCode"`
	// HTTP health check domain of TCP listener.
	HealthCheckHttpDomain *string `pulumi:"healthCheckHttpDomain"`
	// HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`.
	HealthCheckHttpMethod *string `pulumi:"healthCheckHttpMethod"`
	// HTTP health check path of TCP listener.
	HealthCheckHttpPath *string `pulumi:"healthCheckHttpPath"`
	// The HTTP version of the backend service. When the value of `health_check_type` of the health check protocol is `HTTP`,
	// this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`.
	HealthCheckHttpVersion *string `pulumi:"healthCheckHttpVersion"`
	// Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL
	// listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckIntervalTime *int `pulumi:"healthCheckIntervalTime"`
	// The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is
	// recommended to leave it blank. Only applicable to TCP/UDP listener.
	HealthCheckPort *int `pulumi:"healthCheckPort"`
	// It represents the result returned by the health check. When the value of `health_check_type` of the health check
	// protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500.
	// When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in
	// `0123456789ABCDEF` and the length must be even digits.
	HealthCheckRecvContext *string `pulumi:"healthCheckRecvContext"`
	// It represents the content of the request sent by the health check. When the value of `health_check_type` of the health
	// check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is
	// 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected
	// in `0123456789ABCDEF` and the length must be even digits.
	HealthCheckSendContext *string `pulumi:"healthCheckSendContext"`
	// Indicates whether health check is enabled.
	HealthCheckSwitch *bool `pulumi:"healthCheckSwitch"`
	// Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less
	// than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol.
	HealthCheckTimeOut *int `pulumi:"healthCheckTimeOut"`
	// Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`.
	HealthCheckType *string `pulumi:"healthCheckType"`
	// Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3
	// consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows
	// direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckUnhealthNum *int `pulumi:"healthCheckUnhealthNum"`
	// Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and
	// hyphen '-'.
	ListenerName string `pulumi:"listenerName"`
	// Port of the CLB listener.
	Port *int `pulumi:"port"`
	// Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`, `TCP_SSL` and `QUIC`.
	Protocol string `pulumi:"protocol"`
	// Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The
	// listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener
	// allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	Scheduler *string `pulumi:"scheduler"`
	// Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not
	// available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS
	// listener needs to be configured in `tencentcloud_clb_listener_rule`.
	SessionExpireTime *int `pulumi:"sessionExpireTime"`
	// Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for
	// each rule in `tencentcloud_clb_listener_rule`, otherwise all rules have a certificate.
	SniSwitch *bool `pulumi:"sniSwitch"`
	// Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to
	// bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in
	// tencentcloud_clb_listener_rule.
	TargetType *string `pulumi:"targetType"`
}

// The set of arguments for constructing a Listener resource.
type ListenerArgs struct {
	// ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the
	// ssl mode is `MUTUAL`.
	CertificateCaId pulumi.StringPtrInput
	// ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it
	// is available.
	CertificateId pulumi.StringPtrInput
	// Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL`
	// protocol and must be set when it is available.
	CertificateSslMode pulumi.StringPtrInput
	// ID of the CLB.
	ClbId pulumi.StringInput
	// Health check protocol. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is
	// required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`.
	HealthCheckContextType pulumi.StringPtrInput
	// Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3
	// consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener
	// allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
	HealthCheckHealthNum pulumi.IntPtrInput
	// HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of `health_check_type` of the health
	// check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means
	// http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx.If you want multiple return codes to indicate
	// health, need to add the corresponding values.
	HealthCheckHttpCode pulumi.IntPtrInput
	// HTTP health check domain of TCP listener.
	HealthCheckHttpDomain pulumi.StringPtrInput
	// HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`.
	HealthCheckHttpMethod pulumi.StringPtrInput
	// HTTP health check path of TCP listener.
	HealthCheckHttpPath pulumi.StringPtrInput
	// The HTTP version of the backend service. When the value of `health_check_type` of the health check protocol is `HTTP`,
	// this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`.
	HealthCheckHttpVersion pulumi.StringPtrInput
	// Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL
	// listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckIntervalTime pulumi.IntPtrInput
	// The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is
	// recommended to leave it blank. Only applicable to TCP/UDP listener.
	HealthCheckPort pulumi.IntPtrInput
	// It represents the result returned by the health check. When the value of `health_check_type` of the health check
	// protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500.
	// When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in
	// `0123456789ABCDEF` and the length must be even digits.
	HealthCheckRecvContext pulumi.StringPtrInput
	// It represents the content of the request sent by the health check. When the value of `health_check_type` of the health
	// check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is
	// 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected
	// in `0123456789ABCDEF` and the length must be even digits.
	HealthCheckSendContext pulumi.StringPtrInput
	// Indicates whether health check is enabled.
	HealthCheckSwitch pulumi.BoolPtrInput
	// Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less
	// than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol.
	HealthCheckTimeOut pulumi.IntPtrInput
	// Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`.
	HealthCheckType pulumi.StringPtrInput
	// Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3
	// consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows
	// direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	HealthCheckUnhealthNum pulumi.IntPtrInput
	// Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and
	// hyphen '-'.
	ListenerName pulumi.StringInput
	// Port of the CLB listener.
	Port pulumi.IntPtrInput
	// Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`, `TCP_SSL` and `QUIC`.
	Protocol pulumi.StringInput
	// Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The
	// listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener
	// allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
	Scheduler pulumi.StringPtrInput
	// Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not
	// available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS
	// listener needs to be configured in `tencentcloud_clb_listener_rule`.
	SessionExpireTime pulumi.IntPtrInput
	// Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for
	// each rule in `tencentcloud_clb_listener_rule`, otherwise all rules have a certificate.
	SniSwitch pulumi.BoolPtrInput
	// Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to
	// bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in
	// tencentcloud_clb_listener_rule.
	TargetType pulumi.StringPtrInput
}

func (ListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerArgs)(nil)).Elem()
}

type ListenerInput interface {
	pulumi.Input

	ToListenerOutput() ListenerOutput
	ToListenerOutputWithContext(ctx context.Context) ListenerOutput
}

func (*Listener) ElementType() reflect.Type {
	return reflect.TypeOf((**Listener)(nil)).Elem()
}

func (i *Listener) ToListenerOutput() ListenerOutput {
	return i.ToListenerOutputWithContext(context.Background())
}

func (i *Listener) ToListenerOutputWithContext(ctx context.Context) ListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerOutput)
}

// ListenerArrayInput is an input type that accepts ListenerArray and ListenerArrayOutput values.
// You can construct a concrete instance of `ListenerArrayInput` via:
//
//	ListenerArray{ ListenerArgs{...} }
type ListenerArrayInput interface {
	pulumi.Input

	ToListenerArrayOutput() ListenerArrayOutput
	ToListenerArrayOutputWithContext(context.Context) ListenerArrayOutput
}

type ListenerArray []ListenerInput

func (ListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Listener)(nil)).Elem()
}

func (i ListenerArray) ToListenerArrayOutput() ListenerArrayOutput {
	return i.ToListenerArrayOutputWithContext(context.Background())
}

func (i ListenerArray) ToListenerArrayOutputWithContext(ctx context.Context) ListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerArrayOutput)
}

// ListenerMapInput is an input type that accepts ListenerMap and ListenerMapOutput values.
// You can construct a concrete instance of `ListenerMapInput` via:
//
//	ListenerMap{ "key": ListenerArgs{...} }
type ListenerMapInput interface {
	pulumi.Input

	ToListenerMapOutput() ListenerMapOutput
	ToListenerMapOutputWithContext(context.Context) ListenerMapOutput
}

type ListenerMap map[string]ListenerInput

func (ListenerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Listener)(nil)).Elem()
}

func (i ListenerMap) ToListenerMapOutput() ListenerMapOutput {
	return i.ToListenerMapOutputWithContext(context.Background())
}

func (i ListenerMap) ToListenerMapOutputWithContext(ctx context.Context) ListenerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerMapOutput)
}

type ListenerOutput struct{ *pulumi.OutputState }

func (ListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Listener)(nil)).Elem()
}

func (o ListenerOutput) ToListenerOutput() ListenerOutput {
	return o
}

func (o ListenerOutput) ToListenerOutputWithContext(ctx context.Context) ListenerOutput {
	return o
}

// ID of the client certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when the
// ssl mode is `MUTUAL`.
func (o ListenerOutput) CertificateCaId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.CertificateCaId }).(pulumi.StringPtrOutput)
}

// ID of the server certificate. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL` protocol and must be set when it
// is available.
func (o ListenerOutput) CertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.CertificateId }).(pulumi.StringPtrOutput)
}

// Type of certificate. Valid values: `UNIDIRECTIONAL`, `MUTUAL`. NOTES: Only supports listeners of `HTTPS` and `TCP_SSL`
// protocol and must be set when it is available.
func (o ListenerOutput) CertificateSslMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.CertificateSslMode }).(pulumi.StringPtrOutput)
}

// ID of the CLB.
func (o ListenerOutput) ClbId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.ClbId }).(pulumi.StringOutput)
}

// Health check protocol. When the value of `health_check_type` of the health check protocol is `CUSTOM`, this field is
// required, which represents the input format of the health check. Valid values: `HEX`, `TEXT`.
func (o ListenerOutput) HealthCheckContextType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.HealthCheckContextType }).(pulumi.StringPtrOutput)
}

// Health threshold of health check, and the default is `3`. If a success result is returned for the health check for 3
// consecutive times, the backend CVM is identified as healthy. The value range is 2-10. NOTES: TCP/UDP/TCP_SSL listener
// allows direct configuration, HTTP/HTTPS listener needs to be configured in tencentcloud_clb_listener_rule.
func (o ListenerOutput) HealthCheckHealthNum() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.HealthCheckHealthNum }).(pulumi.IntOutput)
}

// HTTP health check code of TCP listener, Valid value ranges: [1~31]. When the value of `health_check_type` of the health
// check protocol is `HTTP`, this field is required. Valid values: `1`, `2`, `4`, `8`, `16`. `1` means http_1xx, `2` means
// http_2xx, `4` means http_3xx, `8` means http_4xx, `16` means http_5xx.If you want multiple return codes to indicate
// health, need to add the corresponding values.
func (o ListenerOutput) HealthCheckHttpCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntPtrOutput { return v.HealthCheckHttpCode }).(pulumi.IntPtrOutput)
}

// HTTP health check domain of TCP listener.
func (o ListenerOutput) HealthCheckHttpDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.HealthCheckHttpDomain }).(pulumi.StringPtrOutput)
}

// HTTP health check method of TCP listener. Valid values: `HEAD`, `GET`.
func (o ListenerOutput) HealthCheckHttpMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.HealthCheckHttpMethod }).(pulumi.StringOutput)
}

// HTTP health check path of TCP listener.
func (o ListenerOutput) HealthCheckHttpPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.HealthCheckHttpPath }).(pulumi.StringPtrOutput)
}

// The HTTP version of the backend service. When the value of `health_check_type` of the health check protocol is `HTTP`,
// this field is required. Valid values: `HTTP/1.0`, `HTTP/1.1`.
func (o ListenerOutput) HealthCheckHttpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.HealthCheckHttpVersion }).(pulumi.StringPtrOutput)
}

// Interval time of health check. Valid value ranges: [2~300] sec. and the default is 5 sec. NOTES: TCP/UDP/TCP_SSL
// listener allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
func (o ListenerOutput) HealthCheckIntervalTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.HealthCheckIntervalTime }).(pulumi.IntOutput)
}

// The health check port is the port of the backend service by default. Unless you want to specify a specific port, it is
// recommended to leave it blank. Only applicable to TCP/UDP listener.
func (o ListenerOutput) HealthCheckPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntPtrOutput { return v.HealthCheckPort }).(pulumi.IntPtrOutput)
}

// It represents the result returned by the health check. When the value of `health_check_type` of the health check
// protocol is `CUSTOM`, this field is required. Only ASCII visible characters are allowed and the maximum length is 500.
// When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected in
// `0123456789ABCDEF` and the length must be even digits.
func (o ListenerOutput) HealthCheckRecvContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.HealthCheckRecvContext }).(pulumi.StringPtrOutput)
}

// It represents the content of the request sent by the health check. When the value of `health_check_type` of the health
// check protocol is `CUSTOM`, this field is required. Only visible ASCII characters are allowed and the maximum length is
// 500. When `health_check_context_type` value is `HEX`, the characters of SendContext and RecvContext can only be selected
// in `0123456789ABCDEF` and the length must be even digits.
func (o ListenerOutput) HealthCheckSendContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.HealthCheckSendContext }).(pulumi.StringPtrOutput)
}

// Indicates whether health check is enabled.
func (o ListenerOutput) HealthCheckSwitch() pulumi.BoolOutput {
	return o.ApplyT(func(v *Listener) pulumi.BoolOutput { return v.HealthCheckSwitch }).(pulumi.BoolOutput)
}

// Response timeout of health check. Valid value ranges: [2~60] sec. Default is 2 sec. Response timeout needs to be less
// than check interval. NOTES: Only supports listeners of `TCP`,`UDP`,`TCP_SSL` protocol.
func (o ListenerOutput) HealthCheckTimeOut() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.HealthCheckTimeOut }).(pulumi.IntOutput)
}

// Protocol used for health check. Valid values: `CUSTOM`, `TCP`, `HTTP`.
func (o ListenerOutput) HealthCheckType() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.HealthCheckType }).(pulumi.StringOutput)
}

// Unhealthy threshold of health check, and the default is `3`. If a success result is returned for the health check 3
// consecutive times, the CVM is identified as unhealthy. The value range is [2-10]. NOTES: TCP/UDP/TCP_SSL listener allows
// direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
func (o ListenerOutput) HealthCheckUnhealthNum() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.HealthCheckUnhealthNum }).(pulumi.IntOutput)
}

// ID of this CLB listener.
func (o ListenerOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

// Name of the CLB listener, and available values can only be Chinese characters, English letters, numbers, underscore and
// hyphen '-'.
func (o ListenerOutput) ListenerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.ListenerName }).(pulumi.StringOutput)
}

// Port of the CLB listener.
func (o ListenerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// Type of protocol within the listener. Valid values: `TCP`, `UDP`, `HTTP`, `HTTPS`, `TCP_SSL` and `QUIC`.
func (o ListenerOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Scheduling method of the CLB listener, and available values are 'WRR' and 'LEAST_CONN'. The default is 'WRR'. NOTES: The
// listener of `HTTP` and `HTTPS` protocol additionally supports the `IP Hash` method. NOTES: TCP/UDP/TCP_SSL listener
// allows direct configuration, HTTP/HTTPS listener needs to be configured in `tencentcloud_clb_listener_rule`.
func (o ListenerOutput) Scheduler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringPtrOutput { return v.Scheduler }).(pulumi.StringPtrOutput)
}

// Time of session persistence within the CLB listener. NOTES: Available when scheduler is specified as `WRR`, and not
// available when listener protocol is `TCP_SSL`. NOTES: TCP/UDP/TCP_SSL listener allows direct configuration, HTTP/HTTPS
// listener needs to be configured in `tencentcloud_clb_listener_rule`.
func (o ListenerOutput) SessionExpireTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntPtrOutput { return v.SessionExpireTime }).(pulumi.IntPtrOutput)
}

// Indicates whether SNI is enabled, and only supported with protocol `HTTPS`. If enabled, you can set a certificate for
// each rule in `tencentcloud_clb_listener_rule`, otherwise all rules have a certificate.
func (o ListenerOutput) SniSwitch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Listener) pulumi.BoolPtrOutput { return v.SniSwitch }).(pulumi.BoolPtrOutput)
}

// Backend target type. Valid values: `NODE`, `TARGETGROUP`. `NODE` means to bind ordinary nodes, `TARGETGROUP` means to
// bind target group. NOTES: TCP/UDP/TCP_SSL listener must configuration, HTTP/HTTPS listener needs to be configured in
// tencentcloud_clb_listener_rule.
func (o ListenerOutput) TargetType() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.TargetType }).(pulumi.StringOutput)
}

type ListenerArrayOutput struct{ *pulumi.OutputState }

func (ListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Listener)(nil)).Elem()
}

func (o ListenerArrayOutput) ToListenerArrayOutput() ListenerArrayOutput {
	return o
}

func (o ListenerArrayOutput) ToListenerArrayOutputWithContext(ctx context.Context) ListenerArrayOutput {
	return o
}

func (o ListenerArrayOutput) Index(i pulumi.IntInput) ListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Listener {
		return vs[0].([]*Listener)[vs[1].(int)]
	}).(ListenerOutput)
}

type ListenerMapOutput struct{ *pulumi.OutputState }

func (ListenerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Listener)(nil)).Elem()
}

func (o ListenerMapOutput) ToListenerMapOutput() ListenerMapOutput {
	return o
}

func (o ListenerMapOutput) ToListenerMapOutputWithContext(ctx context.Context) ListenerMapOutput {
	return o
}

func (o ListenerMapOutput) MapIndex(k pulumi.StringInput) ListenerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Listener {
		return vs[0].(map[string]*Listener)[vs[1].(string)]
	}).(ListenerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerInput)(nil)).Elem(), &Listener{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerArrayInput)(nil)).Elem(), ListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerMapInput)(nil)).Elem(), ListenerMap{})
	pulumi.RegisterOutputType(ListenerOutput{})
	pulumi.RegisterOutputType(ListenerArrayOutput{})
	pulumi.RegisterOutputType(ListenerMapOutput{})
}
