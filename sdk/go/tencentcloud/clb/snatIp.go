// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SnatIp struct {
	pulumi.CustomResourceState

	// CLB instance ID.
	ClbId pulumi.StringOutput `pulumi:"clbId"`
	// Snat IP address config.
	Ips SnatIpIpArrayOutput `pulumi:"ips"`
}

// NewSnatIp registers a new resource with the given unique name, arguments, and options.
func NewSnatIp(ctx *pulumi.Context,
	name string, args *SnatIpArgs, opts ...pulumi.ResourceOption) (*SnatIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClbId == nil {
		return nil, errors.New("invalid value for required argument 'ClbId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnatIp
	err := ctx.RegisterResource("tencentcloud:Clb/snatIp:SnatIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnatIp gets an existing SnatIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnatIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnatIpState, opts ...pulumi.ResourceOption) (*SnatIp, error) {
	var resource SnatIp
	err := ctx.ReadResource("tencentcloud:Clb/snatIp:SnatIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnatIp resources.
type snatIpState struct {
	// CLB instance ID.
	ClbId *string `pulumi:"clbId"`
	// Snat IP address config.
	Ips []SnatIpIp `pulumi:"ips"`
}

type SnatIpState struct {
	// CLB instance ID.
	ClbId pulumi.StringPtrInput
	// Snat IP address config.
	Ips SnatIpIpArrayInput
}

func (SnatIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*snatIpState)(nil)).Elem()
}

type snatIpArgs struct {
	// CLB instance ID.
	ClbId string `pulumi:"clbId"`
	// Snat IP address config.
	Ips []SnatIpIp `pulumi:"ips"`
}

// The set of arguments for constructing a SnatIp resource.
type SnatIpArgs struct {
	// CLB instance ID.
	ClbId pulumi.StringInput
	// Snat IP address config.
	Ips SnatIpIpArrayInput
}

func (SnatIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snatIpArgs)(nil)).Elem()
}

type SnatIpInput interface {
	pulumi.Input

	ToSnatIpOutput() SnatIpOutput
	ToSnatIpOutputWithContext(ctx context.Context) SnatIpOutput
}

func (*SnatIp) ElementType() reflect.Type {
	return reflect.TypeOf((**SnatIp)(nil)).Elem()
}

func (i *SnatIp) ToSnatIpOutput() SnatIpOutput {
	return i.ToSnatIpOutputWithContext(context.Background())
}

func (i *SnatIp) ToSnatIpOutputWithContext(ctx context.Context) SnatIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatIpOutput)
}

// SnatIpArrayInput is an input type that accepts SnatIpArray and SnatIpArrayOutput values.
// You can construct a concrete instance of `SnatIpArrayInput` via:
//
//	SnatIpArray{ SnatIpArgs{...} }
type SnatIpArrayInput interface {
	pulumi.Input

	ToSnatIpArrayOutput() SnatIpArrayOutput
	ToSnatIpArrayOutputWithContext(context.Context) SnatIpArrayOutput
}

type SnatIpArray []SnatIpInput

func (SnatIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnatIp)(nil)).Elem()
}

func (i SnatIpArray) ToSnatIpArrayOutput() SnatIpArrayOutput {
	return i.ToSnatIpArrayOutputWithContext(context.Background())
}

func (i SnatIpArray) ToSnatIpArrayOutputWithContext(ctx context.Context) SnatIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatIpArrayOutput)
}

// SnatIpMapInput is an input type that accepts SnatIpMap and SnatIpMapOutput values.
// You can construct a concrete instance of `SnatIpMapInput` via:
//
//	SnatIpMap{ "key": SnatIpArgs{...} }
type SnatIpMapInput interface {
	pulumi.Input

	ToSnatIpMapOutput() SnatIpMapOutput
	ToSnatIpMapOutputWithContext(context.Context) SnatIpMapOutput
}

type SnatIpMap map[string]SnatIpInput

func (SnatIpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnatIp)(nil)).Elem()
}

func (i SnatIpMap) ToSnatIpMapOutput() SnatIpMapOutput {
	return i.ToSnatIpMapOutputWithContext(context.Background())
}

func (i SnatIpMap) ToSnatIpMapOutputWithContext(ctx context.Context) SnatIpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatIpMapOutput)
}

type SnatIpOutput struct{ *pulumi.OutputState }

func (SnatIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnatIp)(nil)).Elem()
}

func (o SnatIpOutput) ToSnatIpOutput() SnatIpOutput {
	return o
}

func (o SnatIpOutput) ToSnatIpOutputWithContext(ctx context.Context) SnatIpOutput {
	return o
}

// CLB instance ID.
func (o SnatIpOutput) ClbId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnatIp) pulumi.StringOutput { return v.ClbId }).(pulumi.StringOutput)
}

// Snat IP address config.
func (o SnatIpOutput) Ips() SnatIpIpArrayOutput {
	return o.ApplyT(func(v *SnatIp) SnatIpIpArrayOutput { return v.Ips }).(SnatIpIpArrayOutput)
}

type SnatIpArrayOutput struct{ *pulumi.OutputState }

func (SnatIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnatIp)(nil)).Elem()
}

func (o SnatIpArrayOutput) ToSnatIpArrayOutput() SnatIpArrayOutput {
	return o
}

func (o SnatIpArrayOutput) ToSnatIpArrayOutputWithContext(ctx context.Context) SnatIpArrayOutput {
	return o
}

func (o SnatIpArrayOutput) Index(i pulumi.IntInput) SnatIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnatIp {
		return vs[0].([]*SnatIp)[vs[1].(int)]
	}).(SnatIpOutput)
}

type SnatIpMapOutput struct{ *pulumi.OutputState }

func (SnatIpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnatIp)(nil)).Elem()
}

func (o SnatIpMapOutput) ToSnatIpMapOutput() SnatIpMapOutput {
	return o
}

func (o SnatIpMapOutput) ToSnatIpMapOutputWithContext(ctx context.Context) SnatIpMapOutput {
	return o
}

func (o SnatIpMapOutput) MapIndex(k pulumi.StringInput) SnatIpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnatIp {
		return vs[0].(map[string]*SnatIp)[vs[1].(string)]
	}).(SnatIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnatIpInput)(nil)).Elem(), &SnatIp{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnatIpArrayInput)(nil)).Elem(), SnatIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnatIpMapInput)(nil)).Elem(), SnatIpMap{})
	pulumi.RegisterOutputType(SnatIpOutput{})
	pulumi.RegisterOutputType(SnatIpArrayOutput{})
	pulumi.RegisterOutputType(SnatIpMapOutput{})
}
