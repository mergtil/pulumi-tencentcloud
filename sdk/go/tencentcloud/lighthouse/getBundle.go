// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lighthouse

import (
	"context"
	"reflect"

	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetBundle(ctx *pulumi.Context, args *GetBundleArgs, opts ...pulumi.InvokeOption) (*GetBundleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetBundleResult
	err := ctx.Invoke("tencentcloud:Lighthouse/getBundle:getBundle", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBundle.
type GetBundleArgs struct {
	BundleIds        []string          `pulumi:"bundleIds"`
	Filters          []GetBundleFilter `pulumi:"filters"`
	Limit            *int              `pulumi:"limit"`
	Offset           *int              `pulumi:"offset"`
	ResultOutputFile *string           `pulumi:"resultOutputFile"`
	Zones            []string          `pulumi:"zones"`
}

// A collection of values returned by getBundle.
type GetBundleResult struct {
	BundleIds  []string             `pulumi:"bundleIds"`
	BundleSets []GetBundleBundleSet `pulumi:"bundleSets"`
	Filters    []GetBundleFilter    `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id               string   `pulumi:"id"`
	Limit            *int     `pulumi:"limit"`
	Offset           *int     `pulumi:"offset"`
	ResultOutputFile *string  `pulumi:"resultOutputFile"`
	Zones            []string `pulumi:"zones"`
}

func GetBundleOutput(ctx *pulumi.Context, args GetBundleOutputArgs, opts ...pulumi.InvokeOption) GetBundleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetBundleResult, error) {
			args := v.(GetBundleArgs)
			r, err := GetBundle(ctx, &args, opts...)
			var s GetBundleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetBundleResultOutput)
}

// A collection of arguments for invoking getBundle.
type GetBundleOutputArgs struct {
	BundleIds        pulumi.StringArrayInput   `pulumi:"bundleIds"`
	Filters          GetBundleFilterArrayInput `pulumi:"filters"`
	Limit            pulumi.IntPtrInput        `pulumi:"limit"`
	Offset           pulumi.IntPtrInput        `pulumi:"offset"`
	ResultOutputFile pulumi.StringPtrInput     `pulumi:"resultOutputFile"`
	Zones            pulumi.StringArrayInput   `pulumi:"zones"`
}

func (GetBundleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBundleArgs)(nil)).Elem()
}

// A collection of values returned by getBundle.
type GetBundleResultOutput struct{ *pulumi.OutputState }

func (GetBundleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBundleResult)(nil)).Elem()
}

func (o GetBundleResultOutput) ToGetBundleResultOutput() GetBundleResultOutput {
	return o
}

func (o GetBundleResultOutput) ToGetBundleResultOutputWithContext(ctx context.Context) GetBundleResultOutput {
	return o
}

func (o GetBundleResultOutput) BundleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBundleResult) []string { return v.BundleIds }).(pulumi.StringArrayOutput)
}

func (o GetBundleResultOutput) BundleSets() GetBundleBundleSetArrayOutput {
	return o.ApplyT(func(v GetBundleResult) []GetBundleBundleSet { return v.BundleSets }).(GetBundleBundleSetArrayOutput)
}

func (o GetBundleResultOutput) Filters() GetBundleFilterArrayOutput {
	return o.ApplyT(func(v GetBundleResult) []GetBundleFilter { return v.Filters }).(GetBundleFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetBundleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBundleResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetBundleResultOutput) Limit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetBundleResult) *int { return v.Limit }).(pulumi.IntPtrOutput)
}

func (o GetBundleResultOutput) Offset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetBundleResult) *int { return v.Offset }).(pulumi.IntPtrOutput)
}

func (o GetBundleResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBundleResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o GetBundleResultOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBundleResult) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetBundleResultOutput{})
}
