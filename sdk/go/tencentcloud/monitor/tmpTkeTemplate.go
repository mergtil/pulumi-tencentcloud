// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TmpTkeTemplate struct {
	pulumi.CustomResourceState

	// Template settings.
	Template TmpTkeTemplateTemplateOutput `pulumi:"template"`
}

// NewTmpTkeTemplate registers a new resource with the given unique name, arguments, and options.
func NewTmpTkeTemplate(ctx *pulumi.Context,
	name string, args *TmpTkeTemplateArgs, opts ...pulumi.ResourceOption) (*TmpTkeTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Template == nil {
		return nil, errors.New("invalid value for required argument 'Template'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TmpTkeTemplate
	err := ctx.RegisterResource("tencentcloud:Monitor/tmpTkeTemplate:TmpTkeTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTmpTkeTemplate gets an existing TmpTkeTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTmpTkeTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TmpTkeTemplateState, opts ...pulumi.ResourceOption) (*TmpTkeTemplate, error) {
	var resource TmpTkeTemplate
	err := ctx.ReadResource("tencentcloud:Monitor/tmpTkeTemplate:TmpTkeTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TmpTkeTemplate resources.
type tmpTkeTemplateState struct {
	// Template settings.
	Template *TmpTkeTemplateTemplate `pulumi:"template"`
}

type TmpTkeTemplateState struct {
	// Template settings.
	Template TmpTkeTemplateTemplatePtrInput
}

func (TmpTkeTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*tmpTkeTemplateState)(nil)).Elem()
}

type tmpTkeTemplateArgs struct {
	// Template settings.
	Template TmpTkeTemplateTemplate `pulumi:"template"`
}

// The set of arguments for constructing a TmpTkeTemplate resource.
type TmpTkeTemplateArgs struct {
	// Template settings.
	Template TmpTkeTemplateTemplateInput
}

func (TmpTkeTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tmpTkeTemplateArgs)(nil)).Elem()
}

type TmpTkeTemplateInput interface {
	pulumi.Input

	ToTmpTkeTemplateOutput() TmpTkeTemplateOutput
	ToTmpTkeTemplateOutputWithContext(ctx context.Context) TmpTkeTemplateOutput
}

func (*TmpTkeTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**TmpTkeTemplate)(nil)).Elem()
}

func (i *TmpTkeTemplate) ToTmpTkeTemplateOutput() TmpTkeTemplateOutput {
	return i.ToTmpTkeTemplateOutputWithContext(context.Background())
}

func (i *TmpTkeTemplate) ToTmpTkeTemplateOutputWithContext(ctx context.Context) TmpTkeTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TmpTkeTemplateOutput)
}

// TmpTkeTemplateArrayInput is an input type that accepts TmpTkeTemplateArray and TmpTkeTemplateArrayOutput values.
// You can construct a concrete instance of `TmpTkeTemplateArrayInput` via:
//
//	TmpTkeTemplateArray{ TmpTkeTemplateArgs{...} }
type TmpTkeTemplateArrayInput interface {
	pulumi.Input

	ToTmpTkeTemplateArrayOutput() TmpTkeTemplateArrayOutput
	ToTmpTkeTemplateArrayOutputWithContext(context.Context) TmpTkeTemplateArrayOutput
}

type TmpTkeTemplateArray []TmpTkeTemplateInput

func (TmpTkeTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TmpTkeTemplate)(nil)).Elem()
}

func (i TmpTkeTemplateArray) ToTmpTkeTemplateArrayOutput() TmpTkeTemplateArrayOutput {
	return i.ToTmpTkeTemplateArrayOutputWithContext(context.Background())
}

func (i TmpTkeTemplateArray) ToTmpTkeTemplateArrayOutputWithContext(ctx context.Context) TmpTkeTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TmpTkeTemplateArrayOutput)
}

// TmpTkeTemplateMapInput is an input type that accepts TmpTkeTemplateMap and TmpTkeTemplateMapOutput values.
// You can construct a concrete instance of `TmpTkeTemplateMapInput` via:
//
//	TmpTkeTemplateMap{ "key": TmpTkeTemplateArgs{...} }
type TmpTkeTemplateMapInput interface {
	pulumi.Input

	ToTmpTkeTemplateMapOutput() TmpTkeTemplateMapOutput
	ToTmpTkeTemplateMapOutputWithContext(context.Context) TmpTkeTemplateMapOutput
}

type TmpTkeTemplateMap map[string]TmpTkeTemplateInput

func (TmpTkeTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TmpTkeTemplate)(nil)).Elem()
}

func (i TmpTkeTemplateMap) ToTmpTkeTemplateMapOutput() TmpTkeTemplateMapOutput {
	return i.ToTmpTkeTemplateMapOutputWithContext(context.Background())
}

func (i TmpTkeTemplateMap) ToTmpTkeTemplateMapOutputWithContext(ctx context.Context) TmpTkeTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TmpTkeTemplateMapOutput)
}

type TmpTkeTemplateOutput struct{ *pulumi.OutputState }

func (TmpTkeTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TmpTkeTemplate)(nil)).Elem()
}

func (o TmpTkeTemplateOutput) ToTmpTkeTemplateOutput() TmpTkeTemplateOutput {
	return o
}

func (o TmpTkeTemplateOutput) ToTmpTkeTemplateOutputWithContext(ctx context.Context) TmpTkeTemplateOutput {
	return o
}

// Template settings.
func (o TmpTkeTemplateOutput) Template() TmpTkeTemplateTemplateOutput {
	return o.ApplyT(func(v *TmpTkeTemplate) TmpTkeTemplateTemplateOutput { return v.Template }).(TmpTkeTemplateTemplateOutput)
}

type TmpTkeTemplateArrayOutput struct{ *pulumi.OutputState }

func (TmpTkeTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TmpTkeTemplate)(nil)).Elem()
}

func (o TmpTkeTemplateArrayOutput) ToTmpTkeTemplateArrayOutput() TmpTkeTemplateArrayOutput {
	return o
}

func (o TmpTkeTemplateArrayOutput) ToTmpTkeTemplateArrayOutputWithContext(ctx context.Context) TmpTkeTemplateArrayOutput {
	return o
}

func (o TmpTkeTemplateArrayOutput) Index(i pulumi.IntInput) TmpTkeTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TmpTkeTemplate {
		return vs[0].([]*TmpTkeTemplate)[vs[1].(int)]
	}).(TmpTkeTemplateOutput)
}

type TmpTkeTemplateMapOutput struct{ *pulumi.OutputState }

func (TmpTkeTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TmpTkeTemplate)(nil)).Elem()
}

func (o TmpTkeTemplateMapOutput) ToTmpTkeTemplateMapOutput() TmpTkeTemplateMapOutput {
	return o
}

func (o TmpTkeTemplateMapOutput) ToTmpTkeTemplateMapOutputWithContext(ctx context.Context) TmpTkeTemplateMapOutput {
	return o
}

func (o TmpTkeTemplateMapOutput) MapIndex(k pulumi.StringInput) TmpTkeTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TmpTkeTemplate {
		return vs[0].(map[string]*TmpTkeTemplate)[vs[1].(string)]
	}).(TmpTkeTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TmpTkeTemplateInput)(nil)).Elem(), &TmpTkeTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*TmpTkeTemplateArrayInput)(nil)).Elem(), TmpTkeTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TmpTkeTemplateMapInput)(nil)).Elem(), TmpTkeTemplateMap{})
	pulumi.RegisterOutputType(TmpTkeTemplateOutput{})
	pulumi.RegisterOutputType(TmpTkeTemplateArrayOutput{})
	pulumi.RegisterOutputType(TmpTkeTemplateMapOutput{})
}
