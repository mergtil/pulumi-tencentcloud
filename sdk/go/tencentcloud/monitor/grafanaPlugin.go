// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GrafanaPlugin struct {
	pulumi.CustomResourceState

	// Grafana instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Plugin id.
	PluginId pulumi.StringOutput `pulumi:"pluginId"`
	// Plugin version.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewGrafanaPlugin registers a new resource with the given unique name, arguments, and options.
func NewGrafanaPlugin(ctx *pulumi.Context,
	name string, args *GrafanaPluginArgs, opts ...pulumi.ResourceOption) (*GrafanaPlugin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.PluginId == nil {
		return nil, errors.New("invalid value for required argument 'PluginId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GrafanaPlugin
	err := ctx.RegisterResource("tencentcloud:Monitor/grafanaPlugin:GrafanaPlugin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrafanaPlugin gets an existing GrafanaPlugin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrafanaPlugin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrafanaPluginState, opts ...pulumi.ResourceOption) (*GrafanaPlugin, error) {
	var resource GrafanaPlugin
	err := ctx.ReadResource("tencentcloud:Monitor/grafanaPlugin:GrafanaPlugin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GrafanaPlugin resources.
type grafanaPluginState struct {
	// Grafana instance id.
	InstanceId *string `pulumi:"instanceId"`
	// Plugin id.
	PluginId *string `pulumi:"pluginId"`
	// Plugin version.
	Version *string `pulumi:"version"`
}

type GrafanaPluginState struct {
	// Grafana instance id.
	InstanceId pulumi.StringPtrInput
	// Plugin id.
	PluginId pulumi.StringPtrInput
	// Plugin version.
	Version pulumi.StringPtrInput
}

func (GrafanaPluginState) ElementType() reflect.Type {
	return reflect.TypeOf((*grafanaPluginState)(nil)).Elem()
}

type grafanaPluginArgs struct {
	// Grafana instance id.
	InstanceId string `pulumi:"instanceId"`
	// Plugin id.
	PluginId string `pulumi:"pluginId"`
	// Plugin version.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a GrafanaPlugin resource.
type GrafanaPluginArgs struct {
	// Grafana instance id.
	InstanceId pulumi.StringInput
	// Plugin id.
	PluginId pulumi.StringInput
	// Plugin version.
	Version pulumi.StringPtrInput
}

func (GrafanaPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grafanaPluginArgs)(nil)).Elem()
}

type GrafanaPluginInput interface {
	pulumi.Input

	ToGrafanaPluginOutput() GrafanaPluginOutput
	ToGrafanaPluginOutputWithContext(ctx context.Context) GrafanaPluginOutput
}

func (*GrafanaPlugin) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafanaPlugin)(nil)).Elem()
}

func (i *GrafanaPlugin) ToGrafanaPluginOutput() GrafanaPluginOutput {
	return i.ToGrafanaPluginOutputWithContext(context.Background())
}

func (i *GrafanaPlugin) ToGrafanaPluginOutputWithContext(ctx context.Context) GrafanaPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaPluginOutput)
}

// GrafanaPluginArrayInput is an input type that accepts GrafanaPluginArray and GrafanaPluginArrayOutput values.
// You can construct a concrete instance of `GrafanaPluginArrayInput` via:
//
//	GrafanaPluginArray{ GrafanaPluginArgs{...} }
type GrafanaPluginArrayInput interface {
	pulumi.Input

	ToGrafanaPluginArrayOutput() GrafanaPluginArrayOutput
	ToGrafanaPluginArrayOutputWithContext(context.Context) GrafanaPluginArrayOutput
}

type GrafanaPluginArray []GrafanaPluginInput

func (GrafanaPluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrafanaPlugin)(nil)).Elem()
}

func (i GrafanaPluginArray) ToGrafanaPluginArrayOutput() GrafanaPluginArrayOutput {
	return i.ToGrafanaPluginArrayOutputWithContext(context.Background())
}

func (i GrafanaPluginArray) ToGrafanaPluginArrayOutputWithContext(ctx context.Context) GrafanaPluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaPluginArrayOutput)
}

// GrafanaPluginMapInput is an input type that accepts GrafanaPluginMap and GrafanaPluginMapOutput values.
// You can construct a concrete instance of `GrafanaPluginMapInput` via:
//
//	GrafanaPluginMap{ "key": GrafanaPluginArgs{...} }
type GrafanaPluginMapInput interface {
	pulumi.Input

	ToGrafanaPluginMapOutput() GrafanaPluginMapOutput
	ToGrafanaPluginMapOutputWithContext(context.Context) GrafanaPluginMapOutput
}

type GrafanaPluginMap map[string]GrafanaPluginInput

func (GrafanaPluginMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrafanaPlugin)(nil)).Elem()
}

func (i GrafanaPluginMap) ToGrafanaPluginMapOutput() GrafanaPluginMapOutput {
	return i.ToGrafanaPluginMapOutputWithContext(context.Background())
}

func (i GrafanaPluginMap) ToGrafanaPluginMapOutputWithContext(ctx context.Context) GrafanaPluginMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaPluginMapOutput)
}

type GrafanaPluginOutput struct{ *pulumi.OutputState }

func (GrafanaPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafanaPlugin)(nil)).Elem()
}

func (o GrafanaPluginOutput) ToGrafanaPluginOutput() GrafanaPluginOutput {
	return o
}

func (o GrafanaPluginOutput) ToGrafanaPluginOutputWithContext(ctx context.Context) GrafanaPluginOutput {
	return o
}

// Grafana instance id.
func (o GrafanaPluginOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaPlugin) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Plugin id.
func (o GrafanaPluginOutput) PluginId() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaPlugin) pulumi.StringOutput { return v.PluginId }).(pulumi.StringOutput)
}

// Plugin version.
func (o GrafanaPluginOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaPlugin) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type GrafanaPluginArrayOutput struct{ *pulumi.OutputState }

func (GrafanaPluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrafanaPlugin)(nil)).Elem()
}

func (o GrafanaPluginArrayOutput) ToGrafanaPluginArrayOutput() GrafanaPluginArrayOutput {
	return o
}

func (o GrafanaPluginArrayOutput) ToGrafanaPluginArrayOutputWithContext(ctx context.Context) GrafanaPluginArrayOutput {
	return o
}

func (o GrafanaPluginArrayOutput) Index(i pulumi.IntInput) GrafanaPluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GrafanaPlugin {
		return vs[0].([]*GrafanaPlugin)[vs[1].(int)]
	}).(GrafanaPluginOutput)
}

type GrafanaPluginMapOutput struct{ *pulumi.OutputState }

func (GrafanaPluginMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrafanaPlugin)(nil)).Elem()
}

func (o GrafanaPluginMapOutput) ToGrafanaPluginMapOutput() GrafanaPluginMapOutput {
	return o
}

func (o GrafanaPluginMapOutput) ToGrafanaPluginMapOutputWithContext(ctx context.Context) GrafanaPluginMapOutput {
	return o
}

func (o GrafanaPluginMapOutput) MapIndex(k pulumi.StringInput) GrafanaPluginOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GrafanaPlugin {
		return vs[0].(map[string]*GrafanaPlugin)[vs[1].(string)]
	}).(GrafanaPluginOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaPluginInput)(nil)).Elem(), &GrafanaPlugin{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaPluginArrayInput)(nil)).Elem(), GrafanaPluginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaPluginMapInput)(nil)).Elem(), GrafanaPluginMap{})
	pulumi.RegisterOutputType(GrafanaPluginOutput{})
	pulumi.RegisterOutputType(GrafanaPluginArrayOutput{})
	pulumi.RegisterOutputType(GrafanaPluginMapOutput{})
}
