// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TmpTkeRecordRuleYaml struct {
	pulumi.CustomResourceState

	// An ID identify the cluster, like cls-xxxxxx.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Contents of record rules in yaml format.
	Content pulumi.StringOutput `pulumi:"content"`
	// Instance Id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Name of the instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// Used for the argument, if the configuration comes to the template, the template id.
	TemplateId pulumi.StringOutput `pulumi:"templateId"`
	// Last modified time of record rule.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewTmpTkeRecordRuleYaml registers a new resource with the given unique name, arguments, and options.
func NewTmpTkeRecordRuleYaml(ctx *pulumi.Context,
	name string, args *TmpTkeRecordRuleYamlArgs, opts ...pulumi.ResourceOption) (*TmpTkeRecordRuleYaml, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TmpTkeRecordRuleYaml
	err := ctx.RegisterResource("tencentcloud:Monitor/tmpTkeRecordRuleYaml:TmpTkeRecordRuleYaml", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTmpTkeRecordRuleYaml gets an existing TmpTkeRecordRuleYaml resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTmpTkeRecordRuleYaml(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TmpTkeRecordRuleYamlState, opts ...pulumi.ResourceOption) (*TmpTkeRecordRuleYaml, error) {
	var resource TmpTkeRecordRuleYaml
	err := ctx.ReadResource("tencentcloud:Monitor/tmpTkeRecordRuleYaml:TmpTkeRecordRuleYaml", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TmpTkeRecordRuleYaml resources.
type tmpTkeRecordRuleYamlState struct {
	// An ID identify the cluster, like cls-xxxxxx.
	ClusterId *string `pulumi:"clusterId"`
	// Contents of record rules in yaml format.
	Content *string `pulumi:"content"`
	// Instance Id.
	InstanceId *string `pulumi:"instanceId"`
	// Name of the instance.
	Name *string `pulumi:"name"`
	// Used for the argument, if the configuration comes to the template, the template id.
	TemplateId *string `pulumi:"templateId"`
	// Last modified time of record rule.
	UpdateTime *string `pulumi:"updateTime"`
}

type TmpTkeRecordRuleYamlState struct {
	// An ID identify the cluster, like cls-xxxxxx.
	ClusterId pulumi.StringPtrInput
	// Contents of record rules in yaml format.
	Content pulumi.StringPtrInput
	// Instance Id.
	InstanceId pulumi.StringPtrInput
	// Name of the instance.
	Name pulumi.StringPtrInput
	// Used for the argument, if the configuration comes to the template, the template id.
	TemplateId pulumi.StringPtrInput
	// Last modified time of record rule.
	UpdateTime pulumi.StringPtrInput
}

func (TmpTkeRecordRuleYamlState) ElementType() reflect.Type {
	return reflect.TypeOf((*tmpTkeRecordRuleYamlState)(nil)).Elem()
}

type tmpTkeRecordRuleYamlArgs struct {
	// Contents of record rules in yaml format.
	Content string `pulumi:"content"`
	// Instance Id.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a TmpTkeRecordRuleYaml resource.
type TmpTkeRecordRuleYamlArgs struct {
	// Contents of record rules in yaml format.
	Content pulumi.StringInput
	// Instance Id.
	InstanceId pulumi.StringInput
}

func (TmpTkeRecordRuleYamlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tmpTkeRecordRuleYamlArgs)(nil)).Elem()
}

type TmpTkeRecordRuleYamlInput interface {
	pulumi.Input

	ToTmpTkeRecordRuleYamlOutput() TmpTkeRecordRuleYamlOutput
	ToTmpTkeRecordRuleYamlOutputWithContext(ctx context.Context) TmpTkeRecordRuleYamlOutput
}

func (*TmpTkeRecordRuleYaml) ElementType() reflect.Type {
	return reflect.TypeOf((**TmpTkeRecordRuleYaml)(nil)).Elem()
}

func (i *TmpTkeRecordRuleYaml) ToTmpTkeRecordRuleYamlOutput() TmpTkeRecordRuleYamlOutput {
	return i.ToTmpTkeRecordRuleYamlOutputWithContext(context.Background())
}

func (i *TmpTkeRecordRuleYaml) ToTmpTkeRecordRuleYamlOutputWithContext(ctx context.Context) TmpTkeRecordRuleYamlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TmpTkeRecordRuleYamlOutput)
}

// TmpTkeRecordRuleYamlArrayInput is an input type that accepts TmpTkeRecordRuleYamlArray and TmpTkeRecordRuleYamlArrayOutput values.
// You can construct a concrete instance of `TmpTkeRecordRuleYamlArrayInput` via:
//
//	TmpTkeRecordRuleYamlArray{ TmpTkeRecordRuleYamlArgs{...} }
type TmpTkeRecordRuleYamlArrayInput interface {
	pulumi.Input

	ToTmpTkeRecordRuleYamlArrayOutput() TmpTkeRecordRuleYamlArrayOutput
	ToTmpTkeRecordRuleYamlArrayOutputWithContext(context.Context) TmpTkeRecordRuleYamlArrayOutput
}

type TmpTkeRecordRuleYamlArray []TmpTkeRecordRuleYamlInput

func (TmpTkeRecordRuleYamlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TmpTkeRecordRuleYaml)(nil)).Elem()
}

func (i TmpTkeRecordRuleYamlArray) ToTmpTkeRecordRuleYamlArrayOutput() TmpTkeRecordRuleYamlArrayOutput {
	return i.ToTmpTkeRecordRuleYamlArrayOutputWithContext(context.Background())
}

func (i TmpTkeRecordRuleYamlArray) ToTmpTkeRecordRuleYamlArrayOutputWithContext(ctx context.Context) TmpTkeRecordRuleYamlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TmpTkeRecordRuleYamlArrayOutput)
}

// TmpTkeRecordRuleYamlMapInput is an input type that accepts TmpTkeRecordRuleYamlMap and TmpTkeRecordRuleYamlMapOutput values.
// You can construct a concrete instance of `TmpTkeRecordRuleYamlMapInput` via:
//
//	TmpTkeRecordRuleYamlMap{ "key": TmpTkeRecordRuleYamlArgs{...} }
type TmpTkeRecordRuleYamlMapInput interface {
	pulumi.Input

	ToTmpTkeRecordRuleYamlMapOutput() TmpTkeRecordRuleYamlMapOutput
	ToTmpTkeRecordRuleYamlMapOutputWithContext(context.Context) TmpTkeRecordRuleYamlMapOutput
}

type TmpTkeRecordRuleYamlMap map[string]TmpTkeRecordRuleYamlInput

func (TmpTkeRecordRuleYamlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TmpTkeRecordRuleYaml)(nil)).Elem()
}

func (i TmpTkeRecordRuleYamlMap) ToTmpTkeRecordRuleYamlMapOutput() TmpTkeRecordRuleYamlMapOutput {
	return i.ToTmpTkeRecordRuleYamlMapOutputWithContext(context.Background())
}

func (i TmpTkeRecordRuleYamlMap) ToTmpTkeRecordRuleYamlMapOutputWithContext(ctx context.Context) TmpTkeRecordRuleYamlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TmpTkeRecordRuleYamlMapOutput)
}

type TmpTkeRecordRuleYamlOutput struct{ *pulumi.OutputState }

func (TmpTkeRecordRuleYamlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TmpTkeRecordRuleYaml)(nil)).Elem()
}

func (o TmpTkeRecordRuleYamlOutput) ToTmpTkeRecordRuleYamlOutput() TmpTkeRecordRuleYamlOutput {
	return o
}

func (o TmpTkeRecordRuleYamlOutput) ToTmpTkeRecordRuleYamlOutputWithContext(ctx context.Context) TmpTkeRecordRuleYamlOutput {
	return o
}

// An ID identify the cluster, like cls-xxxxxx.
func (o TmpTkeRecordRuleYamlOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *TmpTkeRecordRuleYaml) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Contents of record rules in yaml format.
func (o TmpTkeRecordRuleYamlOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *TmpTkeRecordRuleYaml) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// Instance Id.
func (o TmpTkeRecordRuleYamlOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *TmpTkeRecordRuleYaml) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Name of the instance.
func (o TmpTkeRecordRuleYamlOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TmpTkeRecordRuleYaml) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Used for the argument, if the configuration comes to the template, the template id.
func (o TmpTkeRecordRuleYamlOutput) TemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *TmpTkeRecordRuleYaml) pulumi.StringOutput { return v.TemplateId }).(pulumi.StringOutput)
}

// Last modified time of record rule.
func (o TmpTkeRecordRuleYamlOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TmpTkeRecordRuleYaml) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type TmpTkeRecordRuleYamlArrayOutput struct{ *pulumi.OutputState }

func (TmpTkeRecordRuleYamlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TmpTkeRecordRuleYaml)(nil)).Elem()
}

func (o TmpTkeRecordRuleYamlArrayOutput) ToTmpTkeRecordRuleYamlArrayOutput() TmpTkeRecordRuleYamlArrayOutput {
	return o
}

func (o TmpTkeRecordRuleYamlArrayOutput) ToTmpTkeRecordRuleYamlArrayOutputWithContext(ctx context.Context) TmpTkeRecordRuleYamlArrayOutput {
	return o
}

func (o TmpTkeRecordRuleYamlArrayOutput) Index(i pulumi.IntInput) TmpTkeRecordRuleYamlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TmpTkeRecordRuleYaml {
		return vs[0].([]*TmpTkeRecordRuleYaml)[vs[1].(int)]
	}).(TmpTkeRecordRuleYamlOutput)
}

type TmpTkeRecordRuleYamlMapOutput struct{ *pulumi.OutputState }

func (TmpTkeRecordRuleYamlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TmpTkeRecordRuleYaml)(nil)).Elem()
}

func (o TmpTkeRecordRuleYamlMapOutput) ToTmpTkeRecordRuleYamlMapOutput() TmpTkeRecordRuleYamlMapOutput {
	return o
}

func (o TmpTkeRecordRuleYamlMapOutput) ToTmpTkeRecordRuleYamlMapOutputWithContext(ctx context.Context) TmpTkeRecordRuleYamlMapOutput {
	return o
}

func (o TmpTkeRecordRuleYamlMapOutput) MapIndex(k pulumi.StringInput) TmpTkeRecordRuleYamlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TmpTkeRecordRuleYaml {
		return vs[0].(map[string]*TmpTkeRecordRuleYaml)[vs[1].(string)]
	}).(TmpTkeRecordRuleYamlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TmpTkeRecordRuleYamlInput)(nil)).Elem(), &TmpTkeRecordRuleYaml{})
	pulumi.RegisterInputType(reflect.TypeOf((*TmpTkeRecordRuleYamlArrayInput)(nil)).Elem(), TmpTkeRecordRuleYamlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TmpTkeRecordRuleYamlMapInput)(nil)).Elem(), TmpTkeRecordRuleYamlMap{})
	pulumi.RegisterOutputType(TmpTkeRecordRuleYamlOutput{})
	pulumi.RegisterOutputType(TmpTkeRecordRuleYamlArrayOutput{})
	pulumi.RegisterOutputType(TmpTkeRecordRuleYamlMapOutput{})
}
