// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kubernetes

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AddonAttachment struct {
	pulumi.CustomResourceState

	// ID of cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Name of addon.
	Name pulumi.StringOutput `pulumi:"name"`
	// Serialized json string as request body of addon spec. If set, will ignore `version` and `values`.
	RequestBody pulumi.StringPtrOutput `pulumi:"requestBody"`
	// Addon response body.
	ResponseBody pulumi.StringOutput `pulumi:"responseBody"`
	// Addon current status.
	Status pulumi.MapOutput `pulumi:"status"`
	// Values the addon passthroughs. Conflict with `request_body`.
	Values pulumi.StringArrayOutput `pulumi:"values"`
	// Addon version, default latest version. Conflict with `request_body`.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewAddonAttachment registers a new resource with the given unique name, arguments, and options.
func NewAddonAttachment(ctx *pulumi.Context,
	name string, args *AddonAttachmentArgs, opts ...pulumi.ResourceOption) (*AddonAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AddonAttachment
	err := ctx.RegisterResource("tencentcloud:Kubernetes/addonAttachment:AddonAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAddonAttachment gets an existing AddonAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAddonAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AddonAttachmentState, opts ...pulumi.ResourceOption) (*AddonAttachment, error) {
	var resource AddonAttachment
	err := ctx.ReadResource("tencentcloud:Kubernetes/addonAttachment:AddonAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AddonAttachment resources.
type addonAttachmentState struct {
	// ID of cluster.
	ClusterId *string `pulumi:"clusterId"`
	// Name of addon.
	Name *string `pulumi:"name"`
	// Serialized json string as request body of addon spec. If set, will ignore `version` and `values`.
	RequestBody *string `pulumi:"requestBody"`
	// Addon response body.
	ResponseBody *string `pulumi:"responseBody"`
	// Addon current status.
	Status map[string]interface{} `pulumi:"status"`
	// Values the addon passthroughs. Conflict with `request_body`.
	Values []string `pulumi:"values"`
	// Addon version, default latest version. Conflict with `request_body`.
	Version *string `pulumi:"version"`
}

type AddonAttachmentState struct {
	// ID of cluster.
	ClusterId pulumi.StringPtrInput
	// Name of addon.
	Name pulumi.StringPtrInput
	// Serialized json string as request body of addon spec. If set, will ignore `version` and `values`.
	RequestBody pulumi.StringPtrInput
	// Addon response body.
	ResponseBody pulumi.StringPtrInput
	// Addon current status.
	Status pulumi.MapInput
	// Values the addon passthroughs. Conflict with `request_body`.
	Values pulumi.StringArrayInput
	// Addon version, default latest version. Conflict with `request_body`.
	Version pulumi.StringPtrInput
}

func (AddonAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*addonAttachmentState)(nil)).Elem()
}

type addonAttachmentArgs struct {
	// ID of cluster.
	ClusterId string `pulumi:"clusterId"`
	// Name of addon.
	Name *string `pulumi:"name"`
	// Serialized json string as request body of addon spec. If set, will ignore `version` and `values`.
	RequestBody *string `pulumi:"requestBody"`
	// Values the addon passthroughs. Conflict with `request_body`.
	Values []string `pulumi:"values"`
	// Addon version, default latest version. Conflict with `request_body`.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a AddonAttachment resource.
type AddonAttachmentArgs struct {
	// ID of cluster.
	ClusterId pulumi.StringInput
	// Name of addon.
	Name pulumi.StringPtrInput
	// Serialized json string as request body of addon spec. If set, will ignore `version` and `values`.
	RequestBody pulumi.StringPtrInput
	// Values the addon passthroughs. Conflict with `request_body`.
	Values pulumi.StringArrayInput
	// Addon version, default latest version. Conflict with `request_body`.
	Version pulumi.StringPtrInput
}

func (AddonAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*addonAttachmentArgs)(nil)).Elem()
}

type AddonAttachmentInput interface {
	pulumi.Input

	ToAddonAttachmentOutput() AddonAttachmentOutput
	ToAddonAttachmentOutputWithContext(ctx context.Context) AddonAttachmentOutput
}

func (*AddonAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonAttachment)(nil)).Elem()
}

func (i *AddonAttachment) ToAddonAttachmentOutput() AddonAttachmentOutput {
	return i.ToAddonAttachmentOutputWithContext(context.Background())
}

func (i *AddonAttachment) ToAddonAttachmentOutputWithContext(ctx context.Context) AddonAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonAttachmentOutput)
}

// AddonAttachmentArrayInput is an input type that accepts AddonAttachmentArray and AddonAttachmentArrayOutput values.
// You can construct a concrete instance of `AddonAttachmentArrayInput` via:
//
//	AddonAttachmentArray{ AddonAttachmentArgs{...} }
type AddonAttachmentArrayInput interface {
	pulumi.Input

	ToAddonAttachmentArrayOutput() AddonAttachmentArrayOutput
	ToAddonAttachmentArrayOutputWithContext(context.Context) AddonAttachmentArrayOutput
}

type AddonAttachmentArray []AddonAttachmentInput

func (AddonAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AddonAttachment)(nil)).Elem()
}

func (i AddonAttachmentArray) ToAddonAttachmentArrayOutput() AddonAttachmentArrayOutput {
	return i.ToAddonAttachmentArrayOutputWithContext(context.Background())
}

func (i AddonAttachmentArray) ToAddonAttachmentArrayOutputWithContext(ctx context.Context) AddonAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonAttachmentArrayOutput)
}

// AddonAttachmentMapInput is an input type that accepts AddonAttachmentMap and AddonAttachmentMapOutput values.
// You can construct a concrete instance of `AddonAttachmentMapInput` via:
//
//	AddonAttachmentMap{ "key": AddonAttachmentArgs{...} }
type AddonAttachmentMapInput interface {
	pulumi.Input

	ToAddonAttachmentMapOutput() AddonAttachmentMapOutput
	ToAddonAttachmentMapOutputWithContext(context.Context) AddonAttachmentMapOutput
}

type AddonAttachmentMap map[string]AddonAttachmentInput

func (AddonAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AddonAttachment)(nil)).Elem()
}

func (i AddonAttachmentMap) ToAddonAttachmentMapOutput() AddonAttachmentMapOutput {
	return i.ToAddonAttachmentMapOutputWithContext(context.Background())
}

func (i AddonAttachmentMap) ToAddonAttachmentMapOutputWithContext(ctx context.Context) AddonAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonAttachmentMapOutput)
}

type AddonAttachmentOutput struct{ *pulumi.OutputState }

func (AddonAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonAttachment)(nil)).Elem()
}

func (o AddonAttachmentOutput) ToAddonAttachmentOutput() AddonAttachmentOutput {
	return o
}

func (o AddonAttachmentOutput) ToAddonAttachmentOutputWithContext(ctx context.Context) AddonAttachmentOutput {
	return o
}

// ID of cluster.
func (o AddonAttachmentOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *AddonAttachment) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Name of addon.
func (o AddonAttachmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AddonAttachment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Serialized json string as request body of addon spec. If set, will ignore `version` and `values`.
func (o AddonAttachmentOutput) RequestBody() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddonAttachment) pulumi.StringPtrOutput { return v.RequestBody }).(pulumi.StringPtrOutput)
}

// Addon response body.
func (o AddonAttachmentOutput) ResponseBody() pulumi.StringOutput {
	return o.ApplyT(func(v *AddonAttachment) pulumi.StringOutput { return v.ResponseBody }).(pulumi.StringOutput)
}

// Addon current status.
func (o AddonAttachmentOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *AddonAttachment) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

// Values the addon passthroughs. Conflict with `request_body`.
func (o AddonAttachmentOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AddonAttachment) pulumi.StringArrayOutput { return v.Values }).(pulumi.StringArrayOutput)
}

// Addon version, default latest version. Conflict with `request_body`.
func (o AddonAttachmentOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *AddonAttachment) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type AddonAttachmentArrayOutput struct{ *pulumi.OutputState }

func (AddonAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AddonAttachment)(nil)).Elem()
}

func (o AddonAttachmentArrayOutput) ToAddonAttachmentArrayOutput() AddonAttachmentArrayOutput {
	return o
}

func (o AddonAttachmentArrayOutput) ToAddonAttachmentArrayOutputWithContext(ctx context.Context) AddonAttachmentArrayOutput {
	return o
}

func (o AddonAttachmentArrayOutput) Index(i pulumi.IntInput) AddonAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AddonAttachment {
		return vs[0].([]*AddonAttachment)[vs[1].(int)]
	}).(AddonAttachmentOutput)
}

type AddonAttachmentMapOutput struct{ *pulumi.OutputState }

func (AddonAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AddonAttachment)(nil)).Elem()
}

func (o AddonAttachmentMapOutput) ToAddonAttachmentMapOutput() AddonAttachmentMapOutput {
	return o
}

func (o AddonAttachmentMapOutput) ToAddonAttachmentMapOutputWithContext(ctx context.Context) AddonAttachmentMapOutput {
	return o
}

func (o AddonAttachmentMapOutput) MapIndex(k pulumi.StringInput) AddonAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AddonAttachment {
		return vs[0].(map[string]*AddonAttachment)[vs[1].(string)]
	}).(AddonAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AddonAttachmentInput)(nil)).Elem(), &AddonAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddonAttachmentArrayInput)(nil)).Elem(), AddonAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddonAttachmentMapInput)(nil)).Elem(), AddonAttachmentMap{})
	pulumi.RegisterOutputType(AddonAttachmentOutput{})
	pulumi.RegisterOutputType(AddonAttachmentArrayOutput{})
	pulumi.RegisterOutputType(AddonAttachmentMapOutput{})
}
