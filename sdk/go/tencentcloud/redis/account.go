// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Account struct {
	pulumi.CustomResourceState

	// The account name.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// 1: Length 8-30 digits, it is recommended to use a password of more than 12 digits; 2: Cannot start with `/`; 3: Include
	// at least two items: a.Lowercase letters `a-z`; b.Uppercase letters `A-Z` c.Numbers `0-9`;
	// d.`()`~!@#$%^&*-+=_|{}[]:;<>,.?/`.
	AccountPassword pulumi.StringOutput `pulumi:"accountPassword"`
	// The ID of instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Read and write policy: Enter R and RW to indicate read-only, read-write, cannot be empty when modifying operations.
	Privilege pulumi.StringOutput `pulumi:"privilege"`
	// Routing policy: Enter master or replication, which indicates the master node or slave node, cannot be empty when
	// modifying operations.
	ReadonlyPolicies pulumi.StringArrayOutput `pulumi:"readonlyPolicies"`
	// Remark.
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
}

// NewAccount registers a new resource with the given unique name, arguments, and options.
func NewAccount(ctx *pulumi.Context,
	name string, args *AccountArgs, opts ...pulumi.ResourceOption) (*Account, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.AccountPassword == nil {
		return nil, errors.New("invalid value for required argument 'AccountPassword'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Privilege == nil {
		return nil, errors.New("invalid value for required argument 'Privilege'")
	}
	if args.ReadonlyPolicies == nil {
		return nil, errors.New("invalid value for required argument 'ReadonlyPolicies'")
	}
	if args.AccountPassword != nil {
		args.AccountPassword = pulumi.ToSecret(args.AccountPassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accountPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Account
	err := ctx.RegisterResource("tencentcloud:Redis/account:Account", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccount gets an existing Account resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountState, opts ...pulumi.ResourceOption) (*Account, error) {
	var resource Account
	err := ctx.ReadResource("tencentcloud:Redis/account:Account", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Account resources.
type accountState struct {
	// The account name.
	AccountName *string `pulumi:"accountName"`
	// 1: Length 8-30 digits, it is recommended to use a password of more than 12 digits; 2: Cannot start with `/`; 3: Include
	// at least two items: a.Lowercase letters `a-z`; b.Uppercase letters `A-Z` c.Numbers `0-9`;
	// d.`()`~!@#$%^&*-+=_|{}[]:;<>,.?/`.
	AccountPassword *string `pulumi:"accountPassword"`
	// The ID of instance.
	InstanceId *string `pulumi:"instanceId"`
	// Read and write policy: Enter R and RW to indicate read-only, read-write, cannot be empty when modifying operations.
	Privilege *string `pulumi:"privilege"`
	// Routing policy: Enter master or replication, which indicates the master node or slave node, cannot be empty when
	// modifying operations.
	ReadonlyPolicies []string `pulumi:"readonlyPolicies"`
	// Remark.
	Remark *string `pulumi:"remark"`
}

type AccountState struct {
	// The account name.
	AccountName pulumi.StringPtrInput
	// 1: Length 8-30 digits, it is recommended to use a password of more than 12 digits; 2: Cannot start with `/`; 3: Include
	// at least two items: a.Lowercase letters `a-z`; b.Uppercase letters `A-Z` c.Numbers `0-9`;
	// d.`()`~!@#$%^&*-+=_|{}[]:;<>,.?/`.
	AccountPassword pulumi.StringPtrInput
	// The ID of instance.
	InstanceId pulumi.StringPtrInput
	// Read and write policy: Enter R and RW to indicate read-only, read-write, cannot be empty when modifying operations.
	Privilege pulumi.StringPtrInput
	// Routing policy: Enter master or replication, which indicates the master node or slave node, cannot be empty when
	// modifying operations.
	ReadonlyPolicies pulumi.StringArrayInput
	// Remark.
	Remark pulumi.StringPtrInput
}

func (AccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountState)(nil)).Elem()
}

type accountArgs struct {
	// The account name.
	AccountName string `pulumi:"accountName"`
	// 1: Length 8-30 digits, it is recommended to use a password of more than 12 digits; 2: Cannot start with `/`; 3: Include
	// at least two items: a.Lowercase letters `a-z`; b.Uppercase letters `A-Z` c.Numbers `0-9`;
	// d.`()`~!@#$%^&*-+=_|{}[]:;<>,.?/`.
	AccountPassword string `pulumi:"accountPassword"`
	// The ID of instance.
	InstanceId string `pulumi:"instanceId"`
	// Read and write policy: Enter R and RW to indicate read-only, read-write, cannot be empty when modifying operations.
	Privilege string `pulumi:"privilege"`
	// Routing policy: Enter master or replication, which indicates the master node or slave node, cannot be empty when
	// modifying operations.
	ReadonlyPolicies []string `pulumi:"readonlyPolicies"`
	// Remark.
	Remark *string `pulumi:"remark"`
}

// The set of arguments for constructing a Account resource.
type AccountArgs struct {
	// The account name.
	AccountName pulumi.StringInput
	// 1: Length 8-30 digits, it is recommended to use a password of more than 12 digits; 2: Cannot start with `/`; 3: Include
	// at least two items: a.Lowercase letters `a-z`; b.Uppercase letters `A-Z` c.Numbers `0-9`;
	// d.`()`~!@#$%^&*-+=_|{}[]:;<>,.?/`.
	AccountPassword pulumi.StringInput
	// The ID of instance.
	InstanceId pulumi.StringInput
	// Read and write policy: Enter R and RW to indicate read-only, read-write, cannot be empty when modifying operations.
	Privilege pulumi.StringInput
	// Routing policy: Enter master or replication, which indicates the master node or slave node, cannot be empty when
	// modifying operations.
	ReadonlyPolicies pulumi.StringArrayInput
	// Remark.
	Remark pulumi.StringPtrInput
}

func (AccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountArgs)(nil)).Elem()
}

type AccountInput interface {
	pulumi.Input

	ToAccountOutput() AccountOutput
	ToAccountOutputWithContext(ctx context.Context) AccountOutput
}

func (*Account) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil)).Elem()
}

func (i *Account) ToAccountOutput() AccountOutput {
	return i.ToAccountOutputWithContext(context.Background())
}

func (i *Account) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountOutput)
}

// AccountArrayInput is an input type that accepts AccountArray and AccountArrayOutput values.
// You can construct a concrete instance of `AccountArrayInput` via:
//
//	AccountArray{ AccountArgs{...} }
type AccountArrayInput interface {
	pulumi.Input

	ToAccountArrayOutput() AccountArrayOutput
	ToAccountArrayOutputWithContext(context.Context) AccountArrayOutput
}

type AccountArray []AccountInput

func (AccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Account)(nil)).Elem()
}

func (i AccountArray) ToAccountArrayOutput() AccountArrayOutput {
	return i.ToAccountArrayOutputWithContext(context.Background())
}

func (i AccountArray) ToAccountArrayOutputWithContext(ctx context.Context) AccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountArrayOutput)
}

// AccountMapInput is an input type that accepts AccountMap and AccountMapOutput values.
// You can construct a concrete instance of `AccountMapInput` via:
//
//	AccountMap{ "key": AccountArgs{...} }
type AccountMapInput interface {
	pulumi.Input

	ToAccountMapOutput() AccountMapOutput
	ToAccountMapOutputWithContext(context.Context) AccountMapOutput
}

type AccountMap map[string]AccountInput

func (AccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Account)(nil)).Elem()
}

func (i AccountMap) ToAccountMapOutput() AccountMapOutput {
	return i.ToAccountMapOutputWithContext(context.Background())
}

func (i AccountMap) ToAccountMapOutputWithContext(ctx context.Context) AccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountMapOutput)
}

type AccountOutput struct{ *pulumi.OutputState }

func (AccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil)).Elem()
}

func (o AccountOutput) ToAccountOutput() AccountOutput {
	return o
}

func (o AccountOutput) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return o
}

// The account name.
func (o AccountOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.AccountName }).(pulumi.StringOutput)
}

// 1: Length 8-30 digits, it is recommended to use a password of more than 12 digits; 2: Cannot start with `/`; 3: Include
// at least two items: a.Lowercase letters `a-z`; b.Uppercase letters `A-Z` c.Numbers `0-9`;
// d.`()`~!@#$%^&*-+=_|{}[]:;<>,.?/`.
func (o AccountOutput) AccountPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.AccountPassword }).(pulumi.StringOutput)
}

// The ID of instance.
func (o AccountOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Read and write policy: Enter R and RW to indicate read-only, read-write, cannot be empty when modifying operations.
func (o AccountOutput) Privilege() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.Privilege }).(pulumi.StringOutput)
}

// Routing policy: Enter master or replication, which indicates the master node or slave node, cannot be empty when
// modifying operations.
func (o AccountOutput) ReadonlyPolicies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Account) pulumi.StringArrayOutput { return v.ReadonlyPolicies }).(pulumi.StringArrayOutput)
}

// Remark.
func (o AccountOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Account) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

type AccountArrayOutput struct{ *pulumi.OutputState }

func (AccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Account)(nil)).Elem()
}

func (o AccountArrayOutput) ToAccountArrayOutput() AccountArrayOutput {
	return o
}

func (o AccountArrayOutput) ToAccountArrayOutputWithContext(ctx context.Context) AccountArrayOutput {
	return o
}

func (o AccountArrayOutput) Index(i pulumi.IntInput) AccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Account {
		return vs[0].([]*Account)[vs[1].(int)]
	}).(AccountOutput)
}

type AccountMapOutput struct{ *pulumi.OutputState }

func (AccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Account)(nil)).Elem()
}

func (o AccountMapOutput) ToAccountMapOutput() AccountMapOutput {
	return o
}

func (o AccountMapOutput) ToAccountMapOutputWithContext(ctx context.Context) AccountMapOutput {
	return o
}

func (o AccountMapOutput) MapIndex(k pulumi.StringInput) AccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Account {
		return vs[0].(map[string]*Account)[vs[1].(string)]
	}).(AccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountInput)(nil)).Elem(), &Account{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountArrayInput)(nil)).Elem(), AccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountMapInput)(nil)).Elem(), AccountMap{})
	pulumi.RegisterOutputType(AccountOutput{})
	pulumi.RegisterOutputType(AccountArrayOutput{})
	pulumi.RegisterOutputType(AccountMapOutput{})
}
