// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"errors"
	"github.com/mergtil/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PluginAttachment struct {
	pulumi.CustomResourceState

	// Id of API.
	ApiId pulumi.StringOutput `pulumi:"apiId"`
	// Name of Environment.
	EnvironmentName pulumi.StringOutput `pulumi:"environmentName"`
	// Id of Plugin.
	PluginId pulumi.StringOutput `pulumi:"pluginId"`
	// Id of Service.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
}

// NewPluginAttachment registers a new resource with the given unique name, arguments, and options.
func NewPluginAttachment(ctx *pulumi.Context,
	name string, args *PluginAttachmentArgs, opts ...pulumi.ResourceOption) (*PluginAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.EnvironmentName == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentName'")
	}
	if args.PluginId == nil {
		return nil, errors.New("invalid value for required argument 'PluginId'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PluginAttachment
	err := ctx.RegisterResource("tencentcloud:ApiGateway/pluginAttachment:PluginAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPluginAttachment gets an existing PluginAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPluginAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PluginAttachmentState, opts ...pulumi.ResourceOption) (*PluginAttachment, error) {
	var resource PluginAttachment
	err := ctx.ReadResource("tencentcloud:ApiGateway/pluginAttachment:PluginAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PluginAttachment resources.
type pluginAttachmentState struct {
	// Id of API.
	ApiId *string `pulumi:"apiId"`
	// Name of Environment.
	EnvironmentName *string `pulumi:"environmentName"`
	// Id of Plugin.
	PluginId *string `pulumi:"pluginId"`
	// Id of Service.
	ServiceId *string `pulumi:"serviceId"`
}

type PluginAttachmentState struct {
	// Id of API.
	ApiId pulumi.StringPtrInput
	// Name of Environment.
	EnvironmentName pulumi.StringPtrInput
	// Id of Plugin.
	PluginId pulumi.StringPtrInput
	// Id of Service.
	ServiceId pulumi.StringPtrInput
}

func (PluginAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginAttachmentState)(nil)).Elem()
}

type pluginAttachmentArgs struct {
	// Id of API.
	ApiId string `pulumi:"apiId"`
	// Name of Environment.
	EnvironmentName string `pulumi:"environmentName"`
	// Id of Plugin.
	PluginId string `pulumi:"pluginId"`
	// Id of Service.
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a PluginAttachment resource.
type PluginAttachmentArgs struct {
	// Id of API.
	ApiId pulumi.StringInput
	// Name of Environment.
	EnvironmentName pulumi.StringInput
	// Id of Plugin.
	PluginId pulumi.StringInput
	// Id of Service.
	ServiceId pulumi.StringInput
}

func (PluginAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginAttachmentArgs)(nil)).Elem()
}

type PluginAttachmentInput interface {
	pulumi.Input

	ToPluginAttachmentOutput() PluginAttachmentOutput
	ToPluginAttachmentOutputWithContext(ctx context.Context) PluginAttachmentOutput
}

func (*PluginAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**PluginAttachment)(nil)).Elem()
}

func (i *PluginAttachment) ToPluginAttachmentOutput() PluginAttachmentOutput {
	return i.ToPluginAttachmentOutputWithContext(context.Background())
}

func (i *PluginAttachment) ToPluginAttachmentOutputWithContext(ctx context.Context) PluginAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginAttachmentOutput)
}

// PluginAttachmentArrayInput is an input type that accepts PluginAttachmentArray and PluginAttachmentArrayOutput values.
// You can construct a concrete instance of `PluginAttachmentArrayInput` via:
//
//	PluginAttachmentArray{ PluginAttachmentArgs{...} }
type PluginAttachmentArrayInput interface {
	pulumi.Input

	ToPluginAttachmentArrayOutput() PluginAttachmentArrayOutput
	ToPluginAttachmentArrayOutputWithContext(context.Context) PluginAttachmentArrayOutput
}

type PluginAttachmentArray []PluginAttachmentInput

func (PluginAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PluginAttachment)(nil)).Elem()
}

func (i PluginAttachmentArray) ToPluginAttachmentArrayOutput() PluginAttachmentArrayOutput {
	return i.ToPluginAttachmentArrayOutputWithContext(context.Background())
}

func (i PluginAttachmentArray) ToPluginAttachmentArrayOutputWithContext(ctx context.Context) PluginAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginAttachmentArrayOutput)
}

// PluginAttachmentMapInput is an input type that accepts PluginAttachmentMap and PluginAttachmentMapOutput values.
// You can construct a concrete instance of `PluginAttachmentMapInput` via:
//
//	PluginAttachmentMap{ "key": PluginAttachmentArgs{...} }
type PluginAttachmentMapInput interface {
	pulumi.Input

	ToPluginAttachmentMapOutput() PluginAttachmentMapOutput
	ToPluginAttachmentMapOutputWithContext(context.Context) PluginAttachmentMapOutput
}

type PluginAttachmentMap map[string]PluginAttachmentInput

func (PluginAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PluginAttachment)(nil)).Elem()
}

func (i PluginAttachmentMap) ToPluginAttachmentMapOutput() PluginAttachmentMapOutput {
	return i.ToPluginAttachmentMapOutputWithContext(context.Background())
}

func (i PluginAttachmentMap) ToPluginAttachmentMapOutputWithContext(ctx context.Context) PluginAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginAttachmentMapOutput)
}

type PluginAttachmentOutput struct{ *pulumi.OutputState }

func (PluginAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PluginAttachment)(nil)).Elem()
}

func (o PluginAttachmentOutput) ToPluginAttachmentOutput() PluginAttachmentOutput {
	return o
}

func (o PluginAttachmentOutput) ToPluginAttachmentOutputWithContext(ctx context.Context) PluginAttachmentOutput {
	return o
}

// Id of API.
func (o PluginAttachmentOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *PluginAttachment) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

// Name of Environment.
func (o PluginAttachmentOutput) EnvironmentName() pulumi.StringOutput {
	return o.ApplyT(func(v *PluginAttachment) pulumi.StringOutput { return v.EnvironmentName }).(pulumi.StringOutput)
}

// Id of Plugin.
func (o PluginAttachmentOutput) PluginId() pulumi.StringOutput {
	return o.ApplyT(func(v *PluginAttachment) pulumi.StringOutput { return v.PluginId }).(pulumi.StringOutput)
}

// Id of Service.
func (o PluginAttachmentOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PluginAttachment) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

type PluginAttachmentArrayOutput struct{ *pulumi.OutputState }

func (PluginAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PluginAttachment)(nil)).Elem()
}

func (o PluginAttachmentArrayOutput) ToPluginAttachmentArrayOutput() PluginAttachmentArrayOutput {
	return o
}

func (o PluginAttachmentArrayOutput) ToPluginAttachmentArrayOutputWithContext(ctx context.Context) PluginAttachmentArrayOutput {
	return o
}

func (o PluginAttachmentArrayOutput) Index(i pulumi.IntInput) PluginAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PluginAttachment {
		return vs[0].([]*PluginAttachment)[vs[1].(int)]
	}).(PluginAttachmentOutput)
}

type PluginAttachmentMapOutput struct{ *pulumi.OutputState }

func (PluginAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PluginAttachment)(nil)).Elem()
}

func (o PluginAttachmentMapOutput) ToPluginAttachmentMapOutput() PluginAttachmentMapOutput {
	return o
}

func (o PluginAttachmentMapOutput) ToPluginAttachmentMapOutputWithContext(ctx context.Context) PluginAttachmentMapOutput {
	return o
}

func (o PluginAttachmentMapOutput) MapIndex(k pulumi.StringInput) PluginAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PluginAttachment {
		return vs[0].(map[string]*PluginAttachment)[vs[1].(string)]
	}).(PluginAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PluginAttachmentInput)(nil)).Elem(), &PluginAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluginAttachmentArrayInput)(nil)).Elem(), PluginAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluginAttachmentMapInput)(nil)).Elem(), PluginAttachmentMap{})
	pulumi.RegisterOutputType(PluginAttachmentOutput{})
	pulumi.RegisterOutputType(PluginAttachmentArrayOutput{})
	pulumi.RegisterOutputType(PluginAttachmentMapOutput{})
}
